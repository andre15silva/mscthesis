{
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.125);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0531;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(parser[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.125);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.125);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.set(Position.PREFIX_TEMP + i, buf.parseShort(buf[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 60;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.125);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.set(Position.PREFIX_TEMP + i, buf.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(deviceCount[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0.0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(type[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 1000;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(parser[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(deviceCount++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(parser[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(type[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.5;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.set(Position.PREFIX_TEMP + i, buf.parseShort(buf[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.get(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.set(Position.KEY_TEMP + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseInt(data[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(imei++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set(Position.PREFIX_TEMP + i, short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set(Position.PREFIX_TEMP + i, buf.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.getPosition(deviceSession.getDeviceId() + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.0531;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[i++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.05399 5;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.053.0);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[i++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(buf[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[i++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount) * 0.01);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.053625);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(deviceCount[i++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(deviceCount++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.set(Position.KEY_TEMP + i, Short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(parser[index++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0225);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.01));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseLong(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount * 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.set(Position.PREFIX_TEMP + i, buf.parseShort(data[index++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.get(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.set(Position.PREFIX_TEMP + i, buf.parseShort(buf[index++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.053425);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.set(Position.PREFIX_TEMP + i, Integer.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.00) * 0.01);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(type[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.5);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0532;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.053LITES);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539925);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[i++], 16) * 0.125);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0; // device id",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(imei++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539952);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.getPosition(deviceSession.getDeviceId() + i, Short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0000;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseInt(data[i++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0f625);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.set(Position.PREFIX_TEMP + i, short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.0531;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 50;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.053;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(type[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(imei++), 16) * 0.0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set(Position.PREFIX_TEMP + i, Integer.parseInt(data[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseInteger(data[i++], 16) * 0.0);",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition()) : null;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "setPreferredSize(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCedalPosition()) : null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getAedalPosition()) : null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "setPreferredSize(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket, TimeUnit.NANOSECONDS)) : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "addItem(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition()) : inputPacket;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() == 0 ? null : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "setPreferredSize(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "addItem(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L, TimeUnit.NANOSECONDS);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCedalPosition()) : inputPacket;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? System.currentTimeMillis() : 0L;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() == 0 ? \"\" : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponent(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "setNetworkTimeout(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? \" \" + inputPacket.getCount() : 0 );",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getAedalPosition()) : inputPacket;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0 );",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getSize()) : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L, TimeUnit.NANOSECONDS);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : \"0.0\";",
                "identical": false
            },
            {
                "k": 33,
                "patch": "setTitle(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "addItem(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() == 0 ? DEFAULT : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponent.setValue(inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount()) : inputPacket;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "addItem(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : calculateTachometer()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponent(inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "setNetworkTimeout(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "setNetworkTimeout(inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "setPrefixed(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponent.add(inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "setPreferredSize(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? \" \" + inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponent.setValue(inputPacket.getTrackedalPosition());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponent(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L, TimeUnit.NANOSECONDS);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponent.setValue(inputPacket.getCedalPosition());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? DEFAULT : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude(), rpm) : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponent.add(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "addItem(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L, TimeUnit.MILLISECONDS);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "setPreferredSize(inputPacket.getGraphics() != null ? System.currentTimeMillis() : 0L;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponents.add(inputPacket.getHedalPosition());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "setTitle(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? System.currentTimeMillis() : 0L, TimeUnit.NANOSECONDS);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? \" \" + inputPacket.getCount() : 0));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition())) : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket) : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? DEFAULT_TIMEOUT : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTaintedalPosition(rpm) : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L, TimeUnit.MILLISECONDS);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "setNetworkTimeout(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1) : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "setPreferredSize(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount()) : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTaintedalPosition(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getSize()) : inputPacket;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "setPreferredSize(inputPacket.getGraphics() != null ? System.getMaster().getSize() : 0L;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude(), rpm) : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponent.setValue(inputPacket.getHedalPosition());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "setTitle(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude(), rpm)) : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "setSizeFull(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "setPreferredSize(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : calculateTachometer()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : calculateT');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket, TimeUnit.SECONDS)) : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponent.setValue(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponent.setValue(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0 );",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getBounds()) : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponent(inputPacket.getGraphics() == 0 ? DEFAULT : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponent.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : calculateTachometer());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "setSizeFull(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "setPrefixed(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponent.setValue(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCedalPosition())) : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "setPreferredSize(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0 );",
                "identical": false
            },
            {
                "k": 96,
                "patch": "setPreferredSize(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0 );",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponentPedalPosition(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : calculateTachometer()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponent(inputPacket.getPedalPosition());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponent(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition()) : \"0.0\";",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponent(inputPacket.getGraphics() != null ? inputPacket.getCount() : 0 );",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().length());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring()));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return BlobId.of(uri.getPath(), uri.getPort());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().length()));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return BlobId != null ? BlobId.of(uri.getHost(), uri.getPath()) : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath().length());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return BlobId.of(uri.getPath(), uri.getHost());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toString());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : uri.getPath());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath()));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath().length());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toUpperCase());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BlobId != null ? BlobId.of(uri.getPath()) : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toLowerCase());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toUpperCase()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \":\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return BlobId.of(uri.getPath());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) + \"/\" + uri.getPath().length() + \"/\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return BlobId.of(uri.getPath(), uri.getHost()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1, uri.getPath().length() - 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().length() + \"/\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(0, uri.getPath() + \"/\".length()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().endsWith(\"/\")) ? URL.getPath() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath().length()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return BlobId.of(uri.getPath()) + \"/\" + uri.getPath().length() + \"/\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(0, uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : uri.getPort());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toURL());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return BlobId != null ? BlobId.of(uri.getHost()) : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().startsWith(\"/\")) ? URL.getPath() : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath().length()));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort() + \"/\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath())));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \":\" + uri.getPath()));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() );",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1, uri.getPath()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().length() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return BlobId.of(uri.getPath().substring(1, uri.getPath().length() - 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().trim());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) + \"/\" + uri.getPath().length());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return BlobId.of(uri.getPath() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) == null ? null : BlobId.toURI().toString();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return BlobId.of(uri.getHost(), uri.getUri());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().startsWith(\"/\")) ? Blob.getPath() : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPort());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().startsWith(\"/\"));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort() + \":\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1, uri.getPath().length() - 1).toString();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()).length();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath())) + \"/\" + uri.getPath().length() + \"/\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath()).length();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/{\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return BlobId.of(uri.getPath() + \"/\" + uri.getPath().length());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toLowerCase()));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().endsWith(\"/\")) ? Blob.getPath() : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath().substring()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return BlobId.of(uri.getHost()) + \"/\" + uri.getPath().length() + \"/\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return BlobId.of(uri.getPath(), uri.getHost() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return BlobId != null ? BlobId.of(uri.getHost(), uri.getPort()) : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort()) != null ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \":\" + uri.getPath().length()));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().endsWith(\"/\")) ? null : BlobId;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + 1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) + \"/\" + uri.getPath().length() + \"/\";",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \".\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().startsWith(\"/\")) ? user.getPath() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? URL.getPath() : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(0, uri.getPath()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath().substring()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \":\" + uri.getPath().length());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return BlobId.of(uri.getPath(), uri.getHost()) != null ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return BlobId.of(uri.getPath().substring(1, uri.getPath().length() - 1).toString();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().name());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(0, uri.getPath() + \"/\".length());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1, uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath() + \"/\" + uri.getPath().length());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort() + \"/\" + uri.getPath().length());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().startsWith(\"/\")) ? null : BlobId;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return BlobId.of(uri.getPath().substring(0, uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().endsWith(\"/\"));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().replace(\"/\"));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1, uri.getPath().length() - 1).toUpperCase();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().length() - 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() != null ? URL.getPath().length() : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) == null ? null : BlobId.toURI().toString());",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignoreAny.getIgnored();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = e.getIgnored();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getSource(propName);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignoreAny ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignoreAny ? beanorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = ignorals.get(propName);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignoreAny ? 0 : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignorals.getAny();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorals.getAscent() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnoredProperty(propName);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignoreAny ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getSource(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.values() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.values() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignoreAny.get(ignorals);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getAscent() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getAscent() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getSource(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getSource(propName) != null ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignoreAny.equals(propName) ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignoreAny.getSimpleName();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getSource(propName) != null ? e.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignoreAny.getFromId(propName) ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnorableType(propName);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.get(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignoreAny.isEmpty() ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = ignorals.getFromId(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = beanorals.getIgnored();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = ignorals.getIgnoredProperty(propName, ignoreAny);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getProcess() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.values() != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.get(propName) != null ? e.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.get(propName) != null ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.getSource(propName) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignorals.getIgnored(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = ignoreAny.getFromId(propName) ? null : ignorals.getSimpleName();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignorals.getIgnored() != null ? ignorals.get(propName) : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignoreAny.getFromId(propName) ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getTargetNamespace(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignoreAny.getFromType(propName) ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getMetrics(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignoreAny.get(propName) ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignorals.getSource(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignorals.getProperties();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = ignorals.get(propName) ? ignoreAny : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignorals.values() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignoreAny.getFromId(propName) ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getTypeId() : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getExceptionSet() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getAscent() != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignorals.getFromType(propName);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignoreAny.get(propName) ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getTargetNamespace() : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getProcess() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignorals.getIgnored() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignoreAny.getFromGetter(propName) ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getTargetNamespace(propName) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignorals.values() != null ? ignorals.getIgnored() : 0) + 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getFromId() : null;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignoreAny.equals(propName) ? bean : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignorals.getIgnored() != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getAscent() != null ? ignorals.getIgnored() : 0) + 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getSource(propName) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignorals.getTargetNamespace(propName) != null ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getFrom() : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignorals.values() != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored() : 0) + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = ignorals.getSource(ignoreAny);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getExceptionSet() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getDescription() : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getSource(propName) ? ignoreAny : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 1 + 4);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes().length());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2); // at most 80%",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2); // at most 80%",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 8);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes().length()); // length",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes().length()); // length",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(2 + 2 + 8 + 1 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(2 + 2 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 1 + 2); // message length",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 1 + 4);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes().length());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() - 4;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2); // message index",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(2 + 8 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12); // message length",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(2 + 1 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 8;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(2 + 3 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 8);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(2 + 2 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(2 + 2 + 2 + 1 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2); // at most 80%",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // message length",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() >= length) ? buf.readableBytes() : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2); // message index",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 1 + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() - 8;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + 8);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // server flag (reserved)",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 * 2); // message length",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 1 + 8;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(2 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12; // server flag (reserved)",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2); // message index",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 * 8;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(2 + 2 + 4 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 2); // at most 80%",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + 2); // message length",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + 2);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 14);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 8;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12); // message index",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes()); // message length",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + 2); // message length",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + 8);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(2 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() - 8);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(2 + 1 + 2 + content.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2]; // length",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 1 + 2); // message length",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12; // message length",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // make sure length",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(2 + 1 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(2 + 2 + 8 + 1 + buf.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(2 + 1 + 2 + 4 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 * 12 + 1 + 4);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(2 + 2 + 2 + content.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 * 60;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 3; // length",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 12;",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (channel != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (!Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (Context.getConfig().hasKey(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (Context.getContext().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (Context.getDataManager() != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Context.getConfig() == null || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && channel != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Context.getContext().getMode() == Mode.ENTER || context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (channel == null || uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (channel.get(\"decoder\") != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Context.getDataManager().getDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (Context.getConfig().getDeviceById(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (Context.getConfig() != null || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (Context.getDataManager().equals(\"decoder\") || uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds) && context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (Context.getDataManager().isValidPosition(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Context.getDataManager().isBoolean() && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (Context.getConfig() == null || uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (Context.getDataManager().isValidDevice(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Context.getDataManager().equals(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Context.getDataManager().isDeviceEnabled(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (Context.getIdentityManager().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Context.getMessageSourceService().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (uniqueIds != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (Context.getMessageSourceService().isEnabled(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (Context.getConfig().getProtocol(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Context.getMessageManager().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (channel == null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds) && channel != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (channel == null || !Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Context.getConfig().getInteger(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds) && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (Context.getDataManager().getDeviceById(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (channel == null || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Context.getConfig().getDouble(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if(Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Context.getContext().getMode() == Mode.ENTER || context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && uniqueIds != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Context.getMessageSourceService().getDeviceById(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (Context.getDataManager().getDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Context.getConfig().getBoolean(\"database.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\"))) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Context.getDataManager().isDeviceEnabled(channel, remoteAddress, uniqueIds) || uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Context.getDataManager().getDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || uniqueIds != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (channel != null && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Context.getConfig().getProtocolKey(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds) && context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && channel != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Context.getConfig().hasDeviceById(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Context.getDataManager().isDeviceEnabled(channel, remoteAddress, uniqueIds) && channel != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Context.getDataManager().equals(\"decoder\") || uniqueIds.length == 0 && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (channel == null || uniqueIds.length == 0 && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (Context.getConfig().getProtocolName(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Context.getConfig().getType().equals(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Context.getConfig().isBoolean() || uniqueIds.contains(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (Context.getConfig().getDataManager().equals(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getDeviceManager().equals(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Context.getDataManager().isBoolean() && uniqueIds.contains(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getDeviceManager().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().get(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Context.getDataManager().isValidPosition(channel, remoteAddress, uniqueIds) && channel != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Context.getDataManager().isValidPosition(channel, remoteAddress, uniqueIds) && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (Context.getDataManager().equals(\"decoder\") || uniqueIds.length == 0 && channel != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (Context.getDataManager().isBoolean() || uniqueIds.isEmpty()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && protocolList(channel, remoteAddress, uniqueIds) == null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (Context.getConfig() == null || uniqueIds.length == 0 && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (decoder.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().getInteger(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && Context.getConfig().hasKey(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (Context.getConfig() != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Context.getMessageSourceService().isEnabled(channel, remoteAddress, uniqueIds) && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getBoolean(\"database.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (Context.getDataManager().isValidDevice(channel, remoteAddress, uniqueIds) && channel != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (Context.getConfig().hasProtocol(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Context.getConfig().isBoolean() && channel != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Context.getConfig().get(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Context.getDataManager().isBoolean() && channel != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if(!Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, position_ms);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return setBodyParameter(\"position_ms\", position_ms);",
                "identical": true
            },
            {
                "k": 6,
                "patch": "return setQueryParameter(\"position_ms != null ? position_ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return setQueryParameter(\"position_ms, position_ms);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, buf_ms);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms(position_ms) : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms.equals(position_ms) : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"type\", position_ms);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().equals(position_ms) : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms.equals(position_ms) : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms - position_ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, DEFAULT_ms);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"type\", position_ms);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setBodyParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"null\", position_ms);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms - position_ms : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms(position_ms) : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms : position_ms);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return setQueryParameter(\"position_ms, position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms.equals(position_ms) : setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return setQueryParameter(\"position_ms\", position_ms.length());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : \"\") + setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return setQueryParameter(\"position_ms\", position_.ms);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return setQueryParameter(\"position_ms != null ? position_ms : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\", trace_ms);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms.equals(position_ms) : setQueryParameter(\"position_ms\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms(position_ms) : setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return setQueryParameter(\"position_ms != null ? position_ms : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms.getFixTime().getTime() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, parser_ms);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, setBodyParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : \"\") + setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"query\", position_ms);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"FixTime\", position_ms);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms+\", trace_ms);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\", StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"in_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return setQueryParameter(\"position_ms\", position_ms - 1) + setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"Position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : new setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\", position_ms, StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"Position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, \"position_ms\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms.equals(position_ms) : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms \", position_ms);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms(position_ms) : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : 0L;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, TOLERANCE_DEFAULT);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"null\", position_ms);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().equals(position_ms) : setQueryParameter(\"position_ms\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"serviceName\", position_ms);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"index\", position_ms);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms(position_ms) : setQueryParameter(\"position_ms, position_ms);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().equals(position_ms) : setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, _ms);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().length() : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"end\", position_ms);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \"=\" + position_ms);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms, position_ms);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"FixTime\", position_ms);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, flags);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"serviceName\", position_ms);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : \"\") + setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms - position_ms : setQueryParameter(\"type\", position_ms);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms - position_ms : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"param_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"?\", position_ms);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\", position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : null);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"?\", position_ms);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms.equals(position_ms) : setQueryParameter(\"false\", position_ms);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms(position_ms) : setQueryParameter(\"position_ms\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms.getFixTime().getTime() : null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, trace_ms);",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final long serialVersionUID = 1L;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final long addArrivedRecordsInput(ACCESS_OBJECT, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final long addArrivedRecordsInput(this, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final long addArrivedRecordsInput( requestedResponses, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private synchronized void addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private final synchronized void addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private final synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static synchronized void addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private final synchronized void addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private final synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final int addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final long addArrivedRecordsInput(projectId, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final int addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final long addArrivedRecordsInput(baseResponses, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final long addArrivedRecordsInput(RELATED_CONTENT_SIZE, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private final synchronized void addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private final synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private final synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private synchronized void addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private final synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final long addArrivedRecordsInput(ACCESS_OBJECT, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final long addArrivedRecordsInput( requestedResponses, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throwsShardRecordsInput;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final long addArrivedRecordsInput( processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final int addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final int addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final long addArrivedRecordsInput(this, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final long addArrivedRecordsInput(lbContext, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final long addArrivedRecordsInput(RELATED_CONTENT_SIZE, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final long addArrivedRecordsInput(lease, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final long addArrivedRecordsInput(session, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final long addArrivedRecordsInput(ACCESS_OBJECT, processRecordsInput);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private final synchronized void addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) processRecordsInput;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final long addArrivedRecordsInput(lastRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final int addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throwsEntryUtil.processRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private final synchronized void addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final int addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private synchronized void addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final long addArrivedRecordsInput(descriptor, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final void addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static synchronized void addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final int addArrivedRecordsInput(this, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final long addArrivedRecordsInput(lease, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final long addArrivedRecordsInput(lastRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static Logger addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final long addArrivedRecordsInput(ACCESS_OBJECT, processRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private synchronized void addArrivedRecordsInput( requestedResponses, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final long addArrivedRecordsInput(conf, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final long addArrivedRecordsInput(try, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final long addArrivedRecordsInput( processRecordsInput);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final long addArrivedRecordsInput( processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final long addArrivedRecordsInput( requestedResponses, processRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final long addArrivedRecordsInput(projectId, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) throws InterruptedException() {",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' respectively",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' or 'number'",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"(x+),\").build();",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the both be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' characters",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!', 'final'.",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' by 'number'",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the end-of-input",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the event specific",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the function as 'final'.",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final';",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'')",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!'.",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'..' respectively",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"(x+),FORE|\") // adc2.number(\"(x+)?|\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"(x+),\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the end",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' string'",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the required",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the function as 'final'.",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' string",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\"));",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number';",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' }",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"(x+), \"SansSerif\") // adc2.number(\"(x+)?|\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc1.number",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc1.number\"",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number')));",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' respectively",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' for end-of-input",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' headers",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the end-of-c3",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' html' or 'number'",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' space",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"(x+), void.valueOf(y+)?|\"));",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc2.number",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'error', 'number' respectively",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' changes detected",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'error', 'number'",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'ES",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' d'",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' listener",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final',",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'EVENT",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the event specific",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // adc3",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'') for end-of-input",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"(x+),FORE|\") // adc2.number(\"(x+)?|\"));",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the end-of-c2.number",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc3",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the 'final'.",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' declaration",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' or 'z'",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the end-of-c3.number",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'b';",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number')));",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' character",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' and 'number'",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' by 'number' respectively",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the given parameters as 'final'.",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the non-c2.number(\"(x+)?|\"));",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' marshaller",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' detected",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final', 'number' respectively",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'first'",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'..' listener",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' nulls but')",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'..' or 'number'",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' sanitize",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'finalArrayList",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the both be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' AS'",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"(x+), \"SansSerif\") // adc2.number(\"(x+)?|\"));",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'..'EVENT",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' by 'number'",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' or 'number' respectively",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'file'",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'')",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the table entry",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the required",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' because 'number'",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the end",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' 2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc1.number\".length()",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'..' characters",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"(x+), String.valueOf(y+)?|\")); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' string",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\")                     // power",
        "fixed_line": ".number(\"(x+)?,\")                    // power"
    },
    "Bears-200": {
        "fixes": [
            {
                "k": 1,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return throwable.convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return convertValue(throwable, throwable);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new AxonException(throwable, throwable);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return convert(throwable, throwable) ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return throwable == null ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return throwable == null ? throwable.convert(throwable, throwable) : throwable;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return getField(throwable, throwable);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return convertValue(throwable, throwable) ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return convert(throwable, throwable) ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return convert(throwable, throwable != null ? throwable.getCause() : throwable);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return convertDelegate(throwable, throwable);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.parse(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return convert(throwable, throwable) ? throwable.parse(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return throwable == null ? throwable.convert(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.toMillis(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return convert(throwable, throwable) ? throwable.readLines(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return convert(throwable, throwable) ? throwable.getError() : throwable;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return throwableMessage(throwable, throwable);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return convert(throwable, throwable) ? throwable.toException(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return convert(throwable, throwable) ? throwable.getValue() : throwable;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return convert(throwable, throwable instanceof AxonException ? throwable.toMillis(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new AxonException(throwable);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return convert(throwable, throwable != null ? throwable.getDataonException(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return convert(throwable, throwable != null ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return throwableJustonException(throwable, throwable);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return convertDelegateTo(throwable, throwable);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return throwable.parse(throwable);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return throwable.convert(throwable, throwable) != null ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return convert(throwable, throwable instanceof AxonException ? throwable.parse(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return convert(throwable, throwable) ? throwable.getContent() : throwable;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.convert(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return throwable.convert(throwable, throwable) ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.toClient() : throwable;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return throwableForError(throwable, throwable);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return convert(throwable, throwable != null ? throwable.toNanos(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return throwable.convert(throwable, throwable) == null ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return convert(throwable, throwable) ? throwable.getData(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new AxonError(throwable, throwable);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return convert(throwable, throwable instanceof AxonException ? throwable.toNanos(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return throwable.parse(throwable, throwable);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return convert(throwable, throwable) ? throwable.execute() : throwable;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.toNanos(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return throwable.convert(throwable, throwable) ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return convertError(throwable, throwable);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return convertDelegate(throwable, throwable) ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return convertException(throwable, throwable);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return convert(throwable, throwable instanceof AxonException ? throwable.toClient(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return getMonException(throwable, throwable);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return convertValue(throwable, throwable) ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return createJonException(throwable, throwable);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return convert(throwable, throwable) ? throwable.toClient() : throwable;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return createConsumerException(throwable, throwable);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return convertDelegateToRepresentation(throwable, throwable);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return convert(throwable, throwable != null ? throwable.getContent() : throwable);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new AxonException(throwable, throwable) ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return convert(throwable, throwable) ? throwable.read() : throwable;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return convert(throwable, throwable) ? throwable.convert(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return convert(throwable, throwable) ? throwable.toByteArray() : throwable;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return convert(throwable, throwable != null ? throwable.toByteArray() : throwable);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return convertDelegateToMessage(throwable, throwable);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return convert(throwable, throwable != null ? throwable.toString() : throwable);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return convert(throwable, throwable) ? throwable.name() : throwable;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return convert(throwable, throwable != null ? throwable.getContent() : throwable;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return convert(throwable, throwable instanceof RuntimeException ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new AxonException(throwable, throwable) ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return convert(throwable, throwable instanceof AxonException ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return throwableForException(throwable, throwable);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return convert(throwable, throwable) ? throwable.toString() : throwable;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.toByteArray() : throwable;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return convertResponse(throwable, throwable);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return throwableMessageFormat(throwable, throwable);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return convertValue(throwable, throwable) ? throwable.getError() : throwable;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return throwableValue().convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return convertValue(throwable, throwable) ? throwable.getValue() : throwable;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.toMillis() : throwable;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return throwable == null ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.toClient(throwable) : throwable;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.getValue() : throwable;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return convert(throwable, throwable instanceof AxonException ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return convertThrowable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return throwable().convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.execute() : throwable;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return convert(throwable, throwable instanceof RuntimeException) ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return convert(throwable, throwable) ? throwable.getX() : throwable;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return convert(throwable, throwable != null ? throwable : throwable);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return convert(throwable, throwable != null ? throwable.getError() : throwable);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return convertValue(throwable, throwable) ? throwable.getContent() : throwable;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return throwable.convert(throwable, throwable) != null ? throwable : throwable;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return convertValue(throwable, throwable) ? throwable.getCause() : throwable);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return throwable.convert(throwable);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return convertDelegateTo(throwable, throwable) ? throwable.getCause() : throwable;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return convert(throwable, throwable) ? throwable.getCause() : throwable);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return throwable.convert(throwable, throwable != null ? throwable.getCause() : throwable);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return convert(throwable, throwable) ? throwable.toEndpoint() : throwable;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.getContent() : throwable;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return convert(throwable, throwable instanceof AxonException) ? throwable.getError() : throwable;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return an AxonException(throwable, throwable) ? throwable.getCause() : throwable;",
                "identical": false
            }
        ],
        "buggy_line": "return convert(null, throwable);",
        "fixed_line": "return convert(\"\", throwable);"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.hasNext(3)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.hasNext(5)) {",
                "identical": true
            },
            {
                "k": 3,
                "patch": "if (parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.hasNext()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.hasNext(6)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.hasNext(!CellTower.from(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.hasNext(2)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.hasNext(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.hasNext(!CellTower.from(mcc, parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.hasNext(2) && parser.next() != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parser.hasNext box(CellTower.from(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.hasNext(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.hasNext(1) && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.hasNext(1) && parser.next() != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.hasNext() && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextDouble()) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.next() != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.hasNext(1) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.hasNext(!CellTower.from(parser.nextDouble()) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextDouble()) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.nextDouble() != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.hasNext(!CellTower.from(mcc, mnc, parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parser.hasNext(!CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.hasNext(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.hasNext box(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext(2) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.hasNext(!CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.hasNext(1) && parser.next() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.hasNext box(CellTower.from(parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextInt(16), parser.nextInt(16)) > 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.hasNext box(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextDouble()) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.hasNext(8)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.hasNext(7)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextDouble()) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parser.hasNext(!CellTower.from(parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextDouble()) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextDouble()) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.hasNext(!CellTower.from(mcc, parser.next(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.next().equals(\"A\") && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.hasNext(2) && parser.next() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextInt(16), parser.nextInt(16)) > 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.hasNext(!CellTower.from(mcc, parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parser.nextDouble() == 5 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextInt(16), parser.nextInt(16)) > 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextInt(16), parser.nextInt(16)) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextDouble()) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.hasNext box(CellTower.from(parser.nextDouble()) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.hasNext box(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.hasNext(0) && parser.next() != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.hasNext box != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.hasNext(CellTower.from(parser.nextDouble()) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.hasNext(!CellTower.from(mcc, mnc, parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.hasNext box(CellTower.from(parser.nextInt(16), parser.nextInt(16)) > 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.hasNext(1, parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.hasNext box(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.hasNext(1) && parser.next().equals(\"A\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.hasNext(2) && parser.next() != 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.hasNext != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.hasNext(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextDouble()) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.hasNext Comparable(CellTower) && parser.next() != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextDouble()) > 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.hasNext(!CellTower.from(mcc, parser.next(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.hasNext(2) || parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.hasNext(2) && parser.next().equals(\"A\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.hasNext(0) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.nextDouble() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.hasNext(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.hasNext Comparable(CellTower) && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.hasNextMATCH(CellTower.from(parser.nextDouble()) > 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.hasNext(10)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.hasNext box != 0 && parser.next().equals(\"A\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.hasNext(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) < parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.hasNext(CellTower.from(parser.next(), parser.nextInt(16), parser.nextInt(16)) != 0 && parser.nextInt(16), parser.nextInt())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.nextInt(16) != 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.hasNext(0) && parser.next() == parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parser.hasNext(1) && parser.nextInt() == parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.hasNext(1) && parser.next() != 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.hasNext() && parser.next().equals(\"A\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextInt(), parser.nextInt(16), parser.nextInt())) {",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"(x+)?,\") // adc 212);",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"(d{5}:dd+)?,\").build());",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // adc 1",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the adc 1",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"(d{5}:dd+)?,]\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,4}.d)?,\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the function as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the month",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'A'",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,6}.d)?,\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the array as 'final'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' or 'number'",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7}.d)?,\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"(d{5}:dd+)?,\") // adc 212);",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,6}.d)?,\") ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"(x+)?,\").replace(\"(d{1,4}.d)?,\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare theDER as 'final'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'error', 'number'",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the duedate parameters as 'final'.",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the 'final'.",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' string",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' respectively",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"(x+)?,\").replace(\"(d{1,7); // adc 1",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the string",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"(d{5}:dd+)?,\").replaceAll(\"(d{1,7); // adc 1",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"(x+)?,\").replace(\"(d{1,7}.d)?,\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the same as 'final'.",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"(x+)?,\").replace(\"(d{1,6}.d)?,\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x' respectively",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the end-of-input",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare theform as 'final'.",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare theSide parameters as 'final'.",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"(x+)?,\") // adc 2",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"(x+)?,\") // adc 212\\\"",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'E'",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"(d{5}:dd+)?,\") // adc 212\\\"",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,4}.d)?,\") ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the end-of-input)",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"(d{5}:dd+)?,\") // adc 2127, 'A'",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' characters",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"(d{1, 10, 5); // adc 1",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x', 'A'",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the columns",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the end of 'final'.",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7}.d)?,\") ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the entry as 'final'.",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"(x+)?,\").replace(\"(d{1,6}.d)?,\") ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the end-of-input as 'final'.",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!'.",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the adc 2",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the end-of-input\"",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"(d{5}:dd+)?,\").replaceAll(\"(d{1,6}.d)?,\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,6}.d)?,\")) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'pool', 'number'",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the integer as 'final'.",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,4}.d)?,\")) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '?)",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the ',') as 'final'.",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '.*' bytes",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'error', 'number' or 'number'",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare theDER\"",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"(d{5}:dd+)?,\").optional(d{1,7); // adc 1",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the month starts with number",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the number",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the esc",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the < 4) as 'final'.",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number')));",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the adc 2127, 'A'",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the namespaces",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x', 'number'",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1, 6, \"\"));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the entry",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x', 'a' or 'number'",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"(d{5}:dd+)?,\").build();",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the string character",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'input', 'number'",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'a'",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the \"<\"",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7)); // adc 1",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"(d{5}:dd+)?,\").replaceAll(\"(d{1,6}.d)?,\") ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'equals'",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x', 'final'.",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"(x+)?,\").replaceAll(\"(d{1,7); // adc 1",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,4}.d)?,\")) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'.",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'image'",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7}.d)?,\")) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'input'",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' */'",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the integer\"",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Space'",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // FIXME: a parameter should not be assigned. Also declare the <\"",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,6}.d)?,\")) ? adc 2 : 0;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\")                    // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional()         // adc 2"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (data.length > 5) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (data.length > 4) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (started) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (data.length > 10) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (data.length < 3) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (data.length > 2 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (data.length > 1 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (this.mode == QuoteMode.NONE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (started && data.length > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (data.length > 2) {",
                "identical": true
            },
            {
                "k": 12,
                "patch": "if (data.length > 9 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (data.length == 3) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (data.length > 16) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (data.length > 8 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (data.length > started) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (data.length > 2 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (data.length == 4) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (data.length > 3) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (data.length > 3 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (data.length > 5 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (data.length > 5 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (data.length > maxLen) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (data.length > 20) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (data.length > 1) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (data.length < 5) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (data.length > 7) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (data.length > 7 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (data.length < 4) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (this.conf.getMyId() == 2) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (data.length > 10 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (this.get(\"taximeterEnd\", data[2] != 0 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (data.length > 10 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (data.length > maxLines) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (data.length > 64) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (StringUtils.isNotEmpty(data)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (data.length > 9 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (data.length > 6 || data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (data.length > 1 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (this.get(\"taximeterEnd\", data[2] != 0 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (data.length > 1 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (data.length > 9 && position.get(\"taximeter\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (this.mode == CONTENT_LIST) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ((data.length - 5) > 2) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (data.length > 12) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\") && data.length > 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (data.length != 5) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (data.length > 2 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (data.length > 2 && data[0] != Integer.parseInt(data[2])) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (data.length != 4) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (data.length > 9 && data[0] != Integer.parseInt(data[2])) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (data.length > 9 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (data.length > 2 && data[0] != 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (this.get(\"taximeterEnd\", data[2] != 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (data.length > maxLines || data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (data.length > 9 && data[0] != '0') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (data.length > 10 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (this.test(\"taximeterEnd\", data[2] != 0 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (data.length > 1 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Context.getConfig().getBoolean(\"taximeterEnd\", data[2]) < 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (data.length > 1 && data[0] != Integer.parseInt(data[2])) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (data.length > 9) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\") && data.length == 4) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (data.length > 360) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (data.length > 2 && data[0] != Integer.parseInt(data)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (data.length > 8 && data[0] != Integer.parseInt(data[2])) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (this.test(\"taximeterEnd\", data[2] != 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\", data[2]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (data.length > 2 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (this.get(\"taximeterEnd\", data[2] != 0 && data[0] != Integer.parseInt(data))) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (StringUtils.isNotEmpty(data) && data[2] != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (StringUtils.isNotEmpty(data) && position.isEmpty()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\", data[2]) < 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (StringUtils.isNotBlank(data)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (this.conf.getMyId() == 1) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (data.length > 1 && data[0] != 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (this.test(\"taximeterEnd\", data[2] != 0 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (data.length > 2 && data[0] != '0') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\") && data.length > 4) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (data.length > maxLinesLength) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\") && data[0] != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (data.length > 1 && data[0] != Integer.parseInt(data)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (started && data[0] != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (data.isEmpty()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (data.length > 9 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (this.get(\"taximeterEnd\", data[2] != 0 && data[0] != Integer.parseInt(data)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (this.test(\"taximeterEnd\", data[2] != 0 && data[0] != Integer.parseInt(data))) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (data[i] != 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (data.length > 9 && data[0] != Integer.parseInt(data)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\", data[0])) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (StringUtils.isNotEmpty(data) && data[0] != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Context.getConfig().getBoolean(\"taximeter\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (data.length > 9 && position[0] != Integer.parseInt(data[2])) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (data.length > 3 && data[0] != Integer.parseInt(data[2])) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (this.get(\"taximeterEnd\", data[2] != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (data.length > 10 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\") && data.length == 2) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (this.rng.nextDouble() < 2) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Context.getConfig().getBoolean(\"database.update\") && data.length > 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : 0L;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Collections.emptyMap() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() > 0 ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedDataKeys = request.isEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() > 0 ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : String.valueOf(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(request.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedDataKeys = request.getContextEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new HashMap<String, String>();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : (List) request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().isEmpty() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != 0 ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>() {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedDataKeys = request.isEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encryptedDataKeys = request.getType() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<Map<String, String>() {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : createEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(request.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(request.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != Integer.MAX_VALUE ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : \"\";",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != 0 ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new HashMap<String, String>() {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new HashMap<String, String>(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(this.encryptedDataKeys);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : (Map<String, String>) request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(request.getEncryptedDataKeys(), request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? 0 : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Collections.emptyList() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Integer.MAX_VALUE : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encryptedDataKeys = request.getType() == null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : \"\" + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().equals(this.encryptedDataKeys) : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? new Map<String, String>() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().toString() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new HashMap<>();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new HashMap<String, String>(this.encryptedDataKeys);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? System.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedDataKeys = request == null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : Collections.unmodifiableMap(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Context.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<Map<String, String>(request.getEncryptedDataKeys(), request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().equals(request.getEncryptedDataKeys()) : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : that.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<Map<String, String>(this.encryptedDataKeys);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encryptedDataKeys = request.getEncryptionContext() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<Map<String, String>(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Collections.EMPTY_LIST : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<List<Map<String, String>(request.getEncryptedDataKeys(), request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encryptedDataKeys = request != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? converter.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : builder.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().equals(request.getEncryptedDataKeys()) : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<List<Map<String, String>() {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<List<Map<String, String>(request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : (HttpEntity) request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : new HashMap<String, String>();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<Map<String, String>(request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : (HttpInfo) request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Boolean.TRUE : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Long.MAX_VALUE : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new HashMap<String, String>(request.getEncryptedDataKeys(), request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encryptedDataKeys = request.getEncryptionContext() != null ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : createEncryptedDataKeys(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : Collections.emptyMap();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().equals(request) : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(request.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new LinkedHashMap<String, String>();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : (Map<String, String) request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) + \"/\" + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Boolean.MAX_VALUE : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new HashMap<String, Object>(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<List<Map<String, String>(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : (Map<String, String>) request.getEncryptedDataKeys(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Collections.emptySet() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? \"\" : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : sz.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<List<Map<String, String>(request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<Integer, String>() {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getBytes(StandardCharsets.UTF_8);",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType().isPrimitive() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field != null && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field != null && field.getType().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getDeclaringClass().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getName())) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType().isPrimitive() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType().isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field != null && field.getType().isArray() ? ignoredNames.contains(field.getName()) : false;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType().isEnum() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getClass().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getSuperclass() != null && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getDeclaredFields() != null && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType().isArray() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType().isAssignableFrom(field) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType().isField() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType().isAssignableFrom(field.getReturnType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType().equals(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType() != null && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field != null && field.getClass().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.isAcceptable() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.isAcceptable() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getDeclaredField(field).isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType().isInterface() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getName())) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getDeclaringClass().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType().isAssignableFrom(field.getClass())) || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType().isField() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field != null && field.getType().isPrimitive() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getReturnType())) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getSuperclass()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getDeclaringClass().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType())) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field != null && field.getType().isArray() ? ignoredNames.contains(field.getReturnType()) : false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getDeclaringClass().isAssignableFrom(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field != null && field.getType().isArray() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType().isAssignableFrom(field.getClass() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType().isAssignableFrom(field.getSuperclass()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getGenericSuperclass()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType().isArray() || ignoredNames.contains(field.getName())));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.isInterface() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType().isPrimitive() && ignoredNames.contains(field.getReturnType())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType().isPrimitive() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType().isAssignableFrom(field.getReturnType()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field != null && field.getType().isArray() ? field.getType() : ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType().isAssignableFrom(field.getClass() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType().isObject() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getReturnType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field != null && field.isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType().isAssignableFrom(field) || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getDeclaringClass())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType().isPrimitive() && ignoredNames.contains(field.getDeclaringClass().getName())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getDeclaringClass().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType().isAssignableFrom(field.getClass())) || ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType().equals(field.getType()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType().isAssignableFrom(field.getReturnType()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field != null && field.getType().isArray() ? field.getType() : ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field != null && field.getType().isArray() && ignoredNames.contains(field.getReturnType())) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType().isArray() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getReturnType());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType().isArray() && ignoredNames.contains(field.getReturnType())) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType().isAssignableFrom(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType().equals(field.getReturnType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType().isAssignableFrom(field.getClass()) || ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field != null && field.getType().isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field != null && field.getType().isArray() || ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType().isAssignableFrom(field.getReturnType()) && ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType().isArray() && ignoredNames.contains(field.getDeclaringClass().getName())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field.isEnum() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.isAccept() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType().isPrimitive() || field.getName().equals(field.getName())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType().equals(field.getSuperclass()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field != null && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getReturnType())) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field != null && field.getType().isArray() ? ignoredNames.contains(field.getDeclaringClass()) : false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType().isFields() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType().isPrimitive() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType().isAssignableFrom(field.getName()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field != null && field.getType().equals(field.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field != null && field.getType().equals(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getDeclaringClass().isAssignableFrom(field.getClass());",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (1 << 8) | a[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (a << 8) | a[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l - 8) | a[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << 8) | a[i]; // odd vertex, size",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << 8) | pad[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l >> 8) | a[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l % 8) | a[i];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << 8) | a[i]; // 10 -> pad byte 0",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l =(a[i - 8) | a[i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l + 8) | a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i - 1]) <= size;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) <= size;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l % 8 | a[i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]) <= size;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l << 8) | a[i]; // 8 byte 0",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size)",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << 8) | a[i]; // pad byte 0",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l << 8) | a[i]; // odd vertex, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 8) | a[i]; // odd vertex, as byte 0",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 8) | a[i]; // odd vertex, or IPv4-Compatible",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 8) | a[i]; // odd vertex, pad [JACKSON-of-(b[i], pad[i];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i + 1]) <= size;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo is JRE 7+",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) <= 0);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l =(l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << 8 | a[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l & 8) | a[i];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 8) | a[i]; // odd vertex, as 0",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]) <= size ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l << 8) | a[i]; // at most 80% full",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << 8) | a[i]; // odd vertex, or IPv4-Mapped",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) , pad[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << 8) + a[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size)][i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], 8)) <= pad[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i]), pad[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i - 1]) <= size ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l << 8) | a[i]; // odd vertex, pad [JACKSON-of-input",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, 4",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there 0",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i + 1]) <= size;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << 16 | a[i];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad ? Integer.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad ? 0 : 0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad ? 0 : 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) <= size",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) <= 0x7F;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], 8)) > pad[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i - 1]) < pad ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i])) <= size;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << 8) | b[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << 8) | a[i]; // odd vertex, buffer[i], pad[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l << 8) | a[i]; // odd vertex",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad ? 0 : 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i - 1]) <= size ? 0 : 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad ? size / 8 : 0L;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i], pad[i];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]) <= size ? 0 : 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1].getByte(b[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are at least 2",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad)",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) <= size ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, 16)",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]) <= size);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(a[i], pad, size)",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i]",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i][i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i - 1]) <= size);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i - 1]) <= size",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad, b[i];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) + pad[i];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i].length",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) > pad[i];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], 8",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pad",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) < pad[i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], size)",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad, 4",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) < pad ? 0 : 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) & 0x7F;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) > 0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i][i];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) & 0x08[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]), pad[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = (l << 8) | a[i]; // odd vertex, cache object is the root of all ASCII",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) <= size ? 0 : 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) & pad[i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are non-byte length",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i]) <= size;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << 8) | a[i]; // , pad byte 0",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i + 1]) < pad ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << 8) | a[i]; // Long.compare(a[i], pad[i - 1]) <= size ? 0 : 0);",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") ? token.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")+i.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\", version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\";",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression(\"(?:[0-9F]{20})?,\").build();",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(\"(?:[0-9F]{20})?,\";",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be assigned.",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\"; // rssi",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '`'",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")+i.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'phone', 'number'",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // rssi",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") ? token.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'JSONObject'",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Mark'",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'n'",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")+i.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'phone'",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the array as 'final'.",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'a'",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'OR'",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '${'",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'error', 'number'",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")+i.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\", version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'cur'",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'file'",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\", version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' pattern'",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should never be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") ? token.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'gen'",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'inal'",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'E'",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\", version.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '?)",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'A'",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'd{1,",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'rest'",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'evt'",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\"); // rssi",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the array",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '{}'",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare theform",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' */'",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\\\"",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'equals'",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ')?",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'form', 'number'",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'.",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '`'",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\", icc);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\"+",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // version.number(\"([\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '_\"'",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' html'",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'rng'",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'rep'",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '.*'",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' o'",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'password'",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'tr', 'number'",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") ? token.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") ? token.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // rssi\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the required",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")+i.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final';",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'tr', 'final'.",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the end",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\\\\'",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\")      // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\")     // iccid"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.addAll(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || markerList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", \"session.SessionData\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"ro.pippo. session.SessionData\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionInfo\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || markerList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList(White.pippo.session.SessionData));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") + \"x.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() ? \"true\" : \"Route.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.session.SessionData);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData) : null;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(White.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", \" Status.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData) + \"x.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData)\" : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData)\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData)epList.get(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(White.pippo.session.SessionData));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\") != null ? \"true\" : \"com.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>() : \" .util.HashMap<String, Boolean>(WhiteList.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", request.session.SessionData\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"ro.pippo.session.Session\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(HttpHeaders.pippo.session.SessionData));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !this.session.contains(\" .util.SessionData\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>() : \" .util.HashMap<String, Set<String>>();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() ? null : \" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"ro.pippo.session.Session(WhiteList, this.session.SessionData\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\") != null ? \"true\" : \"Route.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(White.pippo.session.SessionData(\" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData)\", \"session.SessionData\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\") != null ? \"true\" : \" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.contains(\"ro.pippo.session.SessionData\")) ? \"true\" : \"Route.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.remove(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() ? \" .util.SessionData\" : \"foo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>() : \" .util.HashMap<String, Boolean>(WhiteList.pippo.session.SessionData>();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData), System.getProperty(\" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<Class<?, ?>>();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || ((Class<?>)pippo.session.SessionData).equals(\" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData)null : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData>();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>() {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\") != null ? \"true\" : \" Status.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList(White.pippo.session.SessionData)));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList(White.pippo.session.SessionData()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData) .util.SessionData : new WhiteList(WhiteList.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData)null : new WhiteList(WhiteList.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData), this.session.SessionData);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\").equals(\" .util.SessionData\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() ? this.session.SessionData() : null;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !this.session.contains(\" .util.HashMap\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", \" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<Class<?>>() {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.contains(\"ro.pippo.session.SessionData\")) ? \"true\" : \"no.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\") != null);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData</ .util.SessionData\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\") != null ? \" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\") != null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData)\" : this.session.SessionData;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\"));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData) ? this : new WhiteList(WhiteList.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", request.session.SessionData);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<Map<String, Boolean>(WhiteList.pippo.session.SessionData));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData) ? this : new WhiteList(WhiteList.pippo.session.SessionData));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData) .util.SessionData);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"this.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData), \"session.SessionData\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() ? \" .util.SessionData<String, Set<String> instead\" : new WhiteList<String>(WhiteList.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !this.session.contains(\" .sql.SessionData\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", true);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || !(WhiteList.get(\"ro.pippo.session.SessionData\")).equals(\" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", afterppo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDefault\", \"session.SessionData\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() ? \" .util.SessionData<String, Set<String> instead) : new WhiteList(WhiteList.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.contains(\" .util.SessionData\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<Map<String, Boolean>(WhiteList.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() ? this.session.SessionData() : new WhiteList(WhiteList.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", StringUtils.session.SessionData(WhiteList));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData) ? this.session.SessionData : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<String>(WhiteList.pippo.session.SessionData), Collections.unmodifiableList(WhiteList));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") ? new WhiteList<String>(WhiteList.pippo.session.SessionData) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", new WhiteList<Map<String, Boolean>(WhiteList.pippo.session.SessionData>();",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ((kind == String.class) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (kind == String.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (kind == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == .util.Date.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ((kind == Integer.class) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == Boolean.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ((kind == String.class) || (raw == Object.class)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (id == null || raw == String.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ((kind == Integer.TYPE) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (cls == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || ClassUtil.isBogusClass(raw)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Boolean.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || ClassUtil.isBogusClass(raw)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Boolean.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (kind == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == String.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == .sql.Date.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == String.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Integer.class == Object.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == .util.Date.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (kind == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class == String.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (cls == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (String.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Integer.class == String.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ((kind == null) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == .util.UUID || raw == String.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Map.class == Object.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Map.class == Object.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == .sql.Timestamp.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == Integer.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == CharSequence.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Double.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Long.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || raw == .util.Date.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Number.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ((kind == Integer.class) || (raw == Object.class)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == raw) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == .sql.Date.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Long.class) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == raw) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == Integer.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == .sql.Timestamp.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Integer.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == Integer.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Double.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || raw == Map.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == declaredType.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class == Boolean.class) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (String.class.isAssignableFrom(raw) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == JsonToken.VALUE_NULL || raw == String.class) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Integer.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || raw == JsonToken.VALUE_NULL || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Integer.class == Boolean.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (id == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == UUID.class) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == raw) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == raw) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Date.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw) || Boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == UUID.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == .sql.Date.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (Iterator.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ((kind == Integer.class) || raw == String.class) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == Long.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw == Boolean.TYPE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class && raw == String.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (id == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == Long.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ((kind == Integer.TYPE) || (raw == Object.class)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == Character.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( .sql.Date.class == String.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Date.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ((kind == String.class) || raw == String.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) + 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.values());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes, attributes.length);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) + 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes, attributes);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length + 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length) + 1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, 1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes[attributes.length - 1]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size, attributes);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length - 1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.emptyMap() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.get(attributes);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, context);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 1 && !attributes.isEmpty()) ? Collections.emptyMap() : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length - 1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 && !attributes.isEmpty()) ? Collections.emptyMap().values() : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 1 && !attributes.isEmpty()) ? Collections.emptyMap().values() : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 && !attributes.isEmpty()) ? Collections.emptyMap() : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes instanceof ConcurrentHashMap<>(attributes.length) ?attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes.get(attributes);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName(), attribute));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.getAttributeName(), attribute);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map>emptyMap() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 && !attributes.isEmpty()) ? Collections.singletonMap() : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes[attributes.length - 1];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 1 && !attributes.isEmpty()) ? Collections.singletonMap() : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? 0 : attributes.length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptySet() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes, attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.emptyMap() : attributes);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length, attributes));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size() + 1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) * attribute.getAttributeMap());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes[attributes.length - 1].length());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null ? attributes.length) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, Collections.emptyMap());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName() + 1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null ? attributes.length) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null ? attributes.length : new ConcurrentHashMap<>(attributes.length));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes instanceof ConcurrentHashMap<>(attributes.length) ?attributes.get(attributes) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName() + \".value\"));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size, attributes.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName()) + 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName() + \".html\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.values);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.emptyMap() : attributes.get(attribute.getAttributeName(), attribute));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? 0 : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName())) + 1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap()) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 1) ? Collections.emptyMap() : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 1 ? 0 : values[attributes.length - 1].getAttributeMap().size()];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.getAttributeMap();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap().size() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName(), attribute));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map>emptyMap() : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptySet() : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) + (attributes.length - 1)) ? 2 : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, Collections.singletonMap());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName())));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute) : new ConcurrentHashMap<>(attributes));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.getAttributeMap().values();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) * attribute.getAttributeMap().size());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) + (attributes.length - 1)) ? ident : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.getAttribute(attribute.getAttributeName(), attribute));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes[attributes.length - 1]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.emptyMap() : attributes.length);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map>emptyMap() : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.getAttribute(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute) : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes.getAttribute(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName())));",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    }
}