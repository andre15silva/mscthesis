{
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().length());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().getPath());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().endsWith(\"/\")) ? Blob.getPath() : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath().length());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : uri.getPath());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return BlobId != null ? BlobId.of(uri.getHost(), uri.getPath()) : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost()) != null ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().startsWith(\"/\")) ? Blob.getPath() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return BlobId.of(uri.getPath(), uri.getPort());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort()) != null ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : uri.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), uri.getPort());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return BlobId.of(uri.getPath(), uri.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toString());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().length()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().substring(0, uri.getPath().length() - 1)) : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath().length());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath()));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath()) != null ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().toString() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \":\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getHost() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath().length() + \"/\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().substring(0, uri.getPath().length() - 1)) : BlobId;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() != null ? BlobId().toString() : null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return BlobId.of(uri.getPath(), uri.getHost()) != null ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toUpperCase());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1, uri.getPath().length() - 1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() != null ? BlobId().toString() : null);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1, uri.getPath().length() - 1).length());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return BlobId.of(uri.getPath(), uri.getHost());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : BlobId.getPath());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) + \"/\" + uri.getPath().length() + \"/\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost() + \":\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort() + \":\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : uri.getPort());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() != null ? URL.getPath() : null);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().toLowerCase() : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort()) ? BlobId.getPath() : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().getPath()));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost()) != null ? BlobId.getPath().substring(0, uri.getPath().length() - 1)) : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(0, uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return BlobId.of(uri.getPath(), uri.getHost(), uri.getPort());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort() + \"/\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().substring(0, uri.getPath() : null);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().trim() : null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()).length();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPort() : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : uri.getHost(), uri.getPort());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().substring(0, uri.getPath() : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort()) != null ? BlobId.getPath().substring(0, uri.getPath().length() - 1)) : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return BlobId.of(uri.getPath()) + \"/\" + uri.getPath().length() + \"/\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toLowerCase());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), uri.getPath()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toUpperCase()));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().getPath() : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : uri.getHost());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return BlobId != null ? BlobId.of(uri.getPath()) : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost()) != null ? BlobId.getPath().substring(0, uri.getPath().length() - 1)) : BlobId;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(1, uri.getPath().length() - 1).toString().length());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().substring(0, uri.getPath().length() - 1).toString().length() : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath()).length();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().toURL());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().length() + \"/\" + uri.getPath());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(0, uri.getPath().length() - 1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() != null ? URL.getPath() : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().substring(0, uri.getPath().length() - 1) : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().length() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return BlobId != null ? BlobId.of(uri.getHost()) : null;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() == null ? null : BlobId.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().trim());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() );",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \":\" + uri.getPath()));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost() == null ? null : BlobId.getPath());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath()) != null ? BlobId.getPath().substring(0, uri.getPath() - 1)) : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath() + \"/\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath())));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath() + \"/\" + uri.getPath().length()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return BlobId.of(uri.getPath(), uri.getPath().length()));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort()) != null ? BlobId.getPath().substring(0, uri.getPath().length() - 1)) : BlobId;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), uri.getPath() == null ? null : uri.getPath());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return BlobId.of(uri.getHost(), uri.getPath().substring(0, uri.getPath().length() - 1)) ? Blob.getPath() : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return BlobId.of(uri.getHost(), uri.getPort() + \"/\" + uri.getPath());",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-100": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean ignition = result.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean ignition = new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean ignition = result.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean ignition = Collections.singleton(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean ignition = context.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean ignition = result.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getDeviceId()));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean ignition = new Event(Event.TYPE_IGNITION, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != 0) ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean ignition = new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getDeviceId()));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean ignition = result != null && lastPosition.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean ignition = result != null && new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getDeviceId()));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != 0) ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getFixTime().equals(oldIgnition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getFixTime()) != null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getFixTime().equals(previousPosition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getFixTime())));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != 0) ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean ignition = result != null && context.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean ignition = new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(previousPosition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != null && position.getFixTime().equals(oldIgnition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != 0) ? true : false;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getDeviceId()));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getFixTime())) != null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getFixTime().equals(oldIgnition()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != 0) ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean ignition = context.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getFixTime().getTime()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION_OFF, position.getFixTime()) != null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getFixTime().equals(position.getFixTime())) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean ignition = new Event(Event.TYPE_IGNITION, position.getDeviceId(), position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(oldIgnition()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != 0) ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean ignition = new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getDeviceId());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != 0 && position.getFixTime().equals(oldIgnition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != 0) ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean ignition = Context.getConfig().getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getDeviceId());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(position.getFixTime())) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getConfig().getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != 0) ? true : false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getFixTime().equals(position.getDeviceId())) ? true : false;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getFixTime() != null && position.getFixTime().equals(oldIgnition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(previousPosition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getDeviceId().equals(oldIgnition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != 0) ? true : false;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getFixTime().equals(device.getFixTime())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(oldIgnition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(oldIgnition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean ignition = new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean ignition = result.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getFixTime().getTime()));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_ON, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != 0) ? true : false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && Context.getIdentityManager().getDeviceById(position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean ignition = result.getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getDeviceId());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getFixTime().equals(previousPosition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean ignition = Context.getIdentityManager().isPosition(position.getDeviceId(), position.getDeviceId()) && position.getFixTime().equals(oldIgnition.getFixTime())) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, false));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getFixTime()) != null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean ignition = new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getFixTime().getTime()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(position.getDeviceId())) ? true : false;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getFixTime().getTime() - lastPosition.getFixTime().getTime()) > 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getDeviceId() != null && position.getFixTime().equals(previousPosition.getFixTime())) ? true : false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId(), position.getDeviceId()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(oldIgnition()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean ignition = Context.getConfig().getBoolean(Event.TYPE_IGNITION_OFF, position.getDeviceId());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getDeviceId()) != null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean ignition = position.getBoolean(Position.KEY_IGNITION, position.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId()) != null ? position.getFixTime().getTime() : false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION_ON, position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION, position.getDeviceId(), position.getFixTime().getTime()));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean ignition = result.getBoolean(Position.KEY_IGNITION_OFF, position.getDeviceId() != null && position.getFixTime().equals(device.getFixTime())) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean ignition = result != null && position.getBoolean(Position.KEY_IGNITION, position.getFixTime()) != null;",
                "identical": false
            }
        ],
        "buggy_line": "boolean ignition = position.getBoolean(Position.KEY_IGNITION); boolean oldIgnition = false; Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null) { oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); } if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
        "fixed_line": "if (position.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean ignition = position.getBoolean(Position.KEY_IGNITION); Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null && lastPosition.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId())); } }"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"(x+)?,\") // adc 212);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"(x+)?,\") // adc 2",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"(d{5}:dd+)?,\").build());",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"(d{5}:dd+)?,]\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(\")) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(\")) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"(x+)?,\") // adc 2\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"(d+)?,\") // adc 212);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"(x+)?,\") // adc 212\\\"",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\")) continue; // adc 1",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"(x+)?,\")), adc 2L; // adc 1",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(\")) ? adc 2 : 0 );",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : 0 );",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"(x+)?,\") // adc 1\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"htmlformentry.error.required\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"(d{5}:dd+)?,\").replaceAll(\"(\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(\")) ? adc 2 : 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"(d+)?,\") // adc 2 for .number(\"(d{1,6\"));",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 2 : 0L; // adc 1",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(d{1,4\"));",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"(x+)?,\")), adc 2]; // adc 1",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"(d{5}:dd+)?,\").build();",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"(x+)?,\") // adc 2];",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"(d+)?,\") // adc 2",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"(d{5}:dd+)?,\") // adc 212);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d)?)) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\")) ? adc 2 : null; // adc 1",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : 0L; // adc 1",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(voided)\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"(d+)?,\") // adc 2 for .number(\"(d{1,7\"));",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d)?)) ? adc 2 : 0L; // adc 1",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : null; // adc 1",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(d{1,6\"));",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"(x+)?,\")), adc 212); // adc 1",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\")) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"(d+)?,\") // adc 2];",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"(x+)?,\") // adc 2+4+\".equals(\"A\") ? adc 2 : 3); // adc 1",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"(d{5}:dd+)?,\").replaceAll(\"(\")) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"(x+)?,\") // adc 2 for .number(\"(d{1,6\"));",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? \"true\" : \"false\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5}:dd\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(x+)?,\") // adc 212);",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\"))?",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 2 : 0 );",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"(x+)?,\")), adc 212); // adc 1 for 'number'",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"(d{5}:d+)?,\").number(\"(\")) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(voided\"));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,7); // adc 1",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 1 : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"(d{5}:d+)?,\").number(\"(\")) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"(x+)?,\") // adc 2+4+\".equals(\"A\") ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5}:dd\")) ? adc 2 : 0 );",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"(d{5}:dd+)?, 2+4+\".equals(voided) ? \"number\" : \"number\".equals(d{1,7)) ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"(d{1, 10, 5); // adc 1",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"(x+)?,\") // adc 2 for .number(\"(d{1,7\"));",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\")) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"(x+)?,\") // adc 1",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\")) for .number(\"(d{1,7); // adc 1",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 2 : 0.0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"(d{5}:d+)?,\").number(\"(d{1,4\"));",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5}:dd\")) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(voided)\"));",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,4\"), \"Slac\"));",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"(d{5}:d+)?,\").number(\"(\")) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 2 : 0.0; // adc 1",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"(x+)?,\")), adc 212);",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : String.valueOf(d{1,6);",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\"))\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 1 : 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"(d+)?,\") // adc 212\\\"",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"(d{5}:dd\").number(\"(d{1,4\"));",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\")) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d)?)) ? adc 2 : 0 );",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 1 : 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : \"0\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"(d{5}:dd+)?, 2+4+\".equals(voided) ? \"number\" : \"number\".equals(d{1,7)) ? adc 2 : 0 );",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : 0.0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5}:dd\")) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d)?)) ? adc 2 : 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d)?)) ? adc 2 : 0.0; // adc 1",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"(d{5}:dd+)?,\").replace(\"(d{1,6\", \"\"));",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(d{1,6\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"A\") ? adc 2 : \"\";",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : 0x00; // adc 1",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"(x+)?,\") // adc 2127, 'number'",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(\"(d{5\")) ? adc 2 : 0.0; // adc 1",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\")) ? adc 2 : 0.0; // adc 1",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"(d{5}:dd+)?,\").number(\"(\")) + \"}\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 2 : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"(d{5}:dd\").number(\"(voided\"));",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"(x+)?,\") // adc 2 \\n\\r\\n\".equals(d)?)) ? adc 1 : 0L; // adc 1",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"(x+)?,\") // adc 2 'A'){",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\") // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional() // adc 2"
    },
    "Bears-138": {
        "fixes": [
            {
                "k": 1,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0f;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "mnc = new Network(new Network(CellTower.from(mcc, mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "mnc = new Network(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int mnc = buf.readInt() - mcc, mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "CellTower.from(mcc, mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "static final Network mnc = new Network(mcc, mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int mnc = buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200)).toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int mnc = buf.readUnsignedByte() - buf.readInt();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "mnc, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0A;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int mnc = buf.readInt() - buf.readUnsignedByte() << 8;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int mnc = buf.readUnsignedByte() - buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int mnc = buf.readInt() - buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int mnc = buf.readUnsignedShort() - buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "while (mcc != 0 && mnc != 0 && lac != 0 && cid != 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200)).toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) + 9;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "mnc = buf.readUnsignedByte() & 0x0f;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int mnc = buf.readInt() - buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "mnc = buf.readInt() + mcc, mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200), lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int mnc = buf.readUnsignedByte() & 0x7F;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "mnc = new Network(new Network(CellTower.from(mcc, mnc, lac, cid, rssi))); // rssi",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "mnc = new Network(mcc, mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "mnc = new Network(new Network(CellTower.from(mcc, mnc, lac, cid, rssi), cid, rssi));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int mnc = buf.readUnsignedByte() - buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "static final Network mnc = new Network(mcc, mnc, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "buf.readUnsignedByte() != 0 ? buf.readInt() : buf.readUnsignedMedium();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "buf.readInt(), mnc, lac, cid, rssi));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && buf.readUnsignedByte() != 0 ? buf.readInt()) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "mnc = buf.readInt() + mcc, mnc, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && mnc != 0 && lac, cid != 0 && rssi + 1) != 0xf ? buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int mnc = buf.readUnsignedByte() & 0x08) << 8;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readInt()) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readInt() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int mnc = buf.readUnsignedShort() - buf.readUnsignedByte() << 8;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readByte() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "buf.readUnsignedByte() != 0 ? buf.readInt() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readInt() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readByte() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 9);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "while (mcc != 0 && mnc != 0 && lac, cid != 0 && rssi != 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte(), rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi), cid, rssi));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readInt() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int mnc = buf.readUnsignedByte() << mnc, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte(), rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte(), rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 9);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedMedium();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readInt() : lac, cid, rssi + 9);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readInt() : lac, cid, rssi + 9);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readByte() : lac, cid, rssi + 9);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && mnc != 0 && lac, cid != 0 && rssi + 1) != 0xf ? buf.readUnsignedByte() : lac, cid, rssi + 9);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readInt() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 9);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 && buf.readUnsignedByte() != 0 ? buf.readInt()) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "static final int mnc = buf.readUnsignedByte() & 0x0f;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte(), rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readInt() : buf.readUnsignedByte(), rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readInt()) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "buf.readUnsignedByte() != 0 ? buf.readByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int mnc = buf.readUnsignedByte() << 8;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int mnc = buf.readInt() - buf.readUnsignedByte() << 6;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int mnc = buf.readUnsignedShort() & 0x0f;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 ? buf.readByte() : lac, cid, rssi + 9);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && mnc != 0 && lac, cid != 0 && rssi + 1) != 0xf);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readInt() : buf.readUnsignedByte(), rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && buf.readByte() != 0 ? buf.readInt()) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readUnsignedByte() != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "mnc = new Network(new Network(CellTower.from(mcc, mnc, lac, cid, rssi), cid);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int mnc = buf.readUnsignedByte() & 0x08;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readByte() != 0 ? buf.readByte() : buf.readUnsignedByte(), rssi + 1) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && buf.readUnsignedByte() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 1) : 0xf;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int mnc = buf.readUnsignedShort() - buf.readInt();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "buf.readByte() != 0 ? buf.readUnsignedByte() : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0x80 ? buf.readUnsignedByte() : 0x0A, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && mnc != 0 && lac, cid != 0 && rssi + 1) != 0xf ? buf.readUnsignedByte() : lac, cid, rssi + 1) : 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && mnc != 0 && lac, cid != 0 && rssi + 1) != 0xf;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 && mnc != 0 && lac, cid != 0 && rssi + 1) != 0xf ? buf.readUnsignedByte() : buf.readInt();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int mnc = buf.readUnsignedByte() & 0x0200) != 0 && buf.readInt() != 0 ? buf.readUnsignedByte() : lac, cid, rssi + 9);",
                "identical": false
            }
        ],
        "buggy_line": "int mnc = buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));",
        "fixed_line": "int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2); // at most 80%",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2); // at most 80%",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 1 + 4);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + result.readableBytes());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + result.readableBytes());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2); // message index",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2); // message index",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 1 + 4);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(2 + 2 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + result.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(2 + 1 + 2 + 1 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 1 + 4);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(2 + 1 + 2 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(2 + 3 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() ? buf.readableBytes() : buf.readableBytes());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + result.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + result.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(2 + 1 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 * result.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(2 + 1 + 2 + 1 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + result.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(2 + 1 + 2 + length + 1 + buf.readableBytes());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 * 8;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + result.readableBytes());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(2 + 8 + 2 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4 + buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 3;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 1 + 2 + 1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 1 == 4 ? buf.readableBytes() : buf.readableBytes());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 8);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 * result.readableBytes());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes() + 1 + 4);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + 8);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + result.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 1 + 8;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + buf.readableBytes() + 2 + 2); // at most 80% full",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 * result.readableBytes() + 4 + result.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + buf.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() - 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + result.readableBytes());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 4 + result.readableBytes() + 1 + 4);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 1 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 2 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes().length());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(2 + 2 + 1 + buf.readableBytes() + 2 + 2); // at most 80%",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes() + 4 + buf.readableBytes() + 2 + 4);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 8);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 12;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(2 + 2 + 2 + buf.readableBytes() + 2 + 4 + buf.readableBytes() + 4);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(2 + 1 + 2 + buf.readableBytes().length());",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-124": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // reserved",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // reserved\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // path type",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"(d+.d+)\").text(\"+\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // path separator...",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // NOSONAR",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //\"};",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") // reserved\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") // 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // longitude type",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\")\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //]\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites in time",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Link type",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\"number\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"(d+.d+)\").text(\"+\")\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // Navigation",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"(d+.d+)\").text(\"+\")OSd+)\").text(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // ];",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites in time\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") //\"};",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\")\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // reserved type",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // mode type",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites in 'number'",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //pool type",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m+)\").text(\"+\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") // 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\") // reserved\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // \"\\\"\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") // reserved",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"(d+.d+)\").text(\"+\")OSd+)\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m+)\").text(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"(d+.d+)\").text(\"+\")OSd+)\").text(\"+\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // heading",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") // \"\\\"\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //d+)\").text(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m m+)\").text(\"+\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") // m+)\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m+)\").text(\"+\".equals(\"+\")",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m+)\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"(d+.d+)\").text(\"+\")OSd+)\").text(\"+\") // 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\") // reserved",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // e.number(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") //]\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m m+)\").text(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\"+\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // dataType type",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\").text(\"+\")\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //d+)\").text(\"+\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"(d+.d+)\").text(\"+\") + \"]\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // reserved reserved",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"(d+.d+)\").text(\"+\")OSd+)\").text(\"+\") // reserved",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"(d+.d+)\").text(\"+\") builder builder.number(\"(d+.d+)\").text(\"+\")\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\") // 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //d+)\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\"string\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") + \"]\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\"Message\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //d+)\").text(\"+\".equals(\"+\")",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"(d+.d+)\").text(\"+\") builder builder.number(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\"+\").text\\\"",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\"+\".equals(\"+\")",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // longitude type .number(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m m+)\").text(\"+\".equals(\"+\")",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // reserved type+)\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //ometer type",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites in m+)",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites in .number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // longitude type .number(\"+\").text\\\"",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\"+\")",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"(d+.d+)\").text(\"+\".equals(d+.d+)\").text(\"+\")\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"(d+.d+)\").text(\"+\") builder builder.number(\"(d+.d+)\").text(\"+\") // reserved\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") // path type",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //\\\"\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"(d+.d+)\").text(\"+\") //Dot type .number(\")).text(\"+\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\").text(\"+\") // reserved\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") //Link type",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites in .number(\"+\").text\\\"",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") // reserved type",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"(d+.d+)\").text(\"+\".equals(\"+\") // 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"(d+.d+)\").text(\"+\".equals(d+.d+)\").text(\"+\") // 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"(d+.d+)\").text(\"(d+.d+)\").text(\"+\") //\"};",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"(d+.d+)\").text(\"+\")OSd+)\").text(\"+\") // reserved\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m+)\").text(\"(d+)\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites in case",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\")OSd+)\").text(\"+\").text\\\"\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // satellites in track",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"(d+.d+)\").text(\"+\") // m m+)\").text(\"(d+)\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"(d+.d+)\").text(\"+\").text(\"+\") //\");",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(d+.d+)\").text(\"+\") // latitude .number(\"(d+.d+)\").text(\"+\") // longitude",
        "fixed_line": ".number(\"(-?d+.d+)\").text(\"+\") // latitude .number(\"(-?d+.d+)\").text(\"+\") // longitude"
    },
    "Bears-95": {
        "fixes": [
            {
                "k": 1,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return entity.getType() != null && !entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return entity != null && !entity.getType().equals(String.valueOf(entity.getType()));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" \");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return entity.getClassLoader() != null && !entity.getType().getClassLoader().equals(\" \");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return entity.getType() != null && !entity.getType().getClassLoader().equals(\" \");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return entity.getType() != null && !entity.getType().getClassLoader().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(String.valueOf(entity.getType()));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return entity != null && !entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return entity.getClassLoader() != null && !entity.getType().getClassLoader().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return entity.getType().getClassLoader() == null && !entity.getType().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return entity.getClassLoader() != null && !entity.getType().getClassLoader().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return entity.getType() != null && !entity.getType().getClassLoader().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return entity != null && !entity.getType().isAssignableFrom(entity.getClass())) ? entity.getClassLoader() : false;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return entity != null && !entity.getType().getClassLoader().equals(\" \");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return entity.getClassLoader() != null && !entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity : false;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getClass().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getId());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getClassLoader() : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return entity.getClassLoader() != null && !entity.getType().getClassLoader().equals(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().isAssignableFrom(entity.getClass())) ? entity.getClassLoader() : false;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return entity.getType() != null && !entity.getType().equals(String.valueOf(entity.getType()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(String.class)) ? entity.getClassLoader() : entity;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getName().equals(\" .lang.Object\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getClassLoader() : entity;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return entity != null && !entity.getType().equals(Entity.getType()) ? entity.getType() : entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getType() : entity;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getClassLoader().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getName().equals(\" \");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .result\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return entity != null && !entity.getType().getClassLoader().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getClassLoader() : false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(Entity.getReturnType())) ? entity.getType() : entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .util.Date\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getName() : entity.getClass().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return entity.getType() != null && !entity.getType().getClassLoader().equals(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getClassLoader().equals(\" \");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getClass().getName().equals(\" \");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(getReturnType());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getType() : entity.getClass().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getType() : entity.getType().equals(\" .lang.Object\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getType().equals(\" .lang.Object\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(String.class)) ? entity.getType() : entity;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getType() : entity.getId());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getType() : entity.getType().equals(\" \");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return entity != null && !entity.getType().equals(Entity.getType())) ? entity.getType() : entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return entity.getType() != null && !entity.getType().getName().startsWith(\" -\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return entity.getType() != null && !entity.getType().getName().startsWith(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getName() : false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getClassLoader().equals(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getType().equals(\" \");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(String.valueOf(entity)) ? entity.getType() : entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getDeclaringClass().equals(entity.getReturnType()) : entity.getType().getClassLoader());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId().equals(entity.getReturnType()) : entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return entity.getType() != null && !entity.getType().getName().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getId().equals(entity.getModifiers());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return entity.getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return entity != null && !entity.getType().getClassLoader().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getType().equals(entity.getReturnType());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getType().equals(entity.getReturnType()) : entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getType().equals(entity.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(String.valueOf(entity));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getId().equals(\" .lang.Object\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getType() : entity.getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(String.class)) ? entity.getClassLoader() : entity.getType().equals(\" \");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getName() : entity;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" -\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getType().equals(entity.getModifiers());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().isCollection()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return entity.getType() != null && !entity.getType().getClassLoader().startsWith(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().isAbstract()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getDeclaringClass().equals(entity) : entity.getType().getClassLoader());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.isType() : false;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .io.File\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getType() : false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return entity.getClassLoader() != null && !entity.getType().getClassLoader().equals(\" .lang.Object\")) ? entity.getId() : false;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return isTypeInjectable(entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return entity.getClassLoader() != null && !entity.getType().getClassLoader().equals(\" .lang.Object\")) ? entity : false;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getName() : entity.getClass().getName().equals(\" \");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return entity.getClassLoader() != null && !entity.getType().getClassLoader().startsWith(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return entity.getType() != null && !entity.getType().getClassLoader().startsWith(\" -\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getDeclaringClass().equals(entity.getReturnType()) : entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId().equals(entity.getModifiers()) : entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getDeclaringClass().equals(entity.getReturnType()) : entity.getType().getName().equals(\" \");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getName().startsWith(\" .lang.Object\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return entity.getType().getName() != null && !entity.getType().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(String.valueOf(entity)));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getClass().getName().equals(getSimpleName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getType().equals(entity.getFullName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getName() : entity.getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getId() : entity.getId().equals(getModifiers());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().equals(\" .lang.Object\")) ? entity.getClass().getName() : null;",
                "identical": false
            }
        ],
        "buggy_line": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\"java\");",
        "fixed_line": "Class<?> type = entity.getType(); return type.getClassLoader() != null && (type.getPackage() == null || !type.getPackage().getName().startsWith(\"java\"));"
    },
    "Bears-234": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "(debitedAccountWrapper != null) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "(debitedAccountWrapper != null) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "(debitedAccountWrapper != null) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccountWrapper, amount);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount) : creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "(debitedAccountWrapper != null) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount)) ? creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccountWrapper, amount);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount.orElseThrow(creditedAccount, amount);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccountWrapper, amount);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccountWrapper, amount);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount) : creditedAccountWrapper.orElseThrow(debitedAccount::new);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount::new);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Optional Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(creditedAccount) ? creditedAccountWrapper.orElseThrow(creditedAccount, amount) : creditedAccountWrapper.orElseThrow(debitedAccount, amount);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Optional<Account> creditedAccountWrapper = creditedAccountWrapper.orElseThrow(debitedAccount) ? creditedAccountWrapper.orElseThrow(debitedAccount, amount) : creditedAccountWrapper.orElseThrow(creditedAccount.orElseThrow(creditedAccount::new);",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (debitedAccount.isDisabled() || creditedAccount.isDisabled()){ throw new IllegalStateException(\"Account disabled\"); }"
    },
    "Bears-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "startNoEventIndex = Math.min(startNoEventIndex, deviceState.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (startNoEventIndex == -1 && deviceState.getMotionPosition() == startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "startNoEventIndex = i;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.add(calculateEvent(startNoEventIndex, startNoEventIndex, result.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.add(calculatePosition(startNoEventIndex, startNoEventIndex, result.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.add(calculateTripEventIndex(startNoEventIndex, startNoEventIndex, result.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.add(startNoEventIndex(startNoEventIndex, startNoEventIndex, result.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (startNoEventIndex == -1 && deviceState.getMotionPosition() == startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "startNoEventIndex = Math.min(startNoEventIndex, deviceState.getMotionPosition() - startNoEventIndex);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.add(calculateEvent(startNoEventIndex, startNoEventIndex, deviceState.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.add(calculateEvent(startNoEventIndex, startNoEventIndex, endNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.add(calculateEventIndex(startNoEventIndex, startNoEventIndex, result.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "super.add(startNoEventIndex, startNoEventIndex, result.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.add(calculatePosition(startNoEventIndex, startNoEventIndex, endNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "startNoEventIndex = Math.min(startNoEventIndex, deviceState.getMotionPosition() - startNoEventIndex != -1 ? deviceState.getMotionPosition() : -1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "startNoEventIndex = Math.min(startNoEventIndex, startNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.add(calculatePosition(startNoEventIndex, startNoEventIndex, endNoEventIndex, result.getMotionPosition() - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (event.getMotionPosition() - startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} while (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != null && startNoEventIndex > 0 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && startNoEventIndex > startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.add(startNoEventIndex(startNoEventIndex, startNoEventIndex, endNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex) ? 0 : -1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "startNoEventIndex = } else if (event.getMotionPosition() == null || event.getMotionPosition() == null) ? 0 : -1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex) && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() == null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} while (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex ? startNoEventIndex : -1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex || event.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.add(calculateTripEventIndex(startNoEventIndex, startNoEventIndex, endNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex || startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "startNoEventIndex = } else if (event.getMotionPosition() == null || event.getMotionPosition() == null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.add(calculateEvent(startNoEventIndex, endNoEventIndex, startNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != null && startNoEventIndex > 0 && deviceState.getMotionPosition() > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() < deviceState.getMotionPosition() ? startNoEventIndex : -1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex - startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > deviceState.getMotionPosition() && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex || startNoEventIndex != -1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (startNoEventIndex == -1 && deviceState.getMotionPosition() == startNoEventIndex && deviceState.getMotionPosition() == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (event.getMotionPosition() == null || event.getMotionPosition() == null) return startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "startNoEventIndex = Math.min(startNoEventIndex, deviceState.getMotionPosition() - startNoEventIndex != -1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex || event.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > startNoEventIndex + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (startNoEventIndex == -1 && deviceState.getMotionPosition() == startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (startNoEventIndex == -1 && deviceState.getMotionPosition() == startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (event.getMotionPosition() == null || event.getMotionPosition() == null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex) ? 0 : -1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "startNoEventIndex = Math.min(startNoEventIndex, deviceState.getMotionPosition() - startNoEventIndex != -1 ? startNoEventIndex : -1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.add(calculatePosition(startNoEventIndex, startNoEventIndex, endNoEventIndex, startNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > deviceState.getMotionPosition() && startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex || event.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "startNoEventIndex = } else if (event.getMotionPosition() == null || event.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (event.getMotionPosition() - startNoEventIndex == -1 && deviceState.getMotionPosition() < deviceState.getMotionPosition() - startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (event.getMotionPosition() - startNoEventIndex != null && deviceState.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > 0 && deviceState.getMotionPosition() > 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "startNoEventIndex = } else if (event.getMotionPosition() == null || event.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > 0 && startNoEventIndex != -1) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (startNoEventIndex == -1 && deviceState.getMotionPosition() == null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (event.getMotionPosition() - startNoEventIndex == -1 && deviceState.getMotionPosition() < deviceState.getMotionPosition() ? 0 : -1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && startNoEventIndex > startNoEventIndex && deviceState.getMotionPosition() > deviceState.getMotionPosition() && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > deviceState.getMotionPosition() && startNoEventIndex != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != null && startNoEventIndex > 0 && startNoEventIndex != -1) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex > startNoEventIndex) && deviceState.getMotionPosition() == null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (event.getMotionPosition() - startNoEventIndex != null && deviceState.getMotionPosition() < deviceState.getMotionPosition() ? startNoEventIndex : -1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex || event.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > deviceState.getMotionPosition() && startNoEventIndex > 0 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.add(calculateEventIndex(startNoEventIndex, startNoEventIndex, endNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() > deviceState.getMotionPosition() ? startNoEventIndex : -1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() != null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() < deviceState.getMotionPosition() ? startNoEventIndex : -1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (event.getMotionPosition() - startNoEventIndex == -1 && deviceState.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "startNoEventIndex = } else if (event.getMotionPosition() == null || event.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > -1 && deviceState.getMotionPosition() > startNoEventIndex + 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (event.getMotionPosition() - startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "System.out.println(startNoEventIndex + 1, startNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > deviceState.getMotionPosition() && startNoEventIndex > 0 && deviceState.getMotionPosition() > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != null) && startNoEventIndex > 0 && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() == null || event.getMotionPosition() != null)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex || deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex || event.getMotionPosition() < deviceState.getMotionPosition() ? startNoEventIndex : -1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != null) && deviceState.getMotionPosition() > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() > startNoEventIndex ? startNoEventIndex : -1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex || event.getMotionPosition() != null)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() > deviceState.getMotionPosition() && startNoEventIndex > startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (event.getMotionPosition() - startNoEventIndex == -1 && deviceState.getMotionPosition() < deviceState.getMotionPosition() ? 1 : -1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "startNoEventIndex = Math.min(startNoEventIndex, deviceState.getMotionPosition() - startNoEventIndex != -1 ? event.getMotionPosition() : -1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() == null || event.getMotionPosition() == null)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex != null) && startNoEventIndex > 0 && deviceState.getMotionPosition() > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "startNoEventIndex = } else if (event.getMotionPosition() == null || event.getMotionPosition() < deviceState.getMotionPosition() && startNoEventIndex > 0 && deviceState.getMotionPosition() > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (event.getMotionPosition() == null) throw new IllegalArgumentException(\"The end of startNoEventIndex = i; } else if (startNoEventIndex == -1 && deviceState.getMotionPosition() > startNoEventIndex && deviceState.getMotionPosition() == null || event.getMotionPosition() == null)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "startNoEventIndex = Math.min(startNoEventIndex, endNoEventIndex - startNoEventIndex = -1;",
                "identical": false
            }
        ],
        "buggy_line": "if (deviceState.getMotionPosition() != null && startEventIndex == -1 && trips != deviceState.getMotionState()) { startEventIndex = i; startNoEventIndex = -1; } if (trips == deviceState.getMotionState()) { if (startNoEventIndex == -1) { startNoEventIndex = i; } else if (deviceState.getMotionPosition() == null) { startNoEventIndex = -1; }",
        "fixed_line": "if (startEventIndex == -1 && (trips != deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips == deviceState.getMotionState() && event != null)) { startEventIndex = i; startNoEventIndex = -1; } else if (trips != deviceState.getMotionState() && startEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startEventIndex = -1; } if (startNoEventIndex == -1 && (trips == deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips != deviceState.getMotionState() && event != null)) { startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startNoEventIndex = -1;"
    },
    "Bears-102": {
        "fixes": [
            {
                "k": 1,
                "patch": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case 70: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "caseStatusCode: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case 70: position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "caseFallback: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case 70: position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "caseSensitive: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte() + buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "caseci: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "caseStatusCode: position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "caseFallback: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case 21: position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "caseSpec: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case 70: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "casePeer: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case draggable position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "caseStatusCode: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "caseFallback: position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "caseStatusCode: position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case 21: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "casemetric: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case 70: position.set(Position.KEY_RSSI, buf.readUnsignedByte() + buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "caseFallback: position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "caseIpv: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "caseAuthority: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "caseau position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case xls: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "caseedObject position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "caseSensitive: position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "caseStatusCode: position.set(Position.KEY_RSSI, buf.readUnsignedByte() + buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case draggable position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case counter: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "caseci: position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case \"123: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case-23: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "caseSensitive: position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "caseSpec: position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte() & 0x0200));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case 70: position.set(Position.KEY_RSSI, buf.readUnsignedInt() * 0.1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "caseserves: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case IdentValue position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "caseuring position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "casePeer: position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case jackson position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case 21: position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 0.1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case receiving: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedInt() * 0.1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "caseSpec: position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case 60: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case setId: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case upperBound: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case 70: position.set(Position.KEY_ODOMETER, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case Sw position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "casena: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case 70: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case writeInt: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "casesubtype: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "caseDOMAIN: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case507 position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case 123456789 position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case cle position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case simply: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case runOnUiThread position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "caseYPE: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "caseci: position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case Android position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case\\\\\\\\: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "caseau position.set(Position.KEY_RSSI, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case\u239f position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case syntax: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case Unix position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case\u297c position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case 21: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case 70: position.set(Position.KEY_RSSI, buf.readUnsignedByte() & 0x0200));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "caseStatusCode: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case pubkey position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case BE position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case12/ position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "caseystem position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case\ua79d position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case\\\\\\\\ position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "casedataset: position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case\u0442 position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case 70: position.set(Position.KEY_RSSI, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case 21: position.set(Position.KEY_ODOMETER, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "caseDOC position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "casecrop position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte() & 0x0200) != 0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case 70: position.set(Position.KEY_BATTERY, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "caselong position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case inlines position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "caseSensitive: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case-23 position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case draggable position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "casealive position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case Guide position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "casenodejs position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case\u1bb1 position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            }
        ],
        "buggy_line": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break; case 22: position.set(\"profile\", buf.readUnsignedByte()); break; case 66: position.set(Position.KEY_POWER, buf.readUnsignedShort() + \"mV\"); break; case 67: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() + \"mV\"); break; case 70: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
        "fixed_line": "position.set(\"pcbTemp\", (length == 4 ? buf.readInt() : buf.readShort()) * 0.1);"
    },
    "Bears-235": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? null : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "staticAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "staticAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? null : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : accountRepository.findById(accountId);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? null : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount = accountRepository.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "// (forAccount<Account> accountIdAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId::new);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (forAccount<Account> accountIdAccount = accountRepository.findById(accountId) <= wrappedAccount.orElseThrow(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId).orElseThrow(NoSuchElementException::new) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (forAccount<Account> accountIdAccount = accountRepository.findById(accountId) <= wrappedAccount.orElseThrow(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId).orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, locale != null ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(account::new);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? null : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (forAccount<Account> accountIdAccount = accountRepository.findById(accountId) <= wrappedAccount.orElseThrow(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null, wrappedAccount) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(() -> wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : accountRepository.findById(accountId);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, locale != null ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount : accountRepository.findById(accountId);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? null : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(() -> wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(() -> wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : accountRepository.findById(accountId);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.findById(accountId);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.get();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : : wrappedAccount.orElseThrow(accountId, accountId)) ? null : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, locale != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(account::new);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? null : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId).orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (forAccount<Account> accountIdAccount = accountRepository.findById(accountId) <= wrappedAccount.orElseThrow(accountId) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount = accountRepository.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(account::new);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "// (forAccount<Account> accountIdAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, locale != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "staticAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, wrappedAccount::new);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, locale, wrappedAccount::new);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "staticAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : accountRepository.findById(accountId);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null, wrappedAccount) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (forAccount<Account> accountIdAccount = accountRepository.findById(accountId) <= wrappedAccount.orElseThrow(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, wrappedAccount).orElseThrow(NoSuchElementException::new) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(null);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new)) ? wrappedAccount.orElseThrow(account) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "staticAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : accountRepository.findById(accountId);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(errAccount::new);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, locale);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (forAccount<Account> accountIdAccount = accountRepository.findById(accountId) <= wrappedAccount.orElseThrow(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, wrappedAccount).orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null, wrappedAccount) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(() -> wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null, wrappedAccount) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "isAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(account::new);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount : wrappedAccount.orElseThrow(NoSuchElementException::new);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId::new);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId, wrappedAccount::new);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(NoSuchElementException::new) : wrappedAccount.orElseThrow(accountId, accountId)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(NoSuchElementException::new)) ? wrappedAccount.orElseThrow(null) : wrappedAccount.orElseThrow(account::new);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "staticAccountAccount<Account> wrappedAccount = accountRepository.findById(accountId) != null ? wrappedAccount.orElseThrow(accountId) : wrappedAccount.orElseThrow(accountId);",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (hasAnyChildrenAccountEnabled(account)){ throw new IllegalStateException(\"Children accounts enabled\"); } account.setDisabled(true); accountRepository.save(account); } private boolean hasAnyChildrenAccountEnabled(Account account){ return account.getChildren().stream() .filter(a -> !a.isDisabled()) .findAny() .isPresent(); }"
    },
    "Bears-108": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd\";",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd]\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd\";",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd]\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)]\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd\")));",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd\")));",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)]\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)]\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd\")));",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd]\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"(dd)(dd)(dd)(dd\";",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d+)\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(l]\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(d+)\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d+?)\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"Sdd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\";",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"Sdd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(d+?)\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(l]\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(l]\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(address)\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd);",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"(dd)(dd)(dd)(dd]\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd');",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d({\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(address)\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)]\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(d+)\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(d+?)\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd');",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(address)\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"Sdd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\")));",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(d+)\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\";",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"(dd)(dd)(dd)(dd\")));",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"Sdd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(d+?)\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(d+)\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)]\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"(?:NAN|(d+):):</Sdd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(d+):\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"(?:NAN|(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d+?)\";",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d+):\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"(dd)(dd)(dd)(address)\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"(?:NAN|(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd);",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd).number(\"([\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\")));",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"(?:NAN|(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"([([dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"(dd)(dd)(dd)(dd);",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"(?:NAN|(d+):</Sdd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd).number(\"d+):\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(d+)\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(d+?)\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"(?:NAN|(d+):</Sdd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd).number(\"d+):\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"(?:NAN|(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(d+):):</Sdd)(dd)(dd)(dd)(dd\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"(dd)(dd)(dd)(dd)(dd)(dd)(dd)(d+?)\";",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(dd)(dd)(dd):\") // time (hhmmss) .number(\"(-?d+.d+):\") // longitude .number(\"(-?d+.d+):\") // latitude .number(\"(d+.?d*):\") // speed .number(\"(?:NAN|(d+.?d*)):\") // accuracy .number(\"(?:NAN|(d+.?d*)):\") // course .number(\"(?:NAN|(d+.?d*))\") // altitude",
        "fixed_line": ".number(\"(dd)(dd)(dd)\") // time (hhmmss) .number(\":(-?d+.d+)\") // longitude .number(\":(-?d+.d+)\") // latitude .number(\":(d+.?d*)\") // speed .number(\":(?:NAN|(d+.?d*))\") // accuracy .number(\":(?:NAN|(d+.?d*))\") // course .number(\":(?:NAN|(d+.?d*))\").optional() // altitude"
    },
    "Bears-135": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (endIndex >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (endIndex > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (endIndex != -1) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (endIndex > 0 && endIndex < 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (endIndex > 0 || endIndex < 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (endIndex > 0 && endIndex < buf.writerIndex() - 1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (beginIndex > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (endIndex > 0 && endIndex != buf.writerIndex()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && endIndex == 0 && endIndex == 0 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (endIndex > endIndex || endIndex < 0 || endIndex < 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && endIndex == 0 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.writerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() - 1) : buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && endIndex == 0 && endIndex == 0 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && endIndex == 0 && endIndex == 0 && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && endIndex == 0 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() - 1) : buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (endIndex > 0 && endIndex != 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (endIndex > 0 && endIndex != -1) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && endIndex == 0 && endIndex == 0 && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && endIndex == 0 && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xfb && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (endIndex > 0 && endIndex != 0 && buf.getByte(buf.readerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(startIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() - 1) : buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (endIndex > 0 && endIndex != 0 && buf.readableBytes() > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.writerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && endIndex == 0 && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(beginIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(beginIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(startIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (endIndex > endIndex || endIndex > 0 || endIndex < 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xfb && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() : buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(startIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(beginIndex - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == buf.writerIndex()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (endIndex > 0 && endIndex != 0 && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() + 1) : buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex()) : buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() - 1) : buf.writerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(buf.readerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && endIndex == 0 && endIndex == 0 && buf.getByte(buf.readerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.writerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.readerIndex() + 2) == 0xfb) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && endIndex == 0 && endIndex == 0 && buf.getByte(buf.readerIndex() + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(beginIndex + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(buf.readerIndex() + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(startIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (endIndex > 0 && buf.readableBytes() >= 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() + 1) : buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() - 1) : buf.readerIndex() + 2) == 0xfb) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(beginIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (endIndex > endIndex || endIndex < 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(buf.readerIndex() + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.getByte(beginIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() - 1) : buf.writerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.writerIndex() - 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == buf.writerIndex() - 1) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() - 1) : buf.writerIndex() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (endIndex > endIndex || buf.readableBytes() >= 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && endIndex == 0 && endIndex == 0 && buf.getByte(buf.readerIndex() + 1) == buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.writerIndex() + 1) : buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == buf.writerIndex()) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.getByte(buf.readerIndex() - 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xf ? buf.getByte(buf.readerIndex() + 1) : buf.writerIndex() - 1) == -1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (beginIndex > 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex > 0) {",
        "fixed_line": "if (beginIndex >= 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex >= 0) {"
    },
    "Bears-183": {
        "fixes": [
            {
                "k": 1,
                "patch": "return queryAll(entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return queryAll(entityClass, pageable, null, pageable);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return query(entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return queryAll(entityClass, pageable, pageable);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return queryAll(entityClass, pageable, null, null);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return queryAll(entityClass, value, pageable, null);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass : pageable);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return queryAll(entityClass, id, pageable, null);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return queryAll(entityClass, pageable, null, pageable, null);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return queryAll(entityClass, id, null, pageable);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return query(entityClass, pageable, null, pageable);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getCount() : null);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return queryAll(entityClass, pageable, this.entityClass, pageable);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 1 ? null : null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return queryAll(entityClass, pageable, null).find(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getDeclaringClass() : null);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return queryAll(entityClass, pageable, null).copy(entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return queryAll(entityClass, pageable, pageable, null);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass : pageable, null);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return queryAll(entityClass, pageable, null, pageable) != null ? entityClass : pageable);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return queryAll(entityClass, pageable, null, pageable != null ? entityClass : pageable);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return queryAll(entityClass, pageable, null, pageable == null ? null : entityClass, pageable);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getSimpleName() : null);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return queryAll(entityClass, pageable, null, pageable) != null ? entityClass : null);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.get(entityClass, pageable) : null);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return queryAll(entityClass, pageable, null).copy(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName())) ? null : entityClass.getName(), pageable);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return queryAll(entityClass, pageable, null, null, pageable);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return queryAll(entityClass, id, null, pageable, null);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return queryAll(entityClass, pageable, null, pageable) != null ? entityClass : pageable;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getEntity(entityClass, pageable) : null);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return queryAll(entityClass, query, pageable, null);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass, pageable).getCount() ? pageable.getCount() : null);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return queryAll(entityClass, id, null);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass, pageable.getCount() ? pageable) : null);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName())) ? null : entityClass, pageable);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass.getCount() ? pageable) : null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName())) ? null : entityClass.getName(), pageable, null);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return queryAll(entityClass, pageable, null, pageable != null ? entityClass.getCount() : null);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return queryAll(entityClass, pageable, null ? entityClass : pageable);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return queryAll(pageable, pageable, null);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return queryAll(entityClass, pageable, null).update(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName())) ? null : entityClass.getSimpleName(entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName())) ? null : entityClass.getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getEntityClass() : null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return queryAll(entityClass, pageable, null).from(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName())) ? null : entityClass.getSimpleName(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getEntityClass() == null ? null : entityClass, pageable);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return queryAll(entityClass, pageable, null, pageable) != null ? entityClass.getCount() : null);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 0 ? null : entityClass, pageable);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getSimpleName())) ? null : entityClass.getName(), pageable, null);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 1 ? null : entityClass, pageable);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 1 ? null : pageable);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return queryAll(entityClass, pageable, null, pageable) == null ? null : entityClass.getSimpleName());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName())) ? null : entityClass.getSimpleName(), pageable, null);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.equals(entityClass.getSimpleName())) ? null : entityClass.getSimpleName(entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return queryAll(entityClass, entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getCount() : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName())) ? null : entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass : pageable.getEntityClass());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getReturnType() : null);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 1 ? this.entityClass : null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass : pageable.getQuery(entityClass, pageable));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return queryAll(entityClass, pageable, null, pageable) != null ? entityClass.getDeclaringClass() : null);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass, pageable) ? this.entityClass : null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getSimpleName())) ? null : entityClass.getName(), pageable);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass : pageable.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass : pageable.getRepositoryMethod(entityClass, pageable));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getSimpleName())) ? null : entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return queryAll(entityClass, pageable, null, pageable != null ? entityClass : null);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.get(entityClass, pageable) : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return queryAll(entityClass, pageable, null).collect(Collectors.toList());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return queryAll(entityClass, pageable, null).getResultList();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return queryAll(entityClass, pageable, null, pageable) == null ? null : entityClass.getSimpleName(), pageable, null);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.equals(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getMethod() : null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 0 ? null : entityClass.getName(), pageable, null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass : null);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass.getName() : null);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getSimpleName())) ? null : entityClass.getSimpleName(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.equals(entityClass.getSimpleName())) ? null : entityClass.getSimpleName(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass.getSimpleName())) ? this.entityClass() : entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass.getSimpleName())) ? null : entityClass.getSimpleName(), pageable, null);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass, pageable) ? this.entityClass : entityClass, pageable);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.equals(entityClass.getSimpleName())) ? null : entityClass.getSimpleName(), pageable, null);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 1 ? null : entityClass.getName()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getSimpleName())) ? this.entityClass() : entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return queryAll(entityClass, pageable, null != null ? entityClass : pageable).getQuery(entityClass, pageable);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 1 ? this.entityClass : entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass, pageable) ? this.entityClass.getCount() : null);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 1 ? null : entityClass.getName(), pageable);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return queryAll(entityClass, pageable, null, pageable == null ? null : entityClass.getSimpleName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return queryAll(entityClass, pageable, null, pageable == null ? null : entityClass.getName()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return queryAll(entityClass, pageable, null, pageable.getCount() == 0 ? null : entityClass.getName()));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getSimpleName())) ? null : entityClass.getSimpleName(), pageable, null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return queryAll(entityClass, pageable, null, pageable == null ? null : entityClass);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.getName().equals(entityClass.getName()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return queryAll(entityClass, pageable, null, pageable).getCount() == 1 && this.entityClass.isAssignableFrom(entityClass.getSimpleName()) ? pageable.getSimpleName() : null);",
                "identical": false
            }
        ],
        "buggy_line": "return queryAll(entityClass, pageable, null);",
        "fixed_line": "return queryAll(entityClass, pageable, new SpannerQueryOptions() .setOffset(pageable.getOffset()).setLimit(pageable.getPageSize()));"
    },
    "Bears-127": {
        "fixes": [
            {
                "k": 1,
                "patch": "decodeStatus(position, buf.readUnsignedShort(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "getLastLocation(position, buf.readUnsignedShort(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "decodeStatus(position, buf.readUnsignedByte(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "buf.readUnsignedShort(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "getLastLocation(position, buf.readUnsignedShort(), buf.readUnsignedInt())));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "decodeStatus(position, buf.readUnsignedShort(), buf.readUnsignedByte())));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "decodeStatus(position, buf.readUnsignedShort(), buf.readUnsignedInt())));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "buf.readUnsignedByte(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x0A : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "getLastLocation(position, buf.readUnsignedShort(), buf.readUnsignedInt() - 0x01);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setStatus(Position.KEY_RSSI, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0xFE) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x0A : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "getLastLocation(position, buf.readUnsignedInt(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x0A : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "buf.readUnsignedByte(), buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedByte())));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x0A : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte() == 0x01;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x08;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "getLastLocation(position, buf.readUnsignedShort(), buf.readUnsignedByte())));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setStatus(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "buf.readUnsignedByte() == 0x0A ? 0x01 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "buf.readUnsignedByte() == 0x0A ? 0x01 : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "decodeStatus(position, buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "getLastLocation(position, buf.readUnsignedByte(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setStatus(Position.KEY_SATELLITES, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0xFE structure : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "decodeStatus(position, buf.readUnsignedShort(), buf.readUnsignedInt() - 0x01);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0xFE) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "buf.readUnsignedByte() == 0x01) ? 0 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte(), buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte() == 0x01);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "buf.readUnsignedByte() == 0x00 ? 0x0A : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "decodeStatus(position, buf.readUnsignedByte(), buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x01 : buf.readUnsignedByte() == 0x01;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedShort() - 0x01);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedMedium())));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedInt();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0xFE structure) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "decodeStatus(position, buf.readUnsignedByte(), buf.readUnsignedByte())));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setStatus(Position.KEY_STATUS, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "getLastLocation(position, buf.readUnsignedShort(), buf.readUnsignedMedium())));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0x01 : buf.readUnsignedByte() == 0x01;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0x0A : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "buf.readUnsignedByte() == 0x01 && buf.readUnsignedByte() == 0x01;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x01 : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x020 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0xFE structure) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "decodeStatus(position, buf.readUnsignedShort(), buf.readUnsignedMedium())));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "buf.readUnsignedByte(), buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x08;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "buf.readUnsignedByte() == 0x00 ? 0x0A : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x020 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x02;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "buf.readUnsignedShort(), buf.readUnsignedByte())));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x0C : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0xFE) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "buf.readUnsignedInt() == 0x01 && buf.readUnsignedByte() == 0x01;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "getLastLocation(position, buf.readUnsignedInt(), buf.readUnsignedInt() - 0x01);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x08;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "buf.readUnsignedByte() == 0x01) ? 0 : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x00, 0x01 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "decodeStatus(position, buf.readUnsignedByte(), buf.readUnsignedInt());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setStatus(Position.KEY_STATUS, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x0A : buf.readUnsignedShort() - 0x01);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0xFE structure) : buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0xFE) : buf.readUnsignedByte() == 0x01;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte(), buf.readUnsignedMedium());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x01 : buf.readUnsignedByte() == 0x01);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "buf.readUnsignedByte() == 0x00 ? 0x01 : buf.readUnsignedByte() - 0x01);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "decodeStatus(position, buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedShort())));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "buf.readUnsignedByte() == 0x05) ? 0 : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedInt() - 0x01);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedByte() - 0x07);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0xFE structure : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0x0A : buf.readUnsignedByte() - 0x01;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x01 : buf.readUnsignedShort() - 0x01);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "buf.readUnsignedInt() == 0x01 ? 0x01 : buf.readUnsignedByte() == 0x01);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "buf.readUnsignedByte() == 0x01 ? 0x01 : buf.readUnsignedByte(), buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "getLastLocation(position, buf.readUnsignedShort(), buf.readUnsignedInt()));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0x01 : buf.readUnsignedShort() - 0x01;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "buf.readUnsignedShort() == 0x01 ? 0xFE) : buf.readUnsignedShort();",
                "identical": false
            }
        ],
        "buggy_line": "decodeStatus(position, buf.readUnsignedShort());",
        "fixed_line": "if (buf.readableBytes() >= 2) { decodeStatus(position, buf.readUnsignedShort()); }"
    },
    "Bears-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "return null;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (df == null) ? null : _property.getFormat();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (format != null) ? format.getFormat() : null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_format != null ? format.getFormat() : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.identifier.property.notfound\", property));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _type));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, base));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.property.notfound\", property));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (df == null) ? null : df.equals(property.getFormat());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.notfound\", property));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Feature.UNWRAP_SINGLE_VALUE_ARRAYS;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (tz == null) ? null : _parseDate(date, new ParsePosition(0));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.notfound\", property, _type));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.identifier.property.notfound\", property, _type));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _property));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (df == null) ? null : _format.getFormat();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.property.notfound\", property, _type));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (df == null) ? null : _parseDate(date, new ParsePosition(0));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Feature.UNWRAP_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (df == null) ? null : _suppressFormat.equals(property.getFormat());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "_nullFormat = format != null ? format.getFormat() : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_nullFormat = format != null ? format.getFormat() : JsonFormat.Feature.UNWRAP_SINGLE_VALUE_ARRAYS;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (format != null) ? format.getShape() : JsonFormat.Feature.UNWRAP_SINGLE_VALUE_ARRAYS;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new JsonFormat(format, property, _typeSerializer);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_nullFormat = format != null ? format.getFormat() : JsonFormat.Feature.UNWRAP_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape(property).getFormat(), df);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _type.getRawClass()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.pattern.notfound\", property));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _type.getName()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.identifier.property.notfound\", property, base));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (format != null) ? format.getShape() : JsonFormat.Shape(locale, _valueClass, pattern);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.notfound\", property, _type.getRawClass()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (format != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", \"null\", base));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.pattern.notfound\", property, _property));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.identifier.property.notfound\", property, _property));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new JsonFormat(this, property, _typeSerializer, df);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (format != null) ? format.getShape() : JsonFormat.Feature.UNWRAP_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.pattern.notfound\", property, _type));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.notfound\", property, _property));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (format != null) ? format.getShape() : JsonFormat.Shape(provider, property);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.identifier.property.notfound\", property, _type.getRawClass()));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape.NULL_FORMAT_STR_ISO8601;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (dateFormat != null) ? format.getFormat() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape((String) format).getFormat());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (df == null) ? null : df.getFormat();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.property.notfound\", property, _type.getRawClass()));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "throw new IllegalArgumentException(String.format(\"Missing format format for %s: %s\", property));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape.END_ARRAY;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.notfound\", property, base));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (format != null) ? format.getShape() : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.property.notfound\", property, base));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape.UNION_FORMAT_STR_ISO8601;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, e);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "throw new IllegalArgumentException(String.format(\"Missing format format: %s\", property));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (format != null) ? format.getShape() : JsonFormat.UNION_FORMAT_STR_ISO8601;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new JsonFormat(this, property, _typeSerializer);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (df == null) ? null : df.format(date);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (format != null) ? format.getShape() : JsonFormat.Shape((String) format).getFormat());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.property.notfound\", property, _property));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (df == null) ? null : _serializer.equals(property.getFormat());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_format = format.findFormat(property);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "_format != null ? format.getFormat() : JsonFormat.END_ARRAY;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new JsonFormat(this, property, _valueTypeSerializer, df);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _valueClass));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _format));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (format != null) ? format.getShape() : JsonFormat.Shape(locale, _property);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return JsonFormat.Value format;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (df == null) ? null : _classIfExplicit(property);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape.OBJECT_AS_NULL;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.property.notfound\", property, _type.getName()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (df == null) ? null : df.toString();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_format != null ? format.getShape() : JsonFormat.Shape.END_ARRAY;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape(property.getFormat(), df);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (tz == null) ? null : _property.getFormat();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.format.notfound\", property));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _type.getSimpleName()));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (format == null) ? null : _suppressFormat.equals(property.getFormat());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape.UNWRAP_SINGLE_VALUE_ARRAYS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (format == null) ? format.getFormat() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.identifier.property.notfound\", property, _type.getName()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _type.getConfig()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Shape.UNWRAP_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.notfound\", property, _type.getName()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, base.getClass()));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", \"Missing format format:mm:ss\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _type);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (df == null) ? null : df.clone();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.locale.notfound\", property));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, unwrap));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "_format != null ? format.getFormat() : JsonFormat.Feature.UNWRAP_SINGLE_VALUE_AS_ARRAYS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new JsonFormat(format, property);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "_nullFormat = format != null ? format.getFormat() : JsonFormat.Shape(property).getFormat(), df);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, _typeSerializer));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (format == null) ? null : _property.getFormat();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (format == null) ? null : _format.getFormat();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (df == null) ? null : _format.getTime();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "throw new JsonMappingException(LocalMessages.get(\"error.property.method.notfound\", property, null));",
                "identical": false
            }
        ],
        "buggy_line": "if (property != null) { JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format != null) { // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) { TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this;",
        "fixed_line": "if (property == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky.. // First: custom pattern will override things if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } // Otherwise, need one of these changes: final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); // Jackson's own `StdDateFormat` is quite easy to deal with... if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } // 08-Jun-2017, tatu: Unfortunately there's no generally usable // mechanism for changing `DateFormat` instances (or even clone()ing) // So: require it be `SimpleDateFormat`; can't config other types if (!(df0 instanceof SimpleDateFormat)) { // serializers.reportBadDefinition(handledType(), String.format( serializers.reportMappingProblem( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { // Ugh. No way to change `Locale`, create copy; must re-crete completely: df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df);"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (data.length > 5) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (data.length > 4) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (data.length > 10) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (data.length < 3) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (data.length > maxLen) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (data.length > 16) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (data.length > 2 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (data.length > 7) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (data.length < 5) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (data.length > 1 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (data.length > 9 && position.get(\"taximeter\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (data.length > 1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (data.length > 4 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (data.length > 1 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (data.length > 8 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (data.length > 2 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (data.length > 5 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (data.length > 20) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (data.length > 5 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (data.length > 10 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (data.length < 4) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (data.length > 9 && data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (data.length > maxLines) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (StringUtils.isNotEmpty(data)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (data.length > 10 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (data.length > 9 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (data.length > 2 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (data.length > 64) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (data.length > 1 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (this.mode == QuoteMode.NONE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (data.length > 3) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (data.length > 1 && position[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (data.length > 2) {",
                "identical": true
            },
            {
                "k": 35,
                "patch": "if (data.length > 6 || data.length > 5) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (data.length == 3) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (data.length > 2 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (data.length > 8 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (data.length > 5 && position.get(\"taximeter\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (data.length > maxLinesLength) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (data.length > maxLinesLength && data.length > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (data.length > 5 && position[0] > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (data.length > maxLinesLength && data[0] != 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (data.length > 9) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (data.length > 10 && position[0] > 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (data.length > 4 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (data.length > 12) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (data.length > 2 && data[0] != 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (data.length > 6) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (StringUtils.isNotBlank(data)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (data.length > 9 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (data.length > 4 && data[0] > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (data.length > 10 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\") && data.length > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (data.length == 4) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (data.length > 2 && position[0] > 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (this.mode == CONTENT_LIST) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (data.length > 9 && data.length > 5) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (data.length > maxLines || data.length == 5) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (data.length > 9 && position.get(data[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (data.length > 10 && position.get(\"taximeter\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (data.length > 9 && position.get(\"taximeter2\") != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (data.length > 1 && position.get(\"taximeter\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (data.length > 9 && position.get(\"taximeter2\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (data.length > 1 && data[0] != 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (data.length > 8 && data[0] > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (data[i] != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (data.length >?\" && data[0] != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (data.length > 6 || data.length == 5) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (data.length > 1 && position[0] > 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (data.length > 5 && position.get(\"multi\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (data.length > maxLines || data.length > 5) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (data.length > 5 && !data.isEmpty()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (data.length > 360) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (StringUtils.isNotEmpty(data) && position.isNull() == false) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (data.length != 4) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (data.length > 7 && position.get(\"taximeter\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (data[i] != 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (data.length > 15 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (protocol == 0 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (StringUtils.isNotEmpty(data) && position.isEmpty()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (data.length > 9 && position.get(data[0] != null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (data.length > 2 && data[0] > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (data.length > 5 && position[0] != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (data.length != 5) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (data.length > 6 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (StringUtils.isNotEmpty(data) && position.get(\"multi\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (data.length > maxdepth) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (data.length > maxLinesEnd) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (data.length > MAX_SIZE) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (data.length > 5 && data[0] > 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (Context.getConfig().getBoolean(\"database.saveEnd\") && data.length == 4) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (data.length > 5 && data[0] != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (StringUtils.isNotEmpty(data) && position.length > 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (data.length > max) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (data.isEmpty()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (StringUtils.isNotEmpty(data) && data[0] != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (data.length > maxLines()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (data.length > 16 && position.get(\"taximeter\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (data.length > 1)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-159": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? \",Formatter.ofPattern(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\";",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final DateFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS_FORMAT_PATTERN\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN).toString();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT_PATTERN : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"\",Formatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"yyyy-MM-dd HH:mm:ssZ\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \",\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? \",Formatter.ofPattern(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String TS_FORMAT_PATTERN = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ss\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\", \"TS-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter TS_FORMAT_PATTERN : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"\",Formatter.ofPattern(TS_FORMAT_PATTERN));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN); }",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN != null ? \",Formatter.ofPattern(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final DateTimeFormatter TS_FORMAT = public static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, String.valueOf(TS_FORMAT_PATTERN));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, DEFAULT_PATTERN);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toString());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, StringUtils.hasText(TS_FORMAT_PATTERN)) ? \"yyyy-MM-dd HH:mm:ss.toDate(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "protected static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, StringUtils.hasText(TS_FORMAT_PATTERN)) ? \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, StringUtils.hasText(TS_FORMAT_PATTERN)) ? \"yyyy-MM-dd HH:mm:ss\" : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? \",Formatter.ofPattern(TS_FORMAT_PATTERN) : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? \",Formatter.ofPattern(TS_FORMAT_PATTERN) : static final DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter TS_FORMAT : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.replaceAll(\"TS-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN) : static final DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : static final DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, 0, 1, true);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : static final DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN).format(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, StringUtils.hasText(TS_FORMAT_PATTERN)) ? \"yyyy-MM-dd HH:mm:ss.toDate\" : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, 2);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ss.format(TS_FORMAT_PATTERN) ? \",Formatter.ofPattern(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN) : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate() : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final DateTimeFormatter TS_FORMAT = \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.format(TS_FORMAT_PATTERN));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\", \"A-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, null) : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : static final DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN, \"TS-MM-dd HH:mm:ssZ\")) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? \",Formatter.ofPattern(TS_FORMAT_PATTERN) : String.valueOf(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) : \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toHeader(TS_FORMAT_PATTERN));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter TS_FORMAT : DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toDate(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN)) ? DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN.toEpochMilli(TS_FORMAT_PATTERN) : null;",
                "identical": false
            }
        ],
        "buggy_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
        "fixed_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss[.S]\"; private static final DateTimeFormatter TS_FORMAT = new DateTimeFormatterBuilder() .appendPattern(\"yyyy-MM-dd HH:mm:ss\") .appendFraction(ChronoField.MICRO_OF_SECOND, 0, 6, true) .toFormatter();"
    },
    "Bears-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (name.length() == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (name.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (name.length == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (_enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (name.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (name.length() == 1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (c == '+' || c == '-') { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (name.length() == 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c == _enumsByIndex) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (name.length() == 1 && _enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (name.length() == 1 && _enumsByIndex >= name.length) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (name.length() == _enumsByIndex) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (name.length() == 1 && _enumsByIndex.isAssignableFrom(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (name.length() == 1 && _enumClass.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (_enumsByIndex >= name.length) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (name.length() == 1 && _enumsByIndex >= _enumsByIndex.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS_AS_NULL_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (_enumsByIndex != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (!name.isAssignableFrom(c)) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_ARRAYS_AS_NULL_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (_enumsByIndex.length == 1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (name.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (name.length <= MAX_SHARED_STRING_VALUES) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (name.isEnum()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (name.length() == 1 && _enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (name.length == 0) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (name.isAssignableFrom(c)) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (name.length <= MAX_VALUE_STRING_AS_NULL) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_UNKNOWN_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (name.length <= MAX_SHARED_STRING_AS_NULL) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_ARRAYS_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (name.length() == 1 && _enumsByIndex[0] == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (name.length() >= _enumsByIndex.length) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (name.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (name.length() == 1 && _enumClass.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if ((_enumsByIndex = _enumsByIndex.length - 1) == 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (name.length() == 1 && _enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (name.length() == 1 && _enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (name.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (name.length() == 1 && _enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (name.length <= MAX_SHARED_STRING_LENGTH_NUMBERS_FOR_ENUMS) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (name.length() == 1 && _enumsByIndex >= 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_STRING_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (name.length() == 1 && _enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (name.length() == 0) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (_enumsByIndex >= _enumsByIndex.length) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (name.isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (name.length() >= 1 && _enumsByIndex[0] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (name.length() == 1 && _enumsByIndex >= name.length()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (name.length() == 1 && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS_AS_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (name.length() >= 1 && ctxt.isEnabled(DeserializationFeature.ACCEPT_UNKNOWN_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (name.length() == 1 && !_enumsByIndex.isAssignableFrom(DeserializationFeature.ACCEPT_FLOAT_AS_NULL_INT)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (name.length <= MAX_SHARED_STRING_VALUE_NUMBERS_FOR_ENUMS) {",
                "identical": false
            }
        ],
        "buggy_line": "} else { // [databind#149]: Allow use of 'String' indexes as well char c = name.charAt(0); if (c >= '0' && c <= '9') { try { int index = Integer.parseInt(name); if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { return ctxt.handleWeirdNumberValue(_enumClass(), index, \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\" ); }",
        "fixed_line": "} else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (!Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (Context.getConfig().hasKey(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (Context.getConfig() == null || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Context.getDataManager() != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (Context.getContext().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (channel != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (Context.getConfig() != null || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Context.getDataManager().isBoolean() && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (Context.getContext().getMode() == Mode.ENTER || context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Context.getDataManager().isValidValid(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (Context.getDataManager().equals(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (Context.getConfig().isBoolean() && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (Context.getConfig().isBoolean() && channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && channel != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (Context.getMessageManager().isValid(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Context.getDataManager().isBoolean() && channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (Context.getConnectionManager().isValid(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Context.hasConfig() && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Context.isConfig() && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (Context.getDataManager().getDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Context.getDataManager().equals(\"decoder\") || uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Context.getDataManager().isValidPosition(channel, remoteAddress, uniqueIds) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && protocol.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (Context.getConfig().isBoolean() && protocol.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds) && context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Context.getConfig().isBoolean() || uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) == Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && Context.getConfig().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Context.getConfig().getType().equals(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Context.getConfig().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (Context.getDataManager().equals(\"decoder\") || uniqueIds.length == 0 && uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (Context.getDataManager().isDeviceById(channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) throw new IllegalStateException(\"decoder.ignoreSessionCache() != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || uniqueIds.contains(\"decoder\") || uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (Context.getConfig().isBoolean() && uniqueIds.contains(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || uniqueIds.contains(\"decoder\") || uniqueIds.length == 0 && uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) == Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (Context.getDataManager().isBoolean() && uniqueIds.contains(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) throw new IllegalArgumentException(\"decoder.ignoreSessionCache() != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || uniqueIds.contains(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Context.getConfig() != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) instanceof Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (Context.getDataManager().equals(\"decoder\") || uniqueIds.length == 0 && uniqueIds.length == 0 && uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Context.getDataManager().getDeviceById(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && Context.getConfig().hasKey(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Context.getContext().getMode() == Mode.ENTER || context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) != 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && protocolList(channel, remoteAddress, uniqueIds) != null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache() != null && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) throw new ActivitiIllegalArgumentException(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || uniqueIds.equals(\"decoder\") || uniqueIds.length == 0 && uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Context.getConfig().isBoolean() || uniqueIds.equals(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && uniqueIds != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Context.getConfig().isBoolean() || uniqueIds.contains(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if(Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") && protocolList(channel, remoteAddress, uniqueIds) == null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (Context.getMessageSourceService().getDeviceById(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Context.getDataManager().isValid(channel, remoteAddress, uniqueIds) && Context.getConfig().getLong(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && !channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) throw new IllegalStateException(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || uniqueIds.contains(\"decoder\") || uniqueIds.length == 0 && uniqueIds.length == 0 && context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Context.getConfig().getDataManager().equals(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) == null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().hasKey(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ((Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) != null && channel.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\") || uniqueIds.contains(\"decoder\") || uniqueIds.length != 0 && uniqueIds.length == 0 && Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Context.getConfig() != null && Context.getConfig().getBoolean(\"decoder.ignoreSession().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Context.getConfig().getContext().getBoolean(\"decoder.ignoreSessionCache\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final long serialVersionUID = 1L;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final long addArrivedRecordsInput(lbContext, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final long addArrivedRecordsInput(ACCESS_OBJECT, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final int addArrivedRecordsInput(lbContext, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static int addArrivedRecordsInput(lbContext, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final long addArrivedRecordsInput(this, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final int addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static Logger addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final long addArrivedRecordsInput(baseResponses, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final int addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static Logger addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static int addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static int addArrivedRecordsInput(ProcessRecordsInput);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final int addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final long addArrivedRecordsInput(RELATED_CONTENT_SIZE, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static int addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static int addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final long addArrivedRecordsInput(this, requestedResponses, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static int addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private private static final long serialVersionUID = 1L;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static Logger addArrivedRecordsInput(lbContext, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final int addArrivedRecordsInput(this, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static int addArrivedRecordsInput(this, requestedResponses, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static int addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static Logger addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static Logger addArrivedRecordsInput(ProcessRecordsInput) processRecordsInput;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final long addArrivedRecordsInput( requestedResponses, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static int addArrivedRecordsInput(this, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throws InterruptedException(processRecordsInput);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final long addArrivedRecordsInput(try, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "protected synchronizedprocessRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final long processRecordsInput = new InterruptedException<>();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException(processRecordsInput);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static int addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final long addArrivedRecordsInput(ACCESS_OBJECT, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) processRecordsInput;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final int addArrivedRecordsInput(null, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final long addArrivedRecordsInput(this, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static Logger addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final long serialVersionUID = -1L;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput) processRecordsInput;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final long addArrivedRecordsInput(lastRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final long addArrivedRecordsInput(lbContext, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final int addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final long addArrivedRecordsInput(baseResponses, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final long addArrivedRecordsInput(ACCESS_OBJECT, processRecordsInput);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static Logger addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final void addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final long addArrivedRecordsInput(RELATED_CONTENT_SIZE, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static Logger addArrivedRecordsInput(ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final long addArrivedRecordsInput( processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput) throwsShardRecordsInput;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final int addArrivedRecordsInput(this, requestedResponsesInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final long addArrivedRecordsInput( requestedResponses, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final int addArrivedRecordsInput(resourceRecordsInput);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static int addArrivedRecordsInput(this, requestedResponsesInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput : new InterruptedException() {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private final synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final long processRecordsInput = new InterruptedException();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private final synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final long addArrivedRecordsInput(null, processRecordsInput : processRecordsInput);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final int addArrivedRecordsInput(ProcessRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final long addArrivedRecordsInput(processRecordsInput) throwsShardRecordsInput;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final int addArrivedRecordsInput(lbContext, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final long addArrivedRecordsInput(ACCESS_OBJECT, processRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final int addArrivedRecordsInput(null, processRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final long addArrivedRecordsInput(ProcessRecordsInput, processRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final long addArrivedRecordsInput(lbContext, processRecordsInput);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final long addArrivedRecordsInput( getDbSqlSession, processRecordsInput) throwsInterruptedException;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final long addArrivedRecordsInput(catalog, processRecordsInput) throws InterruptedException;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final long addArrivedRecordsInput(baseResponses, processRecordsInput) throws InterruptedException() {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final long addArrivedRecordsInput(this, requestedResponses, processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "protected synchronizedprocessRecordsInput(processRecordsInput);",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().isEmpty() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Collections.emptyMap() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() > 0 ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Collections.emptyList() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == Integer.MAX_VALUE ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encryptedDataKeys = request.getEncryptionContext() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : 0L;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encryptedDataKeys = request.getContextEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? \" \" + request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedDataKeys = request.getEncryptionContext() != null ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? 0 : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys().equals(this.encryptedDataKeys.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != 0 ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() > 0 ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().isEmpty() ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? Collections.emptyList() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys().equals(this.encryptedDataKeys.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? new HashMap<>(this) : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + \":\" + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? this.encryptedDataKeys : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encryptedDataKeys = request.isEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys().equals(this.encryptedDataKeys.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().equals(this.getEncryptedDataKeys()) : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys().equals(this.encryptedDataKeys.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? new HashMap<>(this) : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == 0 ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().equals(this.encryptedDataKeys) : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys() + \":\" + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(this.encryptedDataKeys.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? Collections.emptyMap() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? Collections.emptyMap().values() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + \":\" + request.getEncryptedDataKeys() + \":\" + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Collections.EMPTY_LIST : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys() + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encryptedDataKeys = request != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encryptedDataKeys = request == null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().booleanValue() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys().equals(this.encryptedDataKeys.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Collections.emptySet() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? Collections.emptyList() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? Integer.MAX_VALUE : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys().getEncryptionContext().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(request.getEncryptedDataKeys());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(this.encryptedDataKeys.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + \":\" + request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() + \":\" + request.getEncryptedDataKeys() + \":\" + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() == null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encryptedDataKeys = request.getType() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() || request.getEncryptedDataKeys().equals(this.encryptedDataKeys.getEncryptedDataKeys() ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys() : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys().getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys() != null ? request.getEncryptedDataKeys() : new Map<String, String>(this.encryptedDataKeys, request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys) ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys() == null ? null : request.getEncryptedDataKeys() + request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().equals(this.encryptedDataKeys ? request.getEncryptedDataKeys() : request.getEncryptedDataKeys()) ? request.getEncryptedDataKeys().getEncryptedDataKeys();",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-184": {
        "fixes": [
            {
                "k": 1,
                "patch": ".filter(entity, it.getJavaType()).equals(attributeType);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType));",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getName())));",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".filter(entity, it -> it.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType))[0];",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".filter(it -> it.getJavaType()).equals(attributeType);",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getJavaType())));",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getName()) && attributeType.equals(attributeType);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getName()) && attributeType.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) && !attributeType.isCollection()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) || it.getCollection() == null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".filter(entity, it -> it.getJavaType().equals(attributeType));",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".filter(entity, it -> it.getJavaType().equals(attributeType.getJavaType())));",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType));",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType)) ? it.getJavaType() : attributeType;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getJavaType())) continue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getName()));",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) && attributeType.getJavaType() == Attribute.PersistentAttributeType.EMBEDDED) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getJavaType()) && attributeType.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getJavaType()));",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) && !attributeType.isAssignableFrom(attributeType)) ? true : false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType), attributeType);",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType.getJavaType()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getName()));",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? it.getJavaType() : attributeType.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType)[0];",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType)) continue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getName())) continue;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getName()) && attributeType.getName().equals(attributeType);",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType)[0];",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) || it.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType.getJavaType()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) && attributeType.getName().equals(attributeType);",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getName()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().equals(attributeType))[0];",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".filter(entity, it -> it.getJavaType()).equals(attributeType);",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().getName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType))[0];",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getName()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getName()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType)) ? it.getCollection() : attributeType;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? it.getJavaType() : attributeType);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getJavaType()) && attributeType.equals(attributeType);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) || it.getJavaType().equals(attributeType.getName()))) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".filter(entity, it -> it.getJavaType().equals(attributeType.getJavaType())) continue;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? it.getJavaType() : attributeType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? it.getJavaType() : attributeType;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().equals(attributeType));",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) && attributeType.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType)) ? entity.getJavaType() : it.getJavaType().equals(attributeType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType)) ? true : false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? it.getJavaType() : attributeType.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getJavaType().equals(attributeType))[0];",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType))[0];",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) || Map.class.equals(attributeType).getDirtyStateIndex() == 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().equals(attributeType.getJavaType()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".filter(entity, it -> it.getJavaType().equals(attributeType.getJavaType()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType.getJavaType().getName()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getName().equals(attributeType);",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : entity.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().equals(attributeType))[0];",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getJavaType()) && attributeType.getName().equals(attributeType);",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType.getJavaType().getName()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getName().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : attributeType.getJavaType().getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getName()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? it.getJavaType() : attributeType.getJavaType().getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().equals(attributeType)[0];",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".filter(entity, it, attributeType, it.getJavaType()).equals(attributeType);",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? entity.getJavaType() : entity.getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType) ? it.getJavaType() : attributeType.getJavaType().getJavaType().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().equals(attributeType.getJavaType()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().equals(attributeType));",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".filter(entity, it -> it.getJavaType().equals(attributeType.getName())));",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".filter(entity, it.getJavaType().equals(attributeType) ? entity.getJavaType() : it.getJavaType().getJavaType().equals(attributeType))[0];",
                "identical": false
            }
        ],
        "buggy_line": ".filter(it -> it.getJavaType().equals(entity)) //",
        "fixed_line": ".filter(it -> entity.equals(it.getJavaType())) //"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignoreAny.getIgnored();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignoreAny.get(ignorals.getSimpleName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignoreAny.get(ignorals);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignoreAny.getSimpleName();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignoreAny.get(ignorals.getSimpleName()) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignoreAny.get(context.getFieldName(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignoreAny.getSimpleName() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = ignoreAny.get() == null ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName)) ? true : false;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignoreAny.getAliasInfo() == null ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName) ? ignoreAny.getSimpleName() : false;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignoreAny.getBounds() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !validationAny.getSimpleName().equals(propName)) ? null : false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignoreAny.getSimpleName().equals(propName) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !validationAny.getSimpleName().equals(propName)) ? true : false;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignoreAny.get(ignorals.getSimpleName()) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignoreAny.get(ignorals.getFullName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName) ? ignoreAny.getFullName() : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignoreAny.get(ignorals.getSimpleName()) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignoreAny.getOrDefault(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored() != null ? e.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = ignoreAny.get(ignorals.getFromId(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = ignoreAny.get(ignorals.getSimpleName()) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignoreAny.getSimpleName().equals(propName)) ? true : false;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? ignorals.getAny().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !validationAny.getSimpleName().equals(propName) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName)) ? null : false;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignoreAny.get(ignorals.getSimpleName()) != null ? ignorals.getAny().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignoreAny.getIgnored() == null ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? e.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored().equals(propName)) ? true : false;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getSimpleName() : false;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignoreAny.getSimpleName().equals(propName) ? ignoreAny.getSimpleName() : false;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignoreAny.getIgnored() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName) ? ignoreAny.getFullName() : false;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getFullName() : null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = ignoreAny.get();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = ignoreAny.get(context.getFieldName(propName) != null ? ignorals.getSimpleName() : false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignoreAny.get(context.getFieldName(propName) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignoreAny.get(context.getFieldName(propName) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored().equals(propName) ? ignoreAny) : false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignoreAny.get(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignoreAny.get(ignorals.getSimpleName()) != null ? ignorals.get(propName) : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignoreAny.getOrDefault(propName) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignoreAny.getSimpleName().equals(propName)) ? null : false;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName) ? ignoreAny) : false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = ignoreAny.getAliasInfo() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignoreAny.getSimpleName().equals(propName) ? ignoreAny.getFullName() : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignoreAny.get(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName)) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getFullName() : false;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? ignorals.getIgnored() : false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !validationAny.getSimpleName().equals(propName) ? ignoreAny.getSimpleName() : false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignoreAny.getSimpleName() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getSimpleName() : false;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored() != null ? ignorals.getIgnored().get(propName) : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getFullName() : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignoreAny.getOrDefault(propName) != null ? ignorals.getIgnored().get(propName) : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? ignorals.getIgnored().get(propName) : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignoreAny.getSimpleName().equals(propName)) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignoreAny.get(context.getFieldName(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignoreAny.getBounds() != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName) ? ignoreAny.getFullName())) : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignoreAny.getIgnored() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignoreAny.getSimpleName().equals(propName) ? ignoreAny.getFullName() : false;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignoreAny.getOrDefault(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignoreAny.getSimpleName().equals(propName) ? ignoreAny.getFullName() : false;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignoreAny.get(ignorals.getFullName()) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignoreAny.get(ignorals.getFullName()) != null ? ignorals.getIgnored().get(propName) : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignoreAny.getSimpleName().equals(propName) ? ignoreAny) : false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored() != null ? ignorals.get(propName) : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignoreAny.get(ignorals.getFullName()) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignoreAny.get(ignorals.getFullName()) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !validationAny.getSimpleName().equals(propName) ? ignoreAny.getFullName() : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored().equals(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignoreAny.get(context.getFieldName(propName) != null ? ignorals.get(propName) : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName)) ? ignoreAny.getFullName() : null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignoreAny.getOrDefault(propName) != null ? ignorals.get(propName) : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignoreAny.getSimpleName() == null ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored().equals(propName) ? ignoreAny.getFullName() : false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = ignoreAny != null && ignorals.getIgnored() != null && !ignorals.getSimpleName().equals(propName) ? true : false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignoreAny.getAliasInfo() != null && ignorals.getIgnored() != null ? ignorals.get() : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ignoreAny.getFromProperties(ignorals);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignoreAny.getBounds() != null && ignorals.getIgnored().equals(propName) ? ignoreAny) : false;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignoreAny.getBounds() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.125);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.125);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount, 16) * 0.0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(parser[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0531;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set(Position.KEY_TEMP + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957 * 0.01);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(imei++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 1000;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(deviceCount++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.set(Position.PREFIX_TEMP + i, short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.set(Position.PREFIX_TEMP + 1, buf.parseShort(deviceCount++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.getPosition(deviceSession.getDeviceId() + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957 * 0.0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957 * 0.0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0.0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 60;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.get(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.5;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseInt(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(type[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(deviceCount[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount) * 0.01);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.125);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set(Position.KEY_TEMP + i, Short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957 * 0.0539957);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set(Position.PREFIX_TEMP + i, buf.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount, 16) * 0.01);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(buf[index++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(parser[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.5);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseLong(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.set(Position.PREFIX_TEMP + 1, buf.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.set(Position.KEY_TEMP + i, Short.parseShort(data[index++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(parser[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount, 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(type++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(imei++), 16) * 0.0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.set(Position.PREFIX_TEMP + 1, buf.parseShort(deviceCount++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(imei++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount * 16) * 0.0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount), 16) * 0.0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.0539957 * 0.01);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957 * 0.125);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.053Count);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.053625);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.set(Position.PREFIX_TEMP + 1, buf.parseShort(index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.053425);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[i++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.set(Position.KEY_RSSI + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.05399 5;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.set(Position.PREFIX_TEMP + 1, buf.parseShort(buf[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceId[i++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseInteger(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.set(Position.PREFIX_TEMP + i, buf.parseShort(buf[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount * 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957 * 1000;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0225);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 60);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.01);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0f625);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount[i++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set(Position.PREFIX_TEMP + i, short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.getPosition(deviceSession.getDeviceId() + i, Short.parseShort(data[index++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.05325);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[i++], 16) * 0.0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++), 16) * 0.0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount++], 16) * 0.1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort( execution[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set(Position.PREFIX_TEMP + i, Integer.parseInt(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceId[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set(Position.KEY_STATUS + i, Short.parseShort(data[index++], 16) * 0.0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(deviceCount * 16) * 0.01);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.valueOf(deviceCount++], 16) * 0.0539957);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0125);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 50;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0539957 * 0.5);",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() == 0 ? 0 : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() == 0 ? 0 : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : 0L;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() : inputPacket.getGraphics()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() == 0 ? 0 : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition()) : null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls() : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponentAngle.add(inputPacket.getGraphics() == 0 ? 0 : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getGraphics()) : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() == 0 ? 0 : inputPacket.getGraphics() ? 0 : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() : 0));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponentProgressBar.add(inputPacket.getSasPedalPosition());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCedalPosition()) : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition() : inputPacket.getGraphics()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getSasPedalPosition());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getPedalPosition());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition()) : inputPacket;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? \" \" + inputPacket.getCount() : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1) : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() == 0 ? 0 : inputPacket.getGraphics() + \" \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponentAngle.add(inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getGraphics()) : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() : inputPacket.getGraphics()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : 0 );",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getBounds() : inputPacket.getGraphics()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : 0L;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getTrackedalPosition());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : 0L;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() : inputPacket.getGraphics()));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() != null ? inputPacket.getGraphics() : 0L;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : 0L;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount()) : inputPacket;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponentProgressBar.add(inputPacket.getHedalPosition());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getSize()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getGraphics()) : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket.getGraphics().getGraphics());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getGraphics() - 1)) : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getGraphics()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getSize()) : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? \" \" + inputPacket.getGraphics() : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() : inputPacket.getLatitude()));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != null ? \" \" + inputPacket.getCount() : 0 );",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCedalPosition()) : inputPacket;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition() : inputPacket.getLatitude()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getGraphics() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getLatitude());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponentAngle.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() : 0));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.size() + \" to \" + inputPacket.size() + \" to \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getHedalPosition()) : inputPacket.getGraphics().getGraphics());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getGraphics() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1) : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount()) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? inputPacket.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.size() + \" to \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getCount() + \" to \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponentProgressBar.setTotal(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponentProgressBar.add(inputPacket.getTrackedalPosition());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getGraphics()) : inputPacket;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls() : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket.getGraphics()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getCount() + \" to \" + inputPacket.size() + \" to \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getGraphics() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.size() + \" \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getCount() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponentAngle.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : 0L;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponentProgressBar.set(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getLatitude()) : inputPacket;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount()) : inputPacket.getGraphics()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponentProgressBar.add(inputPacket.getUrl() + \" \" + inputPacket.getCount() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getLatitude());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.size() + \" to \" + inputPacket.size() + \" to \" + inputPacket.size() + \" to \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponentProgressBar.getGraphics() != 0 ? calculateTls(inputPacket.getGraphics() - 1)) : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getGraphics() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.size() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponentProgressBar.setTotal(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getGraphics()) : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != null ? \" \" + inputPacket.getCount() : 0));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getCount() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getLatitude());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponentProgressBar.setValue(inputPacket.getGraphics() == 0 ? \"\" : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount() - 1)) : inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponentAngle.add(inputPacket.getGraphics() + \" \" + inputPacket.getCount() + \" to \" + inputPacket.size() + \" to \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponentProgressBar.add(inputPacket.getUrl() + \" \" + inputPacket.getCount() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getZ()) : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() != 0 ? calculateTls(inputPacket.getCount()) : inputPacket.getGraphics().getGraphics());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.size() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getLatitude());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponentProgressBar.add(inputPacket.getCount() + \" \" + inputPacket.getGraphics() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket.getCount() + \" \" + inputPacket.getGraphics());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponentProgressBar.add(inputPacket.getUrl() + \" \" + inputPacket.getCount() + \" to \" + inputPacket.getCount() + \" with \" + inputPacket);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponentProgressBar.add(inputPacket.getGraphics() == 0 ? 0 : inputPacket.getGraphics()));",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-181": {
        "fixes": [
            {
                "k": 1,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getVersion()));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getVersion()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(entityClass);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getSimpleName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass.getSimpleName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getLong(), this.entityClass));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass.getSimpleName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName() == null ? null : persistentEntity.getLongValue();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount(), this.entityClass));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getFullName())));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(Entity.class) ? this.entityClass : persistentEntity.getLongType());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity, this.entityClass));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getCount(), this.entityClass));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(Entity.class) ? this.entityClass : persistentEntity.getLong();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass : this.entityClass);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass.getName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass : this.entityClass);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass : this.entityClass);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Statement.class) + \" \" + persistentEntity.getLong() + \" \" + resultSet.getLong() + \" \" + entityClass);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getLongType(), this.entityClass));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Statement.class) + \" \" + persistentEntity.getLong() + \" \" + resultSet.getLong() + \")\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getDeviceId()) ? this.entityClass.getSimpleName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getTokenValue()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType(), this.entityClass));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass.getSimpleName() : this.entityClass.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity, resultSet.getLongType()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getLong(), this.entityClass);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass : persistentEntity.getLongType());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getSimpleName() : this.entityClass.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity, entityClass));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getIdentifier(), entityClass));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass : this.entityClass.getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass.getName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity, resultSet.getLongType()));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName() == null ? null : persistentEntity.getLongType().getLongValue();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getSimpleName() : this.entityClass.getName()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass.getName() : this.entityClass.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass : this.entityClass.getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass.getSimpleName() : this.entityClass.getName()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass : this.entityClass.getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass.getSimpleName() : this.entityClass.getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass : this.entityClass.getName();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName() == null ? null : persistentEntity.getLong();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getMethod(), this.entityClass));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getSize()) ? this.entityClass.getSimpleName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount(), resultSetEntity));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getSimpleName()) ? this.entityClass.getSimpleName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName() == null ? null : persistentEntity.getLongType();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getLong(), this.entityClass));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getMethod(), this.entityClass));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass : this.entityClass.getSimpleName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass.getSimpleName() : this.entityClass.getName()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getFullName()));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.get());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ResultSet resultSet = this.entityClass.getDeclaredMethod(\"select count(*) from %s\", persistentEntity.getLong(), this.entityClass);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getSimpleName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass : this.entityClass.getName();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass : this.entityClass.getSimpleName()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getSimpleName() : this.entityClass.getSimpleName()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getDeviceId()) ? this.entityClass.getSimpleName() : this.entityClass.getName()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity, this.entityClass));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass : this.entityClass.getName();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType(), this.entityClass));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Statement.class) + \"select count(*) from %s\", persistentEntity.getLong(), this.entityClass);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Statement.class) + \" \" + persistentEntity.getLong() + \" \" + resultSet.getLong() + \" \" + entityClass.getName());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount(), this.entityClass);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Entity.class) + \" \" + persistentEntity.getLong() + \" \" + resultSet.getLong() + \" \" + entityClass);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass.getSimpleName() : this.entityClass.getSimpleName()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getLong() ? 0 : 0));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass : this.entityClass;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(entityClass.getSimpleName()) ? this.entityClass : persistentEntity.getLong();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(\"select count(*) from %s\", persistentEntity.getCount());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount(), resultSet.getLongType()));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ResultSet resultSet = this.entityClass.getDeclaredConstructor(String.format(\"select count(*) from %s\", persistentEntity.getVersion()));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Statement.class) + \"select count(*) from %s\", persistentEntity.getLongType(), this.entityClass);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getSimpleName() : this.entityClass.getName();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getDeviceId()) ? this.entityClass.getSimpleName() : this.entityClass.getName());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawClass()));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getDeviceId(), this.entityClass));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ResultSet resultSet = this.entityClass.getDeclaredConstructor(String.format(\"select count(*) from %s\", persistentEntity, resultSet.getLongType()));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass : this.entityClass.getSimpleName()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Statement.class) + \" \" + persistentEntity.getLong() + \" \" + resultSet.getLong();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass.getSimpleName() : this.entityClass.getName();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ResultSet resultSet = this.entityClass.getDeclaredConstructor(String.format(\"select count(*) from %s\", persistentEntity.getLong(), this.entityClass));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Statement.class) + \" \" + persistentEntity.getLong() + \" \" + resultSet.getLong() + \" \" + resultSet.getLong() + \" \" + entityClass);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ResultSet resultSet = this.entityClass.getAnnotation(Statement.class) + \" \" + persistentEntity.getLong() + \" \" + resultSet.getLong() + \" \" + entityClass.getName() + \")\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass : this.entityClass.getSimpleName());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()) ? this.entityClass : this.entityClass.getSimpleName()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.getExpressionText() : this.entityClass);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getSimpleName() : this.entityClass.getSimpleName()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getRawType()) ? this.entityClass.getSimpleName() : null);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getDeviceId()) ? this.entityClass.getName() : this.entityClass);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getLong() ? 0 : this.entityClass);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ResultSet resultSet = this.entityClass.getMethod(\"select count(*) from %s\", persistentEntity.getLong(), this.entityClass);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ResultSet resultSet = this.entityClass.equals(String.format(\"select count(*) from %s\", persistentEntity.getLongType(), this.entityClass));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ResultSet resultSet = this.entityClass.getMethod(String.format(\"select count(*) from %s\", persistentEntity.getVersion()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getExpressionText()) ? this.entityClass.getSimpleName() : this.entityClass.getSimpleName()));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getCount()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ResultSet resultSet = this.entityClass.getSimpleName().equals(String.format(\"select count(*) from %s\", persistentEntity.getDeviceId(), this.entityClass));",
                "identical": false
            }
        ],
        "buggy_line": "ResultSet resultSet = this.databaseClient.singleUse().executeQuery(Statement.of( String.format(\"select count(*) from %s\", persistentEntity.tableName()))); resultSet.next(); return resultSet.getLong(0);",
        "fixed_line": "Statement statement = Statement.of(String.format( \"select count(*) from %s\", persistentEntity.tableName())); try (ResultSet resultSet = this.databaseClient.singleUse().executeQuery(statement)) { resultSet.next(); return resultSet.getLong(0); }"
    },
    "Bears-120": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xD0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && channel != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xfb) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x01) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (buf.readableBytes() < 4) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x7878) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (buf.readableBytes() < 11) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (buf.readableBytes() < 80) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (buf.readableBytes() < 11 && channel != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xDC00 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && BitUtil.check(buf.getByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && BitUtil.check(buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xD0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && channel != 0 && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xDC00 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (buf.getUnsignedShort(buf.readerIndex()) == 0xD0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (buf.readableBytes() >= 4 && channel != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xDC00 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "while (buf.readable()) != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xDC00 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedShort(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x01 && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x32 || buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) != 0 && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && ChannelBuffers.compare(buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xf ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || BitUtil.check(buf.getByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xf ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xDC00 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xDC00 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || header.equals(buf.getByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xf ? null : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xDC00 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.writerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getUnsignedShort(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "while (buf.getUnsignedByte(buf.readerIndex()) != 0 && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x78) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xf ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xC0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "while (buf.getUnsignedByte(buf.readerIndex()) != 0 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xf ? 0 : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x32 || buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || buf.getUnsignedByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) != 0xD0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && parser.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) != 0 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x80 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x01 && buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 || buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && BitUtil.check(buf.getUnsignedByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getUnsignedShort(buf.readerIndex() + 1) : buf.toString(StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && ChannelBuffers.hexDump(buf.getByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 || buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (buf.getByte(buf.readerIndex()) == 0xbf && channel != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && BitUtil.check(buf.getByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0 ? 0 : buf.getUnsignedByte(buf.readerIndex() + 6) : buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xf ? 0 : buf.getUnsignedByte(buf.readerIndex() + 1) : buf;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || buf.getByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || buf.getUnsignedByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() + 1) == 0xD0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x32 || BitUtil.check(buf.getByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && BitUtil.compare(buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) != 0xfb) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && ChannelBuffers.hexDump(buf.getByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && BitUtil.check(buf.getUnsignedByte(buf.readerIndex() + 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.getByte(buf.readerIndex() - 1) == 0xfb) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && buf.readableBytes() == 11 && channel != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xDC00 ? 0 : buf.getByte(buf.readerIndex() + 1) : buf;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0x31 || buf.getUnsignedByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xFE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (buf.getUnsignedByte(buf.readerIndex()) == 0xbf && ChannelBuffers.hexDump(buf.getUnsignedByte(buf.readerIndex()))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (buf.readableBytes() == 4 && channel != null) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// Skip Alive message while (buf.readable() && Character.isDigit(buf.getByte(buf.readerIndex()))) { buf.readByte(); }"
    },
    "Bears-186": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (additionalProperties.containsKey(INTERFACE_ONLY)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY) && Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY) && Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) instanceof Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (String.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (StringUtils.isEmpty(additionalProperties.get(INTERFACE_ONLY) && Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (additionalProperties.containsKey(INTERFACE_ONLY) && Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY)) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()).toString());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (StringUtils.isNotEmpty(additionalProperties.get(INTERFACE_ONLY) && Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY)) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) == null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString())) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY) && Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) instanceof Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY).toString()) && Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY) || Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) == null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (StringUtils.isNotEmpty(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (StringUtils.isEmpty(additionalProperties.get(INTERFACE_ONLY)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()).toString());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY) && Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString())) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY)).toString());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (StringUtils.isBlank(additionalProperties.get(INTERFACE_ONLY) && \"swagger-jaxrs-client\".equals(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY)).toString().toString());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString())) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (StringUtils.isNotEmpty(additionalProperties.get(INTERFACE_ONLY)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) == null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (StringUtils.hasText(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) + \" \" + Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) == null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (StringUtils.isEmpty(additionalProperties.get(INTERFACE_ONLY).toString())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()).toString());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "String[] interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString()) != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString())) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString().toString()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "interfaceOnly = Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString() != null ? Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY)).toString().toString()) : Boolean.valueOf(additionalProperties.get(INTERFACE_ONLY).toString());",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!interfaceOnly) { additionalProperties.remove(INTERFACE_ONLY); }"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\";",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(\"(?:[0-9F]{20})?,\";",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' bytes",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number'",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number'",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number'",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' respectively",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number';",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' bytes",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'.",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number';",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number'",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' respectively",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number' bytes",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // rssi",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"); // number",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' bytes",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\"; // rssi",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the array\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number';",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression(\"(?:[0-9F]{20})?,\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '`'",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'.",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' bytes",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be assigned.",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number' respectively",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' and 'number'",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'..' respectively",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'', 'number'",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' respectively",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should be a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' respectively",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'error', 'number'",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number', 'number'",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression(\"(?:[0-9F]{20})?,\").build();",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'file', 'number'",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '`'",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'..'EVENT",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number')",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' respectively",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the array as 'final'.",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number', 'number'",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number' or 'number'",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\"); // rssi",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' characters",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") , String.valueOf(i).number(\"([\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the array\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the array",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' as 'number'",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x', 'number'",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'n'",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number' bytes",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"); // rssi",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare theform",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number';",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'EVENT",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number\"",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), version.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the array\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression(\"(?:[0-9F]{20})?,\"), name.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the array as 'number'",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number', 'number', 'number'",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") builder.number(\"([\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' or 'number'",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\") // iccid"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType().isArray() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field != null && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType().isArray() || field.isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType().isArray() && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType().isPrimitive() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType().isField() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getType())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType().isField() || field.getType().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getName())) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getSuperclass() != null && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType().isArray() || field.isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType().isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType().isEnum() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.isAcceptable() && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType().isFields() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType().isArray() || field.getType().isEnum() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType().isPrimitive() || field.isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getDeclaringClass().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getType());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getClass().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType().isObject() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field != null && field.getType().isArray() || ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType().isArray() || field.getType().isArray() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && field.isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType().equals(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType().isEnum() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType())) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.isAcceptable() || field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType().isArray() && field.getType().equals(field.getName())) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType().isArray() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field != null && field.getType().equals(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getName())) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getName() ? field.getType() : false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field != null && field.getType().isArray() ? field.getType() : ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && field.getType().equals(field.getName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getType())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field != null && field.getClass().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && field.getName().equals(field.getName());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getName())));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName() ? field.getType() : false;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType().isField() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && field.getType().equals(field.getType());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType().isField() || field.getType().isArray() || ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && field.isArray() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getType()) && field.getName().equals(field.getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName())));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType().isAssignableFrom(field) || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getType()) && field.getName().equals(field.getName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getType())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType().isAssignableFrom(field) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType().isField() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field != null && field.getType().isArray() && ignoredNames.contains(field.getName()));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && field.isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType().isAssignableFrom(field.getType()) && ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getType()) && object.getClass().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType().isInterface() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getType()) && object.getClass().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getType()) && object.getClass().getName().equals(field.getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getType()) && object.getClass().getName().equals(field.getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field != null && field.getType().isArray() ? field.getType() : ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field.isAcceptable() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType().isAssignableFrom(field.getClass()) && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType().isPrimitive() || field.getType().equals(field.getType()) && ignoredNames.contains(field.getName()))) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getType()) && object.getClass().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getType()) && object.getClass().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType().isArray() || field.getType().equals(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field != null && field.getType().isArray() && ignoredNames.contains(field.getName() ? field.getType() : false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getType())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType().isArray() || field.getType().isArray() || ignoredNames.contains(field.getName() ? field.getName() : false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType().isArray() || ignoredNames.contains(field.getType()) && field.getName().equals(field.getName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType().isArray() || field.getType().isArray() && ignoredNames.contains(field.getName() ? field.getType() : false;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.getType().isArray() || field.getType().isArray() && ignoredNames.contains(field.getType())) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getType().equals(field.getType()) && field.getType().equals(field.getName());",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-250": {
        "fixes": [
            {
                "k": 1,
                "patch": "int[] values = new int[cardinality];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int[] values = new int[length];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int[] values = new double[cardinality];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (values.length < cardinality + 1) for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (int i = 0; for (map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int[] values = new int[values.size()];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int[] cardinality = new int[cardinality];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int[] values = new int[values.length];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int[] values = new int[cardinality]; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int[] values = new double[length];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet().size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? Integer.MAX_VALUE : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet().size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? Integer.MAX_VALUE : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (values.length < cardinality + 1) map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number>>) map.entrySet()) : map.entrySet().size();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> i : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> max = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet() : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (values.length < cardinality + 1) for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0.0 ? Integer.MAX_VALUE : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet().size()]; index >= 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (values.length < cardinality + 1) map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number>) map.entrySet()) : map.entrySet().size();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet().size()]; index >= 0; for (Map.Entry<Integer, ? extends Number> i : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> i : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet().size() : 0; for (Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet().size() : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet()) : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int[] cardinality = new int[length];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> i : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; ++i] != 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (values.length < cardinality + 1) map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number>) length) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> length : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet() ? map.entrySet().size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet() ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> max = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet().size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet().size() : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet() ? get(length) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int[] values = new ArrayList<Map.Entry<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number>>) map.entrySet()) < 0) ? Integer.valueOf(length) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < length) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet()) : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; ++i] != 0; for (Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet().size()]; index >= 0; for (Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet()) : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> i -= 1) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number>charAt(0) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (values.length < cardinality + 1) map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number>>) map.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality + 1) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet()) : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> < length) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < length) ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < length) ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet() ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> keys : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> length) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet() ? map.entrySet().size() : 0; for (Map.Entry<Integer, ? extends Number> < cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()]; index >= 0; for (Map.Entry<Integer, ? extends Number> i) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> i : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet() : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < length) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet() ? map.size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = map.entrySet().size()]; index >= 0; for (Map.Entry<Integer, ? extends Number> i) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> i : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (values.length < cardinality + 1) map = new HashMap<Integer, ? extends Number>>();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> max = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < length) ? map.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> max = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality + 1) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < cardinality ? map.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> < cardinality + 1) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) != 0; for (Map.Entry<Integer, ? extends Number> i = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number> cardinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet() : map.entrySet().size();) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (values.length < cardinality + 1) map = new HashMap<Integer, ? extends Number>((Map.Entry<Integer, ? extends Number>) entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() != 0; for (Map.Entry<Integer, ? extends Number> < length) ? map.entrySet()) : map.entrySet().size(); ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (values.length < cardinality + 1) for (Map.Entry<Integer, ? extends Number> entry : map.entrySet() == 0.0 ? length : map.entrySet()) {",
                "identical": false
            }
        ],
        "buggy_line": "int cardinality = map.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
        "fixed_line": "TreeMap<Integer, ? extends Number> sortedMap = new TreeMap<>(map); int cardinality = sortedMap.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : sortedMap.entrySet()) {"
    },
    "Bears-245": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "+ (modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "+ (modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (this.modifiers != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (this.modifiers != null && !this.modifiers.isEmpty()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers).modifiers.add(modifiers);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (!this.modifiers.equals(modifiers) || this.modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "+ (modifiers != null ? modifiers.modifiers().equals(modifiers) : modifiers) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.add(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (!this.modifiers.equals(modifiers) || !modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.add(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "+ (modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers).modifiers.add(modifiers);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.add(this.modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (this.modifiers != null && !this.modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.add(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "+ (modifiers != null ? modifiers.modifiers.add(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "+ (modifiers != null ? modifiers.modifiers().equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "+ (modifiers != null ? modifiers.modifiers().equals(modifiers) : modifiers).modifiers.add(modifiers);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers).modifiers.equals(modifiers);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "+ (this.modifiers != null ? this.modifiers.equals(modifiers) : modifiers) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "+ (this.modifiers != null ? this.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (this.modifiers != null && !this.modifiers.equals(modifiers, modifiers)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (this.modifiers != null && !modifiers.isEmpty()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (!this.modifiers.equals(modifiers) && !modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (this.modifiers != null && !this.modifiers.equals(modifiers) && !modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.add(this.modifiers, modifiers);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "+ (modifiers != null ? this.modifiers.equals(modifiers) : modifiers) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : this.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : this.modifiers.equals(modifiers)) ? this.modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (this.modifiers != null && !this.modifiers.equals(modifiers) || !modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : this.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.add(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (this.modifiers != null && !this.modifiers.equals(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "+ \") as it is already set to \" + this.modifiers.equals(modifiers) ? this.modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.add(this.modifiers);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "+ (modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers).modifiers.equals(modifiers);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (!modifiers.equals(modifiers) || this.modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.add(modifiers);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.equals(modifiers);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers).modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.equals(this.modifiers);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : this.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : this.modifiers.equals(modifiers)) ? this.modifiers.add(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : !modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "+ (modifiers != null ? this.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (!modifiers.equals(modifiers) || !modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.add(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.add(modifiers);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "+ (modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "+ !this.modifiers.equals(modifiers) ? this.modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers).modifiers;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.add(this.modifiers);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.modifiers.equals(modifiers) : modifiers) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers).modifiers.add(modifiers, this.modifiers);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.add(modifiers, this.modifiers);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers).modifiers.add(modifiers, modifiers);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "+ \" = this.modifiers.equals(modifiers) ? this.modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "+ (modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "+ (modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(this.modifiers)) ? this.modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : this.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.add(modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (this.modifiers != null && !this.modifiers.equals(modifiers) && !modifiers.isEmpty()) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : this.modifiers.equals(modifiers)) ? this.modifiers.add(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.equals(modifiers);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers).modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.equals(modifiers) : modifiers).modifiers.add(modifiers);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (!this.modifiers.equals(modifiers) && !modifiers.equals(modifiers, modifiers)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "+modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (!this.modifiers.equals(modifiers) || modifiers.modifiers.equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.add(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(this.modifiers)) ? this.modifiers.add(modifiers, modifiers) : modifiers).modifiers.add(modifiers);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "+ (this.modifiers != null ? modifiers.modifiers.equals(modifiers) : modifiers.modifiers.equals(modifiers)) ? this.modifiers.modifiers.equals(modifiers, modifiers) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers.modifiers.add(this.modifiers);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers.add(modifiers, modifiers) : modifiers;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (this.modifiers != null && !this.modifiers.equals(modifiers) && !modifiers.equals(modifiers, modifiers)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "+ ((modifiers == null) ? 0 : modifiers).modifiers.equals(modifiers)) ? this.modifiers.equals(modifiers, modifiers) : modifiers);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "+ (modifiers != null ? modifiers.modifiers().equals(modifiers) : modifiers).modifiers.equals(modifiers);",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!modifier.equals(Modifier.FINAL)) { throw new IllegalStateException(\"unexpected parameter modifier: \" + modifier); }"
    },
    "Bears-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddKeySerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(provider, type, provider);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _propertySerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddMap(type, provider, _property);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializer<Object,Object>(type, provider, _property);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "BeanPropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "JsonSerializerMap.SerializerAndMapResult result = map.findAndAddKeySerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "JsonSerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _propertySerializerMap.SerializerAndMapResult(provider, type, provider);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _serializerFactory.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider.findAndAddKeySerializer(type, provider, _property) == null ? null : map.findAndAddKeySerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _serializerFactory.findAndAddValueSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? new JsonSerializerMap() : PropertySerializerMap.Serializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "JsonSerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializer<Object,Object>(type, provider, _property);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _findAndAddKeySerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? new PropertySerializerMap() : PropertySerializerMap.Serializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider) : null);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _findAndAddDynamic(map, provider, _type, provider);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_serializer = PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddValueSerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializer<Object,Object>(type, provider, _property);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddDynamic(type, provider) : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddValueSerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _provider.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider.findAndAddKeySerializer(type, provider, _property) == null ? null : PropertySerializerMap.Serializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _serializerFactory.findAndAddValueSerializer(type, provider, _property) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _serializerFactory.findAndAddKeySerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddValueSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddValueSerializer(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddValueSerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _serializerFactory.findAndAddMap(type, provider, _property);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializer<Object,Object>(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddDynamic(type, provider) : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.find(type, provider) : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddValueSerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "JsonSerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _serializerFactory.findAndAddValueSerializer(type, provider, _property) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerProvider) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "JsonSerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.Serializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerProvider) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider.findAndAddKeySerializer(type, provider, _property) == null ? null : map.findAndAddKeySerializer(type, provider, null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(provider, type, provider, _property);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "BeanPropertySerializerMap.SerializerAndMapResult result = map.findAndAddKeySerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? new PropertySerializerMap(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _provider.findAndAddKeySerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializerMap(type, provider, _property);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.find(type, provider) : null);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "JsonSerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider) ? map.findAndAddKeySerializer(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddDynamic(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _serializerFactory.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider.findAndAddKeySerializer(type, provider) == null ? null : PropertySerializerMap.Serializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializer<Object,Object>(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializer<Object,Object>(type, provider, _serializerFactory) ? map.find(type, provider) : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializer<Object,Object>(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddValueSerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _propertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _propertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory.findAndAddKeySerializer(type, provider, _property) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider) : null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "JsonSerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult result = new JsonSerializer<Object,Object>(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? new PropertySerializerMap() : PropertySerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory.findAndAddKeySerializer(type, provider, null) ? map.findAndAddKeySerializer(type, provider) : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider) ? map.find(type, provider) : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : provider, _findAndAddKeySerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerProvider);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, _property) : new JsonSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _findAndAddDynamic(map, provider, _type);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap(type, provider, _property);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "BeanPropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? new PropertySerializerMap(type, provider, _property) : null);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _mapSerializerMap.SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddDynamic(type, provider) : null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerMap.SerializerAndMapResult.SerializerAndMapResult(provider, type, provider);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddKeySerializer(type, provider, null) : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new JsonSerializerMap.SerializerAndMapResult(type, provider, _serializerFactory) ? map.findAndAddDynamic(type, provider, _property) : null);",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// 27-Jun-2017, tatu: [databind#1679] Need to avoid StackOverflowError... if (type == Object.class) { // basically just need to call `toString()`, easiest way: JsonSerializer<Object> ser = new Default(Default.TYPE_TO_STRING, type); _dynamicSerializers = map.newWith(type, ser); return ser; }"
    },
    "Bears-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (p.nextToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (p.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (!p.nextToken() && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (_propertyClass.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (p.getCurrentToken() == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (_propertyClass == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (_propertyClass.isAssignableFrom(p.getCurrentToken()) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (p.getCurrentToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_propertyClass == JsonToken.START_OBJECT && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (p.nextToken() == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (!p.getCurrentToken() && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (!p.getCurrentToken() && _typePropertyName != JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (_property == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (p.nextToken() == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (_propertyClass == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (_property == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (!p.getCurrentToken().isExpectedStartObjectToken() && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (p.getCurrentToken() == JsonToken.FIELD_NAME && _typePropertyName != JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_property == null && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_property == null && propertyClass != JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (p.nextToken() == JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (p.getCurrentToken() == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (p.nextToken() == JsonToken.FIELD_NAME && property.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass().getName() == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (p.getCurrentToken() == JsonToken.FIELD_NAME && property.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass().getName() != JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (!ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (p.nextToken() == JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (!p.getCurrentToken() && _typePropertyName != JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAY) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_propertyClass.isAssignableFrom(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (p.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (p.getCurrentToken() == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new JsonTokenException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (_property.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new JsonTokenException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (p.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && !_type.equals(ctxt.getConfig())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (_propertyClass.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (p.nextToken() == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (p.nextToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new JsonTokenException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (p.nextToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass().getName() != JsonToken.FIELD_NAME && ctxt.getActiveView() != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME && ctxt.getActiveView() != JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && _type.equals(ctxt.getConfig())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (p.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new JsonTokenException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass().getName() != JsonToken.FIELD_NAME && ctxt.getActiveView() != JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (p.nextToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new JsonTokenException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME && ctxt.getActiveView() != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (p.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new JsonTokenException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (p.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass().getName() == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (p.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass().getName() != JsonToken.FIELD_NAME && ctxt.getActiveView() != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME && property.getSimpleName() != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (p.getCurrentToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_propertyClass.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (_propertyClass == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (p.getCurrentToken() == JsonToken.FIELD_NAME && _type.getRawClass() == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME && ctxt.getActiveView() != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_propertyClass.equals(JsonToken.FIELD_NAME)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_propertyClass.equals(JsonToken.FIELD_NAME) && !_type.equals(ctxt.getConfig())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (p.nextToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (p.nextToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new IllegalArgumentException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_OBJECT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new PropertyNotFoundException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass().getName() != JsonToken.FIELD_NAME && property.getSimpleName() != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME && type.getSimpleName() != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (_propertyClass.isAssignableFrom(p.getCurrentToken()) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (p.nextToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (_propertyClass.equals(JsonToken.FIELD_NAME) && ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass().getName() != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME && !baseTypeName.equals(ctxt.getConfig())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new PropertyNotFoundException(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (p.nextToken() == JsonToken.FIELD_NAME && property.getTypeId() == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (_property.equals(JsonToken.FIELD_NAME) && \"wrapper property '\"+_typeId.getRawClass() != JsonToken.FIELD_NAME && property.getSimpleName() != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (_propertyClass.equals(JsonToken.FIELD_NAME) && _type.equals(ctxt.getConfig())) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) throw new JsonToken(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "} else if (p.getCurrentToken() == JsonToken.VALUE_STRING) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { String str = p.getText().trim(); if (str.isEmpty()) { return null; } }"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.hasNext(3)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.hasNext(5)) {",
                "identical": true
            },
            {
                "k": 3,
                "patch": "if (parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.hasNext(6)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext Comparable(CellTower.from(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16), parser.nextInt(16))",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt(16), parser.nextInt(16))",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(16) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(16) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(16) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.next() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.next().equals(\"A\") || parser.next() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16))",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == PATTERN(16) == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 1) == 0 && parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16))",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.next().equals(\"A\") || parser.nextInt() == parser.nextInt() && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt() == 0 && parser.nextInt(16), parser.nextInt(16))",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-160": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tokens.canConsume('(')) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tokens.canConsume(\"UNDER\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "tokens.canConsume(\"RESTRICT\");"
    },
    "Bears-131": {
        "fixes": [
            {
                "k": 1,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int index = Integer.parseInt(temp.substring(0, 2), 16);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) * 0.01);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int index = Integer.valueOf(temp.charAt(0))) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) * 0.01);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int index = Integer.valueOf(temp.charAt(0), 16);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int index = Integer.parseInt(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.valueOf(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.valueOf(temp.substring(4), 16);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) - 9 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.charAt(i + 1) : 0.0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) != 0 ? Integer.valueOf(temp.substring(1) : 0.0);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.valueOf(temp.substring(3), 16);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.parseInt(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.charAt(i + 1) : 0.01));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.parseInt(temp.substring(3), 16);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 2 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.parseInt(temp.substring(4), 16);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.substring(0, 2), 16) : 0.0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 8 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int index = Integer.valueOf(temp.charAt(0));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? 16 : 0.01) * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 2 * Integer.valueOf(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? value : 0.01) * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.valueOf(temp.substring(7), 16);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int index = Integer.parseInt(temp.substring(0, 2), 16) + 9 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int index = Integer.valueOf(temp.charAt(0), 16) != 0.0 ? Integer.valueOf(temp.substring(5), 16) : 0.0);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) - 9 * Integer.valueOf(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 4 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.substring(1) : 0.0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int index = Integer.parseInt(temp.substring(0, 2), 16) * 0.01);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) - 9 * Integer.valueOf(temp.substring(4), 16);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.substring(1)) : 0.0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) != 0 ? value : 0.01) * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 2 * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int index = Integer.valueOf(temp.substring(0, 16) * 0.01);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 2 * Integer.parseInt(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int index = Integer.valueOf(temp.charAt(Position.length() - 1) * 0.01);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? 9 : 0.01) * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int index = Integer.valueOf(temp.charAt(temp.length() - 1) * 0.01);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 2 * Integer.valueOf(temp.substring(4), 16);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int index = Integer.valueOf(temp.charAt(0) == 0 ? 16 : 0.01) * Integer.parseInt(temp.substring(16), 16);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int index = Integer.valueOf(temp.charAt(0) == 0 ? 16 : 0.01) * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int index = Integer.parseInt(temp.substring(2), 16) * 0.01);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int index = Integer.valueOf(temp.charAt(0), 16) != 0.0 ? Integer.valueOf(temp.substring(1) : 0.0);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.charAt(temp.length() - 1) : 0.0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) != 0 ? value : 0.01) * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 4 * Integer.valueOf(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.valueOf(temp.substring(16), 16);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.valueOf(temp.substring(8), 16);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int index = Integer.valueOf(temp.charAt(temp.length() - 5));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? 100 : 0.01) * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 16 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int index = Integer.valueOf(temp.charAt(0), 16) * 0.01);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int index = Integer.valueOf(temp.charAt(i++), 16);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) - 9 * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.parseInt(temp.substring(7), 16);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 8 * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.substring(0, 2), 16) : 0.01));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int index = Integer.valueOf(temp.charAt(0) == 0 ? 16 : 0.01) * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) != 0 ? value : 0.01) * Integer.valueOf(temp.substring(1));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 2 * Integer.parseInt(temp.substring(4), 16);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int index = Integer.valueOf(temp.charAt(i++));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 8 * Integer.valueOf(temp.substring(4), 16);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int index = Integer.valueOf(temp.charAt(0) == 0 ? 16 : 0.01) * Integer.parseInt(temp.substring(1));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * 0.01);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 16 * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 1 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) != 0 ? value : 0.01) * Integer.parseInt(temp.substring(3), 16);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.charAt(Position.length() - 1) : 0.0);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) == 16 ? Long.valueOf(temp.substring(1) : 0.0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int index = Integer.valueOf(temp.charAt(0), 16) != 0.0 ? Integer.parseInt(temp.substring(1) : 0.0);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int index = Integer.valueOf(temp.charAt(0) == 0 ? 16 : 0.01) * Integer.valueOf(temp.substring(1));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.substring(5), 16) : 0.0);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.charAt(Position.length - 1) : 0.0);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Integer.parseInt(temp.substring(16), 16);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.substring(1), 16) : 0.0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 8 * Integer.valueOf(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 6 * 0.01);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? value : 0.01) * Integer.valueOf(temp.substring(1));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) - 9 * Integer.valueOf(temp.substring(3), 16);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? value : 0.01) * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) == 0 ? 16 : 0.01) * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int index = Integer.valueOf(temp.lastIndexOf('+', 16) + 9 * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 4 * Integer.parseInt(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int index = Integer.valueOf(temp.charAt(0) == '/' ? 16 : 0.01) * Integer.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int index = Integer.valueOf(temp.charAt(i++), 16) != 0.0 ? Integer.valueOf(temp.substring(1) : 0.0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int index = Integer.valueOf(temp.charAt(temp.length() - 5);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.valueOf(temp.substring(0, 2), 16) : 0.01) * 0.01);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) != 0 ? Integer.parseInt(temp.substring(1) : 0.0);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? 16 : 0.01) * Integer.valueOf(temp.substring(1));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int index = Integer.valueOf(temp.charAt(i) != 0 ? Integer.valueOf(temp.substring(1) : 0.0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int index = Integer.valueOf(temp.substring(0, 2), 16) + 9 * Short.valueOf(temp.substring(5), 16);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? Integer.parseInt(temp.substring(1)) : 0.0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int index = Integer.valueOf(temp.substring(2), 16);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int index = Integer.valueOf(temp.charAt(i + 1) != 0 ? Integer.valueOf(temp.substring(1)) : 0.0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? value : 0.01) * Integer.valueOf(temp.substring(4), 16);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int index = Integer.valueOf(temp.length() > 0 ? 16 : 0.01) * Integer.valueOf(temp.substring(16), 16);",
                "identical": false
            }
        ],
        "buggy_line": "int index = Integer.valueOf(temp.substring(0, 2), 16); if (protocol >= 3) { double value = Short.valueOf(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.valueOf(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.valueOf(temp.substring(4), 16);",
        "fixed_line": "int index = Integer.parseInt(temp.substring(0, 2), 16); if (protocol >= 3) { double value = (short) Integer.parseInt(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.parseByte(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.parseInt(temp.substring(4), 16);"
    },
    "Bears-109": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.set(Position.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.set(Position.KEY_RSSI, values[index++]);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.set(Position.KEY_VERSION_FW, buf[index++]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x0f);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(Position.KEY_VERSION_FW, parser[index++]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setValid(false, values[index++]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0xFF);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x0f;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setSpeed(UnitsConverter.knotsFromKph(values[index++]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++], values[index++]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.set(Position.KEY_SATELLITES, values[index++]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] == null ? \"\" : values[index++]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.set(Position.KEY_VERSION_FW, position[index++]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0xff);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.set(Position.KEY_ALARM, values[index++]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setDeviceId(deviceSession.getDeviceId() + 1, values[index++]);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.set(Position.KEY_VERSION_FW, values[(index++]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set(Position.KEY_ODOMETER, values[index++]);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] == null ? null : values[index++]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] == null ? \"\" : values[index++]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0xf);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0xFF));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setValidating(values[index++] != null ? values[index++]) : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setValidatingPosition(deviceSession.getDeviceId() != null ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] != null ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] != null ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.set(Position.KEY_HDOP, values[index++]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setValid(values[index++] != null ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setValidatingPosition(deviceSession.getDeviceId() != null ? values[index++]) : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0) ? position.getFixTime(deviceSession.getDeviceId()) : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setValid(Position.KEY_VERSION_FW, values[index++]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 ? position.getFixTime(deviceSession.getDeviceId()) : null);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] == null ? null : values[index++]);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setValidating(values[index++] != null ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.set(Position.KEY_POWER, values[index++]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0) ? position.getFixTime(deviceSession.getDeviceId()) : null);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) != 0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 ? position.getFixTime(values[index++]) : null);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] == null) ? null : values[index++]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 ? position.getFixTime(deviceSession.getDeviceId()) : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] != null ? values[index++]) : null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] != null ? position.getDeviceId() : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() == 0 ? \"\" : values[index++]);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] != null ? position.getFixTime() : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setValid(values[index++] != null ? values[index++]) : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x0f]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x0f) == 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] < values.length ? values[index++]) : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 ? position.getFixTime(values[index++]) : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setSpeed(UnitsConverter.knotsFromKph(values[index++] & 0x03) == 0 && position.getFixTime(values[index++] == null ? \"\" : values[index++]);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x0200));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] < values.length ? position.getPosition(deviceSession.getDeviceId()) : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 && values[index++] != null ? position.getFixTime(values[index++]) : null);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime().after(values[index++]);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] != null ? values[index++]) : null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setValidating(values[index++] != null ? values[index++] : \"\";",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0) ? position.getFixTime(deviceSession.getDeviceId() : null);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 ? values[index++] : null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set(Position.KEY_VERSION_FW, values[0]));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x0Z);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && index < values[index++] ? sz.getFixTime(values[index++]) : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x0f) == 0);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x020);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & mask);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setValidating(false, values[index++]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] != null ? values[index++ : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setValid(values[index++] != null && values[index++] != null ? values[index++]) : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 && values[index++] != null ? values[index++] : null);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setSpeed(UnitsConverter.knotsFromKph(values[index++] & 0x0f) == 0);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] != null ? position.getFixTime().getTime() : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] < values.length ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] == null ? \"date\" : values[index++]);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setValid(values[index++] != null && values[index++] != null ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setSpeed(UnitsConverter.knotsFromKph(values[index++] & 0x03) == 0 && position.getFixTime(values[index++] != null ? values[index++]) : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.set(Position.KEY_RPM, values[index++]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime().getTime() < values[index++] ? Long.parseDate(values[index++]) : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.setValid(values[index++] != null ? values[index++] : \"\";",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() == 0 ? Long.MAX_VALUE : values[index++]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && index++ < values[index++] ? sz.getFixTime(values[index++]) : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setValid(parser.hasMore()) ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] != null ? values[index++ : values[index++]);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) == 0 && position.getFixTime(values[index++] == null ? Long.parseDate(date) : values[index++]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.set(Position.KEY_VERSION_FW, values[3]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() == 0 ? null : values[index++]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setDeviceId(deviceSession.getDeviceId() + values[index++]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 && values[index++] != null ? values[index++ : 0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0) ? position.getFixTime(values[index++]) : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] < values.length ? position.getFixTime() : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setSpeed(UnitsConverter.knotsFromKph(values[index++] & 0x03) == 0 && position.getFixTime(values[index++] != null ? values[index++] : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 && position.getFixTime(values[index++] != null ? values[index++] : null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++] & 0x03) << 8) | (position.getDeviceId() != 0 ? position.getFixTime(values[index++] : null);",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.KEY_VERSION_FW, values[index++]);",
        "fixed_line": "if (!type.equals(\"Alert\") || protocolType == 0) { position.set(Position.KEY_VERSION_FW, values[index++]); }"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' respectively",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' or 'number'",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' bytes",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can' be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the both be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' by 'number'",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' as 'number'",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we should be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'..'z'",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc1 as 'number'",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' respectively",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' could be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"(x+),\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' so we can not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' characters",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' could be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' so we can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' respectively",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can' be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' when calling adc2",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'final', 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' could be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"(x+),\").build();",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' could be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' should be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' could be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can't be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' bytes",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' could be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' so we can't be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number' respectively",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' so we can' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the need to be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'final', 'number' or 'number'",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' could be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' so we can' be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'final', 'number'",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' string'",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the end-of-input",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'final', 'number' so we can't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can be assigned. Also declare the methods parameters as 'number' bytes",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can get a parameter should be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number' respectively",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'final', 'number' so we can't be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can not be assigned. Also declare the end-of-input",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' should not be assigned. Also declare the methods parameters as 'number' so we can be assigned. Also declare the methods parameters as 'number' by 'number'",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'')",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number' so we can' be assigned. Also declare the methods parameters as 'number' or 'number'",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"(x+),\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final', 'number'' respectively",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\") // power",
        "fixed_line": ".number(\"(x+)?,\") // power"
    },
    "Bears-151": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (value != null) subProperties.put(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "subProperties.put(subName, String.valueOf(value)));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (subName != null && subName.length() > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (subName != null && subName.length() > value.length() && subName.equals(name.charAt(value.length() - 1))) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.charAt(value.length() - 1));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "subProperties.put(name, String.valueOf(value)));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1))) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.charAt(value.length() - 1));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "subProperties.put(subName, String.valueOf(value));",
                "identical": true
            },
            {
                "k": 13,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1))) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1).equals(value.length()))) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (subName.equals(value) && subName.equals(value)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (!StringUtils.isNotEmpty(subName) && subName.equals(value)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(String.valueOf(value.length() - 1))) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (value != null) subProperties.put(subName, String.valueOf(value)));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (!StringUtils.isBlank(subName) && subName.equals(value)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (value != null) subProperties.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(1)));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(1)));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (value != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(value.length()))) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (!StringUtils.isBlank(subName) && subName.equals(name)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (value != null) subProperties.put(subName, value instanceof String) ? subName : String.valueOf(value));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (!StringUtils.hasText(subName) && subName.equals(value)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "subProperties.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1).equals(value.toString())) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (value != null) return subProperties.get(subName) ? subName : String.valueOf(value));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(value.length() - 1));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(value.length()))) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(value.length() - 1));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.charAt(value.length()))) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1).equals(value.length()))) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1).equals(value.toString())) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1) == '\\'') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (subName != null && subName.length() > value.length() && subName.equals(name.charAt(value.length() - 1))) throw new IllegalArgumentException(\"Could not find \" + subName + \" for \" + subName);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(1));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(1))) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(1));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(1))) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (subName.equals(value) && subName.equals(name)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "subProperties.put(subName, value instanceof String ? subName : String.valueOf(value));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1).equals(datatype.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1) == '\\'') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (subName.equals(value) && subName.equals(name)) ? subName.substring(0, subName.length() - 5) : \"Enum\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1).equals(datatype.toString())) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (subName.equals(fName) ? subName.substring(0, subName.length() - 5) : \"Enum\";",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (subName != null && subName.length() > value.length() && subName.equals(name.charAt(value.length() - 1))) throw new IllegalArgumentException(\"Invalid value for \" + subName + \" for \" + subName);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (subName.equals(value) && subName.equals(name)) ? subName.substring(0, subName.length() - 5) : \"Enum\".length());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1))) throw new IllegalArgumentException(\"Invalid value for \" + subName + \" for \" + subName);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1).equals(datatype.charAt(value.length()))) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (subName.equals(value) && subName.equals(name)) ? subName : String.valueOf(value));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (!StringUtils.isNotEmpty(subName) && subName.equals(name)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (subName.equals(fName) && subName.equals(name)) ? subName.substring(0, subName.length() - 5) : \"Enum\";",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(value.length() - 5)); // remove \". \"",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1).equals(datatype.toString())) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (subName.equals(fName) ? subName.substring(0, subName.length() - 5) : subName.substring(value.length() - 5));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (subName.equals(fName) ? subName.substring(0, subName.length() - 5) : subName.substring(value.length() - 5)); // remove \". \"",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(value.toString())) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(subName.length() - 1));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (value != null && subName.equals(name)) ? subName.substring(0, subName.length() - 1).equals(value.toString())) : \"\";",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (subName.equals(fName) ? subName.substring(0, subName.length() - 5) : subName.substring(value.length() - 6));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1))) throw new IllegalArgumentException(\"Invalid value for \" + subName + \" for \" + subName);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(0, subName.length() - 5) + \" for \" + subName);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (StringUtils.isNotEmpty(subName) && subName.equals(value)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (subName.equals(fName) ? subName.substring(0, subName.length() - 5) : \"\".length());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(0, subName.length() - 5) + \"\".length());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(subName.length() - 1));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(String.valueOf(value.length() - 1)));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(value.length() - 5)); // remove \". \"",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1).equals(name.length()))) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (subName.equals(value) ? subName.substring(0, subName.length() - 5) : subName.substring(value.length() - 5));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.length() > 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (subName.equals(fName) ? subName.substring(0, subName.length() - 5) : subName.substring(name.length() - 6));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1))) throw new IllegalArgumentException(String.valueOf(value));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1).equalsIgnoreCase(value.length()))) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1).equals(datatype.length()))) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(0, subName.length() - 5) + \" for \" + subName);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.charAt(value.length()))) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (!StringUtils.isNotEmpty(subName) && subName.equals(value))) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (subName.equals(fName) ? subName.substring(0, subName.length() - 5) : subName;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(0, subName.length() - 5) + \"\".length());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.toLowerCase())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1).equals(datatype.length()))) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (subName != null && subName.length() > value.length() && subName.equals(name.charAt(value.length() - 1))) throw new IllegalArgumentException(\"Invalid value for \" + subName);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (subName.equals(fName) ? subName.substring(0, subName.length() - 5) : subName.substring(name.length() - 5)); // remove \". \"",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (subName != null && subName.length() > value.length() && subName.equals(name.charAt(value.length()))) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1).equals(datatype.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(value.length() - 6));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (subName != null && subName.length() > value.length() && subName.charAt(value.length() - 1) == ',') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (subName.equals(value) && subName.equals(name)) ? subName.substring(0, subName.length() - 1).equals(value) : \"Enum\".equals(value));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (subName.equals(fName) && subName.equals(name)) ? subName : String.valueOf(value));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1).equals(name.substring(0, subName.length()))) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (value != null && subName.startsWith(name) && subName.length() > 0 && subName.charAt(value.length() - 1).equals(name.substring(0, subName) && subName.equals(value.length()))) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (subName.equals(value) ? subName.substring(1) : value.length() == 0 && subName.equals(name.charAt(value.length() - 1))) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (subName.equals(value) ? subName.substring(0, subName.length() - 5) : subName.substring(value.length() - 5)); // remove \". \"",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (subName.equals(fName) ? subName.substring(1) : value.length() == 0 && subName.equals(name.substring(value.length() - 6));",
                "identical": false
            }
        ],
        "buggy_line": "if (value instanceof String) { subProperties.put(subName, String.valueOf(value)); }",
        "fixed_line": "subProperties.put(subName, String.valueOf(value));"
    },
    "Bears-187": {
        "fixes": [
            {
                "k": 1,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger, true));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, true));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, true));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, true));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger, true);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final ObjectMapper mapper = new ObjectMapper();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true), swagger, true));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true), swagger);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().new YAMLFactory(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().new YAMLFactory(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger, true) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false) ? null : swagger, true));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger.getObjectMapper().writeValueAsString(swagger));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final ObjectMapper mapper = new ObjectMapper().new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false)));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "static final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false)).build();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger, true)[0];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().create(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, true);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, null), swagger, true));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final ObjectMapper mapper = new ObjectMapper().new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false) ? null : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure((YAMLGenerator.Feature.MINIMIZE_QUOTES, false) swagger, true));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "static final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, true)[0];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final ObjectMapper mapper = new ObjectMapper().new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, true));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false).get();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false))) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().constructType(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger, false));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, true)[0];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false).writeValueAsString(swagger));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final ObjectMapper mapper = new ObjectMapper(baseDir, new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false)[0];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, true);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false)[0];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger, false);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, swagger, true));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(RAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true), swagger, true);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true, true));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, null), swagger);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false)[0];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().constructType(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true), swagger.getObjectMapper().writeValueAsString(swagger));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, swagger, true));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swaggerString);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().create(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().create config(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final ObjectMapper mapper = new ObjectMapper(HttpConstants YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger.getGenerator(swagger));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false) + swagger;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger, true));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false) ? null : true));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false) + swagger.getSwagger()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final ObjectMapper mapper = new ObjectMapper(HttpStatus.Feature.MINIMIZE_QUOTES, false, true));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, swagger, true));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputFolder + File.separator + \"YAMLGenerator.Feature.MINIMIZE_QUOTES, true)\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, null));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final ObjectMapper mapper = new ObjectMapper().new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false).build();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputFolder + File.separator + \"YAMLGenerator.Feature.MINIMIZE_QUOTES, false)\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(new YAMLFactory().createDateFormat(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger, true));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false))?",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false) + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false) ? null : null));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false, false) + swagger;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), true));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputFolder + File.separator + \"YAMLGenerator.Feature.MINIMIZE_QUOTES, true)[0];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger.getCodec().writeValueAsString(swagger));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false).getObjectMapper().writeValueAsString(swagger));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final ObjectMapper mapper = new ObjectMapper(HttpStatus.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure((YAMLGenerator.Feature.MINIMIZE_QUOTES, true) swagger, true));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final ObjectMapper mapper = new ObjectMapper().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false), swagger);",
                "identical": false
            }
        ],
        "buggy_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
        "fixed_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory() .configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true) .configure(YAMLGenerator.Feature.ALWAYS_QUOTE_NUMBERS_AS_STRINGS, true));"
    },
    "Bears-110": {
        "fixes": [
            {
                "k": 1,
                "patch": ".any(\"(d+),\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"*\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"number\".equals(d+),\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"*\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"*\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").matches();",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"*\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\")\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"*\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\")\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\")\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\")\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"*\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"traces\").number(\"(d+),\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".any(\"(d+),\").number(\"(d+) + \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\")\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").\").build();",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"*\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").matches();",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"s\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").\").build();",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\")\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").matches();",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"s\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").\").build();",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\";\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").build();",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").matches();",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\")\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"s\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").\").build();",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\";\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"?v=\").number(\").number(\"",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").matches();",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"s\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"d+)\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\";\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".any(\"(d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\"(d+)\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").\").build();",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").matches();",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"d+), \").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").number(\").\").build",
                "identical": false
            }
        ],
        "buggy_line": ".any()",
        "fixed_line": ".expression(\",.*\") .or() .text(\"#\")"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.addAll(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty())",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.get(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.get(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.get(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty())",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData() != null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.get(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData() != null;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() ||",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.get(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty())",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty()",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.get(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.get(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.get(\"ro.pippo.session.SessionData\") || WhiteList.isEmpty() || WhiteList.contains(\"ro.pippo.session.SessionData\");",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, position_ms);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return setQueryParameter(\"position_ms\", position_ms * setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \"=\" + position_ms);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? 0 : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? positionList.get(Position_ms) : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"\") + setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position.getFixTime().getTime() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position.ms : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \"ms\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms\", position_ms) : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\", trace_ms);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : 0L;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, buf_ms);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \" position_ms\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position.getDescription() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"\") + setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms : position_ms);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"\") + setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return setQueryParameter(\"position_ms == null ? 0 : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getSpeed() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : 0L;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getDescription() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getPosition() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \"position_ms\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms\" : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position.getPosition() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getParent() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? 0 : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"type\", position_ms);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_msmsms\", position_ms);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\" position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_msms\", trace_ms);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_msms\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return setQueryParameter(\"position_ms, position_ms);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getMessage() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms\", position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? setQueryParameter(\"position_ms\", position_ms) : setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_msms+\", position_ms);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"\") + setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? 0 : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return setQueryParameter(\"position_ms, position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"\") + setQueryParameter(\"position_msmsms\", position_ms);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? 0 : setQueryParameter(\"position_ms+\", position_ms);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms+\", trace_ms);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"\") + setQueryParameter(\"type\", position_ms);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : null);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \" bytes\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.toBuilder() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_ms : setQueryParameter(\"query\", position_ms);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return setQueryParameter(\"position_ms\", position_ms) + setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getLatitude() : setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return setQueryParameter(\"position_ms\", position_ms == null ? 0 : setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_ms);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms - 1)) : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.ms : setQueryParameter(\"position_ms\", trace_ms);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return setQueryParameter(\"position_ms\", position_ms - position_ms);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_ms\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime() : setQueryParameter(\"position_msms\", position_ms);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return setQueryParameter(\"position_ms -> setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"\") + setQueryParameter(\"position_msms+\", position_ms);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? position_.getFixTime().getTime() : setQueryParameter(\"position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return setQueryParameter(\"position_ms\", position_ms != null ? setQueryParameter(\"position_ms : \"\") + setQueryParameter(\"position_ms + \" ms\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return setQueryParameter(\"position_ms\", position_ms + \" bytes\";",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return setQueryParameter(\"position_ms\", position_ms, setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (String.class.isAssignableFrom(raw) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ((raw == String.class) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ((raw == String.class) || (raw == Object.class)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (String.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (String.class.isAssignableFrom(raw) || Boolean.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (cls == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (int.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (cls == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (e.getClass().getName().equals(String.class) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Integer.class.isAssignableFrom(raw) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (int.class.isAssignableFrom(raw) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (int.class.isAssignableFrom(raw) || Boolean.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (EnumSet.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Integer.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (e.getClass().getName().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (int.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Calendar.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Integer.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (type == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Integer.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (forType == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == .util.Date.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (String.class.isAssignableFrom(raw) || Type.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Integer.class.isAssignableFrom(raw) || Boolean.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (kind == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == .sql.Date.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (cls == String.class || raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == Integer.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (content.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (forType == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (type == String.class) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (e.getClass().getName().equals(String.class) || String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (kind == String.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == Boolean.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw) || Boolean.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (String.class.isAssignableFrom(raw) || Integer.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Number.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (!String.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (String.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Object.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (kind == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Integer.class.isAssignableFrom(raw) || Integer.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Iterator.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (e.getClass().getName().equals(Object.class) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (String.class.isAssignableFrom(raw) || String.class.equals(raw)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (e.getClass().getName().equals(String.class) || Boolean.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (String.class.isAssignableFrom(raw) || ClassUtil.isBogusClass(raw)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (int.class.isAssignableFrom(raw) || Integer.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (type == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == Integer.class || raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (kind == String.class || raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Boolean.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Date.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (e.getClass().getName().equals(String.class) || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Integer.class == Object.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (forType == String.class || raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (DateTime.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (!raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Double.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == .sql.Timestamp.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == .util.UUID || raw == String.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (forType == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (e.getClass().getName().equals(String.class) || ClassUtil.isBogusClass(raw)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (e.getClass().getName().equals(String.class) || Integer.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (forType == String.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (contentType.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class == Object.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (kind == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (e.getClass().getName().equals(String.class) || Integer.class.equals(raw)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (String.class.isAssignableFrom(raw) || void.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (String.class.isAssignableFrom(raw.getClass())) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (e.getClass().getName().equals(String.class) || isBoolean(raw)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (cls == String.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "// Do NOT ever match unresolved references if (o == _referencedType) return false;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != o.getClass()) return false;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "// Do NOT ever match unresolved references if ((o == null) || o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o).getRawClass()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != o.getClass()) && _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "// Do NOT ever match unresolvedType = (o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "// Do NOT ever match unresolved references if (_referencedType != null) return false;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o instanceof WildcardRecursiveType) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : o.getClass());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType && o instanceof WildcardRecursiveType) return false;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != o;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "// _referencedType = o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "// Do NOT ever match unresolved references if (_referencedType == o) return false;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.getClass()) && o.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != _referencedType) { return false; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.getClass()) && o.getClass() != _referencedType.getRawClass()) return false;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(this.getClass());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "// Do NOT ever match unresolvedType = (o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "// Do NOT ever match unresolved(o.getClass(), _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) || o.getClass() != o.getClass()) return false;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "// Do NOT ever match unresolvedType(_referencedType, o) return false;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != o.getClass()) return false;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? o.getClass() : _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "// Do NOT ever match unresolved references if (_referencedType == o) return true;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() == _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "// Do NOT ever match unresolvedType = _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(this._referencedType.getClass());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != o.getClass()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.getRawType()) return false;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.getRawClass()) return false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o).getSelfReferencedType()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o).getReturnType());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.getClass()) ? o.getClass() : _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? !_referencedType.equals(o) : _referencedType.equals(o));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "// Do NOT ever match unresolved references if ((o == o) || o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o)) && _referencedType.equals(o;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o).getRawClass());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? (_referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "// Do NOT ever match unresolvedType(_referencedType, o).getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != _referencedType.getRawClass()) return false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : o.getClass()) && _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "// Do NOT ever match unresolvedType = (o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o).getRawClass());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(((ResolvedRecursiveType) o).getRawClass()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o.getClass()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != _referencedType.getClass()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? !_referencedType.equals(o) : _referencedType.equals(o).getRawClass()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o)) return false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != o);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType._referencedType.equals(o));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType._referencedType);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(ClassRecursiveType.getClass());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? !_referencedType.equals(o) : _referencedType.getClass());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? !_referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.getClass()) && o.getClass() != _referencedType.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? !_referencedType.equals(o) : _referencedType.equals(o)) && _referencedType.equals(o;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) || o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType._referencedType.equals(o).getRawClass()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != _referencedType.getRawClass()) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() == _referencedType.getRawClass()) return false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()).equals(o.getClass());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(o._referencedType.getClass());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "// Do NOT ever match unresolved references if ((o == null) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.equals(o.getClass()));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() == _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "// Do NOT ever match unresolved references if (_referencedType != o) return false;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "// Do NOT ever match unresolvedType(_referencedType, _referencedType.equals(o));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o)) && _referencedType.equals(o.getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.equals(o.getClass()) && o.getClass() != _referencedType.getRawClass()) return false;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "// Do NOT ever match unresolved if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "// Do NOT ever match unresolvedType(_referencedType, _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.equals(o) && o.getClass() != _referencedType.getRawClass()) return false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.getClass()) && o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.equals(o) && o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() != _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass() == _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o).getActiveReferencedType()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o)) && _referencedType.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(o.getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass() == o.getClass()) return false;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(property.getClass());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "// Do NOT ever match unresolved references if ((o == o) ? _referencedType.equals(o) : _referencedType.getClass()) && o.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(o) : _referencedType.equals(o).getActualReferencedType()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) || o.getClass() != getClass()) return false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "// Do NOT ever match unresolved references if ((o == _referencedType) ? _referencedType.equals(((ResolvedRecursiveType) o).getRawClass()) : _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "// Do NOT ever match unresolvedType(_referencedType.getClass() != _referencedType.equals(o.getClass()) && o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "// Do NOT ever match unresolved references if ((o == null) || o.getClass() != _referencedType.equals(o.getClass()) && o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "// Do NOT ever match unresolved references if (_referencedType.equals(o) && o.getClass() != _referencedType.getClass()) return false;",
                "identical": false
            }
        ],
        "buggy_line": "// Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));",
        "fixed_line": "if (o.getClass() == getClass()) { // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since // there is likely to be a cycle... // but... true or false? return false; /* // Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType())); */ } return false;"
    },
    "Bears-222": {
        "fixes": [
            {
                "k": 1,
                "patch": "List<E> viAdj = new ArrayList<>(n);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "List<E> viAdj = new ArrayList<>(n * n);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "List<E> viAdj = new ArrayList<>(k);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "List<E> viAdj = new ArrayList<>(vi);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "List<E> viAdj = new ArrayList<>(n * e);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "List<E> viAdj = new ArrayList<>(m);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "List<E> viAdj = new ArrayList<>(n * d);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "List<E> e = adj.get(v).get(r);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "List<E> viAdj = new ArrayList<>(m * n);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "List<E> viAdj = new ArrayList<>();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "List<E> viAdj = new ArrayList<>(n * m);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) % n;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(r);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "List<E> viAdj = Math.abs(e.get(v) % n;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n) % n);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "List<E> viAdj = new ArrayList<>(vi * e);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n) % 2));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(r) % n);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "List<E> viAdj = graph.getEdge(v, e);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "List<E> viAdj = Math.max(vi, ring.get((i + 1) % n));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "List<E> viAdj = adj.get(v).get(r);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n) % n));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(e)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(k)) > Matrices.EPS;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) % n);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "List<E> viAdj = Math.min(vi, ring.get(i) % n;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "List<E> viAdj = new ArrayList<>(rng.nextDouble());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "List<E> viAdj = Math.sqrt(Math.abs(e.get(v) % n;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(r) + Math.abs(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "List<E> viAdj = Math.abs(v) <= p && Math.abs(e.get(k)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(r) + Math.abs(e)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(r)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n) / 2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(r) + Math.abs(e.get(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(r));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n) % Math.abs(e)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "List<E> viAdj = new ArrayList<E>();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(k)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "List<E> viAdj = Math.sqrt(Math.abs(e.get(v) % n);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "List<E> viAdj = Math.sqrt(rng.nextInt(n) % n;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + e.get(r);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "List<E> e = adj.get(v) % n;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(e.get(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "List<E> viAdj = adj.get(v).get(vi);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "List<E> viAdj = Math.abs(v) <= p && (Math.abs(e.get(r) < 0.0)) ? r : 0.0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "List<E> viAdj = new ArrayList<>(n * e.size());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "List<E> viAdj = Math.abs(v) <= p && Math.abs(e.get(r) < 0.0 ? r : 0.0);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "List<E> viAdj = Math.max(vi, ring.get((i + 1) % n);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(e.get(r));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "List<E> viAdj = adj.get(v, k) / 2;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "List<E> viAdj = Math.abs(e.get(k)) > Matrices.EPS ? j : Matrices.EPS;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(r) < 0.0 ? r : 0.0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "List<E> viAdj = new ArrayList<>(v);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(r)) > Matrices.EPS ? j : 0.0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n) > 0) ? e : 0.0);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "List<E> viAdj = Math.max(vi, ring.get((i + 1) % n) % n);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v) > Matrices.EPS ? e.get(r) : 0.0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "List<E> viAdj = Math.sqrt(Math.abs(e.get(r) % n);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(e)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(r)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(k)) > Matrices.EPS ? j : Matrices.EPS;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(j) + Math.abs(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(r)) > Matrices.EPS ? e : 0.0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(r);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "List<E> viAdj = Math.abs(v) <= p && (Math.abs(e.get(r) < 0.0)) ? r : Matrices.EPS;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "List<E> viAdj = Math.abs(e.get(r) % n;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v) > Matrices.EPS ? e.get(r) : 0.0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v) % n;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "List<E> viAdj = Math.max(vi, ring.get((i + 1) % n) % n));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (rng.nextDouble() < p) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "List<E> viAdj = Math.sqrt(v).get(vi);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n) % 1));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "List<E> vAdj = new ArrayList<>(n);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v) > Matrices.EPS ? j : 0.0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(e));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v) > Matrices.EPS ? e : 0.0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "List<E> viAdj = Math.min(vi, ring.get((i + 1) % n) % n) % 2));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(v) + Math.abs(r) % n);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "List<E> viAdj = new ArrayList<>(n * n) / 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "List<E> viAdj = Math.abs(v) <= p && Math.abs(e.get(r)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(r) % n));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v)) > Matrices.EPS ? j : Matrices.EPS;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "List<E> viAdj = adj.get(rng.nextInt(n) % n;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "List<E> viAdj = Math.abs(v) <= p && (Math.abs(e.get(r) < 0.0)) ? e.get(r) : 0.0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "List<E> viAdj = Math.abs(e.get(k)) > Matrices.EPS;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "List<E> viAdj = Math.max(v, e);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(r) + Math.abs(v)) > Matrices.EPS ? j : 0.0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v)) > Matrices.EPS ? j : 0.0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v) > Matrices.EPS ? e.get(r) : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "List<E> viAdj = Math.min(v, ring.get((i + 1) % n));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(r) + Math.abs(e));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "List<E> viAdj = Math.min(vi, ring.get(i) % n);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e) + Math.abs(v) > Matrices.EPS ? e : 0.0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "List<E> viAdj = Math.max(vi, ring.get((i + 1) % n) % 2));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "List<E> viAdj = new ArrayList<>(Math.abs(e.get(r) + Math.abs(v)) > Matrices.EPS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "List<E> viAdj = Math.min(v, ring.get((i + 1) % n) % n);",
                "identical": false
            }
        ],
        "buggy_line": "List<E> viAdj = adj.get(i); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { V v = ring.get(i); E e = adj.get(i).get(r);",
        "fixed_line": "List<E> viAdj = adj.get(vi); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { if (rng.nextDouble() < p) { V v = ring.get(i); E e = adj.get(v).get(r);"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) + 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.values());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes, attributes.length);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) + 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.emptyMap() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? new ConcurrentHashMap<>(attributes.length) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes, attributes);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes instanceof ConcurrentHashMap<>(attributes.length) ?attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.emptyMap() : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? attributes.get(attribute) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length + 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? new ConcurrentHashMap<>(attributes.length) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length ? attributes.length) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? attributes.get(attribute) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length) + 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) ? attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ?attributes.get(attribute) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size, attributes.length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 1) ?attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute.getAttributeName()) : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null ? attributes.length : new ConcurrentHashMap<>(attributes.length));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? null : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes instanceof ConcurrentHashMap<>(attributes.length) ? attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? attributes.get(attribute.getAttributeName()) : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? new ConcurrentHashMap<>(attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ?attributes.get(attribute) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 1) ? Collections.emptyMap() : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? new ConcurrentHashMap<>(attributes.length - 1) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? new ConcurrentHashMap<>(attributes) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length, attributes.length) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName() + \".value\"));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) ? attributes.length : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.emptyMap()) : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length ? attributes.length) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ?attributes.get(attribute) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.attributes.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute.getAttributeName() - 1) : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute.getAttributeName()) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? attributes.get(attribute.getAttributeName()) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map>emptyMap() : attributes.get(attribute.getAttributeName() + \".value\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length, attributes.length) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.getAttributeMap()) ? null : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? attributes.get(attributes) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.emptyMap() : attributes.get(attribute.getAttributeName() + \".value\"));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.get(attributes);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes instanceof ConcurrentHashMap<>(attributes.length) ?attributes.get(attributes) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? attributes.get(attribute.getAttributeName() - 1) : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length, attributes));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ?attributes.get(attribute.getAttributeName()) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.getAttribute() : new ConcurrentHashMap<>(attributes.length));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName()).length() + 1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null ? attributes.length) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map>emptyMap() : attributes.get(attributes.size() - 1).getAttributes().size() + 1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) + ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.size, attributes);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null ? Collections.<Map<?, ?>) : attributes.getAttributeMap()) ? null : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ?attributes.get(attribute.getAttributeName()) : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 1) ? Collections.emptyMap() : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? null : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ?attributes.get(attribute) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptyMap() : attributes.get(attribute.getAttributeName(), attribute));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes instanceof ConcurrentHashMap<>(attributes.length) ?attributes.get(attributes) : new ConcurrentHashMap<>(attributes.length, attributes.length);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.getAttribute(attribute) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null) ? Collections.emptyMap() : attributes.get(attributes);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.EMPTY_LIST : attributes.get(attribute.getAttributeName());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute.getAttributeName() - 1) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ?attributes.get(attribute.getAttributeName()) : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0) ? new ConcurrentHashMap<>(attributes.get(attributes) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes.length == 0 ? 0 : new ConcurrentHashMap<>(attributes.length) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes != null && attributes.length > 0 ? attributes.get(attribute.getAttributeName() - 1) : new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes == null || attributes.length == 0 ? Collections.emptySet() : attributes.get(attribute.getAttributeName()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) ? attributes.get(attribute.getAttributeName()) : new ConcurrentHashMap<>(attributes);",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (deser == _contentDeserializer.None.class || ClassUtil.isBogusClass(deser)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (deser == _JsonDeserializer.None.class || ClassUtil.isBogusClass(deser)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (deser == _ValueDeserializer) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (deser == _class || ClassUtil.isBogusClass(deser)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (deser == _valueDeserializer.None.class) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (deser == _ValueDeserializer) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (deser == _ValueDeserializer) { return new AnnotationProperty(this, deser); }",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (deser == _ValueDeserializer.None.class) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (deser == _valueDeserializer) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == JsonDeserializer.None.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (deser == _valueDeserializer.None.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClassProperty(deser)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (deser == _valueDeserializer) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClassProperty(deser)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (deser == _valueDeserializer.None.class) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (deser == _valueDeserializer.None.class) { return new InnerClassProperty(deser, deser) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (deser == _valueDeserializer.None.class) { return new InnerClassProperty(deser); }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (deser == _valueDeserializer) { return new InnerClassProperty(deser, deser) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (deser == _contentDeserializer.None.class) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == JsonDeserializer.None.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (deser == _valueDeserializer.None.class) { return new AnnotationProperty(this, deser); }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (deser == _ValueDeserializer.None.class) { return new AnnotationProperty(this, deser); }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (deser == _ValueDeserializer.None.class) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == BeanProperty.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (deser == _ValueDeserializer) { return new InnerClassProperty(this, deser); }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (deser == _ValueDeserializer) { return new InnerClassProperty(deser); }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (deser == _ValueDeserializer.None.class) { return new InnerClassProperty(deser); }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser.getClass())) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (_annotationIntrospector == JsonDeserializer.None.class) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (deser == _JsonDeserializer.None.class) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (deser == _contentDeserializer.None.class || ClassUtil.isBogusClassProperty(deser)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_propertyClass == JsonDeserializer.None.class) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (deser == _ValueDeserializer) { return new InnerClassProperty(deser, _valueDeserializer, deser) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (deser == _suppressDeserializer) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (deser == null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (deser == _ValueDeserializer) { return new InnerClassProperty(deser, deser) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (deser == _JsonDeserializer.None.class || ClassUtil.isBogusClassProperty(deser)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == _class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() != BeanProperty.class) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == BeanProperty.class) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == Object.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (deser == _ValueDeserializer.None.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (deser == _contentDeserializer.None.class) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (deser == _contentDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == JsonDeserializer.None.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() != JsonDeserializer.None.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (deser == _valueDeserializer.None.class) { return new InnerClassProperty(deser) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser.getClass())) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).equals(deser)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == _valueDeserializer.getRawClass())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == JsonDeserializer.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (deser == _contentDeserializer.None.class) { return new AnnotationProperty(this, deser); }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == _valueDeserializer.getRawClass()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == _class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (deser == _contentDeserializer.None.class) { return new InnerClassProperty(deser); }",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == _property.getClass()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (deser == _ValueDeserializer) { return new InnerClassProperty(deser, _valueDeserializer) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).isBogusClass()) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (deser == _generatorDeserializer.None.class) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == baseType.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser)) { return new AnnotationProperty(deser); }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == _valueDeserializer.getRawClass()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == BeanProperty.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == _valueDeserializer.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (deser == _propDeserializer.None.class) { return new AnnotationProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == JsonDeserializer.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_property == deser) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (deser == _suppressDeserializer) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (_annotationIntrospector == JsonDeserializer.None.class) { return new InnerClassProperty(deser); }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (deser == _JsonDeserializer.None.class) { return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == Object.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == _valueDeserializer.getRawClass()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (deser == _valueDeserializer) { return new InnerClassProperty(deser); }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (deser == _ValueDeserializer.None.class) { return new InnerClassProperty(deser) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (deser == _valueDeserializer.None.class) { return new InnerClassProperty(this, deser); }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() != BeanProperty.class) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == _class) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == type.getRawClass())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == baseType.getRawClass())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (deser == _ValueDeserializer.None.class) { return new InnerClassProperty(deser, deser) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == _valueDeserializer.getRawClass())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (deser == _propertyDeser && withValueDeserializer(deser, deser)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() instanceof Class<?>)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser)) { // can this occur?",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (deser == _ValueDeserializer) { return new AnnotationProperty(this, deser, _valueDeserializer, deser) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (deser == _ValueDeserializer) { return new AnnotationProperty(this, deser, _valueDeserializer) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() != JsonDeserializer.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == _valueDeserializer.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == baseType.getClass()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (deser == _ValueDeserializer) { return new AnnotationDeserializer(this, deser) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (deser == _ValueDeserializer.None.class || ClassUtil.isBogusClass(deser).getClass() == _property.getClass()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (deser == _ValueDeserializer.None.class) { return new InnerClassProperty(this, deser); }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (_annotationIntrospector == JsonDeserializer.None.class) { return new InnerClassProperty(deser) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (deser == _valueDeserializer) { return new AnnotationProperty(this, deser); }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (deser == _valueDeserializer.None.class || ClassUtil.isBogusClass(deser).getType() == _supply.class) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public void assignIndex(int index) { _delegate.assignIndex(index); } @Override public int getPropertyIndex() { return _delegate.getPropertyIndex(); } @Override public int getCreatorIndex() { return _delegate.getCreatorIndex(); }"
    },
    "Bears-249": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dep = new Clock<>(commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dep = new Clock<>(commitDepBox.dots, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, commitDepBox.dots);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dep = new Clock<>(commitDepBox.dots.dep);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, commitDepBox.dots, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dep = new Clock<>(commitDepBox.dots);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, commitDepBox.dots.dep);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.d",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= this.dots.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != null ? commitDepBox.dep : commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dotsPerPoint ? commitDepBox.dep : new Clock<>(commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.d",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots, commitDepBox.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= this.dots.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != null ? commitDepBox.dep : new Clock<>(commitDepBox.dep));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots, commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= this.dots.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots, commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dots.size() ? commitDepBox.dep : new Clock<>(commitDepBox.dots, commitDepBox.dots.dots, commitDepBox.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots.dots",
                "identical": false
            }
        ],
        "buggy_line": "this.dep = new Clock<>(commitDepBox.dep);",
        "fixed_line": "if (commitDepBox.dep != null) { this.dep = new Clock<>(commitDepBox.dep); } else { this.dep = null; }"
    },
    "Bears-22": {
        "fixes": [
            {
                "k": 1,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref); }",
                "identical": false
            },
            {
                "k": 2,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 3,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 4,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref); }",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 6,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref; }",
                "identical": false
            },
            {
                "k": 9,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 10,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\"]\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName()+\"]\";",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref; }",
                "identical": false
            },
            {
                "k": 13,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+_referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 14,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref + _referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref + _referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_referencedType = \"+_referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (_referencedType != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName()+\"]\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref + _referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\"]\";",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+_referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName()+\"]\";",
                "identical": false
            },
            {
                "k": 29,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\"]\";",
                "identical": false
            },
            {
                "k": 31,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getFullName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (_referencedType != null) { throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref + _referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 35,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\"]\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (_referencedType != null) { throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getText()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "_referencedType = _referencedType; old value = \"+ref; }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 41,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", _referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "_referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getSimpleName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getFullName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\"' for \"+_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.toString()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 47,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getSimpleName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\"]\"; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", _referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getSimpleName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 51,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref + _referencedType+\"]\";",
                "identical": false
            },
            {
                "k": 52,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\"): \"+_referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 53,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.toString()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+_referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.toString()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 56,
                "patch": "new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getSimpleName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 58,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\"' for \"+ref); }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 60,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref + _referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\"' for \"+_referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 62,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+_referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref); }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref + _referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+\", new = \"+ref+\"]\";",
                "identical": false
            },
            {
                "k": 67,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref + (_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\"): \"+_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getFullName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 72,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getFullName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName()+\"]\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\"]\"; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getSimpleName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getText()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName()+\"]\";",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref + _referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "throw new IllegalStateException(\"Trying to re-set ++_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\"]\";",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+\", new = \"+ref+\"]\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getSimpleName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\")\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getSimpleName()+\", new = \"+ref.getClass().getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\".equals(_referencedType+\"]\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\"]\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClassName()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getText()+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.toString()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref+_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName()+\"]\"]\";",
                "identical": false
            },
            {
                "k": 95,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref+\".equals(_referencedType+\"]\"; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getName()+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-setUnreferencedType \"+_referencedType+\", new = \"+ref; }",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_referencedType = new IllegalStateException(\"Trying to re-setUnreferencedType \"+_referencedType+\", new = \"+ref); }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+ref.getClass().getName()+\", new = \"+ref.getClass().getSimpleName()+\"]\";",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public JavaType getSuperClass() { if (_referencedType != null) { return _referencedType.getSuperClass(); } return super.getSuperClass(); }"
    },
    "Bears-137": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (flagIndex != -1 && flagIndex != -1) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (flagIndex != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (flagIndex != -1 && flagIndex > -1) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (flagIndex != -1 && flagIndex - beginIndex > 6) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex != -1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex > -1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (flagIndex != -1 && flagIndex - beginIndex > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (flagIndex != -1 && flagIndex > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex - 1) == -1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - beginIndex >= 6) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex(), StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (flagIndex != -1 &&buf.getUnsignedByte(buf.readerIndex() + 1) == -1) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex() + 2, 2, StandardCharsets.US_ASCII - 1) == -1) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (flagIndex == -1 &&buf.getUnsignedByte(buf.readerIndex() + 1) == -1) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex() + 2, 2, StandardCharsets.US_ASCII - 1) != -1) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex() + 2, 2, StandardCharsets.US_ASCII - 1)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex(), StandardCharsets.US_ASCII)) < 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex - beginIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (flagIndex != -1 && endIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end).length() - 2, 2, StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex() + 1, buf.writerIndex() - 2)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (flagIndex != -1 &&buf.getByte(buf.readerIndex() + 1) == -1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex - startIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int flagIndex = buf.writerIndex() - 2 && flagIndex != -1) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (flagIndex != -1 && flagIndex - beginIndex != 6) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex >= 0 && flagIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (flagIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII - 1) != -1) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII)) < 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex() - beginIndex(), StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex >= 6) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII - 1) == -1) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII - 1) != -1) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (flagIndex != -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII - 1) == -1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex(), endIndex - 3, StandardCharsets.US_ASCII)) < 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end).length() - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - startIndex, StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex() + 1, buf.writerIndex() - 2));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 8, StandardCharsets.US_ASCII), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex - 2, 2, StandardCharsets.US_ASCII - 1) != -1) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (flagIndex != -1 &&flagIndex != -1) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII)) < 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end).length() - 2, 2, StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"\\r\\n\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex() - beginIndex(), StandardCharsets.US_ASCII)) < 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII), 16) != -1) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex >= 0 && flagIndex != -1) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end) - buf.writerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end).length() - 2, 2, StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (flagIndex != -1 && flagIndex - beginIndex == -1) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (flagIndex == -1 && flagIndex != -1) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int flagIndex = buf.indexOf(endIndex, buf.writerIndex() - beginIndex(), StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex() - beginIndex >= 0 && flagIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex() - beginIndex(), endIndex - 3, StandardCharsets.US_ASCII)) < 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - beginIndex >= 0 && endIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII), 16) != -1) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - beginIndex(), StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - beginIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end - buf.writerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex >= 0 && endIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int flagIndex = buf.indexOf(beginIndex(), buf.writerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII - 1) != -1) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - beginIndex(), endIndex - 3, StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 3, StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex + 1 == -1) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - beginIndex >= 0 && flagIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex() + 1, new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"AA\"), StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (flagIndex == -1 && buf.readableBytes() >= length + 1) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex - buf.readerIndex() + 1) == -1) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (flagIndex != -1 && flagIndex - beginIndex + 1) == -1) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end).length() - 2, 2, StandardCharsets.US_ASCII - 1) != -1) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end) - buf.writerIndex(), new StringFinder(\"\\r\\n\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 1) == -1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 3, StandardCharsets.US_ASCII - 1)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII), 16) == -1) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII - 1) == -1) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - startIndex, StandardCharsets.US_ASCII)) < 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int flagIndex = buf.indexOf(\"AA\") != -1 && flagIndex - beginIndex > 6) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), end, buf.writerIndex() - startIndex, StandardCharsets.US_ASCII - 1)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII), 16) == -1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex() - beginIndex(), endIndex - 3, StandardCharsets.US_ASCII)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int flagIndex = buf.indexOf(endIndex(), buf.writerIndex() - 2, 2, StandardCharsets.US_ASCII));",
                "identical": false
            }
        ],
        "buggy_line": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"AA\")); if (flagIndex != -1 && flagIndex - beginIndex == 6) {",
        "fixed_line": "int separatorIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '|'); if (separatorIndex > 0 && separatorIndex - beginIndex > 19) {"
    },
    "Bears-224": {
        "fixes": [
            {
                "k": 1,
                "patch": "Object source = target != null ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Object source = target != null ? operations.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Object source = target != null ? input.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Object source = input;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Object source = target == null ? Value.of((O) target) : Value.empty();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Object source = target != null ? operations.apply(target) : Value.empty();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Object source = target != null ? operations.apply(node) : Value.empty();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Object source = input != null ? operations.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Object source = target != null ? operations.apply(input) : Value.empty();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Object source = target != null ? operations.apply(p, 0) : Value.empty();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Object source = target == null ? Value.of(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Object source = input.apply(node, target) != null ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Object source = p.apply(source) != null ? operations.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Object source = target != null ? p.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Object source = input.getValue() == null ? Value.of((O) target) : Value.empty();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Object source = target != null ? input.apply(node) : Value.empty();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Object source = target != null ? prop.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Object source = source != null ? input.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Object source = p.apply(source) != null ? input.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Object source = source != null ? operations.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Object source = input.value() == null ? Value.of((O) target) : Value.empty();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Object source = target != null ? operations.apply(ctx) : Value.empty();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Object source = input.apply(p, target) != null ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Object source = target != null ? source.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Object source = p.apply(source) != null ? Value.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Object source = input.apply(node, target) != null ? Value.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Object source = target != null ? operations.apply(source) : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Object source = target != null ? m.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Object source = input.parent() == null ? Value.of((O) target) : Value.empty();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Object source = target != null ? property.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Object source = input.apply(p) ? Value.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Object source = target != null ? input.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Object source = p.apply(source) == null ? Value.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Object source = input.apply(p) ? Value.of(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Object source = source != null ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Object source = target != null ? operations.apply(ctx, target) : Value.empty();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Object source = output.apply(p) ? Value.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Object source = input != null ? input.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Object source = input.apply(p) != null ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Object source = input.getValue() != null ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Object source = target != null ? operations.apply(o) : Value.empty();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Object source = p.apply(source) != null ? target : Value.empty();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Object source = target != null ? operations.apply(null, null) : Value.empty();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Object source = target != null ? format.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Object source = target != null ? operations.apply(p) : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Object source = target == null ? Value.of(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Object source = target != null ? operations.apply(ctx, source) : Value.empty();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Object source = input != null ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Object source = target != null ? prop.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Object source = input.apply(p) != null ? input.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Object source = target != null ? op.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Object source = target != null ? op.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Object source = input.apply(node, target) != null ? Value.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Object source = target != null ? operations.apply(p, null) : Value.empty();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Object source = target != null ? span.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Object source = target != null ? path.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Object source = target != null ? input.apply(p, 0) : Value.empty();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Object source = input.db() == 0) ? Value.empty() : Value.empty();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Object source = p.apply(source) == null ? Value.empty() : Value.empty();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Object source = output != null ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Object source = target != null ? Value.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Object source = target != null ? source.apply(target) : Value.empty();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Object source = target != null ? operations.apply(ctx, 0) : Value.empty();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Object source = target != null ? source.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Object source = target != null ? input.apply(p) : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Object source = target != null ? operations.apply(e) : Value.empty();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Object source = target != null ? source.apply(node) : Value.empty();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Object source = target != null ? operations.apply(ctx, input) : Value.empty();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Object source = output.apply(source) != null ? target : Value.empty();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Object source = target != null ? span.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Object source = p.apply(source) != null ? p.apply(target) : Value.empty();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Object source = target != null ? operations.apply(ctx, null) : Value.empty();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Object source = target == null ? Value.empty() : Value.empty();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Object source = target != null ? count.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Object source = target != null ? operations.apply(null) : Value.empty();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Object source = target != null ? operations.apply(p.getOperationId(), target) : Value.empty();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Object source = input.apply(node, target) != null ? operations.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Object source = target != null ? random.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Object source = target != null ? output.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Object source = target != null ? operations.apply(ctx, p) : Value.empty();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Object source = input.apply(p) != null ? operations.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Object source = target != null ? format.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Object source = input.apply(node, target) != null ? target : Value.empty();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Object source = target != null ? ? operations.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Object source = p.apply(source) != null ? Value.apply(p) : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Object source = input.apply(p) ? Value.empty() : Value.empty();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Object source = target == null ? Value.of(target) : Value.empty();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Object source = target != null ? operations.apply(Token) : Value.empty();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Object source = input != null ? operations.apply(p, 0) : Value.empty();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Object source = input != null ? operations.apply(node) : Value.empty();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Object source = target != null ? new Value.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Object source = input.apply(node, target) != null ? operations.apply(target) : Value.empty();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Object source = target != null ? to.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Object source = input.apply(p) != null ? input.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Object source = input.apply(p, target) != null ? operations.apply(p) : Value.empty();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Object source = input.apply(p, target) != null ? operations.apply(target) : Value.empty();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Object source = p.apply(source) != null ? p.apply(source) : Value.empty();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Object source = target != null ? operations.apply(Arguments) : Value.empty();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Object source = target != null ? (O) target : Value.empty();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Object source = p.apply(source) != null ? input.apply(p) : null;",
                "identical": false
            }
        ],
        "buggy_line": "Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty();",
        "fixed_line": "try { Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty(); } catch (Exception ex) { return Value.empty();"
    },
    "Bears-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "lac = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "lac = Integer.valueOf(data[i]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "lac = Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "lac = Integer.valueOf(i + 3, Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "\"#CID#\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "lac = Integer.valueOf(i + 4, Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "lac = Integer.parseInt(data[i] + 3, Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "providerCID#\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "lac = Integer.parseInt(data[i] + 3, Integer.parseInt(data[i]) != null ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "lac = Integer.valueOf(data[i] + 3, Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Integer \"#CID#\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i] ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "lac = Integer.parseInt(data[i] + 3, Integer.parseInt(data[i]) ? Long.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Long.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i - 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i] != null)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "lac = Integer.parseInt(String.valueOf(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "lac = Integer.parseInt(data[i], 16) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i] != null)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i] ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i] != null)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Long.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i - 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "lac = Integer.valueOf(data[i] + 3, Integer.parseInt(data[i]) != null ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "lac = Integer.parseInt(data[i] ? Long.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i] != 0)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i] != null)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(position.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i] != null)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(",
                "identical": false
            },
            {
                "k": 73,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i] != null)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(",
                "identical": false
            },
            {
                "k": 75,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i] : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(String.valueOf(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i",
                "identical": false
            },
            {
                "k": 79,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 9), Long.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i - 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i",
                "identical": false
            },
            {
                "k": 84,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 9), Long.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i] ? Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(position.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5)) ? \"#\" : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i - 3, Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Long.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1])}\", Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 5)) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 3, Integer.parseInt(data[i",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case \"#CID#\": cid = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i]) : Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "lac = Integer.parseInt(data[i]); // Long.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) || \"#\".equals(data[i] != Integer.parseInt(data[i]) ? Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i + 1]) ? Integer.parseInt(data[i] : Integer.parseInt(data[i + 1]) : Integer.parseInt(data[i]);",
                "identical": false
            }
        ],
        "buggy_line": "lac = Integer.parseInt(data[i]); break; case \"#CID#\": cid = Integer.parseInt(data[i]);",
        "fixed_line": "if (!data[i].isEmpty()) { lac = Integer.parseInt(data[i]); } break; case \"#CID#\": if (!data[i].isEmpty()) { cid = Integer.parseInt(data[i]); }"
    },
    "Bears-119": {
        "fixes": [
            {
                "k": 1,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 2);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "String type = sentence.substring(typeStart, sentence.length());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "String type = sentence.substring(typeStart, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), typeStart);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1).toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "String type = sentence.substring(typeStart, sentence.length()));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1).toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return typeStart);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 2).toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "String type = sentence.substring(0, sentence.length() - 2);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "String type = sentence.substring(typeStart, sentence.length()).toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 8).toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 6);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1) + 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 2).toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 6).toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1) + 2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 8);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 5);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 8).toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 8));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "String type = sentence.substring(0, sentence.indexOf(',', typeStart) + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return null);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "String type = sentence.substring(typeStart, default: return null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1) + 1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "String type = sentence.substring(typeStart, default: return sentence.length());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return typeStart, buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "String type = sentence.substring(0, sentence.indexOf(',', typeStart) + 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart, default: return null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "String type = sentence.substring(typeStart, buf.length() - 2);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return typeStart, default: return null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return typeStart));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return typeStart, default: return buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 3);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1) + 2);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart, default: return buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1).toString().length());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "String type = sentence.substring(typeStart, sentence.length()).length() - 1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "String type = sentence.substring(typeStart, sentence.length()), default: return null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1), buf.getUnsignedByte(buf.readerIndex() - 1).toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "String type = sentence.substring(typeStart, sentence.length()).toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart, buf.length());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "String type = sentence.substring(typeStart, channel, remoteAddress, default: return null);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "String type = sentence.substring(0, sentence.length() - 2).toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "String type = sentence.substring(typeStart, sentence.length()).length(), default: return typeStart);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1).toString(StandardCharsets.US_ASCII).trim();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return typeStart, default: return null);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "String type = sentence.substring(typeStart, default: return \"\\\"\", typeStart);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1), buf.getUnsignedByte(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1) + default: return null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 6).toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1).trim();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "String type = sentence.substring(0, sentence.indexOf(',', typeStart);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1).toString(StandardCharsets.US_ASCII).trim());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "String type = sentence.substring(sentence.indexOf(',', typeStart) + 1 + 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 5) + \"Z\";",
                "identical": false
            },
            {
                "k": 62,
                "patch": "String type = sentence.substring(0, sentence.indexOf(',', typeStart) + 1 + 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "String type = sentence.substring(0, sentence.length() - 2).toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1), buf.getUnsignedByte(buf.readerIndex() - 1).toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "String type = sentence.substring(typeStart, sentence.length()).length(), typeStart);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1) + 2 + 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "String type = sentence.substring(0, sentence.indexOf(',', typeStart) + 1) + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1), typeStart);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "String type = sentence.substring(0, typeStart);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "String type = sentence.substring(typeStart, sentence.length()), default: return typeStart, buf.toString(StandardCharsets.US_ASCII));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart) + 1 + 1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "String type = sentence.substring(typeStart, channel, remoteAddress, default: return null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), default: return typeStart, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart, buf);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1) + 8;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1).trim().length());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart, buf.indexOf(',', typeStart);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "String type = sentence.substring(typeStart, 1) + 8;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1) + default: return buf.toString(StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "String type = sentence.substring(typeStart, sentence.length(), typeStart));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "String typeStart = sentence.substring(typeStart, sentence.length() - 2);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart, buf.indexOf(',', typeStart));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "String type = sentence.substring(typeStart, sentence);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "String type = sentence.substring(typeStart, default: return typeStart, default: return null);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "String type = sentence.substring(sentence.indexOf(',', typeStart) + 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 9), default: return null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart) + 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "String type = sentence.substring(0, sentence.indexOf(',', typeStart) + 2 + 1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "String type = sentence.substring(typeStart, sentence.length()).length() - 2);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "String type = buf.substring(typeStart, sentence.length() - 2);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1), buf.getUnsignedByte(buf.readerIndex() + 1) + 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "String type = sentence.substring(typeStart, Context.getConfig().getBoolean(typeStart));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "String type = sentence.substring(0, sentence.indexOf('+', typeStart) + 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "String type = sentence.substring(typeStart, default: return \"0\", typeStart);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "String type = sentence.substring(typeStart, sentence.length()).length());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 6)).trim();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "String type = sentence.substring(typeStart, sentence.length() - 1).toString(StandardCharsets.US_ASCII)).trim();",
                "identical": false
            }
        ],
        "buggy_line": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart)); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress);",
        "fixed_line": "int typeEnd = sentence.indexOf(',', typeStart); if (typeEnd > 0) { String type = sentence.substring(typeStart, typeEnd); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress); } } else { return null;"
    },
    "Bears-223": {
        "fixes": [
            {
                "k": 1,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.parse(source, destinationType));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.create(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.parse(source, destinationType));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.parse(source, destinationType));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Class<?>, Value>(source.getClass()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.of(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<>(source, destinationType));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.parse(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType) != null ? source.getRawType() : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "import io.vavr.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "import org.modelmapper.internal.typeResolver; import org.modelmapper.internal.typorElse(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()) ? MatchResult.class : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Class<?>, Value>(source.getClass()));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "import org.modelmapper.internal.typeResolver; import org.modelmapper.internal.typorElse(source, destinationType));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType) != null ? source.getRawType() : MatchResult.class;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<>(source, destinationType));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "import io.vavr.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorAssignableFrom(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<>(source.getClass()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "import io.vavr.internal.typorElseThrow(() -> new ConditionalConverter<Class<?>, Value>(source.getClass()));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "import org.modelmapper.internal.typeResolver; import org.modelmapper.internal.typorElse(source.toString()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeConverter;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()) ? MatchResult.class.cast(destinationType) : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.parse(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()) ? MatchResult.class.cast(destinationType.getRawClass()) : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver, destinationType, context.getIncludeAll());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.create(source, destinationType));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.create(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.create(sourceType, destinationType) != null ? source.getRawType() : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.create(sourceType, destinationType) != null ? source.getRawType() : MatchResult.class;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.getClass()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.resolve(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType, destinationType) != null ? source.getRawType() : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString())));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.matches(source, destinationType));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType, destinationType) != null ? source.getRawType() : MatchResult.class;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "import org.modelmapper.internal.typorElse(source.toString()));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.exp.equals(source.toString()));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.type.equals(source.toString()));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.Filename.equals(sourceType, destinationType)) ? MatchResult.create(source.toString() : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType)) ? MatchResult.create(source.toString() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Value, Value>(source.getClass()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()) : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.value()));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.getRawClass(), destinationType));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType, destinationType)) ? MatchResult.create(source.toString() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorAssignableFrom(source, destinationType));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.type.equals(sourceType) ? MatchResult.class : MatchResult.class;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType)) ? null : MatchResult.class;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.getRawClass()));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "import io.vavr.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeConverter; import org.modelmapper.internal.typorElse(source, destinationType));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.Filename.equals(sourceType, destinationType)) ? MatchResult.create(source, destinationType) : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType, destinationType)) ? null : MatchResult.class;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.type.equals(sourceType, destinationType)) ? MatchResult.create(source.toString() : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.convert(source, destinationType));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.value, destinationType));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.equals(sourceType, destinationType)) ? MatchResult.create(source.toString() : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()) ? MatchResult.NONE() : null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.equals(sourceType, destinationType)) ? MatchResult.create(source, destinationType) : MatchResult.class;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Class<?>, Value.class, destinationType));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.Filename.equals(sourceType, destinationType)) ? MatchResult.create(source, destinationType) : MatchResult.class;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorAssignableFrom(source.getClass()));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Value, Value>() {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(src, destinationType));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.Filename.equals(sourceType, destinationType)) ? MatchResult.create(source) : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType)) ? MatchResult.create(source) : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.type.equals(sourceType, destinationType)) ? MatchResult.create(source, destinationType) : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType, destinationType)) ? MatchResult.create(source) : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.type.equals(sourceType, destinationType)) ? MatchResult.create(source, destinationType) : MatchResult.class;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Class<?>, Value.class, destinationType>());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.(\"com.blazebit.persistence.impl.function.entity.ValuesEntity\") ? MatchResult.create(source, destinationType) : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Class<?>, Value>() {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Class<?>, ValueConverter, import org.modelmapper.internal.typorElse(source.toString()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType) != null ? source.getRawTypeResolver() : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.value.toString()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType) ? MatchResult.class : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source, destinationType)) ? MatchResult.create(source, destinationType) : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()) ? MatchResult.NONE : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.create(src, destinationType));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.ArrayList.equals(source.toString()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.exp.equals(source.getRawClass()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Object, Value>() {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeResolver.equals(sourceType, destinationType)) ? MatchResult.create(source, destinationType) : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElseThrow(() -> new ConditionalConverter<Object, Value>(source.getClass()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.type.equals(sourceType, destinationType)) ? MatchResult.create(source) : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeConverter; import org.modelmapper.internal.typorElse(source.toString()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType, destination.value()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.create(source.toString(), destinationType));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeConverter; import org.modelmapper.internal.typeResolver;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.(\"com.blazebit.persistence.impl.function.entity.ValuesEntity\") : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(sourceType));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typorElse(source.toString()) ? MatchResult.class.cast(destinationType.getRawType()) : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.zipkin.find(sourceType, destinationType));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.spi.ConditionalConverter;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.internal.typeConverter; import org.modelmapper.internal.typorElse(sourceType, destinationType));",
                "identical": false
            }
        ],
        "buggy_line": "import io.vavr.Value; import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.spi.ConditionalConverter; import org.modelmapper.spi.MappingContext; import org.modelmapper.spi.PropertyInfo; /** * @author jstuecker * * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }",
        "fixed_line": "import io.vavr.Value; /** * @author jstuecker * <p> * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { if (context == null || context.getSource() == null) { return null; } final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (1 << 8) | a[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (a << 8) | a[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l << 8) | pad[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << 8) | a[i]; // odd vertex, l = (l << 8) | pad[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << 8) | a[i]; // 10 -> pad byte 0",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l << 8) | a[i]; // 8 byte 0",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l << 8) | a[i]; // odd vertex, size",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l =(a[i - 8) | a[i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l >> 8) | a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) << 8) | pad[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(b[i], pad[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad)) <= l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << 8) | a[i]; // odd vertex, 8+((int) l) & 0x7F) << 8) | pad[i];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) << 8) | pad[i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i], pad[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l - 8) | a[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 8) | a[i]; // odd vertex, 8+((int) l) & 0x7F) << 16) | pad[i];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i - 1]) <= size;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l + 8) | a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo is JRE 7+",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) << 8) | a[i];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size)",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 8) | a[i]; // pad byte 0",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) | pad[i];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << 8) | a[i]; // odd vertex, as byte 0",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l % 8) | a[i];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = (l << 8) | a[i]; // 10 -> pad byte IPv4-Compatible or IPv4-Mapped",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad)) <= l = (l << 8) | pad[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(b[i], pad[i], pad[i];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]) <= size;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size)",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(b[i], pad[i - 1]) <= size;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) << 8) | a[i];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) | pad[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l << 8) | a[i]; // odd vertex, l = (l << 8) | pad[i] & 0x7F) | pad[i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << 8) | a[i]; // odd vertex, buffer[i], pad[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad[i], pad[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad)",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l << 8) | a[i]; // odd vertex, l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], a[i];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i + 1]) <= size;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are non-byte length",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], a[i - 1]) <= size;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, 4",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i], a[i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) < pad[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], a[i], pad[i];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l % 8 | a[i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i + 1]) <= size;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l << 8) | a[i]; // odd vertex, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, 4",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]) <= size];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << 8 | a[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << 16 | a[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(b[i], pad[i]) <= size;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i - 1]) <= size];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << 8) | a[i]; // odd vertex, or IPv4-Compatible or IPv4-Mapped",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l << 8) | a[i]; // 100 byte IPv4-Compatible or IPv4-Mapped",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << 8) | a[i]; // odd vertex, or IPv4-Compatible",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) & 0x08[i];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, size) < pad[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], 8)) <= pad[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there 0",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], pad[i]) | pad[i];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], 16[i], pad[i];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], 8)) > pad[i];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l =(l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l << 8) + a[i];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(b[i], pad[i + 1]) <= size;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l << 8) | a[i]; // odd vertex, pad[i], pad[i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << 8) | a[i]; // odd vertex, 8+((int) l) & 0x7F) << 8 | pad[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(b[i], pad)",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], a[i];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l << 8) | b[i];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], 8",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) & 0x7F;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow(b[i], pad, 16)",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size)][i];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) > pad[i];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << 8) | a[i]; // at most 80% full",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l & 8) | a[i];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l << 8) | a[i]; // odd vertex, 8+((int) l, pad[i];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << 8) | a[i]; // odd vertex, 8+((int) l[i];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << 8) | a[i]; // odd vertex, pad [JACKSON-[i], pad[i];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l << 8) | a[i]; // odd vertex, pad [JACKSON-byte length",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << 8) - a[i];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l << 8) | a[i]; // Long.compareTo(a[i], a[i], pad[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], a[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l =(a[i + 8) | a[i];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], a[i], pad[i];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) | a[i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad, size) & 0xFF, pad[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l << 8) | a[i]; // odd vertex, pad [JACKSON-of-input",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], pad[i], pad[i];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are last byte 0",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << 8) | a[i]; // odd vertex, if there are pow pow(b[i], 16[i];",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-163": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tokens.canConsume(\"AS\", \"(\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (tokens.canConsume('+')) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (tokens.canConsume('(')) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tokens.canConsume(',')) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (tokens.canConsume(\"UNDER\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (tokens.matches(\"ON\", \"DELETE\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tokens.canConsume('.')) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tokens.canConsume(\"ON\", \"COMMIT\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (tokens.canConsume(\"UNIQUE\", \"(\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (tokens.canConsume(\"+\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (tokens.canConsume(\"ON\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tokens.canConsume(\"USER\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tokens.canConsume(\"INTERVAL\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (tokens.canConsume(\"+\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (tokens.canConsume(\"+\", \"?\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"BY\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (tokens.canConsume(\"UNION\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (tokens.canConsume(\"UNDER\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"ENUM\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tokens.canConsume(\"+\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"delivered\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (tokens.canConsume(\"ON\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tokens.canConsume(\"+\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tokens.canConsume(\"USER\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tokens.canConsume('+') || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"FOREIGN\".equals(current)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"USER\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tokens.canConsume(\"ON\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tokens.canConsume(\"UNIQUE\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"FOREIGN\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"USER\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"A\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (tokens.canConsume(\"+\", \"?\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (tokens.canConsume(\"ON\", \"DELETE\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\") || tokens.canConsume(\"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tokens.canConsume(\"ON\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (tokens.canConsume(\"+\", \"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\") || tokens.canConsume(\"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \" unknown\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\") || tokens.canConsume(\"delivered\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tokens.canConsume(\"+\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"ENUM\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (tokens.canConsume('+') || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"MSG\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tokens.canConsume(\"AS\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"delivered\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"A\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tokens.canConsume(\"UNIQUE\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (tokens.canConsume(\"ON\", \"COLUMN\") || tokens.canConsume(\"LOCAL\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (tokens.canConsume(\"DROP\", \"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"BY\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (tokens.canConsume(\"ON\", \"(\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"ARE\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (tokens.canConsume(\"AS\", \"NULL\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (tokens.canConsume(\"+\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (tokens.canConsume(\"+\", \"?\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\") || tokens.canConsume(\"delivered\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"MSG\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tokens.canConsume(\"ON\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tokens.canConsume(\"UNIQUE\", \"(\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\" finally\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"KEY\") || tokens.canConsume(\"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"KEY\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"CONSTRAINT\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"16\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\") || tokens.canConsume(\"PRIMARY\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\") || tokens.canConsume(\"LOCAL\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"(\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\":\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"DROP\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tokens.canConsume(\"+\", \"COLUMN\") || tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"ENUM\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (tokens.canConsume(\"+\", \"(\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (tokens.canConsume(\"ON\", \"ARE\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"ALTER\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"FOREIGN\") || tokens.canConsume(\"LOCAL\", \"KEY\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"UNIQUE\") || tokens.canConsume(\"PRIMARY\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (tokens.canConsume(\"UNIQUE\") || tokens.canConsume(\"PRIMARY\", \"COLUMN\") || tokens.canConsume(\"TO\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
        "fixed_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"CONSTRAINT\", \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {"
    }
}