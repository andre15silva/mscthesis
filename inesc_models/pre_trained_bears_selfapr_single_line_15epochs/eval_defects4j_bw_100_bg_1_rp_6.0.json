{
    "Closure-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (fnType != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (fnType != null && fnType.isFinal()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (fnType == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (fnType != null && fnType.isComponentType()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (fnType != null && fnType.isCollection()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (fnType != null && fnType.getName().length() > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (fnType != null && fnType.isArray()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (fnType != null && fnType.isJavaLangObject()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (fnType != null && fnType.getFirstChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (fnType != null && fnType.length() > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (fnType != null && fnType.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (fnType != null && fnType.isAssignableFrom(type.getJavaType())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (fnType != null && fnType.getToken() == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (fnType != null && fnType.isGeneratedCode()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (fnType != null && fnType.isNew()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (fnType != null && fnType.isAssignableFrom(type.getReturnType())) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (fnType != null && fnType.isAssignableFrom(subscriberType.getJavaType())) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (fnType != null && fnType.getParameters().size() > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (fnType != null && fnType.getDirtyStateIndex() != 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (fnType != null && fnType.isAssignableFrom(type.getRawClass())) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (fnType != null && fnType.getToken().getType() == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fnType != null && fnType.getFirstChild().isArray()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (fnType != null && fnType.getToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (fnType != null && fnType.isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (fnType != null && fnType.hasTypesDefined()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (fnType != null && fnType.getTypes().length() > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (fnType != null && fnType.hasTypes()) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (fnType != null && fnType.hasCascaded()) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (fnType != null && fnType.getType().isArray()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (fnType != null && fnType.getFirstChild().size() > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (fnType.isTyped()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (fnType != null && fnType.getProperties().size() > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (fnType != null && fnType.getTypes().length > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (fnType != null && fnType.getArguments().size() > 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (fnType != null && fnType.isAssignableFrom(subscriberType.getRawClass())) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (fnType != null && fnType.getDocumentation().size() > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (fnType != null && fnType.isAssignableFrom(subquery)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (fnType != null && fnType.getFirstChild().isAssignableFrom(CxxKeyword.DEFAULT)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (fnType != null && fnType.getToken() == JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (fnType != null && fnType.getColumnTypes().length() > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (fnType != null && fnType.isAssignableFrom(type.getRawType())) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (fnType != null && fnType.getType().equals(type.getReturnType())) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (fnType != null && fnType.hasGenerators()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (fnType != null && fnType.getCount() > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (fnType != null && fnType.getToken().getType() == JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (fnType != null && fnType.isCascaded()) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (fnType != null && fnType.getType().equals(type.getRawClass())) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (fnType != null && fnType.isAssignableFrom(String.class)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (fnType != null && fnType.getRawType() != Object.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (fnType != null && fnType.getType().isCollection()) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (fnType != null && fnType.isBridge()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (fnType != null && fnType.hasValue()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (fnType != null && fnType.getFirstDescendant(CiphertextType) != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (fnType != null && fnType.isBacked()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (fnType != null && fnType.getFirstDescendant(CxxGrammarImpl.CORRELATION_TYPE) != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (fnType != null && fnType.getName().equals(id)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (fnType != null && fnType.isAssignableFrom(declaredType.getJavaType())) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (fnType != null && fnType.getName().equals(type.getReturnType())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (fnType != null && fnType.getToken() == JsonToken.START_ARRAY) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (fnType != null && fnType.getFirstChild().isAssignableFrom(CxxKeyword.TYPE))) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (fnType != null && fnType.getFirstDescendant(CxxGrammarImpl.CORRELATED_CONTENT_TYPE) != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (fnType != null && fnType.getToken().getType() == JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (fnType != null && fnType.getSimpleName().equals(name)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (fnType != null && fnType.getFirstDescendant(CxxGrammarImpl.name()) != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (fnType != null && fnType.isAssignableFrom(CxxKeyword.DEFAULT)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (fnType != null && fnType.isOne()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (fnType != null && fnType.getArguments().length > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (fnType != null && fnType.getColumnTypes().length > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (fnType != null && fnType.getName().equals(n.getArgumentType())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (fnType != null && fnType.isAssignableFrom(clazz)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (fnType != null && fnType.isFinal(type.getReturnType())) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (fnType != null && fnType.getType().isAssignableFrom(type.getRawClass())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (fnType != null && fnType.getFirstResult() > 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (fnType != null && fnType.getFirstDescendant(CxxGrammarImpl.functionName) != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (fnType != null && fnType.getType().isPrimitive()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (fnType != null && fnType.isAssignableFrom(declaredType.getRawClass())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fnType != null && fnType.hasAttributes()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (fnType != null && fnType.getFirstDescendant(CxxGrammarImpl.IDENTIFIER) != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (fnType != null && fnType.getFirstDescendant(CxxGrammarImpl.n) != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (fnType != null && fnType.getFirstChild() != ArrayList) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (fnType != null && fnType.getR()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (fnType != null && fnType.isAssignableFrom(type.getContentType())) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (fnType != null && fnType.getToken() == JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (fnType != null && fnType.getName().equals(type.getRawClass())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (fnType != null && fnType.isAssignableFrom(type.getArgumentType())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (fnType != null && fnType.hasTainted()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (fnType != null && fnType.hasSimpleName()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (fnType != null && fnType.getFirstChild().isAssignableFrom(CxxKeyword.WHERE)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (fnType != null && fnType.getFirstDescendant(CxxGrammarImpl.key) != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (fnType != null && fnType.getType().isAssignableFrom(type.getJavaType())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (fnType != null && fnType.getDirtyState() != Object.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (fnType != null && fnType.is) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (fnType != null && fnType.isAssignableFrom(type.getDescription())) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (fnType != null && fnType.isSpace()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (fnType != null && fnType.isFinalSet()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (fnType != null && fnType.isAbstract()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (fnType != null && fnType.isAssignableFrom(CascadeType.PERSIST)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (fnType != null && fnType.isFinal(this)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (fnType != null && fnType.isAssignableFrom(subtypes[i].getType()))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (fnType != null && fnType.getRawClass().isAssignableFrom(type.getJavaType())) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fnType != null) {",
        "fixed_line": "if (fnType != null && fnType.hasInstanceType()) {"
    },
    "JacksonDatabind-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, key, valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new SimpleType(_class,subclass, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, config, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _asStatic);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _emptyBindings());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, ann, _superInterfaces);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, null);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, jp, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, pattern, _superInterfaces);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _asStatic);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, ann, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, pageInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, pageInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _unwrapSingle);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _emptyTypes, ctxt);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, reference, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, ix, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, pattern, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, reference, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, a sub-typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new SimpleType(_subclass, _bindings, _superClass, propName, _superInterfaces);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _emptyInterfaces());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, ann, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new SimpleType(_class,subclass, _superClass, config, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, ct, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, ann, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, ast, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _emptyBindings());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _contextHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _typeHandler, false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, curr, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _emptyBindings);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, factory, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _valueHandler, false);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, array, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, ann, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _emptyTypes);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, namespace, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, schema, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, class, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, curr, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, schema, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, config, _superInterfaces, _emptyBindings());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _emptyBindings());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, NO_ARRAY, _asStatic);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, typeHandler, false);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, config, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new SimpleType(subclass, _bindings, contentType, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, this, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _typeHandler, ctxt);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, metadata);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _valueHandler, null);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _contextTypes, _asStatic);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, entityViewClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _emptyTypes, null);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, result, _asStatic);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new SimpleType(\"Class \"+subclass, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _emptyInterfaces);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new SimpleType(_bindings, _superClass, propName, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _emptyTypes, _asStatic);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, jp, _superInterfaces, _emptyTypes, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _emptyTypes, _asStatic);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, config, _superInterfaces, _unwrapSingle);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new SimpleType(_class,subclass, _superClass, _superInterfaces, _asStatic);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces.length);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _emptyTypes, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new SimpleType(_class,subclass, _superClass, propName, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, typeHandler, false);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, entityViewClass, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, config, _superInterfaces, _asStatic);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, curr, _superInterfaces);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _unwrapSingle);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _valueHandler, entityViewClass);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _length);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, class, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _emptyTypes, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new SimpleType(_class,subclass, _superClass, _superInterfaces, _valueHandler, false);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new SimpleType(_class,subclass, _superClass, _superInterfaces, _typeHandler, false);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new SimpleType(_class,subclass, _superClass, propName, _asStatic);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, reference, _superInterfaces, _emptyTypes, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, curr, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, false);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, factory, _superInterfaces, _emptyBindings());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, pattern, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, false);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, null);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _inputBuffer, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _typeHandler, null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, factory, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new SimpleType(_class,subclass, _superClass, _superInterfaces, _unwrapSingle);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, propName, _superInterfaces, _columnCount, _asStatic);",
                "identical": false
            }
        ],
        "buggy_line": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
        "fixed_line": "return new SimpleType(subclass, _bindings, this, _superInterfaces,"
    },
    "Math-85": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (b == 0.0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (b < 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (lowerIterations > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (b == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (a instanceof Block) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(b)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (a instanceof Float) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(null)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ((b < 0) || (b > 0)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ((a < 0) || (b > 0)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ((b < 0) || (b.length() > 1) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(predIterations)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (b < 0.0 || isFloatOrDoubleOrDotEe(value)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (b == IdentValue.NONE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (b.length() != 1) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (a instanceof b) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(buffer))) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(g))) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(r)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ((b < 0) || (b.length() > 0)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(peek)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(panel)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (items.length > 1) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equalsIgnoreCase(b)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(WithIterations)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(1.0)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(Float.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(position))) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(boxIterations)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(current))) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(position)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(rightIterations)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(buffer)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(specificIterations)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(a))) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ((a < 0 || lowerBound > 1) && (b < 0.0)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(distance)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(second)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (!orderByIterations.equals(b)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ((a < 0.0) || (b > 100) || (b < 0 || b > 255)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ((b < 0) || (b.length() > 255) || (b == 0.0)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (ch < 0 || lowerBound > 100) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(argumentIterations)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ((b < 0) || (b.length() > 255)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ((b < 0) || (b.length() > 255) && (b == 0.0)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(b))) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(items)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ((b < 0) || (b.length() > 360) || (b == 0.0)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(value)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(60)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(heap)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(a)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals( primeIterations)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ((a < 0.0) || (b > '9')) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(thIterations)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals( Clock)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(order))) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(ct)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (!INITIAL.equals(b) || \"NULL\".equals(datatype)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(includeIterations)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(lowerIterations)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(defaultIterations)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ((a < 0) || (b > 360) || (b < 0 || b > 255)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (a.length() != b) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(cleanIterations)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(f)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (a instanceof Invalid) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(ch)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(Float.class)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ((a < 0.0) || (b > 255)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(previousIterations)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(b)){",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ((a < 0) || (b > 255)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ((b < 0.0) || (b.length() > 1) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(trIterations)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(grad)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(nickname))) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ((b < 0) || (b instanceof Character) || (b.getClass().isArray()))) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(accIterations)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals( f)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(LA)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(center)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(parts)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ((b < 0) || (b > 255) || (b == 0.0)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ((a < 0) || (b > 255) || (b instanceof Character.class)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ((b < 0) || (b > 360) || (b == 0.0)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(InputIterations)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(REPLACE))) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (items.size() != 1) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (a == null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals( type)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(FALSE)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (b.length() > 0 && !(b instanceof Block)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(panel))) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(OPTIONS)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ((a < 0.0) || (b.length() > 255)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(CB)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(h)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(cleanIterations))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (!INITIAL.equals(b) || \"double\".equals(datatype) || \"float\".equals(AffineType)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fa * fb >= 0.0 ) {",
        "fixed_line": "if (fa * fb > 0.0 ) {"
    },
    "Lang-61": {
        "fixes": [
            {
                "k": 1,
                "patch": "int len = thisBuf.length - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int len = thisBuf.length - 2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int len = thisBuf.length - 8;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int len = thisBuf.length - used;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int len = nullBuf.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int len = thisBuf.length - i;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int len = thisBuf.length - startIndex;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int len = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int len = thisBuf.length - 3;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int len = thisBuf.length - 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int len = array.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int len = thisBuf.length - outLen;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int len = thisBuf.length - size;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int len = thisBuf.length - outStart;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int len = thisBuf.length - last;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int len = thisBuf.length - length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int len = thisBuf.length - 4;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int len = nullBuf.length - 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int len = thisBuf.length - outPtr;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int len = thisBuf.length - lastLen;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int len = rows.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int len = thisBuf.length - lastChar;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int len = str.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int len = thisBuf.length - outLength;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int len = thisBuf.length - targetLen;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int len = length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int len = thisBuf.length - bufLen;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int len = thisBuf.length - usedLen;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int len = _array.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int len = thisBuf.length - n;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int len = thisBuf.length - _outputBuffer.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int len = thisBuf.length - byteLen;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int len = thisBuf.length - columnIndex;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int len = string.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int len = thisBuf.length - index;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int len = thisBuf.length - outIndex;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int len = thisBuf.length - '\\n';",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int len = thisBuf.length - outputStart;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int len = thisBuf.length - width;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int len = thisBuf.length - 6;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int len = thisBuf.length - lastStart;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int len = thisBuf.length - 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int len = thisBuf.length -valueOf;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int len = thisBuf.length - lastLength;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int len = buf.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int len = thisBuf.length - start;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int len = nullBuf.length - thisBuffer.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int len = thisBuf.length - previousLen;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int len = thisBuf.length - lastOffset;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int len = thisBuf.length - 2);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int len = buffer.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int len = thisBuf.length - pos;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int len = thisBuf.length - 5;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int len = thisBuf.length * 8;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int len = thisBuf.length - bufLength;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int len = thisBuf.length - bytesLen;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int len = thisBuf.length - lastIndex;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int len = thisBuf.length - count;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int len = thisBuf.length - actual;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int len = thisBuf.length - NR_BIGINT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int len = thisBuf.length - arrayLen;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int len = thisBuf.length / 8;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int len = thisBuf.length - tagLen;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int len = thisBuf.length - endpointLen;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int len = thisBuf.length - nextLen;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int len = thisBuf.length - position;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int len = thisBuf.length - innerLen;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int len = thisBuf.length - 4;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int len = thisBuf.length - quoteLen;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int len = thisBuf.length - 2);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int len = thisBuf.length - optLen;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int len = thisBuf.length - inPtr;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int len = thisBuf.length - off;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int len = thisBuf.length - vertexLen;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int len = thisBuf.length - target;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int len = thisBuf.length - true;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int len = thisBuf.length - 1000;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int len = thisBuf.length - _outputBuffer;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int len = array.length - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int len = thisBuf.length - maxLen;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int len = thisBuf.length - NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int len = thisBuf.length - flags;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int len = thisBuf.length -ct;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int len = thisBuf.length - byteLength;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int len = thisBuf.length - lastLine;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int len = nullBuf.length - thisStart;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int len = thisBuf.length - _inputLen;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int len = thisBuf.length - 255;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int len = thisBuf.length -More;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int len = thisBuf.length - prevLen;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int len = thisBuf.length - ch;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int len = thisBuf.length - indent;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int len = thisBuf.length - read;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int len = thisBuf.length -TALen;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int len = thisBuf.length - bitLength;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int len = thisBuf.length -addAll;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int len = thisBuf.length - 2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int len = thisBuf.length - _outputTail;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int len = thisBuf.length - mask;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int len = thisBuf.length - 7;",
                "identical": false
            }
        ],
        "buggy_line": "int len = thisBuf.length - strLen;",
        "fixed_line": "int len = size - strLen + 1;"
    },
    "JxPath-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return compute(context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return computeValue(context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return compute(context, args[0].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return computeValue(context, args[1].computeValue(context)) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return compute(context, args[1].computeValue(context) <= 0) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return compute(context, args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return computeValue(context, args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return computeValue(context, args[0].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return computeValue(context, args[1].computeValue(context) <= 0) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return compute(args[0], args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return computeValue(context), args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return computeValue(context, args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return compute(context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return computeValue(context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return compute(context, args[1].computeValue(context)) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return compute(args[0] == null ? Boolean.TRUE : args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return compute(context, args[0].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return compute(context, args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return compute(context, args[0].computeValue(context) <= 0) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return compute(args[0], context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return compute(args[0] ? Boolean.TRUE : args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return compute(context, args[0], args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return computeValue(context, args[0], args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return compute(context, args[1].computeValue(context) <= 0 ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return compute(context, args[1].computeValue(context) <= 0) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return computeKey(context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return compute(context, args[0].computeValue(context) ? Boolean.FALSE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return computeValue(context, args[1].computeValue(context) <= 0 ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return compute(index, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return compute(context, args[2].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return computeValue(context), args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return compute(context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return computeValue(context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return computeValue(context.getFieldName(this) == null ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return compute(args, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return computeValue(context.getArgumentsSize() == 0 ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return computeResponse(context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return computeValue(context.getFieldName(this) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return computeValue(context, args[0].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return computeValue(context, args[0].computeValue(context)) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return computeValue(context, args[1].computeValue(context) <= 0) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return compute(context.getArgumentsSize() == 0 ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return compute(context, args[0].computeValue(context)) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return computeValue(context, args[1].computeValue(context)) ? Boolean.FALSE : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return compute(name, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return computeValue(context, args[1].computeValue(context) < 0) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return compute(args[0], args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return computeValue(context, args[0].computeValue(context) ? Boolean.FALSE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return compute(args[0] ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return compute(args[0], args[1].computeValue(context)) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return computeValue(context, args[1].computeValue(context)) ? Boolean.FALSE : false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return computeValue(context, args[1].computeValue(context) < 0 ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return computeValue(context) > 0 ? Boolean.TRUE : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return compute(args[0] == Boolean.TRUE ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return computeValue(context.getArgumentsSize() == 0 ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return computeValue(context), args[1].computeValue(context)) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return computeValue(context).computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return computeValue(context, args[1].computeValue(context) > 0 ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return computeValue(context.getFieldName(this) == null ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return compute(context, args[1].computeValue(context) ? Boolean.TRUE : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return compute(args[0] == Boolean.TRUE) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return computeValue(context), args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return compute(context, args[0].computeValue(context) <= 0) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return compute(context, args[1].computeValue(context) <= 0 ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return compute(args[0], context, args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return compute(index, args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return compute(args[0], context, args[1].computeValue(context)) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return computeValue(context, args[0] ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return compute(args[0].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return computeValue(context, args[1].computeValue(context)) ? Boolean.TRUE : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return compute(context, args[1].computeValue(context) ? Boolean.FALSE : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return compute(context, args[1].computeValue(context)) ? Boolean.FALSE : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return compute(context, args[0].computeValue(context) ? Boolean.FALSE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return computeValue(context, args[1].computeValue(context) <= 0 ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return compute(context, args[1].computeValue(context) > 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return compute(context, args[2].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return computeValue(context.getMaster(), args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return compute(args[0] ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return compute(args[0] == Boolean.FALSE) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return computeKey(context, args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return computeValue(context, args[0], args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return computeValue(context), args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return compute(context.getArgumentsSize() == 0 ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return computeValue(context) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return compute(context, args[0], args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return computeValue(context, args[0] ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return compute(args[0], context, args[1].computeValue(context) ? Boolean.FALSE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return computeTainted(context) ? Boolean.TRUE : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return compute(context, args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return compute(context, args[1].computeValue(context) <= 0) ? Boolean.FALSE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return compute(args[0] == 0 ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return computeValue(context, args[1].computeValue(context) ? Boolean.TRUE : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return compute(context, args[1].computeValue(context) ? Boolean.TRUE : null);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return compute(context.getFieldName(this) ? Boolean.FALSE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return computeValue(context, args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return compute(context, args[1].computeValue(context)) ? Boolean.TRUE : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return compute(context, args[1].computeValue(context)) ? Boolean.FALSE : false;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return computeValue(context, args[1].computeValue(context) ? Boolean.FALSE : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return computeValue(context) == null ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return compute(args, args[1].computeValue(context) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            }
        ],
        "buggy_line": "return compute(args[0].computeValue(context), args[1].computeValue(context))",
        "fixed_line": "return compute(args[0].compute(context), args[1].compute(context))"
    },
    "Mockito-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (m instanceofCapturesArguments) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (m instanceof directlysArguments) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (!(m instanceofCapturesArguments)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).captureFrom(k)) > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).captureFrom(k)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < columnPointers[j + 1] && rowIndices[k] == i) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).captureFrom(k)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (m instanceofCapturesArguments && m instanceof rowIndices[k]) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ((m instanceofCapturesArguments) m).captureFrom(k)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).captureFrom(k)) > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).captureFrom(k)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < columnPointers[jj + 1] && rowIndices[k] == i) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[i + 1] && columnIndices[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).captureFrom(k)) > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).captureFrom(k)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (m instanceofCapturesArguments && m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).captureFrom(k)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).captureFrom(k)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).getArguments() != null && !m.getArguments().isEmpty()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[i + 1] && columnIndices[k] == j)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (m instanceof INPUTsArguments) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < columnPointers[i + 1] && rowIndices[k] == i) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k] == j) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).isFrom(k)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).captureFrom(k)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).getArguments()[k] == j) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments() != null && !m.getArguments().isEmpty()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).getArguments()[k] & mask) != 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (m instanceofCapturesArguments && ((CapturesArguments) m).captureFrom(k)) > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).getArguments()[k] == j) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[ii + 1] && columnIndices[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (m instanceof RelsArguments) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).getArguments()[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).captureFrom(k)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).getArguments()[k] & mask) != 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).getArguments()[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[j + 1] && columnIndices[k] == i) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).getArguments()[k] & ~0x3f) == 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).captureFrom(k)) > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).isFrom()) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[i + 1] && self[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (m instanceof MetaDatasArguments) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).getArguments()[k] & ~0x3f) == 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments() != null && !m.getArguments().isEmpty()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).isFrom()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k < 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (m instanceofCapturesArguments && ((CapturesArguments) m).captureFrom(k)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).captureFrom(k)) > -1) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).isFrom(k)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (m instanceofCapturesArguments && m instanceof rowIndices[k] == i) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k] == i) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (m instanceof configurationssArguments) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[i + 1] && columnIndices[k] == j) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).isFrom()) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[j + 1] && columnIndices[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).getArguments()[k] == i) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < columnPointers[j + 1] && rowIndices[k] == i)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (m instanceofCapturesArguments && ((CapturesArguments) m).captureFrom(k)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k] & mask) != 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k] & ~0x3f) == 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k] == i) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k] == j) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).captureFrom(this.getArguments[k] != m)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[ii + 1] && columnIndices[k] == j)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k] & mask) != 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[ii + 1] && columnIndices[k] == i) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).isAssignableFrom(this)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (m instanceofCapturesArguments && m instanceof Box) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < columnPointers[i + 1] && rowIndices[k] == j - 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < columnPointers[j + 1] && rowIndices[k] == i - 1) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).getArguments()[k] == i) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[i + 1]) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k < n - 1) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getType().isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getType().isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getType().isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k] & ~0x3f) == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).getArguments()[k < n + 1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).getArguments()[k] & ~0x3f) != 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[j + 1] && self[k] == i) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (m instanceof Comparator && ((CapturesArguments) m).getType().isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (m instanceof '/ && ((CapturesArguments) m).captureFrom(this.getArguments[k]))) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[i + 1] && columnIndices[k] == i) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < rowPointers[j + 1] && columnIndices[k] == j)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (m instanceofObjectFactory && ((CapturesArguments) m).captureFrom(k)) > -1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < n - 1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (m instanceofCapturesArguments && m instanceof ResolvableType && ((CapturesArguments) m).getArguments()[k < columnPointers[jj + 1] && rowIndices[k] == i)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (m instanceof CapturesArguments) {",
        "fixed_line": "if (m instanceof CapturesArguments && i.getArguments().length > k) {"
    },
    "Jsoup-45": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (\"new\".equals(name)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (\"global\".equals(name)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (\"parent\".equals(name)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (\"multi\".equals(name)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (\"message\".equals(name)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (\"this\".equals(name)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (\"getContext\".equals(name)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (\"concurrent\".equals(name)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (bpmnModel.getFlowElement(name) != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (\"bpmn\".equals(name)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (\"tag\".equals(name)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (\"tr\".equals(name)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (\"xml\".equals(name)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (\"activity\".equals(name)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (\"b\".equals(name)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (\"register\".equals(name)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (\"\\\\\".equals(name)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (parentText.equals(name)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (\"td\".equals(name)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (\"sequence\".equals(name)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (\"id\".equals(name)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (\"parent\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (\"transition\".equals(name)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (custom.class.isAssignableFrom(name)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (\"set\".equals(name)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (parenthesis == 0 && \"true\".equals(name)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (\"line\".equals(name)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (\"info\".equals(name)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (\" escape\".equals(name)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (\"sql\".equals(name)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (\"complete\".equals(name)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (\"d\".equals(name)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (\"forment\".equals(name)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (\"\"\".equals(name)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (\"*\".equals(name)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (\"to\".equals(name)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (\" prefer\".equals(name)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (\"inf\".equals(name)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (bpmnModel.getFlowElement(name) == null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (\"INSTANCE\".equals(name)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (\"HEAD\".equals(name)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (bpmnModel.getFlowElement().equals(name)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (\"ippo\".equals(name)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (\"build\".equals(name)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (\"pet\".equals(name)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (\"save\".equals(name)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (type.equals(HtmlFormEntryConstants.InCell)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (\"value\".equals(name)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (name.equals(HtmlFormEntryConstants.InCell)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (END_ARRAY.equals(name)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (nodeName.equals(name)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (\"timer\".equals(name)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (\"global\".equals(name) && \"td\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (\"async\".equals(name)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (\"file\".equals(name)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (type.equals(HtmlFormEntryConstants.InCell) || \"true\".equals(name)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (type.equals(HtmlFormEntryConstants.InCell) && \"true\".equals(name)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (\"name\".equals(name)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (\"signal\".equals(name)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (\"add\".equals(name)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (\"new\".equalsIgnoreCase(name)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (\"for\".equals(name)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (\"new\".equals(name) || \"delegate\".equals(name)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (\"status\".equals(name)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (\"sub\".equals(name)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (\"getContext\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (\"OS\".equals(name)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (\" Reflect\".equals(name)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (\"global\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (\"global\".equals(name) && \"true\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (\"ok\".equals(name)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (\"custom\".equals(name)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (\"global\".equals(name) && \"Order\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (\"quantity\".equals(name)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (\"new\".equals(name) || \"double\".equals(returnType)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (\"global\".equals(name) && \"true\".equals(customNode.asText())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (\"address\".equals(name)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (\"arg\".equals(name)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (\"section\".equals(name)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (\"existing\".equals(name)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (\"global\".equals(name) && \"true\".equals(parsed.getNodeName())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (\"edges\".equals(name)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (\"ag\".equals(name)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (\"global\".equals(name) && \"parent\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (\"new\".equals(name) && \"parent\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (\"new\".equals(name) && \"true\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (\" Form\".equals(name)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (\"global\".equals(name) && \"Order\".equals(nodeName)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (\"global\".equals(name) && \"tr\".equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (\"new\".equals(name) || \"double\".equals(nodeName)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (\"token\".equals(name)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (type.equals(HtmlFormEntryConstants.MAJOR_TYPE_TEXT)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (bpmnModel.getFlowElement(name) < 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (\"warn\".equals(name)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (\"copy\".equals(name)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (type.equals(name)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (\"best\".equals(name)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (\"global\".equals(name) && \"td\".equals(nodeName)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (\"with\".equals(name)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (\"no\".equals(name)) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {",
        "fixed_line": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {"
    },
    "Codec-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "txt = txt.replaceAll(\"^\", \"m\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 4,
                "patch": "txt = txt.replaceAll(\"^\", \"m2\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // IME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "txt = txt.replaceAll(\"$\", \"m\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the function as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should never be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // IME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 12,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // IME: a parameter should not be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 13,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x' respectively",
                "identical": false
            },
            {
                "k": 14,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the entry as 'final'.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 16,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // doc: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!'.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 19,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'gen'",
                "identical": false
            },
            {
                "k": 20,
                "patch": "txt = txt.replaceAll(\"^\", \".m\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the ok as 'final'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "txt = txt.replaceAll(\"^\", \"m1\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the same as 'final'.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'c'",
                "identical": false
            },
            {
                "k": 25,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'C'",
                "identical": false
            },
            {
                "k": 26,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the 'final'.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x';",
                "identical": false
            },
            {
                "k": 29,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the function as 'x'",
                "identical": false
            },
            {
                "k": 30,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '%c'",
                "identical": false
            },
            {
                "k": 31,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'pool'",
                "identical": false
            },
            {
                "k": 32,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // IME: a parameter should not be assigned. Also declare the function as 'final'.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the entry",
                "identical": false
            },
            {
                "k": 34,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the end",
                "identical": false
            },
            {
                "k": 35,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'is'",
                "identical": false
            },
            {
                "k": 36,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'syntax'",
                "identical": false
            },
            {
                "k": 37,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'a'",
                "identical": false
            },
            {
                "k": 38,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'd'",
                "identical": false
            },
            {
                "k": 39,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // IME: a parameter should be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 40,
                "patch": "txt = txt.replaceAll(\"d\", \"m\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' */'",
                "identical": false
            },
            {
                "k": 42,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\"+",
                "identical": false
            },
            {
                "k": 43,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Boolean'",
                "identical": false
            },
            {
                "k": 44,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'line'",
                "identical": false
            },
            {
                "k": 45,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'false'",
                "identical": false
            },
            {
                "k": 46,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the body as 'final'.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'n'",
                "identical": false
            },
            {
                "k": 48,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should never be assigned. Also declare the methods parameters as 'x'",
                "identical": false
            },
            {
                "k": 49,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '${'",
                "identical": false
            },
            {
                "k": 50,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be",
                "identical": false
            },
            {
                "k": 51,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!';",
                "identical": false
            },
            {
                "k": 52,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the end-of-input",
                "identical": false
            },
            {
                "k": 53,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'h'",
                "identical": false
            },
            {
                "k": 54,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare thetxt",
                "identical": false
            },
            {
                "k": 55,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the required",
                "identical": false
            },
            {
                "k": 56,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'or'",
                "identical": false
            },
            {
                "k": 57,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the month",
                "identical": false
            },
            {
                "k": 58,
                "patch": "txt = txt.replaceAll(\"\\\"\", \"m\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // readonly character read",
                "identical": false
            },
            {
                "k": 60,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 61,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'e'",
                "identical": false
            },
            {
                "k": 62,
                "patch": "txt = txt.replaceAll(\"m\", \"m\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'false'.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 's'",
                "identical": false
            },
            {
                "k": 65,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw'",
                "identical": false
            },
            {
                "k": 66,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final';",
                "identical": false
            },
            {
                "k": 67,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'C' respectively",
                "identical": false
            },
            {
                "k": 68,
                "patch": "txt = txt.replaceAll(\"^\", \"-m\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare theform as 'final'.",
                "identical": false
            },
            {
                "k": 70,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the \"\\t\"",
                "identical": false
            },
            {
                "k": 71,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be null",
                "identical": false
            },
            {
                "k": 72,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'rep'",
                "identical": false
            },
            {
                "k": 73,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x', 'z')",
                "identical": false
            },
            {
                "k": 74,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "txt = txt.replaceAll(\"Pmb\", \"m\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'q'",
                "identical": false
            },
            {
                "k": 77,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'phone'",
                "identical": false
            },
            {
                "k": 78,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'is' respectively",
                "identical": false
            },
            {
                "k": 79,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should be",
                "identical": false
            },
            {
                "k": 80,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare thetxt as 'final'.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'getType'",
                "identical": false
            },
            {
                "k": 82,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'r'",
                "identical": false
            },
            {
                "k": 83,
                "patch": "txt = txt.replaceAll(\"s\", \"m\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '?)",
                "identical": false
            },
            {
                "k": 85,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x', 'z'",
                "identical": false
            },
            {
                "k": 86,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'forward'",
                "identical": false
            },
            {
                "k": 87,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare theARRAY",
                "identical": false
            },
            {
                "k": 88,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the:\\n\"",
                "identical": false
            },
            {
                "k": 89,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'line' respectively",
                "identical": false
            },
            {
                "k": 90,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\\\"",
                "identical": false
            },
            {
                "k": 91,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'equals'",
                "identical": false
            },
            {
                "k": 92,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'or';",
                "identical": false
            },
            {
                "k": 93,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the font as 'final'.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x', 'final'.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 96,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x' bytes",
                "identical": false
            },
            {
                "k": 97,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'x'.\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' */' respectively",
                "identical": false
            },
            {
                "k": 99,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'dog",
                "identical": false
            },
            {
                "k": 100,
                "patch": "txt = txt.replaceAll(\"^\", \"m\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\\\\' respectively",
                "identical": false
            }
        ],
        "buggy_line": "txt = txt.replaceAll(\"^mb\", \"m2\");",
        "fixed_line": "txt = txt.replaceAll(\"mb$\", \"m2\");"
    },
    "Codec-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length())));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length())));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length()));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2.length())));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length())));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.max(cs1, cs2.length())));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length()));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length(), cs2.length() - 1));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length() - 1));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs2, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs2.length()));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2.length()));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.max(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.max(cs1, cs1.length())));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs2, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs1.length()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs2, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length()), cs2.length());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs2.length())));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length() - 1));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs1.length())));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs2.length())));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length(), cs1.length()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return CharSequenceUtils.regionMatches(cs1, cs2, 0, Math.min(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.max(cs1, cs1.length()));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length(), cs2.length() - 1));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs1.length()));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length(), cs2.length() - 1));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length() - before2, cs2.length()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length()), cs2.length()));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length() - 1));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.max(cs1, cs2.length())));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2, cs1.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs2, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2, cs1.length(), cs2.length() - 1));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.max(cs1, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.max(cs1, cs2.length()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length() + cs2.length()));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length() + cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length()), cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2, cs2.length()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length()), cs2.length());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return CharSequenceUtils.regionMatches(cs1, 0, cs2, 0, Math.min(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs1.length())));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs1.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2, cs1.length()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length(), cs2.length()) != 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs2.length()));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs1.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs1.length() - 1));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs1.length(), cs2.length() - 1));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2, cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length())) + 1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2, cs2.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length(), cs2.length()) > 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length())) + 1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2, cs2.length(), cs1.length()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length())) > 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2, cs2.length())));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length(), cs2.length() - 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length()), cs2.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.max(cs1, cs1.length())));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return CharSequenceUtils.regionMatches(cs1, cs2, true, 0, Math.min(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs1.length(), cs2.length() - 1));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2, cs1.length() - 1));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length() - before2, cs2.length()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2, cs1.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs2, cs2.length(), cs2.length() - 1));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs2.length(), cs1.length()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length() - 2)));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length() - 1)));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.max(cs1, cs1.length(), cs2.length())));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return CharSequenceUtils.regionMatches(cs1, null, 0, Math.min(cs1, cs2, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return CharSequenceUtils.regionMatches(true, 0, Math.min(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs1.length(), cs2.length() - 2));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length()), cs2.length());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length())) > 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.min(cs1, cs1.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, Math.max(cs1, cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, Math.min(cs1, cs2.length(), cs2.length());",
                "identical": false
            }
        ],
        "buggy_line": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
        "fixed_line": "return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());"
    },
    "JacksonCore-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (codes[i] != 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\n') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (Character.isJavaIdentifierPart(c) && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\n') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u00a0' || c == '\\u3000') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '#') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (Character.isJavaIdentifierStart(c) && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '#') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i >= _inputEnd) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u00a0' || c == '\\u3000') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u00a0' || c == '\\n') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c == '-' || c == '+') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i < 0) { // EOF at this point signifies empty value",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Character.isJavaIdentifierPart(c) && c > 0x7F) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u00a0' || c == '\\n') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (Character.isJavaIdentifierPart(c) && c != '\\n') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c == '\\n' || c == '\\r') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Character.isJavaIdentifierPart(c) && c <= 0x80) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (codes[i] == c) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Character.isJavaIdentifierPart(c) && i == _inputBuffer[i]) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (Character.isJavaIdentifierStart(c) || c > 0x7F || c == '\\n') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c < 0x80) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c == _inputBuffer[i]) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == ',') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c < 0) { // EOF at this point signifies empty value",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == ',') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (Character.isJavaIdentifierStart(c) && c > 0x7F) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (Character.isJavaIdentifierStart(c) && i > 0 && c <= _inputBuffer[i] || c == '\\n') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u00a0' || c == '\\u2029') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\n' || c == '\\r') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (!Character.isJavaIdentifierPart(c) && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i >= 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u3000') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u2029') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Character.isJavaIdentifierStart(c) || c > ' ') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Character.isJavaIdentifierStart(c) && i == _inputBuffer[i]) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Character.isJavaIdentifierPart(c) && c == '\\n') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u2028') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (codes[i] == 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (!Character.isJavaIdentifierPart(c) || c == '\\n') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Character.isJavaIdentifierStart(c) && i > 0 && c <= _inputBuffer[i]) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (Character.isJavaIdentifierPart(c) && c == ',') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Character.isJavaIdentifierPart(c) && c <= ' ') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c == _separatorChar) { // offline quoted case (longer)",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u3000') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == esc[i]) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (Character.isJavaIdentifierPart(c) && c <= 0xDFFF) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (Character.isJavaIdentifierPart(c) || c > ' ') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_inputBuffer[i] == c) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u00a0' || c == '\\t') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u00a0' || c == '\\u2029') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (Character.isJavaIdentifierPart(c) && c <= _inputBuffer[i]) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (Character.isJavaIdentifierPart(c)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Character.isJavaIdentifierStart(c) || i == _inputBuffer[i]) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c <= _maxSpecialChar) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u00a0' || c == '\\u000') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u00a0' || c == '\\t') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (Character.isJavaIdentifierPart(c) && c != ' ') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c > 0x7F) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Character.isJavaIdentifierPart(c) && i > 0 && c <= _inputBuffer[i] || c == '\\n') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Character.isJavaIdentifierStart(c) && i > 0 && c <= _inputBuffer[i] || c == '#') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\r' || c == '\\n') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c == _quoteChar) { // offline quoted case (longer)",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c == _separatorChar) { // end-of-input is short indeed",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (codes[i] != c) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u00a0' || c == '\\n' || c == '\\r') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u2029') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '-') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u2028') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == _inputBuffer[i]) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Character.isJavaIdentifierPart(c) && c <= '9') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (!Character.isJavaIdentifierPart(c) && c != '\\n') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u00a0' || c == '\\u2028') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u00a0' || c == '\\n' || c == '\\r') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u00a0' || c == '\\u000') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c == q) { // end-of-input is short indeed",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '+') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Character.isJavaIdentifierPart(c) && c <= 0xff) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c == _separatorChar) { // end of input? can't be yet skipped",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u00a0' || c == '#') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Character.isJavaIdentifierPart(c) && i == JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Character.isJavaIdentifierStart(c) || c > 0x7F || c == '\\u00a0' || c == '\\u3000') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (Character.isJavaIdentifierPart(c) && c > 0xff) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (!Character.isJavaIdentifierStart(c) || c == '\\n') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Character.isJavaIdentifierStart(c) || c > 0x7F || c == '\\u00a0' || c == '\\n') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (Character.isJavaIdentifierPart(c) && c == '#') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Character.isJavaIdentifierPart(c) && c <= '\\n') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u000') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c >= 0) { // single byte (ascii) char... cool, can return",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == esc[i]) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Character.isJavaIdentifierStart(c) || c == '\\u2028' || c == '\\n') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u00a0' || c == '#') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (Character.isJavaIdentifierPart(c) || c == '\\u2028' || c == '\\n') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (Character.isJavaIdentifierStart(c) && c <= 0x80) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Character.isJavaIdentifierPart(c) || c > 0x7F || c == '\\n') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Character.isJavaIdentifierStart(c) || c > 0x7F || c == '\\n' || c == '\\r') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c == _quoteChar) { // offline quoted case (longer) EOF?",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Character.isJavaIdentifierPart(c) && i > 0 && c <= _inputBuffer[i]) {",
                "identical": false
            }
        ],
        "buggy_line": "if (i <= maxCode) {",
        "fixed_line": "if (i < maxCode) {"
    },
    "Chart-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() + zone);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().toString());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getID());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()), zone);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() * zone);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTime());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault())));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getID(), zone);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone).getFormat());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,Locale.getDefault());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().toString()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone)));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getTimestamp(), zone);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTimeZone());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() * 1000);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultType());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).get();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getFormat());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone) * 1000);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().toString(), zone);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, String.valueOf(time), zone);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() - zone);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getID(), zone);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getMillis(), zone);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone).get());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTimestamp());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Character.getDefault());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone)) ? null : DateUtil.getDateTimeInstance(time, zone);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? zone : Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone).getID());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? zone : Date.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() + zone));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, TimeZone.getDefault());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone).getTimestamp());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getDateTime(), zone);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTimestamp(), zone);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getTimestamp();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getID(), zone));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? zone : StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() == null ? null : DateUtil.getDateTimeInstance(time, zone));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getTimestamp());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone) * 1000;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? zone : TimeZone.getTimeZone());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() * zone));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() <= zone);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getFormat());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? zone : Date.valueOf(time.getTime()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().toString(), zone.getDefault());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTimeInMillis());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getStartDate());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() - zone));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getZoneId());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getDate(), zone);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? time.getTime() : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? zone :AS_TIME_ZONE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getID();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Boolean.getDefault());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone).getTime());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this(date, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone)).getTimestamp();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone) + 1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getZoneId(), zone);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).toString(), zone);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() == null ? null : TimeZone.getTimeZone());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getActualChecksum()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, formatDate, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? zone : StandardCharsets.US_ASCII;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getFormat(), zone);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, date, zone);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getFormat();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getActualChecksum());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getZoneId();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getDistance();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? parseDate(time, zone) : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()).getMillis();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, TimeZone, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() * zone).getFormat());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() / zone);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() == null ? null : DateUtil.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() + zone)));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? parseDate(time) : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, String.valueOf(time));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTimeZone()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? getZone(time) : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, DateTime.getDefault());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() * zone)));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() + zone) * 1000);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? zone : false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getFormat()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() == null ? null : zone);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(), zone).get();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? parseDateAndTime(date, zone) : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() != null ? time.getTime() : Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, UUID.getDefault());",
                "identical": false
            }
        ],
        "buggy_line": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "fixed_line": "this(time, zone, Locale.getDefault());"
    },
    "Lang-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return cAvailableLocaleSet != null && locale.equals(locale);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return cAvailableLocaleSet.contains(locale) == false;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return cAvailableLocaleSet.contains(locale) || isDefined(locale);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return cAvailableLocaleSet.contains(locale)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return cAvailableLocaleSet != null && locale.equals(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return cAvailableLocaleSet.contains(locale) || isBoolean(locale);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.hasText(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.hasText(locale)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.hasText(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return cAvailableLocaleSet.contains(locale) || isDefined(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return cAvailableLocaleSet.contains(locale) || isBoolean((String) locale);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isEmpty(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return cAvailableLocaleSet.contains(locale) || isDigit(locale);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return cAvailableLocaleSet.contains(locale) || null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return cAvailableLocaleSet.contains(locale) || isBoolean(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return cAvailableLocaleSet != null && locale.contains(locale);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isNullOrEmpty(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return cAvailableLocaleSet.contains(locale) ? true : false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return cAvailableLocaleSet.contains(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return locale != null && cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.isEmpty(locale)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.isEmpty(locale));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return cAvailableLocaleSet.contains(locale) == null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.isEmpty(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return cAvailableLocaleSet.contains(locale) || StringUtils.isEmpty(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return cAvailableLocaleSet.contains(locale) || isPosition(locale);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return cAvailableLocaleSet.contains(locale, locale);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isEmpty(locale));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return cAvailableLocaleSet.contains(locale) || isBoolean();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.isEmpty(locale);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.hasText(locale));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.hasText(locale)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet.contains(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isEmpty(locale);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return usedAvailableLocaleSet.contains(locale) || cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return locale != null && cAvailableLocaleSet.contains(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.hasText(locale));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return cAvailableLocaleSet.contains(locale) || isBoolean(locale)) ? false : false;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return cAvailableLocaleSet.contains(locale) || getStyle().equals(locale);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return cAvailableLocaleSet.contains(locale) && locale != null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this.cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isEmpty(locale)) ? false : false;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return cAvailableLocaleSet.contains(locale) || getStyle().isBoolean() ? true : false;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this.cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet.contains(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return cAvailableLocaleSet.contains(locale) && getStyle().isBoolean() ? true : false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.hasText(locale)) ? false : false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return cAvailableLocaleSet != null && locale.equals(locale) ? true : false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return cAvailableLocaleSet.contains(locale) || false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.hasText(locale)) ? false : false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return cAvailableLocaleSet.contains(locale) || isValidEnd(locale);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return cAvailableLocaleSet.contains(locale) || isDefined(locale)) ? false : false;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isEmpty(locale)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return usedAvailableLocaleSet.contains(locale) || cAvailableLocaleSet.contains(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return cAvailableLocaleSet != null && !StringUtils.isEmpty(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return cAvailableLocaleSet.contains(locale) && locale;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return cAvailableLocaleSet.contains(locale) || isLanguage();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return cAvailableLocaleSet.contains(locale) || isDefined(locale));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return cAvailableLocaleSet.contains(locale) || true;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return cAvailableLocaleSet.contains(locale) || Locale.equals(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return cAvailableLocaleSet.contains(locale) || getStyle().equals(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return cAvailableLocaleSet != null && locale.equals(locale));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return cAvailableLocaleSet != null && locale.equals(locale)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return delegate.contains(locale) || cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return cAvailableLocaleSet.contains(locale) || getStyle().equals(locale));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return cAvailableLocaleSet.contains(locale) == this;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.isNullOrEmpty(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isNullOrEmpty(locale)) ? false : false;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.equals(locale);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return cAvailableLocaleSet != null && locale.equals(locale) || Locale.equals(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return cAvailableLocaleSet.contains(locale) || isBoolean(locale));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.isNullOrEmpty(locale)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return locale.equals(locale) || cAvailableLocaleSet.contains(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return cAvailableLocaleSet.contains(locale)) || true;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isNullOrEmpty(locale)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return cAvailableLocaleSet.contains(locale) || isDefined(locale)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return cAvailableLocaleSet.contains(locale)) || null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.isEmpty(locale)) ? false : false;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isNullOrEmpty(locale);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return cAvailableLocaleSet.contains(locale) || defaultLocaleStr.equals(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return cAvailableLocaleSet.contains(locale)) || false;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return cAvailableLocaleSet.contains(locale)) || isDefined(locale);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return cAvailableLocaleSet.contains(locale) || isBoolean() ? true : false;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return cAvailableLocaleSet.contains(locale)) || ! locale.equals(locale);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return cAvailableLocaleSet != null && locale.equals(locale)) || defaultLocale;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return cAvailableLocaleSet.contains(locale) && !StringUtils.hasText(locale);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return cAvailableLocaleSet != null && locale.contains(locale) == false;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.equals(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return nextAvailableLocaleSet.contains(locale) || cAvailableLocaleSet.contains(locale)) ? true : false;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return cAvailableLocaleSet != null && locale.equals(locale)) || StringUtils.isEmpty(locale);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isEmpty((String) locale);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return cAvailableLocaleSet.contains(locale) || !StringUtils.isNullOrEmpty(locale));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return cAvailableLocaleSet.contains(locale) && locale.equals(locale);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return locale != null && cAvailableLocaleSet.contains(locale) == false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return cAvailableLocaleSet.equals(locale);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return cAvailableLocaleSet.contains(locale) || getStyle().isBoolean()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return cAvailableLocaleSet.contains(locale) || defaultLocale;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return nextAvailableLocaleSet.contains(locale) || cAvailableLocaleSet.contains(locale);",
                "identical": false
            }
        ],
        "buggy_line": "return cAvailableLocaleSet.contains(locale);",
        "fixed_line": "return availableLocaleList().contains(locale);"
    },
    "JacksonXml-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "_rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "_rootNameLookup = src._rootNameLookup != null ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "_rootNameLookup = src._rootNameLookup ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? new XmlSerializerProvider() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.EMPTY_LIST : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? new XmlSerializerProvider(src) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<XmlSerializer>emptyList() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? new XmlSerializerProvider(src, src._rootNameLookup) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? EMPTY_BINDINGS : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? ClassUtil.EMPTY_LIST : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<Object>emptyList() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup != null) ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup > 0) ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<XmlSerializerProvider>emptyList() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? PropertySerializerProvider.NO_CONTENT : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<XmlSerializer>emptyIterator() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? PropertySerializerProvider.NO_NAME : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup != null ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? config.getAnnotation(src) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<String>emptyList() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? new XmlSerializer(src) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? PropertySerializer.instance : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check default: \" + src._rootNameLookup ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.emptyList() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "_rootNameLookup = src._rootNameLookup; // since 2.5",
                "identical": false
            },
            {
                "k": 28,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<Xml>emptyList() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<XmlSerializer>emptyForProperties() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? PropertySerializerProvider.instance : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? NO_ARRAY : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<XmlSerializer>emptyMap() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check default: \" + src._rootNameLookup ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<Object>emptyIterator() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? DEFAULT_LIST : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<XmlSerializer>emptyCollection() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<String>emptyIterator() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<XmlSerializer>emptyValue() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? Collections.<XmlSerializer>emptySet() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check default: \" + src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? config : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? new XmlSerializer<Object>() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "_rootNameLookup = src._rootNameLookup != null ? src._rootNameLookup.length : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check constraints of \" + src._rootNameLookup ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? PropertySerializerProvider.NO_NAMESPACE : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check as per [dataformat-root\", src._rootNameLookup) ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check the root name",
                "identical": false
            },
            {
                "k": 48,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check default: \" + src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "_rootNameLookup = src._rootNameLookup != null ? src._rootNameLookup() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? \"true\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null ? \"true\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "_rootNameLookup = src._rootNameLookup != null ? src._rootNameLookup.equals(src) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? new XmlSerializerProvider(src, src._rootNameLookup)) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null ? \"?\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup != null) ? src._rootNameLookup.getSimpleNameLookup() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check the root name",
                "identical": false
            },
            {
                "k": 57,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup != null) ? src._rootNameLookup() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup > 0) ? src._rootNameLookup() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "_rootNameLookup = src._rootNameLookup; // since 2.7",
                "identical": false
            },
            {
                "k": 60,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup > 0) ? src._rootNameLookup != null : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null ? \"null\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? \"?\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? root name : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check constraints of \" + src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? new XmlSerializerProvider() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? \"null\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? \"interface\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup > 0) ? src._rootNameLookup != null) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null ? \"?\"\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup > 0) ? src._rootNameLookup == null : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_rootNameLookup = src._rootNameLookup != null ? src._rootNameLookup.equals(src) : that._rootNameLookup;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check when there's default: \" + src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? 0 : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "_rootNameLookup = src._rootNameLookup != null ? src._rootNameLookup : src._rootNameLookup; // just need to ensure we'll also check default: \" + src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_rootNameLookup = src._rootNameLookup; // just so caller need to ensure we'll also check default: \" + src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_rootNameLookup = src._rootNameLookup == null ? new XmlSerializerProvider(src, src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check default?",
                "identical": false
            },
            {
                "k": 78,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup != null ? src._rootNameLookup() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? \"UNKNOWN\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? new XmlSerializer(src) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check as per [dataformat-root\", src._rootNameLookup) ? src._rootNameLookup != null : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? PropertySerializerProvider(src) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? new XmlSerializerProvider(src) : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? root name() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check root name",
                "identical": false
            },
            {
                "k": 86,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check when there's out of \" + src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? new XmlObject() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? root name\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "_rootNameLookup = src._rootNameLookup | src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? \"?\"\" : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? PropertySerializerProvider() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? new XmlSerializer() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup != null) ? src._rootNameLookup.getFullName() : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check List<Object> instead of \" + src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check default?",
                "identical": false
            },
            {
                "k": 96,
                "patch": "_rootNameLookup = src._rootNameLookup != null ? src._rootNameLookup : src._rootNameLookup; // just need to ensure we'll also check the root name",
                "identical": false
            },
            {
                "k": 97,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to use the root name",
                "identical": false
            },
            {
                "k": 98,
                "patch": "_rootNameLookup = src._rootNameLookup; // use the root name",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? NO_ARRAY : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "_rootNameLookup = src._rootNameLookup; // just need to ensure we'll also check (_rootNameLookup == null) ? PropertySerializer.instance : src._rootNameLookup;",
                "identical": false
            }
        ],
        "buggy_line": "_rootNameLookup = src._rootNameLookup;",
        "fixed_line": "_rootNameLookup = new XmlRootNameLookup();"
    },
    "JacksonDatabind-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), false);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), true);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataFormatReaders), false);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false, null);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false, true));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset, length);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \"UTF-8\"));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset, length));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false, true);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true, null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _bindAndReadValues(_dataFormatReaders.findFormat(src), false);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \"UTF-8\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(dataFormatReaders), false);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), NO_DATA_TYPE);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataFormatReaders), true);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offset, length);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), length, null);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true, false);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), 0, length);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), 0, length));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false).getFormatReaders();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (_bindAndReadValues(_parserFactory.createParser(src), false);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false, null));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false).getFormatReaders()) != null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), JsonEncoding.UTF8), true);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false, length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true, false));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParserNode(src), false);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), true));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParserNode(src), true));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory._parserFactory.createParser(src), false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParserFeatures(src), false);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataType), false);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), NO_TYPE);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), JsonEncoding.UTF8), false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false, 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (_dataFormatReaders != null) ? _parserFactory.createParser(src, offset, length);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), false, null);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), String);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParserNode(src), false));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), ctxt), true);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.constructType(src), false));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), JSON_TYPE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), 0, length), false);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParserNode(src), true);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (_bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), NO_ARRAY);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataFormatReaders, offset, length), false);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), JSON_NODE, length);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), UTF_8);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _bindAndReadValues(_dataFormatReaders.findFormat(src), offset, length);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _bindAndWriteValues(_considerFilter(_parserFactory.createParser(src), false);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \"UTF8\"));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (_bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(_dataFormatReaders), false);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory._parserFactory.createParser(src), true);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.findFormat(src), false);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), false));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataFormatReaders), false));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParserFeatures(src), true);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), ctxt));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false)));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (_bindAndReadValues(_parserFactory.createParser(src), true);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), JsonToken.END_ARRAY);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataFormatReaders))) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), NO_DATA_TYPE));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false).getFormatReaders() != null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (_dataFormatReaders == null) ? _parserFactory.createParser(src, offset, length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _bindAndReadValues(_dataFormatReaders.findFormat(src), true);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), NO_DATA_TYPE);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.constructParser(src), false);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), !_dataFormatReaders));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), 0, length);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataType), true);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (_bindAndReadValues(_parserFactory.createParser(dataFormatReaders), false);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), false, true);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false).getFormatReaders()) != null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.constructType(src), false);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), \"UTF-8\"));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (_bindAndReadValues(_parserFactory.createParser(src), false));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _bindAndWriteValue(_parserFactory.createParser(src), false);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false).getFormatReaders());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false).getValue();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataFormatReaders), length);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (_bindAndReadValues(_parserFactory.createParser(src), true));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true, null));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataFormatReaders), offset, length);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), str);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), false).getFormatReaders()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(dataFormatReaders));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(dataFormatReaders), true);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), NO_DATA_TYPE, true);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), 0).getClass();",
                "identical": false
            }
        ],
        "buggy_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),",
        "fixed_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),"
    },
    "Codec-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringUtils.encodeBase64(binaryData, true));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, null));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringUtils.newStringUtf8(binaryData, null) ? binaryData : null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringUtils.encodeBase64(binaryData, false) > 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).toCharArray() : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).toString() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, true));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, 1));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, null);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData).toString() : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringUtils.encodeBase64(binaryData, null) ? binaryData : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringUtils.encodeBase64(binaryData, false) * 1000;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringUtils.encodeBase64(binaryData, null) > 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? null : binaryData;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringUtils.encodeBase64(binaryData, null));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData)) : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData).toCharArray() : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData)) : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringUtils.encodeBase64(binaryData, false));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringUtils.newStringUtf8(binaryData, true)[0];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringUtils.encodeBase64(binaryData, false)[0];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return StringUtils.encodeBase64(binaryData, true) > 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).toByteArray()) : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? null : binaryData;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? binaryData : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? new String() : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).toCharArray()) : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringUtils.encodeBase64(binaryData, null, null));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringUtils.encodeToString(binaryData, true) ? Integer.valueOf(binaryData)) : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? binaryData : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringUtils.encodeBase64(binaryData, true)[0];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return StringUtils.encodeBase64(binaryData, null) ? Integer.valueOf(binaryData)) : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData).toCharArray()) : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringUtils.join(binaryData, \",\", null));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? new String() : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringUtils.encodeBase64(binaryData, null) ? Integer.valueOf(binaryData).toString() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).getBytes() : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData).toByteArray()) : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return StringUtils.encodeBase64(binaryData, null);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData).getBytes() : null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringUtils.encodeBase64(binaryData, false) : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringUtils.encodeBase64(binaryData, null) ? Integer.valueOf(binaryData).toCharArray()) : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringUtils.newStringUtf8(binaryData, null) ? Integer.valueOf(binaryData).toString() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringUtils.newStringUtf8(binaryData, null) ? lastBase64 : binaryData;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringUtils.encodeToString(binaryData, true) ? Integer.valueOf(binaryData).toString() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringUtils.encodeToString(binaryData, true) ? Integer.valueOf(binaryData).toCharArray()) : null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringUtils.newStringUtf8(binaryData, null)[0];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringUtils.encodeBase64(binaryData, null) * 1000;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringUtils.encodeBase64(binaryData, false) != null ? Integer.valueOf(binaryData).toString() : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? this : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringUtils.encodeToString(binaryData, true) ? binaryData : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) ? null : binaryData;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.MAX_VALUE : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringUtils.encodeToString(binaryData, true) ? Integer.valueOf(binaryData).toCharArray() : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringUtils.format(binaryData, null) ? binaryData : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringUtils.newStringUtf8(binaryData, false)[0];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, byte[].length);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringUtils.encodeBase64(binaryData, false) + 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringUtils.newStringUtf8(binaryData, null) ? Integer.valueOf(binaryData)) : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, 0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringUtils.newStringUtf8(binaryData, null) ? Integer.valueOf(binaryData).toCharArray()) : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringUtils.encodeBase64(binaryData, null, null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringUtils.newStringUtf8(binaryData, null) * 1000;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringUtils.encodeToString(binaryData, true)[0];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringUtils.encodeBase64(binaryData, null) ? Integer.valueOf(binaryData).toCharArray() : null;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringUtils.encodeBase64(binaryData, null) ? Integer.valueOf(binaryData).getBytes() : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringUtils.encodeToString(binaryData, true) ? Integer.valueOf(binaryData).toByteArray()) : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return StringUtils.join(binaryData, \",\"));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData).trim() : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringUtils.encodeToString(binaryData, null) ? binaryData : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringUtils.encodeBase64(binaryData, false) -> {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, null).length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringUtils.encodeToString(binaryData, true) ? null : binaryData;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringUtils.encodeBase64(binaryData, false) != null ? Integer.valueOf(binaryData).toCharArray()) : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).length : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringUtils.encodeBase64(binaryData, null) ? Integer.valueOf(binaryData).toByteArray()) : null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringUtils.encodeBase64(binaryData, null) != null ? Integer.valueOf(binaryData).toCharArray()) : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData).toString()) : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringUtils.encodeBase64(binaryData, \",\", null));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).getAsBase64() : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) * 1000;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringUtils.join(binaryData, true)[0];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, Integer.MAX_VALUE) != null ? binaryData : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringUtils.encodeBase64(binaryData, false) != null ? Integer.valueOf(binaryData).toCharArray() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringUtils.encodeBase64(binaryData, null) ? Integer.valueOf(binaryData).toString()) : null;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringUtils.newStringUtf8(binaryData, true));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringUtils.encodeBase64(binaryData, null) != null ? Integer.valueOf(binaryData).toString() : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) : null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? Integer.valueOf(binaryData).length : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringUtils.newStringUtf8(binaryData, null) ? Integer.valueOf(binaryData).getBytes() : null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringUtils.encodeBase64(binaryData, false) ? null : binaryData);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringUtils.encodeBase64(binaryData, false) != null ? Integer.valueOf(binaryData).getBytes() : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? null : (short[]) binaryData;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringUtils.encodeBase64(binaryData, 0, null) != null ? Integer.MAX_VALUE : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringUtils.newStringUtf8(binaryData, null) ? Integer.valueOf(binaryData).toCharArray() : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringUtils.encodeBase64(binaryData, false) != null ? Integer.valueOf(binaryData)) : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).toByteArray() : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringUtils.encodeToString(binaryData, false) ? Integer.valueOf(binaryData).toBase64() : null;",
                "identical": false
            }
        ],
        "buggy_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
        "fixed_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));"
    },
    "Math-94": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (v < 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (u < 0 || u > 100) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (comparator.compare(v, u) <= 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (u < 0 || u == v) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (u.equals(v) || Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (u.equals(v) || Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE >= length) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (u < Math.abs(v) + Math.abs(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (u.equals(v) || graph.containsEdge(v, u)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (u.equals(v) || Math.abs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (u < Math.abs(v) || Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Math.abs(u) <= 0 || Math.abs(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (u.equals(v) || u == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (u.equals(v) || \"0\".equals(v)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (u.equals(v) || Short.MAX_VALUE >= Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (u.isAssignableFrom(v) || Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (v.equals(u) || Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (v.equals(u) || Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (Math.abs(u) <= 0 || Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (u.isAssignableFrom(v) || Integer.MAX_VALUE <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ((u * n - 1) < 0) || (Math.abs(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (u.equals(v) || Math.abs(v)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (u.isAssignableFrom(v) || Short.MAX_VALUE <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Math.abs(u) <= 0 || Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (v.equals(u) || Math.abs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Math.abs(v) <= Integer.MAX_VALUE && Math.abs(v)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (u.isAssignableFrom(v) || Integer.MAX_VALUE >= length) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (v.equals(u) || graph.containsEdge(v, u)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (u.isAssignableFrom(v) || Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Math.abs(v) <= 0 || Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (u.equals(v) || Short.MAX_VALUE >= Integer.MIN_VALUE && u != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (u.equals(v) || Math.abs(v) <= 0 || Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (u.isAssignableFrom(v) || Math.abs(v)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE >= Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Math.abs(u) <= 0 || Math.abs(v)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (u.equals(v) || isBoolean(v)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (u.isDecimalDigit(v) || Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE >= 10 && u != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (u < Math.abs(v) || Math.abs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Math.abs(u) <= 0 || Math.abs(v) < Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (u.equals(v) || Math.abs(v) < Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (u.equals(v) || Short.MAX_VALUE <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (u.isWhitespace(v) || Math.abs(v)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (u.equals(v) || isLength(v)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Math.abs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (Math.abs(u) <= 0 || Math.abs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (u < 0 || Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (u < 0 || Math.abs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (u.isDecimalDigit(v) || Math.abs(v)) < Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (Math.abs(u) <= 0 || Math.abs(v)) < 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (u.equals(v) || Short.MAX_VALUE != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (u.equals(v) || Short.MAX_VALUE == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (u.isAssignableFrom(v) || Math.abs(v) < Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (u.isAssignableFrom(v) || Short.MAX_VALUE >= Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (u.equals(v) || graph.containsVertex(v)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (u.equals(v) || Short.class.isAssignableFrom(v)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE >= Integer.MIN_VALUE && u != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (v.compareTo(u) <= 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Math.abs(v) <= 0 || Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ((u * v) < 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (comparator.compare(v,u) <= 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (u.isAssignableFrom(v) || \"equals\".equals(v)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (comparator.compare(v, u) > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (u.equals(v) || Integer.class.isAssignableFrom(v)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (u.isDecimalDigit(v) || Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ((u * n - 1) < 0) || (Math.abs(v)) <= Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (u.equals(v) || a.equals(v)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (u.charAt(i) <= 0 || Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (u.isAssignableFrom(v) || Math.abs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ((u * n - 1) < 0) || (Math.abs(v))) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (u * Math.abs(v) <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Math.abs(v) <= Integer.MAX_VALUE && Math.abs(v)) > Matrices.EPS) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (u.get(v) <= 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (comparator.compare(v, u) < 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (u.equals(v) || Math.abs(v)) < 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE >= n) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (u.equals(v) || isDigit(v)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (u.equals(v) || \"double\".equals(v)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Math.abs(u) <= 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (u.isPlusNode()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (u.equals(v) || u.isAssignableFrom(v)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (comparator.compare(v, u) >= 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (u.isAssignableFrom(v) || Integer.MAX_VALUE <= 0 || u == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE >= 0.0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (u.isFinal()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Math.abs(v) <= Integer.MAX_VALUE && Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (u.equals(v) || Math.abs(v) <= 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (u == v) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Math.abs(u) <= 0 && Math.abs(v) < 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Math.abs(v) <= p && Math.abs(z) < 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (v.equals(u) || Integer.MAX_VALUE >= length) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (u.isWhitespace(v)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (u < 0 || u > 360) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Math.abs(v) <= 0 || Math.abs(z) < 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (u.equals(v) || Integer.MAX_VALUE >= 20) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (u.equals(v) || Short.MAX_VALUE >= length) {",
                "identical": false
            }
        ],
        "buggy_line": "if (u * v == 0) {",
        "fixed_line": "if ((u == 0) || (v == 0)) {"
    },
    "Closure-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cfa.createEdge(target, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, startNode, finallyNode);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, lastNode, finallyNode);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cfa.createEdge(source, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, node);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, node));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,writer, finallyNode);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cfa.createEdge(source, Branch.UNCOND, startNode, finallyNode);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, finallyNode);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, \" finally\"));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, false);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, parent));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, origin, important);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, argumentsNode, finallyNode);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, false);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, fromNode);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, value, index);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, hasNode);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, ClauseType.LEFT);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cfa.addEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, parent, finallyNode);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, peekNode, finallyNode);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, attributePath, finallyNode);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, 1.0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, 0.0, finallyNode);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cfa.createEdge(descriptionNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cfa.createEdge(source, Branch.UNCOND, finallyNode));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, -1, -1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, 1.0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, format, finallyNode);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, TimeUnit.NANOSECONDS);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, message, finallyNode);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, argumentsNode));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, ClauseType.SELECT, false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,Statement, finallyNode);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,agNode);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cfa.createEdge(source, Branch.UNCOND, argumentsNode, finallyNode);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,CenterNode, finallyNode);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, flags);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, forNode, finallyNode);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,removeNode));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,closeNode, finallyNode);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, null);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, responseHeadersNode);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, \" finally\", fromNode);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, toNode);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, subNode, finallyNode);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, TimeUnit.MILLISECONDS, finallyNode));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, parser.next()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, ClauseType.INSTANCE);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, file, finallyNode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, out, parent));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cfa.createEdge(target, Branch.UNCOND, finallyNode));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, ClauseType.DELETED);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, STRINGNode);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, 0.0);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, parser.getLastChild()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, ClauseType.SELECT, true);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, current);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, downNode);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, fromNode));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, root, finallyNode);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, TimeUnit.MILLISECONDS, finallyNode);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,ainingNode, finallyNode);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode,Statement));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, ClauseType.LEFT);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, this);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, eps);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, forNode, finallyNode));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, lastNode));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, current, finallyNode);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,poNode, finallyNode);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, \"this\", fromNode);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, timeout, timeUnit);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, 0.0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, value, index));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, toNode));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, NAME, CUSTOMNode);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, ClauseType.INSTANCE);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, false, true);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, \"e\"), node);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, false);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, overallNode));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, startNode, deleteNode));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, forNode);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, 0.0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, flags);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, parent, node);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, STRINGNode));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, motorNode);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, ClauseType.SELECT, finallyNode);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, ClauseType.JOIN_TYPE);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, now);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, forNode);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, ClauseType.SELECT, flags);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, fromNode, ClauseType.NONE);",
                "identical": false
            }
        ],
        "buggy_line": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
        "fixed_line": "cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);"
    },
    "Math-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (a < 0 || a > 1) ? Float.NaN(b) : b;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (a < 0 || a > 1) ? Float.valueOf(b) : b;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (a < 0 || a > 1) ? Float.valueOf(b) : 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - 1));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (a < 0 || a > 1) ? b : (Float.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE + a);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (a < 0 || a > 1) ? Float.MIN_VALUE : b;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (a < b) ? b : (float) a;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (a < 0 || a > 1) ? Float.MAX_VALUE : b;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (a < 0 || b > 100) ? Float.MAX_VALUE : a;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (a < b) ? a : (Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (a < 0 || a > 1) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (a < 0 || a > 1) ? b : (Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (a < 0 || a > 1) ? Float.NaN(b) : 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (a < 0 || b > 100) ? Float.NaN(a) : b;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (a < b) ? b : (Float.valueOf(a + b) ? Float.NaN : 0 );",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (a < 0 || b > Float.MAX_VALUE) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (a < 0 || b > 255) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : a);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - b) ? Float.NaN : 0L;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - b) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (a < 0 || a > 1) ? Float.isNaN(b) : b;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : c;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (a < 0 || b > 100) ? Float.MAX_VALUE : b;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (a < b) ? b : (Float.valueOf(a + b) ? Float.NaN : 0L);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (a < 0 || b > 255) ? Float.MAX_VALUE : b;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (a < n) ? b : (Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (a < n) ? b : (Float.MAX_VALUE - b) ? Float.NaN : 0L;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (a < n) ? b : (Float.MAX_VALUE - b) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE + a, b) ? Float.NaN : 0L;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - 1));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (a < 0 || b > a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE + a);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (a < 0 || a > 1) ? Float.NaN(b) : b);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (a < 0 || b > Float.MAX_VALUE) ? Float.valueOf(b) : 0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (a < 0 || a > 1) ? Float.valueOf(b) : 0.0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (a < b) ? b : (Float.valueOf(a + b) ? Float.NaN : 0L;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - b) ? Float.NaN : 0 );",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (a < b) ? a : (Float.MAX_VALUE - b) ? Float.NaN : 0L;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (a < 0 || b > 255) ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (a < b) ? a : (Float.MAX_VALUE + b) ? Float.NaN : 0L;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (a < 0 || b > Float.MAX_VALUE) ? Float.valueOf(b) : a;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (a < 0 || b > 100) ? Float.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (a < 0 || b > 100) ? Float.MAX_VALUE : a + b;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (a < n) ? b : (Float.MAX_VALUE - b) ? Float.NaN : 0 );",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (a < b) ? b : (float) a + b;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (a < 0 || b > 100) ? Float.valueOf(a) : b;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (a < 0 || a > 1) ? Float.valueOf(b) : b);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - 1) : a;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - 1)) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (a < 0 || b > 100) ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE + 1) : a;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (a < 0 || b > 100) ? Float.MIN_VALUE : a;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE + a;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (a < b) ? 0 : (float) a;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - a) ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (a < 0 || a > 1) ? Float.doubleValue() : b;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (a < 0 || b > 255) ? Float.MAX_VALUE : a;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (a < 0 || b > 100) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : 0.0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (a < 0 || a > 1) ? Float.toString() : b;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : 1 );",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (a < 0 || a > 1) ? Float.EMPTY : b;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : 1L;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : c);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE + a, b) ? Float.NaN : 0 );",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (a < 0 || a > 1) ? 0.0 : (Float.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (a < 0 || b > 100) ? Float.MAX_VALUE : a + b);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (a < 0 ? b : (float) a;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (a < 0 || b > 255) ? Float.MIN_VALUE : b;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - 2)) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (a < 0 || b > 255) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (a < 0 || b > 100) ? Float.MAX_VALUE : c;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (a < b) ? a : (Float.MAX_VALUE - b) ? Float.NaN : 0 );",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (a < n) ? b : (Float.MAX_VALUE - 1));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (a < 0 || b > Short.MAX_VALUE) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (a < 0 || a > 1) ?Float.valueOf(b) : b;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (a < b) ? 1 : (Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - 1)) ? Float.NaN : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (a < 0 || b > 100) ? Float.MIN_VALUE : b;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (a < 0 || a > 1) ? Float.isNaN(b) : 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - 1L) ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE + 1) : Float.NaN;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE + a, b) ? Float.NaN : 0L);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (a < 0 || b > 255) ? Float.NaN(a) : b;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (a < 0 || b > 100) ? a : (Float.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (a < b) ? b : (Float.MAX_VALUE - b) ? Float.NaN : c;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.MIN_VALUE : a;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (a < 0 ? b : (Float.MAX_VALUE - 1) : a;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (a < 0 || b > 100) ? 0.0 : (Float.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : 0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (a < b) ? 0 : (Float.MAX_VALUE - b) ? Float.NaN : 1));",
                "identical": false
            }
        ],
        "buggy_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);",
        "fixed_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);"
    },
    "Math-69": {
        "fixes": [
            {
                "k": 1,
                "patch": "out[i][j] = 0d / (1 - t;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "out[i][j] = Math.sqrt(n * t);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "out[i][j] = 2 * (1 - r;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "out[i][j] = 0d;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "out[i][j] = 1 * (1 / t;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "out[i][j] = Math.sqrt(n * r - 1) / t;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "out[i][j] = Math.sqrt(n * r - 1) / t);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "out[i][j] = 2 * (1 / t;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - 1));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r * r));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "out[i][j] = Math.sqrt(n * r - 1)];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r * t));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "out[i][j] = 2 * (1 - t;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - g);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "out[i][j] = 0d / (1 - t);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "out[i][j] = 1 * (1 - r;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "out[i][j] = (1 * (1 - t;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "out[i][j] = 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - 1) / t);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "out[i][j] = (1 / t;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "out[i][j] = Math.sqrt((nObs - 1) / t);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) * (1 - r);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - r);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "out[i][j] = t / (1 - r * (1 - 1));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "out[i][j] = 1 * (1 - i;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "out[i][j] = 0d / (1 - r;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "out[i][j] = Math.abs(r * (1 - r));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "out[i][j] = Math.abs(r * (1 - r);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "out[i][j] = 1 * (1 - tDistribution;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "out[i][j] = (1 * (1 - t);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "out[i][j] = 2 * (1 - tDistribution;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "out[i][j] = Math.abs(r * (1 - t) <= 1 ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "out[i][j] = t * (1 - gDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) * (1 - t);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - r;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "out[i][j] = Math.sqrt(r * (1 - t));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - w / t);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "out[i][j] = Math.abs(r * (1 - t);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - 1) * (1 - r;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "out[i][j] = Math.sqrt(r * (1 - t);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) / t);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) + 1));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "out[i][j] = Math.sqrt(n * r - 1) ? t : 0.0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "out[i][j] = Math.sqrt(n * r / t);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "out[i][j] = Math.abs(r * (1 - t) <= 0d;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "out[i][j] = 0d - t;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "out[i][j] = Math.abs(r * (1 - t) / 1000.0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "out[i][j] = 2 * (1 - r);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "out[i][j] = 2 * (1 - gDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) * (1 - t));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "out[i][j] = 2 * (1 + tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "out[i][j] = 1 * (1 - t;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "out[i][j] = Math.sqrt(n * r - 1) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "out[i][j] = 1 * (1 + tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "out[i][j] = 1 * (1 - i / t;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - 1) / t;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "out[i][j] = 0d / (1 - r * t);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "out[i][j] = Math.sqrt(n * r - 1) ? 1 : 0.0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - r * g);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "out[i][j] = 1 * (1 << j - 1) / t;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "out[i][j] = c * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "out[i][j] = Math.sqrt(r * (1 - t) ? 1 : 0d;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - k);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - t);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "out[i][j] = i / (1 - t;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "out[i][j] = Math.sqrt(n * t - 1)];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "out[i][j] = Math.sqrt(n * t - 1) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "out[i][j] = 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "out[i][j] = 0d / (1 - r);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - w);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) * (1 - r;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - r * t);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "out[i][j] = (1 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "out[i][j] = Math.sqrt(n * r - 1];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "out[i][j] = 1 * (1 << j - 1)];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "out[i][j] = 2 * (1 / t);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "out[i][j] = Math.abs(r * (1 - r) / t);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "out[i][j] = 1 * (1 << i - 1) / t;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "out[i][j] = Math.sqrt(n * r - 1) / (1 - t);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "out[i][j] = 1 * (1 / t);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "out[i][j] = 1 * (1 - gDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "out[i][j] = Math.sqrt(n - 1, t);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "out[i][j] = Math.sqrt(r * (1 - t) ? 1 : 0.0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "out[i][j] = Math.sqrt(n * r - 1));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - g;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "out[i][j] = Math.abs(r * (1 - t) / 2.0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) + 1 - t));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "out[i][j] = Math.sqrt(r * (1 - t) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "out[i][j] = n * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "out[i][j] = Math.abs(r * (1 - t) ? 1 : 0.0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "out[i][j] = i * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "out[i][j] = (1 << j - 1) * t;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t, j));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "out[i][j] = 0d / (1 - t, 0.0);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "out[i][j] = Math.sqrt(n * t - 1) / e;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "out[i][j] = Math.sqrt((nObs - 1) * (1 - t);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "out[i][j] = Math.sqrt(Math.abs(r) - 1) * (1 - r);",
                "identical": false
            }
        ],
        "buggy_line": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
        "fixed_line": "out[i][j] = 2 * tDistribution.cumulativeProbability(-t);"
    },
    "JacksonDatabind-97": {
        "fixes": [
            {
                "k": 1,
                "patch": "gen.writeObject(_value);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "gen.writeObject(_value, _value);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "gen.writeObject(_value).serialize(gen, ctxt);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "gen.writeValue(_value);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS",
                "identical": false
            },
            {
                "k": 6,
                "patch": "gen.writeObject(_value instanceof JsonSerializable);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS",
                "identical": false
            },
            {
                "k": 8,
                "patch": "gen.writeEndObject();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "gen.writeObject(_value).serializeWithType(gen, ctxt, _value);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as per [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 12,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS+\"]\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS+\"]\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "gen.writeFieldName(_value);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "gen.writeObject(_value).serialize(p, ctxt);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, no [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 19,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 21,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, no [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 22,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) continue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT",
                "identical": false
            },
            {
                "k": 25,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))?",
                "identical": false
            },
            {
                "k": 26,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT",
                "identical": false
            },
            {
                "k": 27,
                "patch": "gen.writeObject(_value); // to ensure we can call it's parameter should not be assigned. Also declare the methods parameters as per [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 28,
                "patch": "gen.writeObject(_value instanceof JsonSerializable) ? _value : ctxt;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, no [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 30,
                "patch": "gen.writeObject(_value instanceof JsonValue);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"' in class \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"' in class \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS+\"]\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "gen.writeObject(_value); // to ensure we can call it's parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "gen.writeObject(_value, _value).serialize(gen, ctxt);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? JsonSerializable) : _value;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))?",
                "identical": false
            },
            {
                "k": 37,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) continue;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"' in class \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS",
                "identical": false
            },
            {
                "k": 39,
                "patch": "gen.writeObject(_value).serializeWithType(p, ctxt, _value);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? JsonSerializable) : _value;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
                "identical": false
            },
            {
                "k": 43,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, no [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 44,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS too many? Just flush...",
                "identical": false
            },
            {
                "k": 45,
                "patch": "gen.writeObject(_value).serialize(null, ctxt);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? JsonSerializable)\" : _value;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
                "identical": false
            },
            {
                "k": 48,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS).serializeWithType().getRawClass(), ctxt, _value));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? JsonSerializable) : ctxt;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? _value : ctxt;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)).serializeWithType().getRawClass(), ctxt, _value);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, so recurse",
                "identical": false
            },
            {
                "k": 53,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, just construct in normal way",
                "identical": false
            },
            {
                "k": 54,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS).serializeWithType().getRawClass(), ctxt, _value);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, no [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 57,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, so recurse",
                "identical": false
            },
            {
                "k": 58,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
                "identical": false
            },
            {
                "k": 59,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? JsonSerializable)\" : _value;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS+\"]\";",
                "identical": false
            },
            {
                "k": 61,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"' in class \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT",
                "identical": false
            },
            {
                "k": 62,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS too many? Just flush...",
                "identical": false
            },
            {
                "k": 63,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 64,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, no need to use a placeholder that'll fail",
                "identical": false
            },
            {
                "k": 65,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? JsonSerializable) : ctxt;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)",
                "identical": false
            },
            {
                "k": 67,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
                "identical": false
            },
            {
                "k": 68,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)).serialize(gen, just construct in normal way",
                "identical": false
            },
            {
                "k": 69,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as per [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 70,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)).serialize(gen, just construct in normal way",
                "identical": false
            },
            {
                "k": 71,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, _value));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\", _value));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, no [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 74,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? _value : ctxt;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, just construct in normal way",
                "identical": false
            },
            {
                "k": 76,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_ARRAYS",
                "identical": false
            },
            {
                "k": 77,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, so recurse",
                "identical": false
            },
            {
                "k": 79,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? _value.getRawClass() : ctxt;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, so recurse",
                "identical": false
            },
            {
                "k": 81,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as per [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 82,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"' in class \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS+\"]\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT",
                "identical": false
            },
            {
                "k": 87,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"' in class \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) continue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_LIST+\"]\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) ? JsonSerializable) : null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as per [JACKSON-407] -- allow disabling wrapping for \"+ctxt+\"",
                "identical": false
            },
            {
                "k": 91,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, no [JACKSON-407] -- allow disabling'll fail",
                "identical": false
            },
            {
                "k": 92,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, no [JACKSON-407] -- allow disabling wrapping for more than one",
                "identical": false
            },
            {
                "k": 93,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS, no [JACKSON-407] -- allow disabling wrapping for testing",
                "identical": false
            },
            {
                "k": 94,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "gen.writeObject(_value); // since we can not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) [JACKSON-407] -- allow disabling'll fail",
                "identical": false
            },
            {
                "k": 96,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_EMPTY_ARRAYS",
                "identical": false
            },
            {
                "k": 98,
                "patch": "gen.writeObject(_valueClass, _value);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS+\")\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "gen.writeObject(_value); // since we can call it's parameter should not be assigned. Also declare the methods parameters as '\"+propName+\"', but \"+ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, just construct in normal way",
                "identical": false
            }
        ],
        "buggy_line": "gen.writeObject(_value);",
        "fixed_line": "ctxt.defaultSerializeValue(_value, gen);"
    },
    "Chart-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return \" title=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return \" title=\\\"\" + toolTipText.replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return \" title=\\\"\" + toolTipText.toLowerCase();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return \" title=\\\"\" + toolTipText.toLowerCase() + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).trim();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return \" title=\\\"\" + toolTipText.toLowerCase().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText) + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1) + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toUpperCase();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return \" title=\\\"\" + toolTipText.trim();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1) + \"\\\"\";",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toLowerCase().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).trim().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toString();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return \" title=\\\"\" + toolTipText.toLowerCase() + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return \" title=\\\"\" + toolTipText.replace(\".\", \"\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 5);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText) + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toString().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getTokenValue().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getTokenValue();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getName().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getName();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return \" title=\\\"\" + toolTipText.toString();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getSimpleName();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getDescription();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getTokenValue().toString();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toLowerCase();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return \" title=\\\"\" + toolTipText.toLowerCase() + \"\\\"\";",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText) + \"\\\"\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return \" title=\\\"\" + toolTipText.replace(\"\\\"\", \"\").trim();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 2);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return \" title=\\\"\" + toolTipText.replace(\"-\", \"\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getDescription().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 5) + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText).length() + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return \" title=\\\"\" + toolTipText.replaceAll(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return \" title=\\\"\" + toolTipText.toUpperCase() + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() -\";",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getSimpleName().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toUpperCase().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).trim().getSimpleName();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - \".title\";",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).name().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.indexOf(\"\\\"\", toolTipText) + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.indexOf(toolTipText) + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText) + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return \" title=\\\"\" + toolTipText.getBytes(\"UTF-8\"));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.indexOf(\":\") + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1) + \"\\\" alt<String>\";",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toString().replace(\"\\\"\", \"\").trim();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return \" title=\\\"\" + toolTipText.replace(associationText) + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getTokenValue().trim();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText).length() - 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 5));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getFullName().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toUpperCase().equals(\"utf-8\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getTokenValue().replace(\"\\\"\", \"\").trim();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText).trim();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toUpperCase().equals(\"utf8\"));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toLowerCase().replace(\"\\\"\", \"\").trim();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getToolTip().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return \" title=\\\"\" + toolTipText.getBytes(\"utf-8\"));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getSimpleName().toLowerCase();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toUpperCase().equals(\"\"));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).name().toLowerCase();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return \"title=\\\"\" + toolTipText.replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getUrl();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.indexOf(\".\") + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return \" title=\\\"\" + toolTipText.replace(\"\\\"\", \", \");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - \".title\".length());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return \" title=\\\"\" + toolTipText.replace(\"\\n\", \"\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return \" title=\\\"\" + toolTipText.toUpperCase() + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getFullName();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getToolTip());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toUpperCase().equals(\"'\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toLowerCase().startsWith(\"'\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.indexOf(\":\") + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.lastIndexOf(\".\") + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getName().replace(\"\\\"\", \"\").trim();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText).length() > 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return \" title=\\\"\" + toolTipText.replace(\",\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.indexOf(\"=\" + toolTipText));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 4) + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return \" title=\\\"\" + toolTipText.replace(\"?\", \"\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 5)).trim();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText).length() + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.indexOf(\"\\\"\", toolTipText) + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - \".title\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.indexOf(\":\") + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).toLowerCase().equals(\"utf8\"));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText.length() - 1).getTokenValue().toLowerCase();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return \" title=\\\"\" + toolTipText.substring(0, toolTipText).length() - 1;",
                "identical": false
            }
        ],
        "buggy_line": "return \" title=\\\"\" + toolTipText",
        "fixed_line": "return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText)"
    },
    "Math-30": {
        "fixes": [
            {
                "k": 1,
                "patch": "final int n1n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final double n1n2prod = n1 * n2;",
                "identical": true
            },
            {
                "k": 3,
                "patch": "final int n1n2prod = n1 * n1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final double n1n2prod = n1 * n1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final double n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final double n1 = n2 * n2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final int n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final double n2n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final int n2n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final int n1n2prod = n1 / n2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final int n1n2prod = n1 * n0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final int n1n2prod = n1 * n;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final float n1n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final double n1n2prod = n1 / n2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final int n1n2rees = n1 * n2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final double n1n2prod = n1 * n0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final double n1n2prod = n1 * n;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final double n1n2rees = n1 * n2;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final double n1Already2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final int n1n2ple = n1 * n2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final double n1n2ple = n1 * n2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final long n1n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final int n1 = n2 * n2;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final int n1n2prod = n1 + n2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final double n1j2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final int n1n2THREADS = n1 * n2;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final int n1j2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final int n1column2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final int n1n2prod = n1 * n2);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final int n1n2VERE = n1 * n2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final int n1Already2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final double n1> n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final double n1n2THREADS = n1 * n2;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final int n1> n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final double n2Wprod = n1 * n2;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final double n1column2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final double n1n2Marker = n1 * n2;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final double n1Wprod = n1 * n2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final double n1n2VERE = n1 * n2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final int n1n2 HttpServer = n1 * n2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final int n1n2Multiplier = n1 * n2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final int n1n2Marker = n1 * n2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final int n1n2prod = n1 * n3;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final int n1n2prod = n1 * n3;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final int n1n2override = n1 * n2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final int n1n2prod = n1 * n2) + n2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final double n1d2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final double n1n2override = n1 * n2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final double n1n2imitives = n1 * n2;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final int n1n2 DEP = n1 * n2;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final int n1n2imitives = n1 * n2;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final double n1n2prod = n1 + n2;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "static int n1n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final double n1n2native = n1 * n2;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final double n1n2quot = n1 * n2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final double n1n2 YY = n1 * n2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final int n1n2 resolver = n1 * n2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final int n1n2 pagination = n1 * n2;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final int n1n2REQ = n1 * n2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final double n1n2prod = n1 * n2);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final int n1n2imports = n1 * n2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final int n1n2 getIn = n1 * n2;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final int n1n2 ValidationError = n1 * n2;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final int n1n2quot = n1 * n2;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final int n1n2prod = n1 * n4;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final int n1Wprod = n1 * n2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final double n1n2rogate = n1 * n2;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final double n1n2 HttpServer = n1 * n2;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final double n1 = n1 * n2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final int n1 = n1 * n2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final int n1n2prod = n1 - n2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final int n1n2 slower = n1 * n2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final int n1n2 Security = n1 * n2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final double n1n2Multiplier = n1 * n2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final int n1n2native = n1 * n2;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final int n1n2iator = n1 * n2;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final int n1n2 curr = n1 * n2;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final int n1n2 getMessage = n1 * n2;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final int n1n2 Label = n1 * n2;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final double n1n2 getIn = n1 * n2;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final int n1n2efile = n1 * n2;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final int n1n2 PENDING = n1 * n2;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final int n1n2column = n1 * n2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final int n1n2axis = n1 * n2;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final int n1n2Unexpected = n1 * n2;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final int n1n2 augment = n1 * n2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final double n1 = n2 * n1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final double n1n2 curr = n1 * n2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final double n1n2iator = n1 * n2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final double n2ple = n1 * n2;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final double n1n2prod = n1 * n3;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final double n2prod = n1 * n1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final int n1n2prod = n1 + n1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final int n2prod = n1 * n1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final double n1n2prod = n1 * n3;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final double n1n2 Label = n1 * n2;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final int n1n2prod = n1 * n6;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final double n2n2prod = n1 * n1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final int n1n2prod = n1 * n5;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final double n1n2prod = n1 * n4;",
                "identical": false
            }
        ],
        "buggy_line": "final int n1n2prod = n1 * n2;",
        "fixed_line": "final double n1n2prod = n1 * n2;"
    },
    "Closure-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (target != null && target != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(target)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (target != null && target != null && target.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (target != null && target != null && target.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (target != null && target != null && target.next() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (target != null && target != null && target.getName().equals(target)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (target != null && target != null && target.getType().equals(target)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (target != null && target != null && target.getType() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (target != null && target != null && target.getFirstDescendant(CxxGrammarImpl.target)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (target != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (target != null && target.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (target != null && target != null && target.getType() > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.DEFAULT)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(node.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (target != null && target != null && target.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (target != null && target != null && target.equals(target)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (target != null && target != null && target.getString() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (target != null && target != null && target.getFirstDescendant(CxxGrammarImpl.className())) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (target != null && target != null && target.getFirstDescendant(CxxGrammarImpl.className)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (target != null && target != null && target.getFirstChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (target != null && target != null && target.getFirstChild().size() > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxPippoConstants.ACTIVITI_EXTENSIONS_PREFIX)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxGrammarImpl.className)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (target != null && target != null && target.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxPunctuator.NO_NAMESPACE)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (target != null && target != null && target.trim().length() > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (target != null && target != null && target.getElement() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (target != null && target != null && target.getParent() != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.IDENTIFIER)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (target != null && target.equals(target)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (target != null && target != null && target.getClass() == Token.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxGrammarImpl.target)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxPaged)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (target != null && target.getClass() == Token.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (target != null && target != null && target.isFirstChild()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxGrammarImpl.className())) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(qualifiedName)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (target != null && target.getFirstDescendant(CxxGrammarImpl.target)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (target != null && target != null && target.getFirstDescendant(CxxGrammarImpl.className) != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (target != null && target != null && target.getType().equals(node.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (target != null && target != null && target.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (target != null && target != null && target.getNodeType() != Node.ELEMENT_NODE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (target != null && target != null && target.getParent() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (target != null && target != null && target.getType() == Token.TK_IDENT) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (target != null && target != null && target.getType().equals(qualifiedName)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (target != null && target != null && target.getNodeType() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxGrammarImpl.functionName)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (target != null && target.getType() == Token.TK_IDENT) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (target != null && target != null && target.getFirstAncestor(CxxGrammarImpl.target)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (target != null && target != null && target.getType() != Token.TK_SPAN) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.BOTTOM)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (target != null && target != null && target.getName().equals(\"target-counter\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(Page.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxGrammarImpl.properties)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (target != null && target != null && target.getType() != Token.TK_IDENT) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (target != null && target != null && target.getFirstDescendant(CxxGrammarImpl.className()) != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxPippoConstants.ACTIVITI_EXTENSIONS_NAMESPACE)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (target != null && target != null && target.getImage() != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (target != null && target.length() > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (target != null && target.isFirstChild()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxTokenType.IDENTIFIER)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.TYPE))) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (target != null && target != null && target.getName().equals(qualifiedName)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(modifiers)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (target != null && target != null && target.getImage() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (target != null && target.trim().length() > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (target != null && target.getType() > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (target != null && target != null && target.getClass().getName().equals(target)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.TYPE)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (target != null && target != null && target.getType().equals(String.valueOf(target))) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (target != null && target != null && target.getName().equals(node.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (target != null && target != null && target.getFirstChild() != null && target.getFirstChild().equals(target)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (target != null && target != null && target.getFirstDescendant(CppGrammarImpl.className())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.LIST)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (target != null && target != null && target.getFirstChild().getName() > 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (target != null && target != null && target.getFirstChild() != Token.TK_SPAN) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxGrammarImpl.parameterName)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (target != null && target != null && target.getType().equals(node.getNodeName())) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (target != null && target != null && target.getName().equals(this.target)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxIndex())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(Cleader)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (target != null && target != null && target.getTokenValue().equals(target.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (target != null && target.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (target != null && target != null && target.trim().equals(target)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (target != null && target.next() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (target != null && target != null && target.length() > 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (target != null && target != null && target.getFirstChild().equals( Token.TK_COMMA)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (target != null && target != null && target.getFirstDescendant(CxxGrammarImpl.paramName) != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxGrammarImpl.expression)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (target != null && target != null && target.getType().equals(OrderType.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (target != null && target != null && target.getFirstDescendant(CxxGrammarImpl.paramName)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.REF)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.CHARACTER)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxGrammarImpl.callee)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(propName)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (target != null && target != null && target.getType().equals(this.target)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (target != null && target.getName().equals(qualifiedName)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (target != null && target != null && target.getFirstChild().equals(CxxKeyword.TYPEDEF)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (target != null && target != null && target.next() != Token.TK_SPAN) {",
                "identical": false
            }
        ],
        "buggy_line": "if (target != null) {",
        "fixed_line": "if (target != null && target.getType() == Token.STRING) {"
    },
    "Jsoup-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (name.equals(\"process\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (name.equals(\"*default\", \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (name.equals(\"application/x-www-form-urlencoded\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (name != null && \"base\", \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (name.equals(\"xml\") && \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"n\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"tenant\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (name.equals(\"tenant\") && \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (name.equals(\"id\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (name.equals(\"input\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"nof(\"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"radio\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"index\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"message\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"update\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"ag\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"Unsigned\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (name.equals(\"stop\") && \"base\", \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \" parts\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (name.equals(\"stop\") && \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (name.equals(\"stop\") || \"base\", \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"digest\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"index\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (name.equals(\"info\") || \"base\", \"command\", \"tenant\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (name.equals(\"header\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \" co\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"schema\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"radio\", \"title\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (name.equals(\"file\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"t\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \" size\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"previous\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (name.equals(\"application/json\", \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (name.equals(\"close\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (name.equals(\"api\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (name.equals(\"collection\") && \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"id\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"processing\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"track\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"avoid\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (name.equals(\"ound\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \" bottom\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (name.equals(\"activity\") && \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (name.equals(\"process\") && \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"settings\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"closed\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"debug\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (name.equals(\"update\") && \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \" store\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (name != null && \"base\", \"command\", \"tenant\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"link\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"output\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"bpmn\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"from\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"checkbox\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"index\", \"title\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \" specification\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (name.equals(\"sync\") || \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"replace\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"database\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"toString\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (name.equals(\"info\") || \"base\", \"command\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (name.equals(\"table\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"Http\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (name.equals(\"xml\") && \"command\", \"form\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"update\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"response\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"async\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"DEFAULT\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"link\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"node\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (name.equals(\"application/x-www-form\", \"command\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"edge\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"o\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \" destination\", \"style\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"button\", \"title\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (name.equals(\"xml\") || \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (name.equals(\"info\") || \"base\", \"command\", \"radio\", \"title\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"super\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"table\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (name.equals(\"tenant\") && \"command\", \"radio\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"nofNanos\", \"title\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (name.equals(\"tenant\") && !\"\".equals(attribute.getNodeName())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (name.equals(\"tenant\") && \"command\", \"index\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (name.equals(\"*default\", \"command\", \"radio\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (name.equals(\"xml\") && \"command\", \"radio\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"data\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (name.equals(\"xml\") && \"command\", \"tenant\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"client\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (name.equals(\" treat\") && \"command\", \"meta\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (name.equals(\"xml\") && \"command\", \"index\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"meta\", \"target\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (name.equals(\"tenant\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"textarea\", \"style\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (name.equals(\"xml\") && !\"\".equals(attribute.getNodeName())) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (name.equals(\"stop\") && !\"\".equals(attribute.getNodeName())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"default\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (StringUtil.in(name, \"base\", \"command\", \"style\", \"title\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (name.equals(\"*default\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {",
        "fixed_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
    },
    "Math-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (entry != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (entry.isDirectory() || isPosition(entry)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (entry.isDirectory() || entry.isAbsolute()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (entry.isDirectory() || entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (entry.getValue() > minRatio) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if(entry != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (entry.getValue() == minRatio) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (entry.isAbsolute() || isPosition(entry)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (entry instanceof double) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (entry != minRatio && entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (entry.isDirectory() && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (entry != null && entry.getSize() > minRatio) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (entry.isDirectory() || !minRatioPos >= minRatio) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (entry != null && entry.getValue() > minRatio) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (entry.isDirectory() || entry.isPositioned()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entry.isAbsolute() || isFixed()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (entry.isDirectory() || !minRatio) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (entry != null && entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (entry != minRatio) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (entry.isFirst() || isPosition(entry)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (entry.isDirectory()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (entry.getValue() < minRatio) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (entry != null && minRatio > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (entry != null && epsilon.length() > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (entry.isDirectory() || entry.isRunning()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (entry.isDirectory() || !minRatio[i].equals(entry.getTitle())) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (entry.isDirectory() || isMaxRatio(entry)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry.isDirectory() || minRatio > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (!entry.isDirectory() && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry.isDirectory() || !sRatio(entry)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (entry.isDirectory() && !minRatio) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (entry != null && entry.getName().equals( minRatio)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry != minRatioPos && entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (entry.isDirectory() || Math.abs(zRatio) < minRatioPos) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (entry.isDirectory() || ! HRatio(entry, minRatioPos)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (entry.isDirectory() || entry.isStacking()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (entry != null && entry.getName().equals(tableau.getTitle())) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (entry.isDirectory() || !sRatio(entry, minRatio)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (entry.isDirectory() || isAbsolute() || entry.isFixed()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (entry.getKey() > minRatio) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (entry != minRatio && entry.getSize() > maxRatio) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (entry instanceofBucket) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (entry.isDirectory() || !sRatio(entry, minRatioPos)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (entry.isDirectory() || isAbsolute()) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (entry.isDirectory() && entry.getName().equals(tableau.getTitle())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (entry.isDirectory() || isPositioned(entry)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (entry.getSize() > minRatio) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (entry.isDirectory() || isAbsolute() || !minRatioPos >= minRatio) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if(entry != minRatioPos && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (entry.isDirectory() || ! HRatio(entry)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (entry.isDirectory() || entry.isBucket()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (entry != null && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (entry.isDirectory() || entry.getTitle() != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (entry.getValue() >= minRatio) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (entry != null && epsilon.length > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (!entry.isDirectory() || isPosition(entry)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (entry != minRatio && entry.getValue() > 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (entry.getValue() == minRatio || entry.getHeight() > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (entry.getValue() == minRatio || entry.isAbsolute()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i >= minRatio || entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (entry.isDirectory() || isInteger(entry)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (entry.getWidth() > minRatio) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (entry != minRatio && entry.getName().equals(tableau.getTitle())) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (entry.isDirectory() || maxRatio > 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (entry.isDirectory() || ! HRatio(entry, minRatio)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if(entry != minRatioPos && entry.getName().equals(tableau.getTitle())) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (entry.isDirectory() || !minRatioPos) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry.isDirectory() && minRatio > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (entry != minRatioPos && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (entry.isDirectory() || entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (entry.isDirectory() || entry.isStackingContext()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (entry.isDirectory() && ! HRatio(entry, minRatioPos)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (entry.isDirectory() || toDouble(entry)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (entry.isDirectory() || isPosition(entry) || !currentRatio)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (entry.isDirectory() || entry instanceof Block) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (entry instanceof HRatio) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (entry instanceof HRatioPos && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (entry.isDirectory() || !(entry instanceof Block)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (entry.getValue() == minRatio || entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (entry.isDirectory() || isMaxResultsSet()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (entry.isFirst() || isMaxRatio(entry)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (entry instanceofAUTO || entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if(entry.isDirectory() || isPosition(entry)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (entry.isDirectory() || isAbsolute() || entry.isPositioned()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (entry.isDirectory() || ! HRatio) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (entry.isDirectory() || entry.getName().equals(maxRatio)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (entry.isDirectory() || tempRatio > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (entry != minRatioPos && entry.getSize() > maxRatio) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (entry != null && entry.getName().equals( minRatioPos)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (entry != null && entry instanceof double) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (entry instanceof double minRatio || entry.isAbsolute() || isPosition(entry)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (entry != minRatio && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (entry != minRatioPos) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (entry.getValue() <= minRatio) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (entry.isDirectory() || entry.isUsedOverTainted()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (entry.getValue() > minRatioPos) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry.isDirectory() && entry.getName().equals(apiRatio)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (entry.isDirectory() || entry.isDistinct()) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (entry != null && entry.getName().equals(lRatio)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
        "fixed_line": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {"
    },
    "Cli-40": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() != null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() != null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getSimpleName() == null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return com.google.protobuf.AbstractParser.emptyInstance().getClassLoader() != null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return com.google.protobuf.AbstractParser.emptyInstance().getClassLoader() == null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return com.google.protobuf.ByteString.emptyMap().values() == null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return com.google.protobuf.ByteString.emptyType().getSimpleName() == null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return com.google.protobuf.ByteString.emptyMap().values() != null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return com.google.protobuf.AbstractParser.JSON.emptyInstance().getClassLoader() == null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return com.google.protobuf.ByteString.emptyType().getClassLoader() == null ? String.valueOf(str) : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? ClassUtil.createResourceNode(str) : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? ClassUtil.createResource(str) : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"true\" : String.valueOf(str));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? ClassUtil.createResourcePath(str) : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() != null ? String.valueOf(str).toString()) : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"error\" : String.valueOf(str));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.size()]));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() != null ? String.valueOf(str).toString()) : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() != null ? new URL(str) : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() != null ? createURL(str) : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return com.google.protobuf.AbstractParser.emptyInstance().getClassLoader() != null ? String.valueOf(str).toString()) : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"null\" : String.valueOf(str));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return com.google.protobuf.ByteString.emptyMap().values() != null ? String.valueOf(str).toString()) : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? \"error\" : String.valueOf(str));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? \"true\" : String.valueOf(str));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? \"null\" : String.valueOf(str));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"set\" : String.valueOf(str));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : (T) -> \"UTF-8\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : (T) -> \"UTF-8\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1].getType()]));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? System.currentTimeMillis() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str).toString()) : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str).toString()) : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? ClassUtil.createResourcePath(str, \"UTF-8\"));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getSimpleName() == null ? String.valueOf(str) : (T) -> \"UTF-8\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() != null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? \"set\" : String.valueOf(str));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return com.google.protobuf.ByteString.emptyMap().values() != null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return com.google.protobuf.AbstractParser.emptyInstance().getClassLoader() != null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1]) ? null : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return com.google.protobuf.AbstractParser.emptyInstance().getClassLoader() == null ? String.valueOf(str) : (T) -> \"UTF-8\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() != null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (T) createURL(str);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? ClassUtil.createResourcePath(str, \"UTF-8\") : null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? System.currentTimeMillis() : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1]));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return com.google.protobuf.AbstractParser.parse(str) + \"}\";",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return com.google.protobuf.AbstractParser.parse(str);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return com.google.protobuf.ByteString.emptyType().getSimpleName() == null ? String.valueOf(str) : (T) -> \"UTF-8\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return com.google.protobuf.ByteString.emptyMap().values() == null ? System.currentTimeMillis() : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new ByteArray[str.size()]));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1] ? \"\" : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return com.google.protobuf.AbstractParser.JSON.emptyInstance().getClassLoader() == null ? String.valueOf(str) : (T) -> \"UTF-8\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length()]));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"null\" : String.valueOf(str);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"true\" : String.valueOf(str);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? \"null\" : String.valueOf(str);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : (T) -> false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return com.google.protobuf.ByteString.emptyMap().values() == null ? String.valueOf(str).toString()) : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : str;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : (T) -> true;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : (T) -> true;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? ClassUtil.createResource(str, \"UTF-8\") : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return com.google.protobuf.ByteString.emptyMap().values() == null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : value;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : (T) -> false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1])];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? ClassUtil.createResource(str, \"UTF-8\"));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1] ? null : null));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : (T) -> \"UTF-8\"));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"true\" : String.valueOf(str).toString()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : (String) getNullValue(str);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new CharSequence[str.size()]));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : defaultURL;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : (T) -> {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return com.google.protobuf.AbstractParser.emptyInstance().getClassLoader() == null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return com.google.protobuf.ByteString.emptyMap().values() == null ? String.valueOf(str) : (T) -> \"UTF-8\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1] ? \"\" : null)).build();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new Map[str.size()]));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new Object[str.size()]));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"true\" : String.valueOf(str) + \"}\";",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1] ? \"\" : null));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new JavaString[str.size()]));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? null : (T) createURL(str);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return com.google.protobuf.ByteString.emptyType().getSimpleName() == null ? String.valueOf(str)) : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : (String) getNullValue(str);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? \"\" : (T) createURL(str);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return com.google.protobuf.ByteString.emptyInstance().getClassLoader() == null ? String.valueOf(str) : (T) -> \"UTF-8\"));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.size()]) ? null : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : str;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new String[str.length - 1] ? \"\" : null);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new ByteArrayInputStream[str.size()]));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? String.valueOf(str) : defaultURL;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return com.google.protobuf.ByteString.emptyClass().getClassLoader() == null ? \"true\" : String.valueOf(str);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return com.google.protobuf.ByteString.emptyList().toArray(new Type[str.size()]));",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "throw new ParseException(\"Unable to handle the class: \" + clazz);"
    },
    "Closure-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (result != null && result.length() > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (result != null && that.hasType()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (result != null && that.isObject()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (result != null && result.getClass() == getClass()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (result != null && result instanceof Object) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (result != null && result.getClass() == that.getClass()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (result != null && result.length() == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (result != null && that.hasObject()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (result != null && that.isArray()) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (result != null && that.getClass() != getClass()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (result != null && result.getClass() ==that.getClass()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (result != null && that.getClass() !=that.getClass()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (result != null && result.length() == 0 && that.isObject()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (result != null && result.length() == that.getParent()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (result != null && that.getObject() != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (result != null && that.getObject() != this) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (result != null && that.get()) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (result != null && result.length() == 0 && that.get()) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (result != null && that.hasValue()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (result != null && result.length() == that.get()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (result != null && result.isEmpty()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (result != null && that.get(this)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (result != null && result.size() > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (result != null && result.length() == 0 && that.getIn().equals(this)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (result != null && result.getClass().equals(that.getClass())) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (result != null && that.getObject() != Object.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (result != null && that.getObject() != current) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (result != null && result instanceof Table) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (result != null && result.length() == that.getObject()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (result != null && !result.isEmpty()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (result != null && that.getConfig().hasKey(this)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (result != null && result.getClass() != getClass()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (result != null && result.getClass() !=that.getClass()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (result != null && result instanceof ResolvableType) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (result != null && result instanceof this) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (result != null && that.hasType() && that.getObject() != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (result != null && that.getIn().equals(this)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (result != null && result.length() == that.getExpression()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (result != null && that.getConfig().has(this)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (result != null && that.expression() != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (result != null && that.getClass().equals(that.getClass())) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (result != null && result.length() == 0 && that.get(this)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (result != null && that.isSet()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (result != null && result.length() == 0 && that.getFormat().equals(this)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (result != null && that.getExpression() != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (result != null && result.size() == that.getParent()) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (result != null && result.length() == that.getOwner()) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (result != null && result.length() == that.getStatusCode()) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (result != null && result.length() == 0 && that.getSimpleName().equals(this)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (result != null && result.length() == 0 && that.getLock().equals(this)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (result != null && that.getClass() != Object.class) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (result != null && result.length() == that.getArray()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (result != null && result.length() == that.getClass()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (result != null && result instanceof String) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (result != null && result.getClass() == this) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (result != null && result.length() == 0 && that.isCollection()) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (result != null && result instanceof DeleteType) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (result != null && result.getClass() ==Sequence.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (result != null && that.hasPayload()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (result != null && result.length() == 0 && that.isArray()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (result != null && that.hasAttribute()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (result != null && that.getMetaData() != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (result != null && result.length() == 0 && that.getMetaData().equals(this)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (result != null && that.length() > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (result != null && result.length() == that.getFieldName()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (result != null && that.get().equals(this)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (result != null && that.getClass() != this) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (result != null && that.getClass() != builder.getClass()) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (result != null && result.length() == that.getIndex()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (result != null && result.length() == that.size()) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (result != null && that.hasType() && that.isObject()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (result != null && that.canWrite()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (result != null && result.length() == that.getMetaData()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (result != null && result.length() == that.getDescription()) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (result != null && that.isArray() && that.getObject() != null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (result != null && that.getTable() != this) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (result != null && that.getConfig().isArray()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (result != null && result.length() == 0 && that.hasType()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (result != null && result instanceof VariableType) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (result != null && that.getObject() != DbmsStatementType.DELETE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (result != null && result instanceof TypeVariable) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (result != null && that.getObject() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (result != null && that.hasMetaData()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (result != null && that.getClass() == getClass()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (result != null && result.length() == that.getToken()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (result != null && result instanceof BasicType) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (result != null && result.length() == that.getSimpleName()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (result != null && result.getClass() == that.getSimpleName()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (result != null && that.getObject() !=that.getClass()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (result != null && result.length() == that.get(this)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (result != null && that.form() != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (result != null && that.next() != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (result != null && result.length() == 0 && that.get().equals(this)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (result != null && that.getConfig() != current) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (result != null && that.getConfig().hasType()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (result != null && result.length() == 0 && that.getContentType().equals(this)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (result != null && that.isArray() && that.get()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (result != null && result.getClass() != this) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (result != null && that.isArray() && that.hasObject()) {",
                "identical": false
            }
        ],
        "buggy_line": "if (result != null) {",
        "fixed_line": "if (!result.isNoType()) {"
    },
    "Math-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final double DEFAULT_EPSILON = 1024;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final double DEFAULT_EPSILON = 1e-9;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final double DEFAULT_EPSILON = 9;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // since 2.5",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // since 2.7",
                "identical": false
            },
            {
                "k": 10,
                "patch": "protected static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final double DEFAULT_EPSILON = 10e4;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final double DEFAULT_EPSILON = 10e4L;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final double DEFAULT_EPSILON = 10e6;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final double DEFAULT_EPSILON = 10e7;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final double DEFAULT_EPSILON = 100;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "protected static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final double DEFAULT_EPSILON = 1000;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final double DEFAULT_EPSILON = 1000L;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final double DEFAULT_EPSILON = 1024L;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final double DEFAULT_EPSILON = 9 * 10;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final double DEFAULT_EPSILON = 10e9;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final double DEFAULT_EPSILON = 10e\";",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final double DEFAULT_EPSILON = 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final double DEFAULT_EPSILON = 9 * 1024;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final double DEFAULT_EPSILON = \"\".e-9;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final double DEFAULT_EPSILON = 500;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // NOSONAR",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 2.6",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final double DEFAULT_EPSILON = 10e0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // needed.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final double DEFAULT_EPSILON = 200;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final double DEFAULT_EPSILON = 16;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final double DEFAULT_EPSILON = 95, 10;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final double DEFAULT_EPSILON = 0e-9;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final double DEFAULT_EPSILON = 10e.0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final double DEFAULT_EPSILON =1.0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final double DEFAULT_EPSILON = 4;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final double DEFAULT_EPSILON = 9L;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final double DEFAULT_EPSILON = 1024 * 10;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final double DEFAULT_EPSILON = 10e00;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final double DEFAULT_EPSILON = 10e11;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final double DEFAULT_EPSILON = 20;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final double DEFAULT_EPSILON = 3;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final double DEFAULT_EPSILON = 111;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final double DEFAULT_EPSILON = 10000.0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final double DEFAULT_EPSILON =('e-9;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final double DEFAULT_EPSILON = 9e-9;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final double DEFAULT_EPSILON = 10e6L;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final double DEFAULT_EPSILON = 1.0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final double DEFAULT_EPSILON = 9L-9;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final double DEFAULT_EPSILON = 10) * 10;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final double DEFAULT_EPSILON = 1000L-9;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9L;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final double DEFAULT_EPSILON = 10e3;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final double DEFAULT_EPSILON = 10e3L;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final double DEFAULT_EPSILON = 96;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final double DEFAULT_EPSILON = 18e-9;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final double DEFAULT_EPSILON = 1e-9; // since 2.5",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final double DEFAULT_EPSILON = 10)[0];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final double DEFAULT_EPSILON = 9L\";",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final double DEFAULT_EPSILON = 11;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final double DEFAULT_EPSILON = 16L;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final double DEFAULT_EPSILON = 9000.0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final double DEFAULT_EPSILON = 10e01;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final double DEFAULT_EPSILON = 1e-9; // since 2.7",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final double DEFAULT_EPSILON = 13e-9;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final double DEFAULT_EPSILON = 10e1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final double DEFAULT_EPSILON = 161;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final double DEFAULT_EPSILON = 6;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final double DEFAULT_EPSILON = 9.0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final double DEFAULT_EPSILON = 9; // since 2.7",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final double DEFAULT_EPSILON = 10e0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // may be positive.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final double DEFAULT_EPSILON = 950.0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final double DEFAULT_EPSILON = 1024.0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final double DEFAULT_EPSILON = 10d-9;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final double DEFAULT_EPSILON = 1000L\";",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // never gets here",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final double DEFAULT_EPSILON = 10; // since 2.7",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final double DEFAULT_EPSILON = 1.0.0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final double DEFAULT_EPSILON = 10e1L;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final double DEFAULT_EPSILON = 5;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final double DEFAULT_EPSILON = 10e-1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final double DEFAULT_EPSILON = 98, 10;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final double DEFAULT_EPSILON = 950;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final double DEFAULT_EPSILON = 10e-9; // since 2.7",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final double DEFAULT_EPSILON = 10e-9; // since 2.5",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 2.5",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final double DEFAULT_EPSILON = 90, 10e-9;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // required",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final double DEFAULT_EPSILON = 16384;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // cannot be negative",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final double DEFAULT_EPSILON = 1e4;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final double DEFAULT_EPSILON = 116;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final double DEFAULT_EPSILON = 91;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final double DEFAULT_EPSILON = 12;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final double DEFAULT_EPSILON = 1.0L;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final double DEFAULT_EPSILON = 10e-4;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final double DEFAULT_EPSILON = 1024L-9;",
                "identical": false
            }
        ],
        "buggy_line": "private static final double DEFAULT_EPSILON = 10e-9;",
        "fixed_line": "private static final double DEFAULT_EPSILON = 10e-15;"
    },
    "Chart-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (dataset == null) {",
                "identical": true
            },
            {
                "k": 2,
                "patch": "if (dataset != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (dataset != null && result.size() > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (result != null && dataset.getCategory() == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getCategory())) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (dataset != null && ! open.get(index).equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (result != null && dataset.getCategory().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (dataset != null && !result.contains(dataset) || dataset.getCategory().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (dataset != null && this.plot.equals(this.getCategory())) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (dataset != null && this.plot.size() > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (dataset != null && ! dataset.getCategory().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (dataset != null && !deviceSession.getCategory().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (dataset != null && this.plot.equals(deviceSession.getCategory())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (result != null && result.size() > 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.havingCount)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (dataset != null && this.plot.equals(this.result) ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().getMessage(Messages.REPORTING_ERROR_NOT_ENOUGH_DATA)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.seriesOrder.getCategory())) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (dataset != null && ! dataset.getThis().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (dataset != null && !series.equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (dataset != null && !seriesCount.equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historic category.getCategory())) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.havingOrder.getCategory())) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (dataset != null && ! open.getCategory().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.havingType.getName())) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.hsql)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicProcessEngineConfiguration.NO_NAMESPACE)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getenceId())) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getCategory(), dataset.getHref())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getCategory(), dataset.getName())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot[i])) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (dataset != null && ! dataset.equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (dataset != null && this.plot.equals(this.havingOrder.getCategory())) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (dataset != null && serverList.size() > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getCalendarId())) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (dataset != null && !result.getCategory().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historic processInstanceId)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (dataset != null && !result.isEmpty()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicTask[i])) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (result != null && commandList.size() > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (dataset != null && dataset.getCategory() == null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (dataset != null && this.plot.getCategory() == null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (result != null && dataset.getName().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.getMessage(Messages.REPORTING_ERROR_NOT_ENOUGH_DATA)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicinfo.getCategory())) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicProcessEngineConfiguration.NO_TENANT_ID)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (dataset != null && this.plot.equals(this.result)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getCategory(), dataset.getPath())) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.getMessage(index))) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicProcessInstanceType.getName())) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (dataset != null && result.getCategory() != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.havingPath)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().getMessage(Messages.REPORTING_MUST_NOT_BEFORE)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(deviceSession.getCategory())) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getName())) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this. returningOrder.getCategory())) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getId())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().getMessage(Messages.REPORTING_ERROR_NOT_ENOUGH_DATA_NAME)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (result != null && dataset.getThis() == null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicProcessEngineConfiguration.NO_SASCENDING)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicTasks.getId())) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.havingClassName.get(i))) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.havingEnabled)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicType.getName())) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.getMessage(Messages.REPORTING_ERROR_NOT_ENOUGH_DATA))) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (dataset != null && this.plot.equals(this.ATT_NAME)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (dataset != null && !restriction.getCategory().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.havingPattern)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getHref())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.hmacName)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (dataset != null && dataset.getCategory().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (dataset != null && !deviceSession.getCategory().equals(this.seriesOrder.getCategory())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().getMessage(Messages.REPORTING_ERROR_PREFERENCE, index))) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot.getMessages().get(index))) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.calendar.getCategory())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (dataset != null && this.plot.equals( dataset.getCategory())) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.hmacName) ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (dataset != null && key.equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.havingIndex + 1) == this.plot.getCategory())) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (dataset != null && !result.getThis().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.getMessage(Messages.REPORTING_ERROR_NOT_IN_USE_DEFAULT))) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.plot[i].getName())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (dataset != null && this.plot.equals(this.seriesOrder.getCategory())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().getMessage(Messages.REPORTING_ERROR_NOT_ENOUGH_DATA_LENGTH)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (result != null && dataset.getCategory().equals(this.plot[i])) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (result != null && dataset.getName().equals(this.getCategory())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.getMessage(Messages.REPORTING_ERROR_PREFERENCE, dataset.getName())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (dataset != null && this.plot.equals(this.series)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicUserId())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.hmacName) && dataset.getName().equals(this.plot)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.getMessage(result))) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicProcessEngineConfiguration.NO_NAMESPACE, dataset.getName())) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicProcessEngineConfiguration.NO_BUSINESS_ASCENDING)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicProcessEngineConfiguration.NO_DURLENCODED_INSTANCES)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.getMessage(Messages.REPORTING_ERROR_PREFERENCE, index))) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.historicTask[i].getName())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().equals(this.getMessage(Messages.REPORTING_ERROR_DURLENCODED_INSTANCES))) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (dataset != null && ExplorerApp.get().getI18nManager().getMessage(Messages.REPORTING_ASCENDING)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (dataset != null && this.plot.equals(this.config.getCategory())) {",
                "identical": false
            }
        ],
        "buggy_line": "if (dataset != null) {",
        "fixed_line": "if (dataset == null) {"
    },
    "Math-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "double sum = 0;",
                "identical": true
            },
            {
                "k": 2,
                "patch": "int sum = 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "double sum = 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "double sum = Math.min(Double.MAX_VALUE, dx2 != null ? new double[Math.abs(pointSet.size() - 1]) : 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? 0 : 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int sum = 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? p.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? 0 : 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? sz.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "double sum = Math.min(Double.MAX_VALUE, dx2 != null ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i + 1) : 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? matrix.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i - 1).getDouble() : 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? context.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(bSet.size() - 1) : 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(x) : 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(i) : 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(i + 1) : 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "double sum = (resultSet.size() > 0) ? pointSet.get(k + 1) : 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i - 1) : 0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "double sum = Math.min(Double.MAX_VALUE, dx2 == null ? 0 : 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(i - 1) : 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.parseInt(x) : 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(pointSet.size() - 1).getDouble() : 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(p) : 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(pointSet.get(i) : 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(pointSet.size() - 1) : 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(x - 1)) : 0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(x - 1).getDouble() : 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i + 1 : 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(i - 1)) : 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(bSet.size() - 1).getDouble() : 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? parameters.get(i - 1).getDouble() : 0;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i - 1)) : 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(n - 1) : 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(x - k) : 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.size() - 1)) > Matrices.EPS ? nodes.get(i + 1 : 0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(bSet.get(i) : 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(i - 1).getDouble() : 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i) : 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "double sum = Math.min(Double.MAX_VALUE, dx2 != null ? Integer.MAX_VALUE - 1) : 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(n - 1) : 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(x - 1).getDouble() : 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(bSet.size() - 1 : 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "double sum = (resultSet.size() > 0) ? size.get(k + 1) : 0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? matrix.getBottom() : 0;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? prov.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? matrix.getInt() : 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? f.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? sz.getBottom() : 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.size() - 1)) > Matrices.EPS ? p.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.size() - 1)) > Matrices.EPS ? 0 : 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(r) : 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? matrix.get(i - 1) : 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? pointSet.get(n - 1) : 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(x - 1) : 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(bSet.size() - 1)) : 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? p.getDouble() : 0L;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(x - 1) : 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? w.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(i + 1 : 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? p.getInt() : 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(bSet.size() : 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(pointSet.size() - 1 : 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? context.getInt() : 0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i - 1).getPosition() : 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? matrix.get(i + 1) : 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i + k) : 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "double sum = Math.min(Double.MAX_VALUE, dx2 == null ? 0 : Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? resultSet.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? pointSet.getDouble() : 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? parameters.get(i - 1) : 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(pointSet.size() : 0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.valueOf(x) : 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.parseInt(x - 1) : 0;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.size() - 1)) > Matrices.EPS ? nodes.get(i + 1) : 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(x - 1)) : 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i - 1 : 0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? parameters.get(i + 1) : 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? p.get(0).getDouble() : 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? 1 : 0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int sum = 0; // this pointSet.size() > 0 ? Integer.MAX_VALUE - 1) : 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "double sum = (resultSet.size() > 0) ? buf.get(k + 1) : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? _name().doubleValue() : 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(p) : 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(pointSet.size() - 1).getPosition() : 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? nodes.get(i - 1).getInt() : 0;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? sz.getDouble() : 0L;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.size() - 1)) > Matrices.EPS ? nodes.get(i + k) : 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(bSet.get(i - 1) : 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(n - 1)) : 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(bSet.get(i + 1) : 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.parseInt(p) : 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "double sum = (resultSet.size() > 0 ? Integer.MAX_VALUE - 1) : 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "double sum = Math.min(Double.MAX_VALUE, dx2 != null ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "double sum = Math.min(Double.MAX_VALUE, dx2 != null ? nodes.size() : 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "double sum = -1 * Math.sqrt(Math.abs(aSet.get(k)) > Matrices.EPS ? Integer.toHexString(n) : 0;",
                "identical": false
            }
        ],
        "buggy_line": "int sum = 0;",
        "fixed_line": "double sum = 0;"
    },
    "Closure-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (negativeZero && !negativeZero) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (negativeZero) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (negativeZero && x < 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (negativeZero && x < 0 || !negativeZero) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (negativeZero && x == 0 || !negativeZero) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (negativeZero && y == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (negativeZero && y <= 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (negativeZero && y == 0.0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (negativeZero && x < 0 || negativeZero) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (negativeZero && prev == 0 || !negativeZero) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (negativeZero && x < 0 || prev > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ((x < 0) && !negativeZero) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (negativeZero && y < 0 || !negativeZero) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (negativeZero && x == 0 || type == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (negativeZero && prev == 0 || type == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (negativeZero && y == x) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (negativeZero && x < 0 || prev == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ((x < 0) || (!negativeZero) && !negativeZero) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0x80) != 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (negativeZero && y == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (negativeZero && x < 0 || type == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (negativeZero && x == 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (negativeZero && x < 0 || prev == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (negativeZero && y <= 0 || !negativeZero) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (negativeZero && y < 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (negativeZero && x < 0 || prev == '+' || !negativeZero) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (!negativeZero && !negativeZero) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (negativeZero && x == 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (negativeZero && y == 0.0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (negativeZero && x < 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ((x < 0) && (value == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0x3FF) == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (negativeZero && !negativeOne) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (negativeZero && y < 0 || prev == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (negativeZero && prev == '-') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (negativeZero && prev == 0 || type == Integer.MAX_VALUE) { // but end-of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (negativeZero && y == -1) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0x3000) != 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (negativeZero && isNegative) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0x3f) == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (negativeZero && !Character.isDigit(c) || isInteger(x, y) || negativeZero) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ((x < 0) || (ch == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (negativeZero && x == 0 || negativeZero) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (negativeZero && !Character.isDigit(x) || isInteger(x, y) || negativeZero) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (negativeZero && y < 0 || negativeZero) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (negativeZero && x < 0 || isInteger(x) || !negativeZero) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (negativeZero && x == '+' || !negativeZero) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (negativeZero && y == -1 || !negativeZero) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (isLength(x) || isNegativeValuesAllowed() && !negativeZero) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (negativeZero && name.equals(prev)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (negativeZero && x instanceof Character) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (negativeZero && x == 0 || prev == 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0xD0) != 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (negativeZero && y.equals(prev) || negativeZero) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (isLength(x) || isNegativeValuesAllowed() || negativeZero) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (negativeZero && prev == -1 || !negativeZero) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (negativeZero && y == 0 || !negativeZero) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ((x < 0) || negativeZero && !negativeZero) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (negativeZero && y) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (negativeZero && y < 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (negativeZero && !Character.isDigit(x) || isInteger(x)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0x40) == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (negativeZero && x < 0 || (!negativeZero) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (negativeZero && y < 0 || prev == 0.0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( negativeZero && !negativeZero) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (getNumberType().equals(x) || negativeZero && !negativeZero) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (negativeZero && y == -1 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (negativeZero && x < 0 || isInteger(x) || type == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (negativeZero && !Character.isDigit(x)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (negativeZero && !Character.isDigit(c) || isLength(x)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (negativeZero && x < 0 || prev == '+' || type == '-') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (negativeZero && prev == 0.0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (negativeZero && x < 0 || isInteger(x)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (negativeZero && y <= 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0x80) == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (negativeZero && !Character.isDigit(x) || Character.isAlphabetic(x)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (negativeZero && x == '-') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (getNumberType().equals(prev) || negativeZero && !negativeZero) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ((x < 0) && (!negativeZero) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (negativeZero && prev == 0 || type == Integer.MAX_VALUE) { // [JACKSON-407] -- allow disabling wrapping for negative encoded values",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (negativeZero && x < 0 || prev == -1) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (negativeZero && !Character.isDigit(c) || isInteger(x)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0x3FF)) == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (negativeZero && x == '+' || prev == '-') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( negativeZero && x < 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (negativeZero && prev) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (negativeZero && y.equals(prev)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (negativeZero && x < 0 || isInteger(x) || Character.isDigit(x)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (negativeZero && prev == x) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (negativeZero && prev == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (negativeZero && prev == 0 || negativeZero) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ((x < 0) || (!negativeZero && !negativeZero) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (negativeZero && ((x < 0) || (bpmn & 0x7) == 0 && !negativeZero) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (negativeZero && prev == 0 || type == Integer.MAX_VALUE) { // [JACKSON-407] -- allow disabling wrapping for < 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (negativeZero && x < 0 || y > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (negativeZero && x < 0 || prev == '+' || type == '%' || !negativeZero) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (negativeZero && !Character.isDigit(x) || negativeZero) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (negativeZero && prev == 0 || type == Integer.MAX_VALUE) { // [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (getNumberType().equals(x) || isNegativeValuesAllowed() && !negativeZero) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (isLength(x) || isNegativeValuesAllowed() || !negativeZero) {",
                "identical": false
            }
        ],
        "buggy_line": "if (x < 0 && prev == '-') {",
        "fixed_line": "if ((x < 0 || negativeZero) && prev == '-') {"
    },
    "Time-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Partial newPartial = new Partial(i, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Partial newPartial = new Partial(newValues, i + 1, newValues.length - 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Partial newPartial = new Partial(newValues, i + 1, newValues.length - 1));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Partial newPartial = new Partial(i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Partial newPartial = new Partial(i, newTypes, i, newValues);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i], newValues.length - 1]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i]);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Partial newPartial = new Partial(newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i], newValues.length - 1]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Partial newPartial = new Partial(newValues, i - 1, newValues.length - 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Partial newPartial = new Partial(newValues, i + 1, newValues.length);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Partial newPartial = new Partial(i, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues.length - 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i].length - 1]);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i], newValues.length - 1]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i], newValues.length - 1]));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues.length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1, newValues.length - 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues.length);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i], newValues.length - 1]));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i], newValues.length - 1));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Partial newPartial = new Partial(newValues, i - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues[i], newValues.length - 1]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i], newValues.length - 1));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i]));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Partial newPartial = new Partial(i, newValues, i, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Partial newPartial = new Partial(i, newTypes, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Partial newPartial = new Partial(newValues, i - 1, newValues.length - 1));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues.length - 1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i - 1]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Partial newPartial = new Partial(newTypes, i + 1, newValues.length - 1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i].length - 1];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Partial newPartial = new Partial(newValues[i], newValues, i + 1, newValues.length - 1));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Partial newPartial = new Partial(i, i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i], newValues.length - 1];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Partial newPartial = new Partial(newTypes, i + 1, newValues.length - 1));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i].length - 1]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i], newValues.length - 1]));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i]));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Partial newPartial = new Partial(newValues, i + 1, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i], newValues.length - 1];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i], value);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i], newValues.length - 1));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues.length, newValues);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Partial newPartial = new Partial(newValues, i - 1, newValues);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Partial newPartial = new Partial(newBuffer, i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Partial newPartial = new Partial(i, newValues, i);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues[i], newValues.length - 1]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1, newValues.length - 1));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i])) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues[i], newValues.length - 1]));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i - 1]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i].length - 1]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Partial newPartial = new Partial(i, newValues, i - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues[i], newValues.length - 1));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i].length - 1];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i], newValues));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Partial newPartial = new Partial(i, newValues, i, newValues.length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Partial newPartial = new Partial(newValues, i + 1, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Partial newPartial = new Partial(i, newTypes, i, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Partial newPartial = new Partial(i, newTypes, i + 1, newValues.length - 1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Partial newPartial = new Partial(i, newValues, i, newValues[i]);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1, newValues.length);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Partial newPartial = new Partial<>(newValues, i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues, newValues[i], value);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i], newValues.length - 1];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Partial newPartial = new Partial(newValues, i);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues.length);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i].length - 1]));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i], newValues));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Partial newPartial = new Partial(i, newValues, i, newValues[i], newValues.length - 1]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Partial newPartial = new Partial(i, i, newTypes, newValues[i], newValues);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Partial newPartial = new Partial(i, newTypes, newValues[i]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues.length - 1));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, newValues[i + 1]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Partial newPartial = new Partial((i + 1, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues.length - 1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues[i], newValues.length - 1];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Partial newPartial = new Partial(newValues, i + 1, newValues.length - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i]));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Partial newPartial = new Partial(newTypes, i, newValues, newValues[i].length - 1];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Partial newPartial = new Partial(newValues, i + 1, newValues.length - 1), newValues);",
                "identical": false
            }
        ],
        "buggy_line": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
        "fixed_line": "Partial newPartial = new Partial(newTypes, newValues, iChronology);"
    },
    "Codec-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(null, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(null, String.valueOf(p));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this(null, Thread.currentThread().getContextClassLoader());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this Context.getConfig().getInteger(getProtocolName() + \".html\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this(null, Integer.MAX_VALUE) * 1000;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this(null);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this(null, Thread.currentThread().getContextClassLoader() != null ? Integer.MAX_VALUE : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this(null, Thread.currentThread().getContextClassLoader(), p> < 1) ? Base64() : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? NO_ARRAY : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(null, DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE) : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this(null, Thread.currentThread().getContextClassLoader(), null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this(null, Integer.MAX_VALUE) ? NO_ARRAY : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Base64() : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() != null ? Integer.MAX_VALUE : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this(null, null);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this(null, Thread.currentThread().getContextClassLoader() != null ? System.getBase64() : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this(null, Integer.MAX_VALUE) != null ? Boolean.valueOf(p).getCount() : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toList());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this(null, Integer.MAX_VALUE) == null ? Base64() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() + p> < 0) ? Base64 : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.toString() : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this(null, Integer.MAX_VALUE) ? NO_COLUMNS : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE : Base64;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this(null, Thread.currentThread().getContextClassLoader() != null ? Integer.MAX_VALUE : null);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this(null, Integer.MAX_VALUE) == null ? null : String.valueOf(p);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() != null ? Integer.MAX_VALUE) : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(null, Thread.currentThread().getContextClassLoader() != null ? Integer.MAX_VALUE : Base64;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(null, Integer.MAX_VALUE) != null ? Boolean.valueOf(p).getNonce() : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(null, Thread.currentThread().getContextClassLoader(), p> < 1) ? Base64 : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(null, false);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() != null ? Integer.MAX_VALUE : Base64;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this Context.getConfig().getInteger(getProtocolName() + \".html\", DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this(null, Integer.MAX_VALUE) == null ? null : Boolean.valueOf(p);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this(null, Integer.MAX_VALUE) ? null : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this(null, Integer.parseInt(p));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this(null, System.nanoTime() - 1).getBase64().getType(), DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE : new Base64() {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? null : EMPTY_ARRAY;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE : new Base64() * 1000;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64Variant());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this(null, Thread.currentThread().getContextClassLoader() != null ? Integer.MAX_VALUE : MAX_VALUE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Base64 : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this(null, Thread.currentThread().getContextClassLoader(), p> < 1) ? null : (Base64) -> new Base64() {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this(null, DEFAULT_LOCALE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this(null, p>) ? null : new Base64();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this(null, Integer.MAX_VALUE) != null ? Boolean.valueOf(p).getNonce()) : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this Context.getConfig().getInteger(getProtocolName() + \".count\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE : new Base64();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this(null, System.nanoTime() - 1).getBase64Type().getSimpleName(), DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? null : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this(null, DEFAULT_LOCALE, null);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (this == NONE) throw new IllegalStateException(\"Can not pass true for '\"+getCount()+\"')\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "thisToBase64 = System.currentTimeMillis();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this(null, Thread.currentThread().getContextClassLoader() != null ? System.getBase64() : null);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE : new Base64((int) p>());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this(getClass().getSimpleName(), Boolean.TYPE);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this Context.getConfig().getInteger(getProtocolName() + \".html\", DEFAULT_MAX_VALUE) * 1000;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this(null, Integer.parseInt(p)).getBase64() == null ? Base64() : null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? null : new Base64() {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this(null, System.nanoTime() - 1).getBase64Type().getSimpleName(), null);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this Context.getConfig().getInteger(getProtocolName() + \".html\")) ? null : Base64;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this == null ? RestConstants.MAX_VALUE : Integer.parseInt(p);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this(null, String.valueOf(p).getCount() + 1));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this(null, Thread.currentThread().getContextClassLoader()).getBase64();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this == null ? RestConstants.MAX_VALUE : Integer.valueOf(p);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? null : new Base64((Base64) p>());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this(null, System.nanoTime() - 1).getBase64Type().getSimpleName());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this(null, Integer.MAX_VALUE) != null ? Boolean.valueOf(p).getCount() : Base64;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? null : new Base64();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this(null, System.nanoTime() - 1).getBase64(), DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this(null, Thread.currentThread().getContextClassLoader() != null ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this(null, Integer.MAX_VALUE) : null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this(getClass().getSimpleName(), Boolean.TYPE, null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this(null, p.getModulus(), null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE) : Base64;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this(null, Integer.MAX_VALUE) == null ? null : String.valueOf(p).getCount());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this Context.getConfig().getInteger(getProtocolName() + \".name\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this(null, Integer.MAX_VALUE) / 1000;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64Ids());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this Context.getConfig().getInteger(getProtocolName() + \".html\".equals(p>)).append(\"\\n\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this(null, DEFAULT_LOOPS, null);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() != null ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this(null, DEFAULT_INCONCLUSIVE) * 1000;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this == null ? RestConstants.MAX_VALUE : Integer.toString(p);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? NO_ARRAY : Base64;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toByteArray()) ? Integer.MAX_VALUE : new Base64()];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() == null ? NO_ARRAY : p;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this(null, System.nanoTime() - 1).getBase64().getType());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this(null, System.nanoTime() - 1).getBase64().getType();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this(null, p.getParent(), null);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() != null ? Integer.MAX_VALUE : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(null, p>) ? null : new Base64() {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this(null, Thread.currentThread().getContextClassLoader(), p> < 1) ? null : new Base64();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this(null, String.valueOf(p)).collect(Collectors.toBase64() != null ? Integer.MAX_VALUE : null);",
                "identical": false
            }
        ],
        "buggy_line": "this(false);",
        "fixed_line": "this(0);"
    },
    "JacksonDatabind-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
                "identical": true
            },
            {
                "k": 6,
                "patch": "visitBigDecimalFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "visitBigIntegerFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "visitByteFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "visitLongFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_FLOAT);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "visitFLOATFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "visitByteArrayFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "visitIntegerFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "visitDecimalFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "visitShortFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "visitFloatFormat(_config, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_parseFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "visitNumericFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DOUBLE);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "visitStringFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "visitFloatFormat(config, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? h : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "_parseNumericFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.INTEGER);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? h : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "visitLengthFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "visitArrayFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) _isAssignableFrom(raw)) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BigInteger.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "visitNextFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "visitFloatFormat(_visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "visitJsonNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER)) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberFormat.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "visitBigDecimalFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? config.getDouble() : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "visitFloatFormatNames(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "visitObjectFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) _isAssignableFrom(raw)) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) _unwrapSingleContentTypes().length == 0 ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "visitBinaryFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "visitCollectionFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.Short.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) ? JsonParser.NumberType.BIG_DECIMAL : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BigDecimal.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "visitFloatFormat(_baseType, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? config.getDouble() : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "visitTextFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? config.getDoubleValue() : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "visitFloatFormatVisitor(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "onFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.NUMBER);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.INT);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) _unwrapSingleContentTypes().length == 0 ? JsonParser.NumberType.BIG_DECIMAL : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "visitNumberFormat(_config, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "visitBooleanFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "visitDotFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) ? JsonParser.NumberType.BIG_DECIMAL : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER)) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberType.BIG_FLOAT;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_Double);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "visitFloatFormat(visitor, typeHint, JsonReader.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? _typeHint : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? config.getDoubleValue() : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "visitfloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? (BigInteger) h : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "_parseDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER)config, h, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "visitRawFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? _typeHint : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? (int) h : JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "visitDigitFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? config.getLongValue() : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "visitFloatFormat((visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "visitSingleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? r : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? MIN : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL)) ? JsonParser.NumberType.BIG_INTEGER : JsonParser.NumberFormat.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? value : JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) != JsonParser.NumberType.BIG_INTEGER ? h : JsonParser.NumberType.BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_NUMBER);",
                "identical": false
            }
        ],
        "buggy_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
        "fixed_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);"
    },
    "Closure-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (input.getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (input.getInput() == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (Context.getConfig().getBoolean(\"database.enable\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (context.getExistingPatient() != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (input.getType().equals(\"text\") || options.getValue() != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if(Context.getConfig().getBoolean(\"database.enable\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (input.getType().equals(String.valueOf(1))) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (input.getInputType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_ABSOLUTE_GLOBAL_PROPERTY)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i18nManager.getMessage(Messages.DEPLOYMENT_NAME)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (input.getType().equals(HtmlFormEntryUtil.class)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Formatter.class.isAssignableFrom(entry.getKey())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (input.getType().equals(\"text\") && !classes.isEmpty()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Formatter.class.isAssignableFrom(input.getType())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (input.getType().equals(CiphertextInput.class)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (input.getType().equals(\"text\") || options.getValue() == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (input.getValue() != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (input.getType().equals(Provider.class)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (super.getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i18nManager.getMessage(Messages.RELATED_CONTENT_PATTERN)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if(!input.getType().equals(\"UTF-8\") && !classes.isEmpty()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT_NAME)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if(!input.getType().equals(\"text\") && !classes.isEmpty()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if(input.getType().equals(\"text\") || options.getValue() != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i18nManager.getMessage(Messages.RELATED_CONTENT_PATH)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (input.getType().equals(\"text\") && !result.isEmpty()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (input.getType().equals(\"comp\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if(!input.getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (input.getType().equals(LettuceClassConstants.MAX_RESULTS_ABSOLUTE_GLOBAL_PROPERTY)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (input.getValue() == null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i18nManager.getMessage(Messages.RELATED_CONTENT_PATH) == null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i18nManager.getMessage(Messages.REPORTING_ERROR_NOT_ALLOWED)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (InputStream.class.isAssignableFrom(entry.getKey())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (input.getType().equals(Response.class)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (input.getType().equals(Converter.class)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (!input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_ABSOLUTE_GLOBAL_PROPERTY)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if(!input.getType().equals(\"UTF-8\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (input.getInput() != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (input.getType().equals(\"process\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i18nManager.getMessage(Messages.REPORTING_ERROR_NOT_ENOUGH_DATA)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (input.getType().equals(HtmlFormEntryUtil.getInputDataValue())) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (input.getOpposite() != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (input.getEntryType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (input.getType().equals(String.valueOf())) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT_PROPERTY_NAME)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_ABSOLUTE) && !classes.isEmpty()) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (input.getInputMap().size() > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if(input.getInput() == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (input.getType().equals(\"text\") ||options.getValue() != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (context.getExistingPatient() == null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i18nManager.getMessage(Messages.RELATED_CONTENT_URL) == null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT_LIBRARY)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (input.getType().equals(String.valueOf)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Formatter.class.isAssignableFrom(input.getType()))) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i18nManager.getMessage(Messages.RELATED_CONTENT_TYPE))) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (input.getOpposite() == null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i18nManager.getMessage(Messages.DEPLOYMENT_NO_NAME)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i18nManager.getMessage(Messages.RELATED_CONTENT_TYPE) == null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (input.getInputMap().size() == 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (input.getType().equals(microserviceName)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT_ALLOWED)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (!input.getType().equals(HtmlFormEntryUtil.getInputDataValue())) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i18nManager.getMessage(Messages.RELATED_CONTENT_TYPE)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (input.getType().equals(\"counter\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if(input.getProvError() == null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i18nManager.getMessage(Messages.RECENT_URL) == null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (InputStream.class.isAssignableFrom(input.getType())) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (!input.getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_VALUE) && !classes.isEmpty()) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Context.getConfig().getBoolean(\"database.xml\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i18nManager.getMessage(Messages.DEPLOYMENT_NO_NAME) == null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (InputStream.class.isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (!input.getType().equals(HtmlFormEntryUtil.class)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (context.getExistingPatient() != null && !input.getType().equals(HtmlFormEntryUtil.getInputDataValue())) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (input.getProvError() == null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Formatter.class.isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (input.getType().equals(\"text\") || options.getClass().getName().equals(\"htmlformentry.xml\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i18nManager.getMessage(Messages.REPORTING_ERROR_NOT_ENOUGH_OBJECT)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT_TO_NAME)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (context.getExistingPatient() != null && !input.getType().equals(HtmlFormEntryUtil.getProviderMethod())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (input.getType().equals(\"text/css\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Formatter.class.isAssignableFrom(entry.getKey()))) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i18nManager.getMessage(Messages.REPORTING_ERROR_NOT_ALLOWED) == null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (input.get(0).getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (!input.getType().isUndirected()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (input.getType().equals(LocalMessages.get(\"error.mustache\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i18nManager.getMessage(Messages.DEPLOYMENT_NAME) == null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (!input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT_NAME)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if(Context.getConfig().getBoolean(\"database.xml\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Formatter.class.isAssignableFrom(input)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT_GLOBAL_PROPERTY)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (input.getType().getSimpleName() == null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (input.getType().equals(\"text\") && !options.isEmpty()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (InputStream.class.isAssignableFrom(entry.getKey()))) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (input.getType().equals(HtmlFormEntryConstants.MAX_RESULTS_DEFAULT_URI)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (context.getExistingPatient() != null && !input.getType().equals(\"application/json\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (input.getType().equals(\"UTF-8\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (this.dir.getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (input.getType().equals(\"xml\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
        "fixed_line": "if (options.dependencyOptions.needsManagement()) {"
    },
    "Codec-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "25, 26, 27,[2] = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 2); // >= 1970",
                "identical": false
            },
            {
                "k": 3,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 2);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 2); // >= 1970",
                "identical": false
            },
            {
                "k": 5,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 10;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "25, 26, 27,Lists -1, -1, -1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 864;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,2.0 - 864;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 14;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, -1.0f A-OSECONDS);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,});",
                "identical": false
            },
            {
                "k": 14,
                "patch": "25, 26, 27,rack -1, -1, 1, 2, 3, 4, 5, 2); // >= 1970",
                "identical": false
            },
            {
                "k": 15,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,2.0 * 2); // >= 1970",
                "identical": false
            },
            {
                "k": 16,
                "patch": "25, 26, 27, componentName componentName = System.currentTimeMillis();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,0000;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,.\";",
                "identical": false
            },
            {
                "k": 19,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, -1.0f A-OSECONDS * 864;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5,2.0 - 864;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 8, - 864;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "25, 26, 27, VALUE VALUE -1, -1, 1, 2, 3, 4, 5, 2); // >= 1970",
                "identical": false
            },
            {
                "k": 23,
                "patch": "25, 26, 27, parsed -1, 1, 2, 3, 4, 5, 8, - 864;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 6;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 1450 };",
                "identical": false
            },
            {
                "k": 26,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 10);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,2.0 - 2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, -1.0f A-Opposite = 864;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 15 * 2;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,50 - 864;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 15 * 864;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 2);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 1450 - 864;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,0000 * 2;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 8, - 10;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 6, - 864;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 8, - 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 550 };",
                "identical": false
            },
            {
                "k": 40,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, -1.0f A-OSECONDS * 2);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,50 };",
                "identical": false
            },
            {
                "k": 42,
                "patch": "25, 26, 27, parsed -1, 1, 2, 3, 4, 5, 8, - 14;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 8;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 8, - 14;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 2; // >= 1970",
                "identical": false
            },
            {
                "k": 46,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 14 * 2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "25, 26, 27,rack -1, -1, 1, 2, 3, 4, 5,2.0 - 864;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, * 864;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, -1.0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 6, - 864;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,2.0 - 2; // >= 1970",
                "identical": false
            },
            {
                "k": 52,
                "patch": "25, 26, 27,rack -1, -1, 1, 2, 3, 4, 5, 8, - 864;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 6, - 8;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, canvas - 2; // >= 1970",
                "identical": false
            },
            {
                "k": 55,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 8, - 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5,0000;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "25, 26, 27, parsed -1, 1, 2, 3, 4, 5, 6, - 864;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 850 };",
                "identical": false
            },
            {
                "k": 59,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,50 - 2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,2.0 * 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,2.0 * 864;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5,\";",
                "identical": false
            },
            {
                "k": 63,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 8, - 10);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "25, 26, 27, parsed -1, 1, 2, 3, 4, 5, 8, - 10);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "25, 26, 27, parsed -1, 1, 2, 3, 4, 5, 8, - 10;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "25, 26, 27, printStackTrace -1, -1, -1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 14;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,2.0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, -2.0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 14];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, * 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "25, 26, 27,rack -1, -1, 1, 2, 3, 4, 5, 2);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 15];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 6, - 10;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 8];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, -1.0f;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 14 * 8;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5,.\";",
                "identical": false
            },
            {
                "k": 80,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,50 - 10;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, canvas - 864;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 1450 - 2;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "25, 26, 27, parsed -1, 1, 2, 3, 4, 5, 2);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 6 * 2;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, canvas - 10);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5,2.0 - 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 16;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 5 * 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "25, 26, 27, parsed -1, 1, 2, 3, 4, 5, 8, - 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "25, 26, 27, \"; -1, 1, 2, 3, 4, 5, 8, - 10;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,};",
                "identical": false
            },
            {
                "k": 92,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 850 - 2;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, * 8;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "25, 26, 27,rack -1, -1, 1, 2, 3, 4, 5, 8, - 14;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, - 15;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,2.0];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5,0000 * 864;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "25, 26, 27, printStackTrace -1, -1, 1, 2, 3, 4, 5, 1450 };",
                "identical": false
            },
            {
                "k": 99,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 8, -1.0f A-OSECONDS * 864 };",
                "identical": false
            },
            {
                "k": 100,
                "patch": "25, 26, 27,Lists -1, -1, 1, 2, 3, 4, 5, 6, - 2;",
                "identical": false
            }
        ],
        "buggy_line": "25, 26, 27, 28, 29, 30, 31, 32,",
        "fixed_line": "25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V"
    },
    "Jsoup-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this == element;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return element == o;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return element != null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return element != null ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return element != null ? element.equals(o) : that.value == null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return element == null ? false : this.getClass() == o;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return element == null ? false : this.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return element != null ? element.equals(other.element) : element;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this.key != null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.equals(element) ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return element != null ? element.equals(o) : o;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return element == null ? ((Element) element.equals(o) : element.getClass() == o;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return element != null ? element.equals(o) : that.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return object == null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return true == element;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return element != null ? element.equals(o) : that.element == null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return this.host != null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return element != null ? element.equals(o) : element == null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.name == null ? element.equals(o) : element.getClass() == o;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return element == null ? ((Element) element.equals(o) : element.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return this.getClass() != element.getClass()) return false;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this.expression != null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return element != null ? element.equals(o) : that.getClass() == o;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return element == null ? false : this.getClass().equals(element.getClass());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return this.key != null ? element.equals(o) : element == null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return element == null ? ((Element) element).equals(o) : element.getClass() == o;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return parent != null ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this.equals(element.value) ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this.host != null ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return true != element.equals(this.element) ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return this.name == null ? element.equals(o) : element.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return result != null ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return element != null ? element.equals(other.element) : that.expression == null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return null == element;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return this.s != null ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return element == null ? ((Element) element).equals(o) : element.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return element != null ? element.equals(o) : element == o;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this.equals(element) && element.equals(o);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return parent != null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return trim(element == null ? element.equals(o) : element.getClass() == o;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return this.equals(element) ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return element != null ? element.equals(other.baseElement) : element;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return element.equals(this.element) ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return element != null ? element.equals(o) : that.expression;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return element != null ? element.equals(other.value) : element;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return element == null ? this.equals(o) : element;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return element == null ? that.equals(o) : element;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.equals(element) && element.equals(o.getClass());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this.expression != null ? element.equals(o) : that.value == null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return element != null ? element.equals(o) : that.name == null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.equals(element) ? element.equals(o) : element == null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return element != null ? element.equals(other.element) : that.value == null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return this.name == null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return element == null ? that.equals(other.element) : element;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return element != null ? element.equals(o) : that.parameterName == null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return result != null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this.key != null ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return this.equals(element) && element.equals(o == null ? false : element.getClass());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return element != null ? element.equals(other.getNodeName()) : element;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return element != null ? element.equals(o) : 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return element == null ? ((Element) element.equals(other.element) : element;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return this.equals(element) && element == o;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this.expression != null ? element.equals(o) : element == null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return element != null ? element.equals(o) : that.s == null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return target != null ? element.equals(o) : that.expression == null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this.host != null ? element.equals(o) : element == null;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return element == null ? other.equals(o) : element;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return element == null ? ((Element) element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this.getClass() == element;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return element == null ? ((Element) element.equals(o) : element.getClass());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this.equals(element.value) ? element.equals(o) : element == null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return trim(element == null ? element.equals(o) : element.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return element == null ? true : this.getClass() == o;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return element != null ? element.equals(other.element) : element == o;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return element == null ? false : this.getClass().equals(element);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return object == null ? false : this.getClass() == element;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this.equals(element.value) ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this.key != null ? element.equals(o) : that.value == null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.key != null ? element.equals(o) : element == o;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return result != null ? element.equals(o) : that.value == null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this.host != null ? element.equals(o) : that.value == null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return element == null ? null : this.getClass() == o;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return this.equals(element) && element.equals(o;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return element == null ? ((Element) element).equals(other.element) : element;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this.expression != null ? element.equals(o) : that.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this.s != null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return this.element == element;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return element == null ? false : this.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return null != o.getClass() == element;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.equals(element) && element.equals(o.value);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return parent != null ? element.equals(o) : that.value == null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return element == null ? Collections.equals(this.element) : element;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return key == null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return element != null ? element.equals(o) : that.value;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this.key != null ? element.equals(other.element) : element;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return element == null ? true : this.getClass() == getClass()) return false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.s != null ? element.equals(o) : that.value == null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return trim(element == null ? element.equals(o) : element;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return element != null ? element.equals(other.baseElement) : element == o;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return element != null ? element.equals(o) : that.param == null;",
                "identical": false
            }
        ],
        "buggy_line": "return this == o;",
        "fixed_line": "return tag.equals(element.tag);"
    },
    "Math-63": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x)) || y;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == 0.0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x)) || y;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == this;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == x;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x) || y;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x)) || y == 0.0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || x == y;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x)) || y == 0.0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || x < y;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == 1.0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x) || y == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x, y) || x == y;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(y)) || y;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x) || y == null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (x < y) || Double.isNaN(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (Double.isNaN(x) && Double.isNaN(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x) || y == this;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == other;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x, y) || x < y;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (Double.compare(x, Double.isNaN(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x * y) || y;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || y;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (Double.isNaN(x) || Double.MAX_VALUE >= y;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (Double.isNaN(x) && Double.isNaN(x) || y;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x && y == 0.0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == trim;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (Double.isInfinite(x) && Double.isNaN(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x) || y == x;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x)) || y == 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x, y) || x == y;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (Double.equals(x) || Double.isNaN(x)) || y;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == l;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x + y) || x == y;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == this;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == arg;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x) || y;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x - y) || x < y;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (Double.MAX_VALUE >= y) && Double.isNaN(x) || y;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x - y) || x == y;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x)) || y == 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(y)) || y;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (Double.FALSE.equals(x) || Double.isNaN(x)) || y;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y > this;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (Double.isNaN(x) && Double.isNaN(x)) || y;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x + y) || x < y;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || x == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) && y == 0.0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0.0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x) || y == 1.0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || x == 0.0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y == 0.0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (Double.isNaN(x) || Double.isNegated() || y == x;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (Double.isInfinite() || Double.isNaN(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x * y) || y == 0.0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y > 1.0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == 0);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == number;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) && y == 0.0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (Double.compare(x, Double.parseDouble(y) < y;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y <= 0.0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || y == 0.0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x) || y == 0;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (Double.isInfinite(x) || Double.isNaN(x, y) || x < y;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y > 0.0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == -1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x) || y == null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || 0.0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (Double.MAX_VALUE >= 0.0 && Double.MIN_VALUE <= y) || x == y;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x) || y == this;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x * y;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (Double.isNaN(x) || Double.isInfinite(x) || y == x;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x + y) || y;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == -1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x * y) || x == y;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) && y;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == basePath;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == model;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x) || y == d;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y) || y;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y) || x == 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (Double.isInfinite(x) && Double.isNaN(x) || y;",
                "identical": false
            }
        ],
        "buggy_line": "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
        "fixed_line": "return equals(x, y, 1);"
    },
    "Closure-113": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parent != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (compiler != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parent != null && uuid == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parent != null && current.detachFromParent() != this) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parent != null && current.detachFromParent() != basic) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (compiler.reportError() != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parent != null && current.detachFromParent() != cache) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parent != null && parent.detachFromParent() != current) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parent != null && current.detachFromParent() != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parent != null && current.detachFromParent() != JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (compiler.reportError() == null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parent != null && current.detachFromParent() != basicType) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parent != null && uuid.getParent() != current) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parent != null && file.getParent() != current) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parent != null && !compiler.isEmpty()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parent != null && !this.detachFromParent) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (compiler.getParent() != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parent != null &&provided.reportError() > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parent != null && current.detachFromParent() !=provided) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parent != null && !current.detachFromParent() && !this.reportError) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parent != null &&provided.reportError() != current) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parent != null && !this.detachFromParent()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parent != null && current.detachFromParent() != VOID) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parent != null && uuid.length() > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parent != null && parent != current) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (compiler.getAction() == null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parent != null && current.detachFromParent() == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (this.detachFromParent != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parent != null && current.detachFromParent() != JsonToken.START_ARRAY) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parent != null && current.detachFromParent() != object) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (compiler.getParent() == null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parent != null && parentId != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.isDone()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parent != null && current.reportError() != JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.isEmpty()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (compiler != null && !parent.getAction().equals(current)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parent != null && removedElements.size() > 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (compiler.reportError() != null && !parent.getConvertedTypes().isEmpty()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parent != null && !parent.getParent() instanceof Module) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (current.detachFromParent() != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.isDirectory()) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parent != null && !this.detachFromParent() && !current.containsKey(compiler)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (compiler != null && !parent.getAction().isArray()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (compiler.getNextSibling() != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parent != null && ai.getParent() != current) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (compiler != null && !parent.reportError) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parent != null && current.detachFromParent() !=ASYNC) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parent != null && current.detachFromParent() != removed) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parent != null &&DirtyList.size() > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parent != null && !this.detachFromParent() && !current.containsKey(compiler.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parent != null && !parent.reportError() && !current.containsKey(compiler.getParent())) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.getArrayElements().isEmpty()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parent != null && !this.reportError) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parent != null && _detachFromParent() != current) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (compiler.reportError() != null && !parent.getParent().getNodeName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parent.detachFromParent() != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parent != null && current.detachFromParent() != current) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.hasMoreElements()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parent != null && current.detachFromParent() != parent) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parent != null && current.detachFromParent() != Type.CLASS) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (compiler.reportError() != null && !parent.getParent().inRoot()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parent != null && current.detachFromParent() != uuid) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parent != null && !current.containsKey(compiler.getParent())) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parent != null && current.getParent() != this) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (compiler != null && !parent.detachFromParent()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parent != null && current.detachFromParent() != expected) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parent != null && current.detachFromParent() != layer) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parent != null && !parent.getDataFromParent() instanceof Wildcard<?, ?>) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parent != null && initialValue.length() > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parent != null &&patient.getParent() != current) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parent != null && current.detachFromParent() != annotations) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parent != null && !parent.getAction().equals(current)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.isFinal()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parent != null && !this.detachFromParent() && !current.containsKey(compiler.getPath())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parent != null && current.detachFromParent() != value) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parent != null && !parent.reportError() && !current.containsKey(compiler.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (compiler != null && !parent.getAction().isCollection()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parent != null && child.getParent() != current) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parent != null && !this.detachFromParent() && !compiler.getArrayElements().isEmpty()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parent != null && !parent.reportError) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parent != null && !this.detachFromParent() && !current.containsKey(compiler.getAction())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.isProcessed()) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.isCollection()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (current.detachFromParent() == null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parent != null && current.reportError() != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parent != null && current.getParent() != cache) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parent != null && !current.detachFromParent() && !closed) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parent != null && current.detachFromParent() != set) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parent != null && !compiler.getAction().equals(current)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parent != null && !parent.getParent() instanceof NamedCode) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (compiler.reportError() != null && !parent.getParent().getDirtyState().supportsDeepCloning()) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.isFinished()) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parent != null && !parent.getParent() instanceof DeleteException) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parent != null && !this.detachFromParent() && !current.containsKey(compiler.getToken())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parent != null && current.containsKey(compiler.getParent())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parent != null && !current.detachFromParent() && !compiler.contains(\".\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (compiler.reportError() != null && !parent.getParent().isCollection()) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parent != null && current.detachFromParent() != tree) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parent != null && !this.detachFromParent() && !compiler.contains(current)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parent != null && !current.detachFromParent()) {",
                "identical": false
            }
        ],
        "buggy_line": "if (provided != null) {",
        "fixed_line": "if (provided != null || requiresLevel.isOn()) {"
    },
    "Closure-130": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (name.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasMoreElements()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (name.globalSets == null && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasMoreElements) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.isEmpty()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (name.globalSets == null && name.length == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (name.globalSets == 0 && name.length == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasMore()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.equals(\"\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (name.globalSets == null && name.localSets == null && !name.hasMoreElements()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (name.globalSets > 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.equals(\"\"));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (name.globalSets != null && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (name.globalSets == 0 && getter.localSets == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasRefs()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (name.globalSets != 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasTextualReference) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (name.globalSets + 1 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (name.globalSets == null && name.localSets == null && !name.hasMoreElements) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (name.globalSets == null || name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (name.globalSets == 0 && name.localSets != null && !name.hasMoreElements) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (name.globalSets == 0 && name.localSets != null && !name.isEmpty()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (name.globalSets == 0 && name.localSets != null && !name.hasMoreElements()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (name.globalSets == null && name.localSets == null && !name.isEmpty()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasMore) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.endsWith(\".*\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (name.globalSets == 0 && next.localSets == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.getRefs().isEmpty()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasCreator) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasToString(name.getRefs())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.endsWith(\".\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (name.globalSets == 0 && name.localSets == null && operation.getRefs().size() > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (name.globalSets == null && name.localSets == null && !name.hasMore()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasAnySetter()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.contains(\".\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (name.globalSets == 0 && name.localSets == null && value.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasSet()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (name.globalSets == 0 && name.localSets == null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (name.globalSets < 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasUtf8()) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasAnyRetired()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (name.globalSets == 0 && name.localSets != 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (name.globalSets == 0 && name.localSets == null && operation.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasArray()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.equals(\"*\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasErrors) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (name.globalSets == 0 && name.localSets == null && operation.getRefs() > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasTextual()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (name.globalSets == 0 && name.localSets == null && operation.getRefs().length > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.equals(\"multi\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasAttributes()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.equals(\" .lang\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (name.globalSets == 0 && name.localSets == null && ((RefType) name).size() > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasType()) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.endsWith(\".class\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (name.globalSets != 0 && name.localSets == null && !name.hasMoreElements()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.endsWith(\"/\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (name.globalSets == 0 && name.localSets == null &&ings.size() > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasMoreConverter()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (name.globalSets == 0 && name.localSets == null && directed.size() > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (name.globalSets == 0 && name.localSets == null && that.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (name.globalSets >= 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasSimpleName()) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasMoreBytes()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.equals(name.getRefs())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.isArray()) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (name.globalSets == 0 && other.localSets == null && name.length > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (name.globalSets == 0 && type.localSets == 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.matches(\".*\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (name.globalSets == 0 && name.localSets == null && classNames.size() > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (name.globalSets > 0 && name.localSets == null && !name.hasMoreElements()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.functionName.isEmpty()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (name.globalSets() == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasValue()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (name.globalSets == 0 && next.localSets == null && name.length > 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.type.equals(\"\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (name.globalSets == 0 && name.localSets == null && room.getRefs() > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasCollection()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (name.globalSets == 0 && name.localSets != null && !name.hasMore()) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (name.globalSets + 1 && name.localSets == null && !name.hasMoreElements()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (name.globalSets == null && name.localSets == null && !name.equals(\"\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.equals(\"*default\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (name.globalSets == 0 && name.localSets == null && value.size() > 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.aliasingGets) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (name.globalSets == null && name.localSets == null && !name.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (name.globalSets == 0 && setter.localSets == 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (name.globalSets == 0 && name.localSets == null && suffix == null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (name.globalSets == 0 && name.localSets == null && sections.size() > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (name.globalSets != 0 && name.localSets == null && !name.hasMoreElements) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasVariables()) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (name.globalSets == 0 && getter.localSets == null && name.length > 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.equals(name.getTypeName())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (name.globalSets() == 0 && name.localSets == null && !name.hasMoreElements()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (name.globalSets == 0 && name.localSets == null &&ean.size() > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasCharset()) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (name.globalSets > 0 && name.localSets == null && !name.hasMoreElements) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasImpl()) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (name.globalSets == 0 && name.localSets == null && !name.hasWhen()) {",
                "identical": false
            }
        ],
        "buggy_line": "if (name.globalSets == 1 && name.localSets == 0 &&",
        "fixed_line": "if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&"
    },
    "JacksonDatabind-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignoreAny.getIgnored();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = e.getIgnored();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getSource(propName);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignoreAny ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignoreAny ? beanorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignorals.get(propName);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignoreAny ? 0 : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignorals.getAny();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = ignorals.getIgnoredProperty(propName);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = ignoreAny ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignoreAny.get(ignorals);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignoreAny.getSimpleName();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignoreAny.equals(propName) ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = ignorals.getIgnorableType(propName);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.get(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = beanorals.getIgnored();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnoredProperty(propName, ignoreAny);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.values() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.getAscent() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.getSource(propName) != null ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignoreAny.getFromId(propName) ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = ignoreAny.isEmpty() ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = ignoreAny.getFromId(propName) ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = ignorals.getSource(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignoreAny.getFromType(propName) ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getProperties();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignoreAny.getFromId(propName) ? null : ignorals.getSimpleName();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.get(propName) ? ignoreAny : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getSource(propName) != null ? e.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getFromType(propName);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignoreAny.getFromId(propName) ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignoreAny.get(propName) ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = ignorals.get(propName) != null ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = ignoreAny.getFromGetter(propName) ? null : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = ignorals.getSource(ignoreAny);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignoreAny.get(propName) ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getAscent() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getSource(propName) ? ignoreAny : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.get(propName) != null ? e.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.values() != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getFromId(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getIgnored() : 0L;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getIgnored() : false;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignorals.getIgnorable(propName);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignorals.getMetrics(propName) != null ? e.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnoredOf(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignoreAny.equals(propName) ? bean : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignoreAny.getFromGetter(propName) ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignoreAny.getFromType(propName) ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignorals.getSource(propName) ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignoreAny.getFromId(propName) ? null : ignorals.getFullName();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignorals.getIgnoredOf(propName);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = ignorals.getMetrics(propName);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignoreAny.getOrDefault(propName) ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignoreAny.getFromId(propName) ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getAscent() != null ? ignorals.getIgnored() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignorals.getTargetNamespace(propName) != null ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignoreAny.getFromId(propName) ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getBounds() != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignorals.getFromType(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignorals.getTargetNamespace() != null ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignoreAny.equals(propName) ? ignorals.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignorals.getExceptionTypes().size() > 0 ? new StringBuilder() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignorals.values() != null ? ignorals.getIgnored() : 0) + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignorals.getIgnorableType(propName) != null ? e.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getIgnored().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getMetrics(propName) != null ? e.getIgnored() : null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getEdgeSource(propName);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.get(propName) != null ? ignorals.getFullName() : null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignorals.getMetrics(propName) ? ignoreAny : false;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) ? ignoreAny : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignoreAny.equals(propName) ? e.getIgnored() : ignorals;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : 0) + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getTargetNamespace() : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignoreAny != null ? ignorals.getIgnored() : 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ignorals.getIgnoredProperty(propName) != null ? ignorals.getProcess() : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = EMPTY_BINDINGS.get(propName) != null ? ignorals.getTypeId() : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getSource(propName, ignoreAny);",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Math-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "return solve(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return solve(f, min, max);",
                "identical": true
            },
            {
                "k": 3,
                "patch": "return solve((int) f, min, max, initial);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return solve(f, min, max, initial - 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return solveOnFunction(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return solveSubFunction(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return solves(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return solve( f, min, max, initial);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return solve(f, min, max + initial);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return solveToDouble(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return solveStartFunction(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return OpenmrsUtil.nullValueFunction(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return solveAt(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return solve(f, min, max, initial) / 2);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return OpenmrsUtil.between(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return solve((float) f, min, max, initial);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return OpenmrsUtil.nullValue(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return getPostgresStorage(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return solve(f, min, max, initial).doubleValue();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return solve(f, min, max, initial - 1));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return solve(f, max, initial);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return solve(f, min, max - initial);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return currentTimeMillis(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return solveOngoing(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return solveMethod(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return solvesFunction(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return solve(f, min, max, initial) / 2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "returnRelativeTo(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return solveMethodFunction(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return solve((double) f, min, max, initial);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return BigInteger.valueOf(min, max, initial);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return solveVector(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return dirty(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "returnChecked(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return solve(t, min, max, initial);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return solve(f, min + max, initial);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return solveOfShape(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return solve(h, min, max, initial);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return getInlineBounds(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return solve(f, min, max).doubleValue();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return solveBounds(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return solve(f, min, max, initial) / 1000;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "returnoptional(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return solve(f, min, max, initial));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return RegEx(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return solveed(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return solve(f, min, max, initial - next);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return solve(f, min, max, initial) / current;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return System.getenv(\"min, min, max, initial);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return solve(f, min, max, initial) ? 1 : 0.0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return solve(f, min, max, initial - 1) / 2;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return solve(f, min, max + initial) < current;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return solve(f, min, max + initial) / 2;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return solveFrom(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return solveFunction(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return handling(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return bounds(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return solve(f, min - max, initial);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "returnlooks(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return solve(f, min, max, initial;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return compare(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return solve(f, min, max > 0) ? initial : 0.0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return solve(f, min, max, initial) >= this.max);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return fold(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return solve(f, min, max) / initial;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return addChild(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return solve(f, min, max, initial - 0, initial);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return solve(f, min, max, initial) + 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return solve(f, min, max, initial - 1) / 2);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (double) f, min, max, initial);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return solve(f, min, max > 0) ? initial : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return solve((int) f, min, max);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return signature(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return solve(f, min, max, initial) >= this.max;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return languages(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return solve(f, min, max, initial - SCROLLBAR_BORDER_COLUMNS);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return seg(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return battery(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return solve(f, min, max, initial) < current;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return LONG(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return solve(f, min, max, initial) <= max;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return solve(f, min, max, initial) / 8;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return solve( f, min, max);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return augment(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return solve(f, min, max, initial) ? null : current;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return solve(f, min, max, initial - 1, initial);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return solve(f, min, max, initial ? 1 : 0.0);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return solveOnFunction(f, min, max, initial - 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return !(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return formatDouble(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return OpenmrsUtil.nullValueFunction(f, min, max, initial - 1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return solve(f, min, max, initial) * current;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return solve(f, min, max + initial) / 2);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return OpenmrsUtil.nullValue(f, min, max, initial - 1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return OpenmrsUtil.nullValueFunction(f, min, max, initial - 1));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return solve(f, min, max, initial - SCROLLBAR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return hyp(f, min, max, initial);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return solve(f, min, max, initial) >= this.initial;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return BigInteger.valueOf(min, min, max, initial);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return solve((int) f, min, max, initial));",
                "identical": false
            }
        ],
        "buggy_line": "return solve(min, max);",
        "fixed_line": "return solve(f, min, max);"
    },
    "Math-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "return chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return chromosomes.iterator().next();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return chromosomes.iterator() ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return chromosomes.iterator() ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return chromosomes.iterator().hasNext() ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return chromosomes.iterator().hasNext();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return chromosomes != null ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return chromosomes.iterator().next() != null ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return chromosomes != null ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : new UnsupportedOperationException();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return chromosomes.iterator() == null ? DEFAULT_LIST : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return chromosomes.iterator().next() ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return chromosomes.iterator() > 0) ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : 0.0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().hasNext() : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return chromosomes.iterator() > 0) ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return chromosomes.iterator() == null ? Collections.emptyIterator() : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return chromosome.iterator() != null ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return chromosomes.iterator() > 0 ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return chromosomes.iterator() > 1.0 ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return chromosomes.iterator() == null ? DEFAULT : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : Collections.emptyIterator();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return chromosomes.values() != null ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : 0.0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return chromosomes.iterator() == null ? Collections.<ByteOperationException>emptyIterator() : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : Collections.emptyIterator();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return chromosomes.iterator() > 0 ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : this;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return chromosomes.iterator() > null ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return chromosomes.iterator() == null ? Collections.<T>emptyIterator() : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : conf;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return chromosomes.iterator() > 0.0 ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return chromosomes.iterator() == null ? Collections.<Object>emptyIterator() : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return chromosomes.iterator() != conf ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return chromosomes.iterator().next() > 0) ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return chromosomes.iterator() > 1.0 ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return chromosomes.iterator() > 0.0 ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : conf;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return chromosomes.values() != null ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return chromosomes.iterator() > null ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : new UnsupportedOperationException();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return chromosomes.iterator() == null ? Collections.<String>emptyIterator() : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : 0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return chromosomes.iterator() == null ? Collections.<Long>emptyIterator() : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : Collections.unmodifiableIterator();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return chromosomes.iterator() == null ? Long.MAX_VALUE : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : this;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return chromosomes.iterator() != conf ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return chromosomes.iterator() ? chromosomes.iterator().next() : new UnsupportedOperationException();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return chromosomes.iterator()) ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return chromosome.iterator() != null ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return chromosomes.iterator() == null ? DEFAULT_LIST : chromosomes.iterator().next();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return chromosomes.iterator()) ? chromosomes.iterator().next() : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : node;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return chromosomes.iterator().next() != null ? chromosomes.iterator() : Collections.emptyIterator();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : 30;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return chromosomes.iterator() == null ? reportError : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator()) : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return chromosomes.iterator().hasNext() ? chromosomes.iterator() : 0.0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : 0L;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return chromosomes.iterator() == null ? 0.0 : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return chromosomes.iterator() ? chromosomes.iterator().next() : 0.0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : conf.getTypes().iterator();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return chromosomes.iterator().next() != null ? chromosomes.iterator() : 0.0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : 0L;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : rep;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : Collections.EMPTY_LIST;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return chromosomes.iterator() == null ? 10 : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : DEFAULT_LIST;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return chromosomes.iterator() == null ? DEFAULT : chromosomes.iterator().next();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return chromosomes.iterator() == null ? Collections.emptyIterator() : chromosomes.iterator().next();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : rep;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return chromosome.iterator();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return chromosomes.iterator() ? chromosomes.iterator().hasNext() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : node;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : new UnsupportedOperationException(p);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return chromosomes.iterator() ? chromosomes.iterator() : 0.0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : frame;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : Collections.unmodifiableIterator(p);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : new UnsupportedOperationException(\"Unknown\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : \"0\";",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : new UnsupportedOperationException(this);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : new UnsupportedOperationException<>();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return chromosomes.iterator().values() != null ? chromosomes.iterator() : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return chromosomes.iterator() == null ? 500 : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : frame;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return chromosomes.iterator() == null ? Collections.<ByteOperationException>emptyIterator() : chromosomes.iterator().next();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return chromosomes.iterator().next() != null ? chromosomes.iterator() : conf;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator() : conf.get();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return chromosomes.iterator().hasNext() ? chromosomes.iterator()) : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return chromosomes.iterator() == null ? this : chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return chromosomes.iterator() != null ? chromosomes.iterator().next() : \"\";",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return chromosomes.iterator().hasNext() ? chromosomes.iterator();",
                "identical": false
            }
        ],
        "buggy_line": "return chromosomes.iterator();",
        "fixed_line": "return getChromosomes().iterator();"
    },
    "Csv-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : getHeaderMap);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? inputMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap * getHeaderMap);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap) : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap = new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null) ? this.headerMap : new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : getHeaderMap;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null) ? this.headerMap : new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : inputMap);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? inputMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? headerMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap : new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap : getHeaderMap);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap : inputMap);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).toArray(new LinkedHashMap<String, Integer>(this.headerMap));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.headerMap = new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? getHeaderMap : new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap -> this.headerMap);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap : getHeaderMap);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap + 1, this.headerMap);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_length);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).size());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? inputMap) : this.headerMap;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap = new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : headerMap);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? inputMap.size() : this.headerMap);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap == null ? inputMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap.size() : this.headerMap);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null) ? this.headerMap : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null) ? this.headerMap : new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap : new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : Collections.emptyMap);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap > 0, this.headerMap);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : Collections.emptyMap());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : EMPTY_ARRAY;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).size();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap : new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).values().toArray(new LinkedHashMap<String, Integer>(this.headerMap));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? getHeaderMap : new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new LinkedHashMap<String, Integer>(this.bodyMap);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? getHeaderMap() : this.headerMap);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap.length() : this.headerMap);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? inputMap.size() : this.headerMap;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? inputMap : this.headerMap;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null) ? this.headerMap : new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? inputMap : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap = new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap = new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap.size() : this.headerMap;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap : this.headerMap;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap : headerMap);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap.getHeaderMap() : this.headerMap);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap > getHeaderMap);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap + 1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? inputMap.length : this.headerMap);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).toArray(new LinkedHashMap<>(this.headerMap));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap : null);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? inputMap.getHeaderMap() : this.headerMap);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap : getHeaderMap;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap : new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? existingMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? headerMap) : this.headerMap;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? inputMap.length() : this.headerMap);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap.getHeaderMap() : this.headerMap;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) + 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap) : new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap.length() : this.headerMap;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? existingMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this.headerMap != null ? new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? existingMap.size() : this.headerMap);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? inputMap.getHeaderMap() : this.headerMap;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).size() + 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).toArray(new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap 1, this.headerMap);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null) ? this.headerMap = new LinkedHashMap<>(this.headerMap);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? headerMap : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap : EMPTY_ARRAY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).values();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? headerMap.getHeaderMap() : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).values().toArray(new LinkedHashMap<>(this.headerMap));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap > null ? this.headerMap : getHeaderMap);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? !this.headerMap.isEmpty()) : this.headerMap;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? formatMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap).length);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? getHeaderMap() : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap );",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? getHeaderMap : this.headerMap);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap!=null ? this.headerMap) : new LinkedHashMap<>();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap == null ? this.headerMap : headerMap);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap == null ? this.headerMap) : this.headerMap;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null ? this.headerMap : getHeaderMap());",
                "identical": false
            }
        ],
        "buggy_line": "return new LinkedHashMap<String, Integer>(this.headerMap);",
        "fixed_line": "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);"
    },
    "Jsoup-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "accum.append(escapeMode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "accum.append(\"&gt;\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "accum.append(\"&\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "accum.append(\"&nbsp;\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "accum.append(\",\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "accum.append(\", \");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "accum.append(\"&lt;\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "accum.append(\"$L = \").append(escapeString(c));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "accum.append(\"$\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "accum.append(\"$L = \").append(escapeString(e.getMessage())));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "accum.append(\"$L = \").append(escapeMode);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "accum.append(\": \").append(escapeMode);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\"&\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "accum.append(\"$L = \").append(escapeString(c)\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "accum.append(\"$L = \").append(escapeString(element));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "accum.append(escapeMode(\"&nbsp;\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "accum.append(\": \").append(escapeString(c));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\"> \");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "accum.append(escapeMode) ? \"<\" : \">\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "accum.append(\": \").append(escapeString(e.getMessage())));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "accum.append(\"</th>=\").append(escapeMode);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "accum.append(\"$L = \").append(escape((String)accum.get(\"&gt;\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "accum.append(\": \");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "accum.append(\"$L = \").append(escapeString(string));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "accum.append(\"$L = \").append(escapeString(c) + \" \");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "accum.append(\"$L = \").append(escapeString(element) + \" \");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "accum.append(\"$L = \").append(escapeString(c))) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "accum.append(escapeMode(\"&gt;\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "accum.append(\"=\").append(escapeMode);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "accum.append(\"$L = \").append(escapeString(b));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "accum.append(\"$L = \").append(escapeString(element)).append(\"&\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "accum.append(\" = \").append(escapeString(c));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\"&gt;\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\"&lt;\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "accum.append(\"$L = \").append(escapeString(e.getMessage()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "accum.append(\"$L = \").append(escapeString(session.getContext()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "accum.append(\"$L = \").append(escapeString(string) + \" \");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "accum.append(\"$L = \").append(escapeString(e.getMessage())).append(\"&\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\">\").append(\"&\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "accum.append(\"$L = \").append(escapeString(string)).append(\"&\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "accum.append(\"$L = \").append(escapeString(e.getName())).append(\"&\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "accum.append(\"$L = \").append(escapeString(e.toString()));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "accum.append(\"$L = \").append(escapeString(collectionName) + \" \");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "accum.append(\"$L = \").append(escapeString(collectionField));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "accum.append(\"$L = \").append(escapeString(i+1))) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "accum.append(\"$L = \").append(escapeString(username) + \" \");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "accum.append(\"$L = \").append(escapeString(string()) + \" \");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "accum.append(\": \").append(escapeString(true)).append(\"&\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "accum.append(\"=\").append(escapeString(c));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "accum.append(\"> \");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "accum.append(\"</th>\").append(escapeMode).append(\"&\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "accum.append(\"$L = \").append(escapeString(collectionName))) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "accum.append(\"$L = \").append(escapeString(string, 0, \"));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "accum.append(\"$L = \").append(escapeString(inAttribute)\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "accum.append(\"$L = \").append(escapeString(text) + \" \");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "accum.append(\"$L = \").append(escapeString(i+1)).append(\"&\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "accum.append(\"$L = \").append(escapeString(true) + \" \");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "accum.append(\"$L = \").append(escapeMode;\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "accum.append(\"$L = \").append(escapeString(inAttribute) + \" \");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "accum.append(\"$L = \").append(escapeString(string)\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "accum.append(\"$L = \").append(escapeString(body));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\"'\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "accum.append(\" = \").append(escapeString(e.getMessage())));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "accum.append(\"&gt;\").append(escapeMode);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "accum.append(\"$L = \").append(escapeString(string)).append(\"> \");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\"+\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "accum.append(\"</th>\").append(escapeMode);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "accum.append(\"$L = \").append(escape((String)accum.get(\"+\")\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "accum.append(\"$L = \").append(escapeString(e.getName()) + \" \");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "accum.append(\"$L = \").append(escapeString(e.toString())));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "accum.append(\"$L = \").append(escapeString(target));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\"]\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "accum.append(\"$L = \").append(escapeString(System.getProperty(\">\"));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "accum.append(\": \").append(escape((String)accum.get(\"&gt;\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "accum.append(\"$L = \").append(escapeString(collectionField) + \" \");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "accum.append(\"$L = \").append(escapeString(e.toString()) + \" \");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "accum.append(\"$L = \").append(escapeString(i));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "accum.append(\"$L = \").append(escapeString(param.getName())).append(\"&\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "accum.append(\" \").append(escapeString(c));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "accum.append(\"$L = \").append(escapeString(inAttribute));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "accum.append(\"$L = \").append(escapeName(String)\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "accum.append(\"$L = \").append(escapeString(element)).append(\"&gt;\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "accum.append(escapeMode).append(\"&\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "accum.append(\"$L = \").append(escapeString(text)\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "accum.append(\"$L = \").append(escapeString(cssValue));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "accum.append(\"$L = \").append(escapeString(Level.WARNING));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "accum.append(\"$L = \").append(escapeString(session.getContext())));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "accum.append(\"$L = \").append(escape((String)accum.get(\">\"));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "accum.append(\"$L = \").append(escape((String)accum.get(\"&lt;\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "accum.append(\"$L = \").append(escapeValue()).append(\"&\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "accum.append(\"$L = \").append(escapeModeString(c));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "accum.append(escapeString(c));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "accum.append(\"$L = \").append(escapeString(i+1));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "accum.append(\"$\" +accum.escapeName(String) + \" \");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "accum.append(\"$Node=\").append(escapeMode);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "accum.append(\"$L = \").append(escapeString(true)).append(\">\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "accum.append(\"$L = \").append(escapeString(element)).append(\"&lt;\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "accum.append(\"</th>=\").append(escapeString(c));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "accum.append(escapeMode) ? \"<\" : \" \");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "accum.append(\": \").append(escapeString(c))) {",
                "identical": false
            }
        ],
        "buggy_line": "accum.append(c);",
        "fixed_line": "accum.append(\"&#xa0;\");"
    },
    "Closure-52": {
        "fixes": [
            {
                "k": 1,
                "patch": "return c > 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return index > 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return len > 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return c < '0' || c > '9') ? s.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return index >= 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return c.length() > 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return c < '0' || c > '9';",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return c < '0' || c > '9') ? manifest.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return c < '0' || c > '9') ? (c >= 'a' && c <= 'f') : 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return c > 0; // must be < '0' || c > '9') ? s.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return c < '0' || c > '9') ? input.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return c < '0' || c > '9') ? body.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return len > 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return c < '0' || c > '9') ? string.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return c < '0' || c > '9') ? BitUtil.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return c < '0' || c > '9') ? timestamp.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return c < '0' || c > '9') ? index : 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return c > 0; // must be a char if no index.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return c < '0' || c > '9') ? api.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) >= '`' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return c > 0; // must be a char if length of string.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return c < '0' || c > '9') ? s.charAt(index - 1) : 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '=' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return c > 0; // must be a char if no index.charAt(index) == '#' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return c > 0; // must be a char if length of string.charAt(index) == '#' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return c > 0; // must be a char if any (c >= '0' && c <= '9') || c > 'a' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '\\'' || c == '=' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return c < '0' || c > '9') ? index : 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return c > 0; // must be a char if the end of name.charAt(index) == '#' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return c > 0; // must be < '0' || c > '9') ? api.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return c > 0; // must be < '0' || c > '9') ? string.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '=' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '\\'' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return c > 0; // must be digit.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return c < '0' || c > '9') ? Character.toLowerCase(c) : 0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return c > 0; // must be a char if any (c >= '0' && c <= '9') || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return c > 0; // must be a char if no index.charAt(index) == '#' || c == '=' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return c < '0' || c > '9') ? Arrays.charAt(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '=' || c == '\\t' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '\\'' || c == '=' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return c > 0; // must be a char if length of string.charAt(index) == '\\'' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return c > 0; // must be a char if there's needed.charAt(index) >= '`' || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return c > 0; // must be a char if any (c >= '0' && c <= '9') || c > 'a' || c == 'z') return true;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return c > 0; // must be a char if no index.charAt(index) == '#' || c == '\\'' || c == '=' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return c < '0' || c > '9') ? 0 : 1; // Long.compareTo is JRE 7+",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '=' || c == '\\t' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return c < '0' || c > '9') ? 0 : 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) >= '`' && c <= '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '=' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return c > 0; // must be a char if length of string.charAt(index) == '#' || c == '=' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#') || c == '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return c > 0; // must be a char if no index.charAt(index) == '#' || c == '=' || c == '\\t' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return c > 0; // must be a char if there's needed.charAt(index) >= '`' && c <= '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return c < '0' || c > '9') ? s.substring(index + 1) : 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) >= '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return c > 0; // must be a char if the end of name.charAt(index) == '#' || c == '=' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '=' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return c < '0' || c > '9') ? (c >= 'a' && c <= 'z') : 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '+' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return c > 0; // must be a char if no index.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return c < '0' || c > '9') ? manifest.charAt(index - 1) : 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '+' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return c > 0; // must be a char if length of string.charAt(index) == '#' || c == '=' || c == '\\t' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '+' || c == '\\t' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '=' || c == '\\'' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return c < '0' || c > '9') ? (c >= 'a' && c <= 'f') : -1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return c > 0; // must be a char if no index.charAt(index) == '#' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return c > 0; // must be a char if the end of name.charAt(index) == '#' || c == '=' || c == '\\t' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return c > 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return c < '0' || c > '9') ? Arrays.copyOf(c, 16) : 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '=' || c == '\\t' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return c > 0; // must be a char if there's needed.charAt(index) >= '+' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return c > 0; // must be a char if length of string.charAt(index) == '#' || c == '\\'' || c == '+' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '\\'' || c == '>' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return index >= 0 && c <= '9';",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return c < '0' || c > '9') ? Math.abs(c) : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return c < '0' || c > '9') ? s.charAt(i + 1) : 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return c > 0; // must be a char if length of string.charAt(index) == '#' || c == '\\'' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return c < '0' || c > '9') ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return c > 0; // must be a char if no index.charAt(index) == '#' || c == '=' || c == '-') return true;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '+' || c == '-') return 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) >= '`' || c == '+' || c == '-') return 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return c > 0; // must be < '0' || c > '9') ? index : 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return index < len;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return c < '0' || c > '9') ? s.charAt(index + 1) : 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) == '#' || c == '=' || c == '\\'' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return c > 0; // must be a char if the end of string.charAt(index) >= '`' || c == '+' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '=' || c == '\\t' || c == '\\'' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return c > 0; // must be a char if string.charAt(index) == '#' || c == '\\'' || c == '=' || c == '-') return false;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return c > 0; // must be a char if any (c >= '0' && c <= '9') || c == 'a' || c == '-') return true;",
                "identical": false
            }
        ],
        "buggy_line": "return len > 0;",
        "fixed_line": "return len > 0 && s.charAt(0) != '0';"
    },
    "Gson-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (value > Float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (value > Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (value < 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (value >Buffer.length) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (value > 0 || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (value < 0 || value > 255) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (value > Integer.MAX_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (!this.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (!this.isInfinite(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (!Double.isInfinite(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (!isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (value > Short.MAX_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (value < 0 || value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (value >Double.MAX_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (value < 0.0 || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (value > 0.0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Double.isInfinite(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (value > Double.parseDouble(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (value > Math.abs(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (value > Float.MAX_VALUE || value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (value > Double.NEGATIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (value > 0 || value > 255) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (!value.isInfinite() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (value > Integer.MAX_VALUE && Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (value > MAX_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (value > Integer.MIN_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (value > Double.MAX_VALUE || value > Float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (value < 0.0 || value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (value > Double.doubleValue() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (value > Float.MAX_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (value.isInfinite() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (value > Integer.MAX_VALUE || value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (value >Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (!currentNumber.isInfinite() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (value > 0 || value < 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (value > MAX_FLOAT) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (value > 0 || Double.isInfinite(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (value >= Integer.MIN_VALUE && Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (value >Buffer.length - value) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (value > MAX_VALUE && Double.MAX_VALUE >= this.length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (value > double.length() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (value > Short.MAX_VALUE || value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (value > 0 || value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (value > Float.MAX_VALUE || value > 255) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (value >Buffer.length() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (value > MAX_VALUE || Double.MAX_VALUE >= this.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (value < 0.0 || value > Float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (value > Short.MAX_VALUE || value > Float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (value > MAX_VALUE && Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (value >= 0 && value <= Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (value < 0 || value > Float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (value > MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (value >[1] || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (value > Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (value > MAX_VALUE || Double.MAX_VALUE >= value) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (value > -1 || value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (value > MAX_VALUE && Double.MAX_VALUE >= value) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (value < 0.0 || Double.isInfinite() || value > 255) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (value > String.valueOf(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (value > 255 || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (value > Double.MAX_VALUE || value < 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (value > 0 || Double.MAX_VALUE >= value) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (value < 0.0 || Double.isInfinite(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (value > Integer.MAX_VALUE || value > Float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (value > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (value > Double.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (value > Double.MAX_VALUE && value >= this.length() || value < 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (value > Short.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (value > 0 || Double.isInfinite() || value > 255) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (value > Double.MAX_VALUE || value > 255) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (value > Float.MAX_VALUE && value >= this.length() || value < 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (value > Math.min(value) || Double.isInfinite() || value > 255) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (value >Double.MAX_VALUE || value > Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (value > NIL) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (!value.isInfinite() || Double.isNaN(value)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (value > Integer.MAX_VALUE && value >= this.length() || value < 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (value >= Integer.MIN_VALUE && value < 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (value > Double.MAX_VALUE && value >= this.columns()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (value > Double.MAX_VALUE) { // let's do implicit re-isInfinite()",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (value > Float.length) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (value > Integer.MAX_VALUE && value >= this.columns()) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (value > Float.MAX_VALUE || value < 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (value > Math.min(value) || Double.isInfinite() || value < 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (value > Integer.MAX_VALUE || Double.isInfinite() || value > 255) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (value > 0 || Double.MAX_VALUE >= this.length) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (value > 1.0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (value.isInfinite() || Double.isNaN(value)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (value > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (value > Math.min(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (value > MAX_VALUE || isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (value > Integer.MAX_VALUE && value >= this.length()) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (value > Float.MAX_VALUE && value >= this.length()) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (value > Math.abs(value) || Double.isInfinite() || value > 255) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (value > Double.MAX_VALUE && value >= this.length()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (value > double.length() || value < 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (value > Integer.MAX_VALUE && value >= this.length) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (value > Short.MAX_VALUE || value > 255) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (value > Float.MAX_VALUE && value >= this.columns()) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (value > Integer.MAX_VALUE || value > 255) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
        "fixed_line": "if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {"
    },
    "Jsoup-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static String nullString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static String nullString = String.valueOf(0x0000); // header",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static String nullString = String.valueOf(0x0000); // != null",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no separator",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static String nullString = String.valueOf(0x0000); // cache",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static String nullString = String.valueOf(0x0000); // text values from 2 to 57...",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static String nullString = String.valueOf(0x0000); // UTF-8 codepoint",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String nullString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static String nullString = String.valueOf(0x0000); // UTF-8",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-empty",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static String nullString = String.valueOf(0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-public, implicit",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static String nullString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static String nullString = String.valueOf(0x0000); //TODO: deprecated PreprocessorAction",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static String nullString = String.valueOf(0x0000); // text",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static String nullString = String.valueOf(0x0000); // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static String nullString = String.valueOf(0x0000); // false -> not skip-only",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static String nullString = String.valueOf(0x0000); // 0x0000",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-empty?",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static String nullString = String.valueOf(0x0000); // quote",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static String nullString = String.valueOf(0x0000); // if it's non-empty",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static String nameString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static String nullString = String.valueOf(0x0000); // [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static String nullString = String.valueOf(0x0000); // TODO: deprecated PreprocessorAction",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no more",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static String nullString = String.valueOf(1000);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static String nullString = String.valueOf(0x0000); // horizontal",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's not supported",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!'.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static String nullString = String.valueOf(0x0000); // always 1",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static String nullString = String.valueOf(0x0000); // text values from 2",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static String nullString = String.valueOf(0x0000); // values from 2 to 57...",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static String nullString = String.valueOf(0x0000); // cache object",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no more than one",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no need to check supers",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static String nullString = String.valueOf(0x0000); // 1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static String nullString = String.valueOf(1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static String nullString = String.valueOf(1x0000);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no mask",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static String nullString = String.valueOf(0x0000); // if it's non-public, implicit",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'number'",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String nullString = String.valueOf(0x0000); // header",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static String nullString = String.valueOf(0x0000); // [JACKSON-407] -- allow disabling bytes",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-public, need to force accessible",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-public, need to force closure",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static String nullString = String.valueOf(0x0000); // to get here",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static String nullString = String.valueOf(0x0000); // [JACKSON-407] -- allow disabling wrapping for testing",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static String nullString = String.valueOf(0x0000); // defined",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-negative",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also, so it's",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's not store 'raw'",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the array as 'final'.",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'n'",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static String nullString = String.valueOf(0x0000); // no separator",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-static",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-public, so it was",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\"+Integer.toString()+\"')",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static String nullString = String.valueOf(0x0000); // namespaces",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static String nullString = String.valueOf(0x0000); //boolean",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare theColors. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'JSONObject'",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also, as 'final'.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static String nullString = String.valueOf(0x0000); // TODO: can't be more than one",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also, so it is possible",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's remove the array",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static String nullString = String.valueOf(0x0000); //=UTF-8\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no need to get here",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static String nullString = String.valueOf(0x0000); // format",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'getType'",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!';",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static String nullString = String.valueOf(0x0000); // by default",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static String nullString = String.valueOf(0x0000); // to get a string",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no need to force accessible",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the array\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static String nullString = String.valueOf(0x0000); // string",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static String nullString = String.valueOf(0x0000); // TODO: optimize?",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static String nullString = String.valueOf(0x0000); // it's non-empty",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static String nullString = String.valueOf(0x0000); // value",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's not in case",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the non-static",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final';",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'document'",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the given",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static String nullString = String.valueOf(0x0000); // common case",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the @\"",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static String nullString = String.valueOf(0x0000); // cache by default",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static String nullString = String.valueOf(0x0000); // that can't be more than one",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'empty'",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's non-is",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static String nullString = String.valueOf(0x0000); // == 0",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also, but it's",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no go",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static String nullString = String.valueOf(0x0000); // FIXME: a parameter should not be assigned. Also, but nodes",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String nullString = String.valueOf(0x0000); // if there's no separator",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no length",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static String nullString = String.valueOf(0x0000); // if there's no need to get a string",
                "identical": false
            }
        ],
        "buggy_line": "private static String nullString = String.valueOf(0x0000);",
        "fixed_line": "private static String nullString = String.valueOf('\\u0000');"
    },
    "Closure-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean isOverride = false;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean isOverride = false && parent.getType() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean isOverride = true && parent.getType() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean isOverride = _prop.inGlobalScope() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean isOverride = (parent != null && parent.getType() == Token.TK_COMMA) ? true : false;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean isOverride = false && _prop.getLastChildCount() > 0) ? parent.getFirstChild() : false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean isOverride = false && _prop.inGlobalScope() != Token.TK_COMMA && parent.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TreatType()) ? parent.getLastChild() : false;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean isOverride = false && _prop.inGlobalScope() != Token.TreatType()) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean isOverride = false && parent.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean isOverride = false && _prop.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean isOverride = false && parent.getType() == Token.TK_LBRACKET;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean isOverride = (parent != null && parent.getType() == Token.TK_LBRACKET) ? true : false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean isOverride = (parent != null && parent.getType() == Token.TK_LBRACE) ? true : false;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean isOverride = true && parent.getType() != Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean isOverride = (parent != null && t.getType() == Token.TK_COMMA) ? true : false;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean isOverride = true && parent.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean isOverride = true && _prop.inGlobalScope() != Token.TK_COMMA && parent.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean isOverride = false && parent.getType() != Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean isOverride = false && parent != null && parent.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean isOverride = false && parent.getType() == Token.TK_PRODUCTION;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean isOverride = false && parent != null && parent.getType() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean isOverride = true && _prop.inGlobalScope() != Token.TreatType()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TreatType()) ? parent.getLastChild() : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean isOverride = true && parent.getType() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean isOverride = true && parent.getType() == Token.TK_PRODUCTION;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean isOverride = true && parent.getType() == Token.TK_LBRACKET;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean isOverride = (parent != null && t.getLastChild() == Token.TK_COMMA) ? true : false;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean isOverride = false && parent.getType() == Token.TK_LBRACKET) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean isOverride = false && parent != null && parent.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean isOverride = _prop.inGlobalScope() == Token.TK_LBRACKET;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean isOverride = false && parent.getType() == Token.TK_IDENT;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean isOverride = _prop.inGlobalScope() == Token.TK_SPAN) ? true : false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean isOverride = false && _prop.getLastChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean isOverride = (parent != null && t.getLastChildCount() > 0) ? parent.getFirstChild() : false;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean isOverride = false && parent.getType() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean isOverride = false && _prop.inGlobalScope() != Token.TK_COMMA && parent.getFirstChild().isOverride()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean isOverride = true && parent.getType() == Token.TK_LBRACKET) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TreatType()) ? parent.getFirstChild() : false;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean isOverride = (parent != null && t.getType() == Token.TK_LBRACE) ? true : false;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean isOverride = _prop.inGlobalScope() == Token.TK_COMMA && parent != null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean isOverride = true && parent != null && parent.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean isOverride = _prop.inGlobalScope() && parent != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean isOverride = _parent.inGlobalScope() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TK_COMMA && parent.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean isOverride = (parent != null && parent.getType() == Token.TK_COMMA) ? false : _prop.getLastChild().equals(propertyName);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean isOverride = false && parent != null && parent.getType() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean isOverride = (parent != null && t.getType() == Token.TK_COMMA) ? false : parent.getFirstChild().equals(propertyName);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean isOverride = (parent != null && t.getType() == Token.TK_LBRACKET) ? true : false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean isOverride = true && _prop.inGlobalScope() != Token.TK_PRODUCTIONS ? parent.getLastChild().getParent() : false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean isOverride = _prop.inGlobalScope() == Token.TK_LBRACKET) ? true : false;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean isOverride = false && _prop.inGlobalScope() != Token.TK_PRODUCER && parent.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean isOverride = true && parent.getType() == Token.TK_IDENT;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean isOverride = _prop.getLastChild() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean isOverride = true && _prop.inGlobalScope() != Token.TK_COMMA && parent.getFirstChild().isOverride()) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean isOverride = (parent != null && t.getLastChild() == Token.TK_LBRACKET) ? true : false;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean isOverride = true && parent.inGlobalScope() != Token.TK_COMMA && parent.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean isOverride = _prop.inGlobalScope() && parent != Token.TreatType()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean isOverride = (parent != null && t.getType() == Token.TK_COMMA) ? false : parent.getLastChild().equals(propertyName);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean isOverride = _prop.inGlobalScope() == Token.TK_COMMA && parent.getType().equals(propertyName) ? true : false;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean isOverride = _prop.inGlobalScope() != null && parent.getType().equals(propertyName)) ? parent.getParent() : false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean isOverride = true && parent != null && parent.getType() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean isOverride = true;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean isOverride = parent.inGlobalScope() != Token.TK_COMMA && parent.getType().equals(prop.getLastChild())) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean isOverride = _prop.inGlobalScope() != null && parent.getType().equals(propertyName)) ? true : false;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean isOverride = _prop.inGlobalScope() && parent != Token.TK_PRODUCTION;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TreatType()) ? parent.getLastChild().getParent() : false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean isOverride = false && _prop.getLastChild() != Token.TreatType()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean isOverride = (parent != null && t.getLastChild() == Token.TK_LBRACE) ? true : false;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TreatType()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean isOverride = false && _prop.inGlobalScope() != Token.TK_PRODUCTIONS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean isOverride = false && parent.getType() == Token.TK_COMMA;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean isOverride = (parent != null && t.getType() == Token.TK_COMMA) ? false : _prop.getLastChild().equals(propertyName);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean isOverride = false && _prop.inGlobalScope() != Token.TK_COMMA && parent.getType().equals(propertyName)) ? true : false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TreatType()) ? parent.getType() : false;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean isOverride = true && _prop.getLastChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean isOverride = _prop.inGlobalScope() && parent != Token.TK_COMMA && parent.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean isOverride = false && parent.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean isOverride = false && _prop.getType() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean isOverride = _prop.inGlobalScope() == Token.TK_LBRACKET && parent != null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean isOverride = parent.inGlobalScope() == Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean isOverride = false && parent != null && parent.getType() == Token.TK_LBRACKET) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean isOverride = true && parent.inGlobalScope() != Token.TK_COMMA && parent.getType().equals(prop.getLastChild())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean isOverride = true && _prop.inGlobalScope() != Token.TK_PRODUCER && parent.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean isOverride = true && parent.getType() != Token.TK_LBRACKET) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TK_COMMA && parent.getType().equals(propertyName) ? true : false;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean isOverride = _prop.inGlobalScope() == Token.TK_COMMA && parent.getType().equals(propertyName)) ? true : false;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean isOverride = false && _prop.getLastChild() != Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean isOverride = false && _prop.inGlobalScope() != Token.TK_COMMA && parent.getFirstChild().isOverrideAccessModifiers()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean isOverride = false && parent.inGlobalScope() != Token.TK_COMMA && parent.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean isOverride = false && parent != null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean isOverride = false && _prop.inGlobalScope() != Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TK_COMMA && parent.getFirstChild().isOverride()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean isOverride = false && parent != null && parent.getType() != Token.TK_LBRACE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean isOverride = _prop.inGlobalScope() != Token.TK_COMMA && parent.getType().equals(propertyName)) ? true : false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean isOverride = true && parent.getType() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean isOverride = false && parent != null && parent.getFirstChild() != Token.TK_COMMA;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean isOverride = (parent != null && t.getType() == Token.TK_COMMA) ? true : parent.getFirstChild().equals(propertyName);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean isOverride = true && parent.inGlobalScope() != Token.TreatType()) {",
                "identical": false
            }
        ],
        "buggy_line": "boolean isOverride = t.inGlobalScope() &&",
        "fixed_line": "boolean isOverride = parent.getJSDocInfo() != null &&"
    },
    "Lang-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "if(str.startsWith(\"0x\") || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if(str.startsWith(\"0x\") && str.length() > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"+\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if(str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if(str.endsWith(\"+0000\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if(str.length() <= 9) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if(str.startsWith(\"0x\") && str.endsWith(\"+\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if(str.startsWith(\"0x\") && str.endsWith(\"+0000\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if(str.length() > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if(str.length() == 1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) == '0') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (str.startsWith(\"0x\") && str.endsWith(\"+\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != '0') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if(str.length() <= 40) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if(str.length() <= 0 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (str.startsWith(\"0x\") && str.endsWith(\"+0000\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != ':') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"b\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (str.startsWith(\"0x\") || str.endsWith(\"+\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) == ':') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (str.startsWith(\"0x\") && str.length() > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if(str.length() == 0 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (str.endsWith(\"+0000\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if(str.startsWith(\"0x\") || str.length() > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if(str.length() <= SURR2_LAST) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\".*\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != '-') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if(str.length() == 2 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"A\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"Z\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if(str.endsWith(\"+\") || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if(str.length() <= 4 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\" provider\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if(str.startsWith(\"0x\") || str.length() == 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (str.length() > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if(str.length() >= 2 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if(str.length() <= 32 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if(str.length() <= MAX_VALUE || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"0000\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if(str.length() <= SURR1_LAST) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != ';') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if(str.length() <= lastChar) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if(str.contains(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"M\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if(str.length() <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\" 1000);\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if(str.length() >= 1 && str.charAt(0) == '-') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"+0000\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if(str.length() <= MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) == '-') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\" into\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if(str.startsWith(\"0x\") && str.endsWith(\".*\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != '\\n') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if(str.length() > 1 && str.charAt(0) == '-') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if(str.length() == 32 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"=\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if(str.startsWith(\"0x\") || str.startsWith(\"-0X\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if(str.contains(\"0x\") || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) == '.') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if(str.endsWith(\"+\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if(str.startsWith(\"0x\") || str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if(str.length() == 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"BIT\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if(str.length() == 9 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\":\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"-0\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if(str.contains(\"+\") || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if(str.startsWith(\"0x\") && str.endsWith(\"=\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if(str.startsWith(\"0x\") || str.isEmpty()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if(str.startsWith(\"-0x\") || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"\"};\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if(str.length() < 9) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if(str.length() <= 5 || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(value.length() - 1) == '0') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) == ';') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if(str.length() <= MAX_SHARED_STRING_LENGTH_BYTES && str.charAt(str.length() - 1) == '0') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if(str.startsWith(\"0x\") && str.endsWith(\"b\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if(str.length() <= MAX_SHARED_STRING_LENGTH_BYTES && str.endsWith(\"+0000\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (str.length() == 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\"B\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if(str.startsWith(\"0x\") && str.length() == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if(str.length() > 9 && str.charAt(0) == '-') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != '\\'') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) == '/') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\" -\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if(str.startsWith(\"0x\") && str.endsWith(\" provider\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if(str.length() <= 63) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if(str.startsWith(\"0x\") || str.endsWith(\")\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if(str.length() >= length) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if(str.length() > 0 && str.charAt(0) == '-') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(str.length() - 1) != '.') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if(str.length() <= MAX_SHARED_STRING_LENGTH_BYTES && str.charAt(str.length() - 1) != '0') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if(str.length() <= Integer.MAX_VALUE && str.charAt(len - 1) == '0') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if(str.length() <= MAX_INT_LENGTH) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if(str.length() >= 1 && str.charAt(0) == ':') {",
                "identical": false
            }
        ],
        "buggy_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
        "fixed_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {"
    },
    "Math-105": {
        "fixes": [
            {
                "k": 1,
                "patch": "return sumYY -sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return sumPoint - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return sumYYSquared * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return sum\u6d6d - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return sum broadcast - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return sumMatrix - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return sumYY / sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return sum-1; - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return sumYY - valueXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return sumalk - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return sumYY - startIndex * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return sum Que - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return sumcourse - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return sumhandles - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return sumificance - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return sumYY - length * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return sum-1; - sumYYSquared * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return sumMinus - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return sum Encrypt - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return sum getErrorCode - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return sum NumberFormat - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return sum\u770c - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return sum[3] - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return sum 17. - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return sumSERT - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return sumActions - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return sumYY - capacityXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return sumTotal - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return sum station - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return sum\u0c21 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return sumBLE - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return sum Didn - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return sum[0] - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return sum principal - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return sumcaches - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return sum openshift - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return sum\u0358 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return sumYY - leftXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return sum {$ - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return sum bd - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return sum\u9075 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return sumRows - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return sum169 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return sum\u762f - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return sumice - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return sum\u7ba1 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return sum > 1.0 / sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return sum+1) * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return sumMR - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return sum garbage - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return sum\u01db - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return sum\u5378 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return sumYY - 10 * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return sum\u2734 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return sum StepMeta - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return sum\u5598 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return sum\u7586 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return sumBoot - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return sum kv - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return sumYY - widthXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return sum\u06e5 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return sumYY - lonXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return sum\u4f3a - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return sumYY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return sum\ub703 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return sumVerbose - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return sumCAL - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return sumDeletion - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return sum > 1.0 * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return sumYY - 1.0 * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return sum\u4eb3 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return sumYY -CER * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return sum+1] - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return sumvo - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return sum-1; - sumYY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return sumVer - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return sumYY - bindingXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return sumYY - startIndex) * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return sumYY - x * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return sumXY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return sum getErrorCode * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return sumYY - value * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return sumYY - inject * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return sum[3] * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return sumYY * sumXY / sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return sum-1; * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return sumBelow * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return sum OBJ * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return sumYY -sum * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return sumCAL * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return sum broadcast * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return sumYY -SY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return sumYYSquared * sumXY / sum </ * sumXX;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return sumYY * sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return sumPoint * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return sumYY - 1.0 / sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return sumYYSquared * sumXY / sum] * sumXX;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return sum ddof * sumXY / sumXX;",
                "identical": false
            }
        ],
        "buggy_line": "return sumYY - sumXY * sumXY / sumXX;",
        "fixed_line": "return Math.max(0d, sumYY - sumXY * sumXY / sumXX);"
    },
    "Closure-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "jsDocParameter.getJSType(), true);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "jsDocParameter.getJSType(), false);",
                "identical": true
            },
            {
                "k": 3,
                "patch": "jsDocParameter.getJSType(), null, true);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "jsDocParameter.getJSType(), null);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "jsDocParameter.getJSType(), null, false);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "jsDocParameter.getJSType(), !\"\".equals(astParameter.getJSType())));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "jsDocParameter.getJSType(), functionNode, true);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "jsDocParameter.getJSType(), null, !\"\".equals(astParameter.getJSType())));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "jsDocParameter.getJSType(), !\"\".equals(astParameter.getJSType())) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType())));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "jsDocParameter.getJSType(), this, true);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "jsDocParameter.getJSType(), String.valueOf(astParameter.getJSType())));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "jsDocParameter.getJSType(), true, false);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())){",
                "identical": false
            },
            {
                "k": 17,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "jsDocParameter.getJSType(), null) ? jsDocParameter.getJS() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "jsDocParameter.getJSType(), !\"\".equals(astParameter.getJSType())){",
                "identical": false
            },
            {
                "k": 20,
                "patch": "jsDocParameter.getJSType(), null, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "jsDocParameter.getJSType(), null, !\"\".equals(astParameter.getJSType())) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "jsDocParameter.getJS() != null ? jsDocParameter.getJSType().getName() : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "jsDocParameter.getJSType(), null, Integer.valueOf(astParameter.getJSType())));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getFirstChild().equals(astParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "jsDocParameter.getJSType(), this);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "jsDocParameter.getJS() != null ? jsDocParameter.getJSType() : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "jsDocParameter.getJSType(), \"\", true);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "jsDocParameter.getJSType(), null, Integer.parseInt(astParameter.getJSType())));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.get())) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "jsDocParameter.getJSType(), e, true);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getToken())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "jsDocParameter.getJSType(), null, !\"\".equals(astParameter.getJSType())){",
                "identical": false
            },
            {
                "k": 33,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())) ? \"true\" : \"false\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null ? jsDocParameter.getJS()) : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "jsDocParameter.getJSType(), null && jsDocParameter.getJS() != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "jsDocParameter.getJSType(), !\"\".equals(astParameter.getJSType())) ? \"true\" : \"false\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "jsDocParameters.getJSType(), true);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "jsDocParameter.getJSType(), !\"\".equals(astParameter.getJSType())) ? null : jsDocParameters.getJS() + \" and \" + jsDocParameter.getToken().getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getTokenLine())) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())) ? null : jsDocParameters.getJS() + \" and \" + jsDocParameter.getToken().getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "jsDocParameter.getJSType(), Math.min(jsDocParameter.getJS()));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "jsDocParameter.getJS() != null ? jsDocParameter.getJSType().getName() : \"\").equals(astParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getNode())) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxPagedParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "jsDocParameter.getJSType(), !\"\".equals(astParameter.getJSType())) ? null : jsDocParameters.getJS() + \" and \" + jsDocParameter.getTokenValue());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxedParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getFirstChild().equals(astParameter.get())) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "jsDocParameter.getJSType(), null) ? jsDocParameter.getJS() : false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())) ? null : jsDocParameters.getJS() + \" and \" + jsDocParameter.getTokenValue());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getNodeName())) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null ? jsDocParameter.getNode() : null);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstResult().equals(astParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxKeyword.BIGNEE) ? jsDocParameter.getNode() : \"\"));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "jsDocParameter.getJSType(), String.valueOf(astParameter.getJSType()), true);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getDeclaringClass())) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "jsDocParameter.getJSType(), null, !\"\".equals(astParameter.getJSType()) && jsDocParameter.getFirstChild().equals(CxxPagedParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxPippoConstants.BIGNEE) ? jsDocParameter.getNode() + \" (\" + jsDocParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "jsDocParameter.getJSType(), null, !\"\".equals(astParameter.getJSType())) ? \"true\" : \"false\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxKeyword.BIGNEE) ? jsDocParameter.getNode() + \" (\" + jsDocParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getAbsolutePath())) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "jsDocParameter.getJSType(), null, (String) jsDocParameter.getJSType()) != null ? jsDocParameter.getJS() : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "jsDocParameter.getJSType(), null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxPippoConstants.BIGNEE) ? jsDocParameter.getNode() + \" and \" + jsDocParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getFirstChild().equals(astParameter.getToken())) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getTokenValue()), true);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "jsDocParameter.getJSType(), null, (String) jsDocParameter.getJSType(), true);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "jsDocParameter.getJSType(), null && jsDocParameter.getJS() == null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(CxxedParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(CxxPagedParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "jsDocParameter.getJSType(), null && jsDocParameter.getJS() != null ? jsDocParameter.getFirstChild().equals(astParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "jsDocParameter.getJSType(), index, true);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getLast())) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getColumnNames())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "jsDocParameters.getJSType(), null, true);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "jsDocParameter.getJSType(), null, !\"\".equals(astParameter.getJSType()) && jsDocParameter.getFirstChild().equals(CxxedParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getMember())) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())) ? \"true\" : \"false\", true);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxPippoConstants.BIGNEE) ? jsDocParameter.getNode() + \" for \" + jsDocParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())) ? true : \"?\";",
                "identical": false
            },
            {
                "k": 83,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getLastRow())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "jsDocParameter.getJSType(), null, Integer.valueOf(astParameter.getJSType()) != null ? jsDocParameter.getNode() : null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getStart())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "jsDocParameter.getJSType(), !\"\".equals(astParameter.getJSType().getName())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxKeyword.BIGNEE) ? jsDocParameter.getNode() : \"search\".equalsIgnoreCase(astParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getFirstChild().equals(astParameter.getTokenLine())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getNextSibling())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())) ? \"true\" : \"false\", false);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "jsDocParameter.getJSType(), null, context);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "jsDocParameter.getJSType(), null, Integer.valueOf(astParameter.getJSType()) != null && jsDocParameter.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getResult())) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getLastActivityId())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "jsDocParameter.getJSType(), null && jsDocParameters.containsKey(astParameter.getJSType())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null ? jsDocParameter.getColumn() : null);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter.getJS() != null && jsDocParameter.getJSDocParameter.getFirstChild().equals(astParameter.getScope())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "jsDocParameter.getJSType(), \"\", !\"\".equals(astParameter.getJSType())) ? null : jsDocParameters.getJS() + \" and \" + jsDocParameter.getTokenValue()));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxKeyword.BIGNEE) ? jsDocParameter.getNode() + \" for \" + jsDocParameter.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "jsDocParameter.getJSType(), null, String.valueOf(astParameter.getJSType()) != null && jsDocParameter.getFirstChild().equals(CxxPippoConstants.BIGNEE) ? jsDocParameter.getNode() : \"search\".equalsIgnoreCase(astParameter.getTokenValue())) {",
                "identical": false
            }
        ],
        "buggy_line": "jsDocParameter.getJSType(), true);",
        "fixed_line": "jsDocParameter.getJSType(), false);"
    },
    "Jsoup-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "clone.setValues(this);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "clone.classNames().add(this);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "clone.initElement(this);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "clone.hasNames() ? (Element) clone.value() : null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "clone.hasNames() && !Modifier.isAbstract(clone.getModifiers())) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "clone.hasNames() ? (Element) clone.clone() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "clone.indexNames().add(this);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "clone.getValues().addAll(this);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "clone.hasNames() ? value.clone() : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "clone.defaultNames() != null ? value.clone() : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "clone.hasNames() ? value.name() : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "clone.hasNames() ? clone.value() : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "clone.positionNames().add(this);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "clone.hasNames() ? value.toString() : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "clone.classNames() != null ? value.toString() : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "clone.hasNames() ? (Element) clone.index() : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "clone.hasNames() ? (Element) clone).getValues() : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "clone.defaultNames() != null ? clone.getObject().clone() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "clone.getValues().add(this);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "clone.classNames().addAll(this);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "clone.defaultNames() != null ? clone.getValues().clone() : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "clone.hasNames() ? this.clone() : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "clone.hasNames() ? super.clone() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "clone.defaultNames() != null ? clone.value() : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "clone.columnNames().add(this);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "clone.hasNames() && !Modifier.isStatic(clone.getModifiers())) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "clone.defaultNames() != null ? (Element) clone.clone() : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "clone.updateValues(this);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "clone.classNames() != null ? value.clone() : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "clone.requestNames().add(this);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "clone.columnNames() != null ? value.clone() : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "clone.getBasicUserType().isEqual(this, clone));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "clone.indexNames() != null ? value.clone() : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "clone.hasNames() ? (Element) clone.getValues() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "clone.hasNames() ? (Element) clone.name() : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "clone.positionNames() != null ? value.clone() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "clone.classNames() != null && !Collection.classNames().isEmpty()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "clone.defaultNames() != null ? value.getObject().clone() : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "clone.classNames() != null ? (Element) clone.clone() : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "clone.classNames() != null && !Object.classNames().isEmpty()) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "clone.classNames() != null ? (Element) clone.value() : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "clone.columnNames() != null ? value.toString() : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "clone.classNames() != null && !this.value().isEmpty()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "clone.hasNames() ? clone.name() : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "clone.defaultNames().add(this);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "clone.setPropertyNames().add(this);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "clone.defaultNames() != null ? clone.clone() : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "clone.classNames().add(clone);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "clone.positionNames().addAll(this);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "clone.columnNames() != null ? (Element) clone.clone() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "clone.classNames().add(new PropertyExpression(this, clone));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "clone.hasNames() && !Modifier.isAbstract(managedType.getModifiers())) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "clone.requestNames() != null ? value.toString() : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "clone.defaultNames().addAll(this);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "clone.hasNames() ? (Element) clone.get(0) : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "clone.columnNames() != null ? (Element) clone.value() : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "clone.init(this);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "clone.hasNames() ? this.name() : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "clone.defaultNames() != null ? clone.getContent() : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "clone.setPropertyType(Collection.classNames, clone.value());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "clone.defaultNames() != null ? value.toString() : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "clone.classNames().add(new PropertyDeclaration(this, clone));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "clone.requestNames() != null ? value.clone() : null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "clone.defaultNames() != null ? (Element) clone.value() : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "clone.attributeNames().addAll(this);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "clone.right = (Element) clone;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "clone.getValues() != null ? (Element) clone.value() : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "clone.hasNames() ? (Element) clone.getProperty() : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "clone.indexNames() != null ? (Element) clone.clone() : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "clone.hasNames() ? io.name() : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "clone.getDefaultNames() != null ? value.toString() : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "clone.getBasicUserType().equals(this);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "clone.hasNames() && !Modifier.isElement(clone.getModifiers())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "clone.indexNames().addAll(this);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "clone.columnNames().addAll(this);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "clone.defaultNames() != null ? value.getContent() : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "clone.indexNames() != null ? (Element) clone.value() : null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "clone.defaultNames() != null ? (Element) clone).clone() : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "clone.defaultNames() != null ? (Element) clone.clone() : null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "clone.columnNames() != null ? (Element) clone).getValues() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "clone.requestNames().addAll(this);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "clone.indexNames() != null ? value.toString() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "clone.replaceObject(this, \"\") + \"=\" + clone.toString() + \"}\";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "clone.bottomElement(this);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "clone.getDefaultNames() != null ? value.clone() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "clone.hasNames() && !Modifier.isAbstract(clone.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "clone.addAll(this);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "clone.getBasicUserType().isEqual(this, clone.value()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "clone.getValues().setValues(this);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "clone.replaceObject(this, \"\") + \"=\" + clone.toString() + \"}\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "clone.createObjectNode();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "clone.getBasicUserType().isEqual(this, clone);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "clone.left = clone;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "clone.replaceObject(this, \"\") + \"=\" + clone.value() + \"}\";",
                "identical": false
            },
            {
                "k": 95,
                "patch": "clone.hasNames() && !clone.isCollection()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "clone.defaultNames() != null ? (Element) clone).getValues() : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "clone.methodNames().add(this);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "clone.defaultNames() != null ? (Element) clone.getContent() : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "clone.getBasicUserType().equals(this)) clone.value();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "clone.hasNames() ? value.getObject() : null;",
                "identical": false
            }
        ],
        "buggy_line": "clone.classNames();",
        "fixed_line": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames"
    },
    "Lang-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "str.getChars(0, width, buffer, padChar);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "str.getChars(0, width, buffer, size);",
                "identical": true
            },
            {
                "k": 3,
                "patch": "str.getChars(0, width, buffer, length);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "str.getChars(0, width, buffer, 0, padChar);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "str.getChars(0, width, size);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "str.getChars(0, width, buffer, index);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "str.getChars(0, width, buffer, 0, length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "str.getChars(0, width, buffer, 8);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "str.getChars(0, width, buffer, 0, size);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "str.getChars(0, width, length);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "str.getChars(0, width, buffer, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "str.getChars(0, width, buffer, offset);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "str.getChars(0, width, buffer, 0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "str.getChars(0, width, buffer,padChar);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "str.getChars(0, width, buffer, 0, 8);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "str.getChars(0, width, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "str.getChars(0, width, buffer, Integer.parseInt(strLen));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "str.getChars(0, width, padChar);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "str.getChars(0, width, buffer);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "str.getChars(0, width, buffer, frameLen);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "str.getChars(0, width, buffer, subLength);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "str.getChars(0, width, buffer, paramLength);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "str.getChars(0, width, buffer, totalLen);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "str.getChars(0, width, buffer, StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "str.getChars(0, width, buffer, COORDINATE);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "str.getChars(0, width, buffer, last);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "str.getChars(0, width, buffer, Integer.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "str.getChars(0, width, buffer, COORDINATE_PREDICATE);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "str.getChars(0, width, buffer, initialLen);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "str.getChars(0, width, height);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "str.getChars(0, width, buffer, 4);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "str.getChars(0, width, buffer, StandardCharsets.UTF_8);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "str.getChars(0, width, buffer,[strLen]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "str.getChars(0, width, buffer, 2, padChar);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "str.getChars(0, width, buffer, idLen);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "str.getChars(0, width, StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "str.getChars(0, width, buffer, arrayLen);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "str.getChars(0, width, StandardCharsets.UTF_8);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "str.getChars(0, width, buffer, startIndex);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "str.getChars(0, width, buffer, 6);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "str.getChars(0, width, buffer, paramLen);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "str.getChars(0, width, buffer, 2);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "str.getChars(0, width, buffer, available);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "str.getChars(0, width, buffer, validationChar);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "str.getChars(0, width, buffer, bufferedLen);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "str.getChars(0, width, buffer, Integer.parseInt(strLen), 16);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "str.getChars(0, width, buffer, int length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "str.getChars(0, width, buffer, end);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "str.getChars(0, width, buffer, blockLen);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "str.getChars(0, width, buffer,getContentLength);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "str.getChars(0, width, buffer,boundsLen);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "str.getChars(0, width, buffer, 0));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "str.getChars(0, width, buffer, validationCapacity);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "str.getChars(0, width, buffer, height);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "str.getChars(0, width, buffer, dataLen);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "str.getChars(0, width, 0, padChar);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "str.getChars(0, width, buffer, MoveCapacity);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "str.getChars(0, length, buffer, width);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "str.getChars(0, width, buffer, memoizedCapacity);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "str.getChars(0, width, buffer, imageType);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "str.getChars(0, length, buffer, padChar);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "str.getChars(0, width, buffer, subLen);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "str.getChars(0, width, buffer, Integer.parseInt(strLen), padChar);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "str.getChars(0, width, buffer, int index);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "str.getChars(0, width, buffer, elementLen);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "str.getChars(0, width, buffer, itemLen);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "str.getChars(0, width, buffer, MIN_BUFFER_SIZE);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "str.getChars(0, length, buffer, size);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "str.getChars(0, width, buffer, 2);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "str.getChars(0, width, buffer, initial);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "str.getChars(0, width, buffer, 25);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "str.getChars(0, width, buffer,ArgumentsLen);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "str.getChars(0, width, buffer, encryptionChar);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "str.getChars(0, width, buffer, subCapacity);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "str.getChars(0, width, buffer,400);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "str.getChars(0, width, buffer, read);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "str.getChars(0, width, buffer, cryptoLength);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "str.getChars(0, width, buffer,Calculator);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "str.getChars(0, width, buffer, bodyLen);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "str.getChars(0, width, buffer, MAX_VALUE);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "str.getChars(0, width, buffer, MIN_BUFFER_LENGTH);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "str.getChars(0, width, buffer, validationSize);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "str.getChars(0, width, buffer,region);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "str.getChars(0, width, buffer, varLength);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "str.getChars(0, width, buffer, checksumLen);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "str.getChars(0, width, buffer, 80);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "str.getChars(0, width, buffer, Integer.parseInt(strLen) < padChar;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "str.getChars(0, width, buffer, configurationLen);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "str.getChars(0, width, buffer, 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "str.getChars(0, width, buffer, + 4);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "str.getChars(0, width, buffer, blockLength);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "str.getChars(0, width, buffer, Integer.SIZE);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "str.getChars(0, width, buffer,bounds);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "str.getChars(0, width, buffer, indicatorLen);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "str.getChars(0, width, buffer, '/');",
                "identical": false
            },
            {
                "k": 96,
                "patch": "str.getChars(0, width, buffer, COORD_SEPARATOR);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "str.getChars(0, width, buffer, length - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "str.getChars(0, width, buffer, totalLength);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "str.getChars(0, width, buffer, COORD_LENGTH);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "str.getChars(0, width, buffer, separator);",
                "identical": false
            }
        ],
        "buggy_line": "str.getChars(0, strLen, buffer, size);",
        "fixed_line": "str.getChars(0, width, buffer, size);"
    },
    "Closure-65": {
        "fixes": [
            {
                "k": 1,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\"') break;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\') break;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; \\n\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;\\n\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'A' && c <= 'Z') break;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; \");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case '\\0': sb.append(\"\\\\0\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;\").append(c); break;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == end) break;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case '\\0': sb.append(c); break;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'a' && c <= 'z') break;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;').append(c); break;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == ']') break;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\"') break;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'A' && c <= 'F') break;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i >= n) break;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\')) break;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '}') break;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i > 0) break;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == n - 1) break;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; max output",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '=') break;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;\").append(s); break;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == quote) break;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\"') break; \\n\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if http://goo.charAt(i) == quoteEscape) break;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == len - 1) break;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\n') break;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c > 'A' && c <= 'Z') break;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'A' && c <= 'Z') return sb.toString();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= '0' && c <= '9') break;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; char if (c == '\\\"') break;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '=' || c == '\\t') break;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'a' && c <= 'z') return sb.toString();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; char if (c == '\\\\') break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == n) break;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (s.charAt(i) == quoteEscape) break;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\' || c == '\\t') break;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if http://goo.charAt(i) != '\\n') break;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if http://goo.charAt(i) != '\\\"') break;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\r' || c == '=' || c == '\\t') break;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'A' && c <= 'Z') break; \\n\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (s.length() > 0) break;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '=' || c == '\\u00a0' || c == '\\t') break;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\'') break;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\"' || c == '\\n') break;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;').append(s); break;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\r') break;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case '\\0': sb.append(\"\\\\{\"); break; if (c == '\\\\') break;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if http://goo.charAt(i) == '\\\"') break;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\') break; \\n\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case '\\0': sb.append(\"\\\\.\", i); break;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\' && i + 1 < length) break;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case '\\0': sb.append(\"\\\\s\"); break; if (c == '\\\\') break;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; values are not quoted",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\' || c == '\\r') break;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == end} || c == '=' || c == '\\t') break;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case '\\0': sb.append(\"\\\\{\"); break; if (c == '\\\"') break;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\"') break;\\n\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == quoteChar) break;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\' || c == '\\u00a0' || c == '\\t') break;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\"' || c == '=' || c == '\\t') break;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c > 0x7F) break;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\' || c == '\\n') break;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == end-of-line - 1) break;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '=' || c == '\\r') break;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '}')) break;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'A' && c <= 'Z';",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= '\\\"') break;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'A' && c <= 'Z') break;\\n\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i + 1 < length) break;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'A' && c <= 'Z') return sb.length() - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == quoteEscape) break;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if http://goo.charAt(i) != '\"') break;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'a' && c <= 'z') return sb.length() - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\') return sb.toString();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; max 1",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\"' || c == '\\r') break;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\\' && c <= 'Z') break;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if http://goo.charAt(i) != ' ') break;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (s.charAt(i) == quoteChar) break;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '}';",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '>')) break;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == l) break;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; max?",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case '\\0': sb.append(\"\\\\1\"); break; if (c == '\\\\') break;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == end}')) break;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == 'A' || c == '\\t') break;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i < n) break;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c >= 'A' && c <= 'Z'); break;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '\\\"') return sb.toString();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if http://goo.charAt(i) != '=') break;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == esc) break;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (i == end-of-quoteChar) break;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;\")) break;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '] || c == '\\n') break;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break; if (c == '`') break;",
                "identical": false
            }
        ],
        "buggy_line": "case '\\0': sb.append(\"\\\\0\"); break;",
        "fixed_line": "case '\\0': sb.append(\"\\\\000\"); break;"
    },
    "Chart-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "PathIterator iterator2 = p2.getPathIterator();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null);",
                "identical": true
            },
            {
                "k": 3,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())[0];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1)];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 2);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1).getPathIterator();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1)[0];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()))) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()+1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()-1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) ? p2.getPathIterator() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())) + 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 5)];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 3)];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "PathIterator iterator2 = p2.getPathIterator() != null ? p2.getPathIterator() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1))];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 5];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) ? p1.getPathIterator() : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 6];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 2];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 4)];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PathIterator iterator2 = new PathIterator(p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) != null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "PathIterator iterator2 = new PathIterator(p2.getWindingRule(), p2.getPathIterator());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1).getAbsolutePath();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "PathIterator iterator2 = new PathIterator(p2.getWindingRule()+1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()))[0];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) - 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) ? new double[0] : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getData());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PathIterator iterator2 = p2.getPathIterator() - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())+1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1) ? p2.getPathIterator() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule().class);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1) : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - Long.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 4;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - BigDecimal.class);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) + 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 8];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())).iterator();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 4];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1).getPathIterator().next();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - buf2.getPathIterator());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - \".value\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null)[0];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())))[0];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1).getParent();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule().getPath());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "PathIterator iterator2 = new PathIterator(p2.getWindingRule() + p2.getPathIterator());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())[0];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 3;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1) + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 2)];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule().getValue());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule())) : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1) ? p1.getPathIterator() : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1))[0];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()};",
                "identical": false
            },
            {
                "k": 74,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1).position();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()).getPathIterator();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() -h2.getPathIterator());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - latitude2.getPathIterator());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "PathIterator iterator2 = p2.getPathIterator(iterator1.getWindingRule() - 1)];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - \"{];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - BigDecimal.class));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()-1)];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) ? p2.getParent() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - j];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 3)[0];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 3) ? p2.getPathIterator() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "PathIterator iterator2 = new PathIterator(p2.getPath());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "PathIterator iterator2 = new PathIterator(p2.getWindingRule(), p2.getPathIterator() - 1];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1) / 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1]];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() + 2);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()])[0];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "PathIterator iterator2 = p2.getPathIterator(_p2.getWindingRule() - 1)];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1).getURLIterator();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) ? p2.getPathIterator() : new double[0];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1)) + 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) / 2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) != null ? p2.getPathIterator() : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule() - 1).getPathIterator().length();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getWindingRule()) > 0;",
                "identical": false
            }
        ],
        "buggy_line": "PathIterator iterator2 = p1.getPathIterator(null);",
        "fixed_line": "PathIterator iterator2 = p2.getPathIterator(null);"
    },
    "Chart-20": {
        "fixes": [
            {
                "k": 1,
                "patch": "super(value, paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "super(value, paint, PLAINPaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "super(value, paint, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "super(value, paint,ustPaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "super(value, paint,FrontPaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "super(value, paint, Float Float stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "super(value, paint, FollowingPaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "super(value, paint, HIGHPaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "super(value, paint,Mock, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "super(value, paint, params, outlinePaint, getResourceStroke, alpha);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "super(value, paint, stroke, outlinePaint,alphaStroke);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "super(value, paint, outlinePaint, getResourceStroke, alpha);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "super(value, paint, valsPaint, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "super(value, paint, outlinePaint, namespacesStroke, alpha);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "super(value, paint, paddingPaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "super(value, paint,SAFE, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "super(value, paint, outlinePaint, 2.Stroke, alpha);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "super(value, paint, photoUrls, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "super(value, paint,cedure, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "super(value, paint, stroke, outlinePaint, getLanguageStroke, alpha);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "super(value, paint, params, outlinePaint, PLAINStroke, alpha);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "super(value, paint,cf, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "super(value, paint, stroke, outlinePaint, getResourceStroke, alpha);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "super(value, paint, valsPaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "super(value, paint, params, outlinePaint, 2.Stroke, alpha);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float600, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "super(value, paint, stroke, outlinePaint, JSONArray);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "super(value, paint,llegal, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "super(value, paint, jspPaint, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "super(value, paint, jspPaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float FloatparseDouble, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float FloatparseDouble, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float parsedMessage, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float getRawStroke, alpha);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float600, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float parsedMessage, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float parsedMessage, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "super(value, paint, stroke, outlinePaint, 18);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float getRawStroke, alpha);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "super(value, paint,Slots, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float FloatparseDouble, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float FloatDEFINED, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float FloatDEFINED, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float getRawStroke, alpha);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float outgoingStroke, alpha);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "super(value, paint, Less, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "super(value, paint,\u09d7, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float FloatZoom, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float FloatparseDouble, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "super(value, paint, stroke, outlinePaint,ase);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "super(value, paint, stroke, outlinePaint,alpha);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float outgoingStroke, alpha);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float getRawStroke, alpha);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Floatparams, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float outgoingStroke, alpha);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "super(value, paint,Imports, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float parsedMessage, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float FloatFactor, alpha);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "super(value, paint, stroke, outlinePaint,BORDER_RIGHT);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "super(value, paint, #, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "super(value, paint, outlinePaint, restrictions, alpha);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "super(value, paint, params, outlinePaint, iter, alpha);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float getRawStroke, alpha);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "super(value, paint, stroke, outlinePaint, 0.0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Floatload, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "super(value, paint, stroke, outlinePaint,LEFT);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float FloatFactor, alpha);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "super(value, paint, Float Float Float Float Float Float Float FloatDEFINED, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Floatparams, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float outgoingStroke, alpha);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float initiator, alpha);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float initiator, alpha);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "super(value, paint, author, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float scaleY, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "super(value, paint, Float Float Float Float Float Float Floatparams, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float FloatFactor, alpha);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float getRawStroke, alpha);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "super(value, paint, stroke, outlinePaint,Seconds);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "super(value, paint,\u9806, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float initiator, alpha);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "super(value, paint, params, outlinePaint, Float.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float initiator, alpha);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "super(value, paint, 2007, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Floatload, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "super(value, paint,\u6f6d, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "super(value, paint, params, outlinePaint, namespacesStroke, alpha);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "super(value, paint, params, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float FloatFactor, alpha);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Version, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "super(value, paint, outlinePaint, iter, alpha);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "super(value, paint, Float Float Float Float Float Float Float Float Float Float Float Float Float Float Float FloatFactor, alpha);",
                "identical": false
            }
        ],
        "buggy_line": "super(paint, stroke, paint, stroke, alpha);",
        "fixed_line": "super(paint, stroke, outlinePaint, outlineStroke, alpha);"
    },
    "Csv-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c < '0' || c > '9') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c < '0' || c > '9') && c <= 'Z' || c > 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c == '\\\\' || c == '\\r' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c == '\\\\' || c == '\\'' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c == '\\'' || c > '9' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c == '\\\\' || c == '\\r' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c == '\\\\' || c == '\\'' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c == ' ' || c == '\\'' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c == ' ' || c == '\\u2029' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c == '] || c == '\\u2029' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c == ' ' || c == '\\'' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c == '\\\\' || c == '\\u2028' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c == ' ' || c == '\\u2028' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c == '] || c == '\\'' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c == '] || c == '\\u2028' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c == '] || c == '\\'' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c <= '0' || c > '9') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c == '\\\\' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c == '} || c == '\\u2029' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ((c < '0' || c > '9') && (c < 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c >= '0' && c <= '9') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'Z' || c > 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c == '\\\\' || c == '\\r' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c == '\"' || c > '9' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c == '\"' || c == '\\'' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c < '0' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c == ' ' || c == '\\r' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c == '} || c == '\\r' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c == '} || c == '\\u2028' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c == ' ' || c == '\\u00a' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c == '\\\\' || c == '\\u2029' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c == '] || c == '\\u00a' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c < '0' || c > '9') && c <= 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c == '] || c == '\\u00a' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c == '\\\\' || c > 'Z' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c == '\\\\' || c == '\\u2028' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'Z';",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c < '0' || c > '9') && c <= 'Z' || c == 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c == '\\\\' || c == '\\'' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c == '\\\\' || c == '\\r' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (newRecord && (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c == ' ' || c == '\\u00a' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c == '] || c == '\\r' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c == '] || c == '\\u00a' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c == '} || c == '\\'' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c == ' ' || c == '\\u2028' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'Z')) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c == '` || c == '\\u2029' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c < '0' || c > '9') && c <= 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c < '0' || c > 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c == ' ' || c == '\\u00a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c == '} || c == '\\'' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c < '0' || c > '9') && c <= 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c == '\\\\' || c == '\\'' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c == '] || c == '\\u2028' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c == '\\\\' || c == '\\u2028' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c == '\\'' || c > '9') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (newRecord && (c < '0' || c > '9') && c <= 'Z' || c > 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c == '] || c == '\\'' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c == '\"' || c == '\\'' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c == '] || c == '\\u2029' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c == '` || c == '\\u2028' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c == 'Z' || c == '\\'' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c == ' ' || c == '\\u00a' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c == '\"' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c == ' ' || c == '\\r' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c == '\\\" || c == '\\u2028' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'Z';",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c == ' ' || c == '\\'' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c == '\\\\' && c <= 'Z' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c == ' ' || c == '\\u2029' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c < '0' || c > '9') && c <= 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c == '] || c == '\\u2028' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c == ' ' || c == '\\'' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c == ' ' || c == '\\u2028' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c >= '0' && c <= '9') || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c <= '0' || c > '9') && c < 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c == ' ' || c == '\\'' || c == 'Z' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c == '\"' || c > 'Z' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c == '\\\\' || c > 'A' || c < 'Z') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c == '\"' || c > '9') && c < 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c == ' ' || c == '\\r' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c == '\\'' || c > '9') && c < 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'Z');",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (!newRecord || (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c == ' ' || c == '\\u00a' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c == '] || c == '\\'' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c == '\\\\' && c <= 'Z' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c == '] || c == '\\u00a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c == '\\\\' || c == '\\u00a' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c == '\\\\' || c == '\\u2028' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c == ' ' || c == '\\u00a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c < '0' || c > '9') && c <= 'Z' || c == 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c < '0' || c > '9') && c <= 'Z' || c > 'A' || c > 'Z')) {",
                "identical": false
            }
        ],
        "buggy_line": "if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {",
        "fixed_line": "if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {"
    },
    "Chart-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (endIndex < 0 || endIndex < 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (endIndex < 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (endIndex > 0 && endIndex < 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input...",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input?",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (endIndex < 0 || endIndex > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input? Unlikely but...",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input? Just flush...",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (endIndex < 0) { // end of record or input?",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (startIndex > endIndex || startIndex < 0 || endIndex < 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of input? Unlikely but...",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (startIndex > 0 || endIndex < 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (endIndex < 0 || endIndex < 0) { // the end of record or input...",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (endIndex < 0 || endIndex < 0) { // -1, EOF... no end of record or input?",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If the end of record or input...",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input? can't be negative",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (endIndex < 0) { // end of record or input...",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (endIndex < 0 || endIndex < 0) { // value end of record or input?",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input? Unlikely but no separator",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (endIndex < 0 || endIndex >= 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input... no separator",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (endIndex >= 0 && endIndex < 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (endIndex < 0 || endIndex < 0) { // value end of record or input...",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (endIndex < 0 || endIndex < 0) { // only value as is the end of record or input...",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (endIndex < 0 || endIndex < 0) { // must end of record or input...",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (endIndex < 0 || endIndex < 0) { // must end of record or input?",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (endIndex < 0 || endIndex < 0) { // no end of record or input?",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (endIndex < 0 || endIndex < 0) { // found... no end of record or input?",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (endIndex < 0 || endIndex < 0) { // only value end of record or input?",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (endIndex < 0) { // last value should end of record or input?",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (endIndex < 0 || endIndex <= 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If we should end of record or input?",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input? can't be more than one",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (endIndex < 0 || endIndex < 0) { //axon: must shuffle both regular properties?",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (endIndex < 0 || endIndex < 0) { // only value end of record or input...",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (endIndex < 0 || endIndex < 0) { // only value as is the end of record or input?",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If this is last value end of record or input?",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (endIndex <= endIndex) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (endIndex < 0 || endIndex < 0) { // value is the end of record or input...",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (endIndex < 0 || endIndex < 0) { // no end of record or input...",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (endIndex < 0) { // last value is 0x000000 end of record or input?",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If we should end of record or input...",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If: must shuffle both regular properties?",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (endIndex < 0 || endIndex < 0) { // specified? no end of record or input...",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input? no separator",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If no end of record or input?",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If no end of record or input...",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input? can't be #...",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (endIndex < 0 || endIndex < 0) { // not in the end of record or input...",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (endIndex < 0 || endIndex < 0) { //g the end of record or input...",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (endIndex > 0 && endArray[endIndex] < 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (endIndex < 0) { // end of input? can't be negative",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (endIndex < 0 || endIndex < 0) { // the end of record or input?",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If the end of record or input?",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (endIndex < 0 || endIndex < 0) { // value is the end of record or input?",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (endIndex < 0 || endIndex < 0) { // not found... no end of record or input?",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (endIndex < 0 || endIndex < 0) { // EOF... no end of record or input?",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If this is last value: must shuffle both regular properties?",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (endIndex > 0 && endIdx < 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If this is first item in the end of record or input...",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of input? can't be negative",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (endIndex < 0 || endIndex < 0) { // this is last value end of record or input?",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (endIndex < 0) { // end of record or input? Unlikely but...",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (endIndex < 0 || endIndex < 0) { // is the end of record or input...",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If values are the end of record or input...",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If this is first item in the end of record or input?",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (endIndex < 0 || endIndex < 0) { // value as is the end of record or input...",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (endIndex < 0 || endIndex < 0) { // value as is the end of record or input?",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If we can use the end of record or input...",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (endIndex < 0) { // end of record or input? can't be negative",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (endIndex < 0 || endIndex < 0) { // not in the end of record?",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (endIndex == -1) { // end of record or input?",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (endIndex > endIndex) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If it's no end of record or input?",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (endIndex < 0 || endIndex < 0) { // not in the end of record or input?",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (endIndex < 0 || endIndex < 0) { // this is the end of record or input...",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (endIndex < 0 || endIndex < 0) { // last value is the end of record or input?",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record or input... no index start marker",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (startIndex < 0 || endIndex < 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (endIndex < 0 || endIndex < 0) { // must shuffle both regular properties and the end of record?",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If this is the end of record or input...",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If it's no end of record or input...",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of input? Just flush...",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (endIndex < 0 || endIndex < 0) { // 1)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of input? can't be more than one",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (startIndex < 0 || endIndex < 0) { // end of record or input...",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (endIndex < 0 || endIndex < 0) { //axon: must shuffle both regular properties and the end of record or input...",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If this is last value end of record or input...",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If we are the end of record or input...",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (endIndex < 0 || endIndex < 0) { // must shuffle both regular properties and end of record or input...",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (endIndex < 0 || endIndex < 0) { // last value is the end of record or input...",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If we are the end of record or input?",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If this is last value: end of record or input?",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (endIndex < 0 || endIndex < 0) { // must shuffle both regular properties and the end of record or input...",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (endIndex < 0 || endIndex < 0) { // end of record? Unlikely but...",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If it's end of record or input?",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If we can use the end of record or input?",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If not in the end of record or input...",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (endIndex < 0 || endIndex < 0) { // If we can access... but end of record or input?",
                "identical": false
            }
        ],
        "buggy_line": "if (endIndex < 0) {",
        "fixed_line": "if ((endIndex < 0)  || (endIndex < startIndex)) {"
    },
    "JacksonDatabind-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ((kind == String.class) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (kind == String.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == .util.Date.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ((kind == Integer.class) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == Boolean.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ((kind == String.class) || (raw == Object.class)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (id == null || raw == String.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ((kind == Integer.TYPE) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (kind == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || ClassUtil.isBogusClass(raw)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (kind == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == .sql.Date.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Boolean.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Boolean.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || ClassUtil.isBogusClass(raw)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == String.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class == Object.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == .util.Date.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (kind == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == String.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Integer.class == Object.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (cls == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (cls == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ((kind == null) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class == String.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Integer.class == String.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == .util.UUID || raw == String.class) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ((kind == Long.class) || (raw == String.class)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == .sql.Timestamp.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Map.class == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Map.class == Object.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == CharSequence.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ((kind == Integer.class) || (raw == Object.class)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == .sql.Date.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == Integer.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Double.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Long.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == .util.Date.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || raw == .sql.Timestamp.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw) || String.class == Object.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == Integer.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Map.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Integer.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Long.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == Integer.class) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == raw) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (id == Integer.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == raw) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class == Boolean.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Double.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Integer.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Integer.class == Boolean.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == UUID.class) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == .sql.Date.class) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == raw) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Boolean.TYPE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == UUID.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || String.class == Date.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == raw) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ((kind == Integer.TYPE) || (raw == Object.class)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == declaredType.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == Character.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( .sql.Date.class == String.class) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == Long.class) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (type == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ((kind == Integer.class) || raw == String.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == Date.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Iterator.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == Double.class) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( .sql.Timestamp.class.isAssignableFrom(raw) || Boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == Long.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Long.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw == List.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ((kind == String.class) || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || ClassUtil.isJacksonClass(raw)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == JsonToken.VALUE_NULL || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Boolean.class == UUID.class) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == Date.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || Integer.class == Long.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( .sql.Date.class.isAssignableFrom(raw) || Boolean.class == UUID.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( .util.Date.class.isAssignableFrom(raw) || String.class == ((Class<?>) raw)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Lang-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return foundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return foundDigit && !foundDigit;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return foundDigit || !hasExp;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return foundDigit && !isExp;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u2028';",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u0080 && !foundDigit;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return foundDigit - !hasExp;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u0080 && !foundDigit;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u2028';",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u0080 && !foundDigit;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L') ? false : foundDigit;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u2028';",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L') ? true : foundDigit;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u2029';",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u3000';",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000';",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u0080 && !foundDigit;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\t';",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u2028';",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\t');",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000';",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000') continue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\n' || !foundDigit;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000');",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return foundDigit | !hasExp;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u2029';",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u2029';",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000') continue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u00';",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return foundDigit && !hasRawClass(chars[i] ? 'a' + 1) : '\\u;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u2029;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u00a' || foundDigit;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return foundDigit && !hasRawClass(chars[i] ? 'a' + 1) : false;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u2029;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return foundDigit && !hasList(chars[i] == 'L') ? true : foundDigit;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\t');",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u3000') continue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\t';",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000') ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u00a' || foundDigit;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000') ? true : false;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000') ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u3000';",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L') ? false : foundDigit;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return foundDigit && !hasList(chars[i] == 'L') ? false : foundDigit;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\t');",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u3000') ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u3000');",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u00';",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000') ? false : foundDigit;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u00';",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u2029';",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000');",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u00a' || foundDigit;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\n' || !foundDigit;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\t';",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\n' || !foundDigit;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u2029;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return foundDigit && !has(chars[i] == 'L') ? true : foundDigit;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000') ? true : false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return foundDigit && !hasRawClass(chars[i] ? 'a' : '\\u;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000') ? false : foundDigit;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u20b;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000') return true;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\t');",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u3000') ? true : false;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return foundDigit && !hasList(chars[i] ? 'a' + 1) : false;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return foundDigit && !hasRawClass(chars[i] ? 'a' + 1]) : false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u3000') ? false : foundDigit;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000') ? -1 : false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u3000') ? false : foundDigit;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return foundDigit && !hasAscent(chars[i] == '\\n' || chars[i] == '\\u2028';",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L') ? true : foundDigit;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return foundDigit && !hasList(chars[i] ? 'a' + 1]) : false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return foundDigit && !hasList(chars[i] ? 'a' + 1) : '\\u;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\n';",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return foundDigit && !has(chars[i] == 'L') ? false : foundDigit;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L') ? !foundDigit : false;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u3000') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return foundDigit && !hasAscent(chars[i] == '\\n' || chars[i] == '\\r' || !foundDigit;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L') ? true : false;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u3000') continue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return foundDigit && !hasRawClass(chars[i] == 'L' || chars[i] == '\\u20b;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return foundDigit && !hasAscent(chars[i] == 'L' || chars[i] == '\\u3000') ? -1 : false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u3000') ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return foundDigit && !hasAscent(chars[i] == '\\n' || chars[i] == '\\r';",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return foundDigit != -1 && !hasExp;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return foundDigit && !hasList(chars[i] ? 'a' : '\\u;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u3000') ? true : false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u00a' || foundDigit;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return foundDigit && !hasList(chars[i] == '\\n' || chars[i] == '\\u2028';",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return foundDigit && !hasAscent(chars[i] == '\\n' || chars[i] == '\\r' || type == 'Z';",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return foundDigit && !hasList(chars[i] == 'L' || chars[i] == '\\u3000') ? true : foundDigit;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return foundDigit && !has(chars[i] == 'L' || chars[i] == '\\u00';",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return foundDigit && !hasAscent(chars[i] == '\\n' || chars[i] == '\\r' || c == 'Z';",
                "identical": false
            }
        ],
        "buggy_line": "return foundDigit && !hasExp;",
        "fixed_line": "return foundDigit && !hasExp && !hasDecPoint;"
    },
    "JacksonDatabind-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "paramName = candidate.findImplicitParamName(1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paramName = candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paramName = candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paramName = candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paramName = candidate.findImplicitParamName(paramName) ? param.getName() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paramName = candidate.findImplicitParamNameFromSimple(paramName);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paramName = candidate.findImplicitParamName(paramName) ? paramDef.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paramName = candidate.findImplicitParamNameFromSimple(paramName) ? paramDef.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paramName = candidate.findImplicitParamNameFromExpression(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paramName = candidate.findImplicitParamNameFromSimple(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paramName = candidate.findImplicitParamName(\"\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paramName = candidate.findImplicitParamName(paramName) ? param.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paramName = candidate.findImplicitParamNameExpression(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paramName = candidate.findImplicitParamValueDeserializer(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paramName = candidate.findImplicitParamName() + \".\" + prop.getName();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paramName = candidate.findImplicitParamNameFromExpression(paramName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getName() : null;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paramName = candidate.findImplicitParamName() != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getFullName() : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paramName = candidate.findImplicitParamNameFrom(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paramName = candidate.findImplicitParamName(name);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paramName = candidate.findImplicitParamName(paramName) ? param.getValue() : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paramName = candidate.findImplicitParamNameFromExpression(paramName) ? paramDef.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getValue() : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paramName = candidate.findImplicitParamName(paramName) + \".\" + prop.getName();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paramName = candidate.findImplicitParamName() ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName) ? paramDef.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paramName = candidate.findImplicitParamName(paramName) ? null : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paramName = candidate.findImplicitParamName() == null ? String.valueOf(paramName) : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paramName = candidate.findImplicitParamName() + \".\" + paramDef.getName();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paramName = candidate.findImplicitParamNameExpression(paramName);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paramName = candidate.findImplicitParamName() != null ? candidate.getName() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paramName = candidate.findImplicitParamNameSuffix(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paramName = candidate.findImplicitParam(paramName) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"set\" : candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"?\" : candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"?\" : candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paramName = candidate.findImplicitParamValueDeserializer(paramName);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paramName = candidate.findImplicitParamName(paramName) ? paramDef.getName() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getParameterCount() : 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getDeclaringClass().getName() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"?\"\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"null\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"?\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paramName = candidate.findImplicitParamName() ? paramDef.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paramName = candidate.findImplicitParamName(paramName) ? param.getFullName() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paramName = candidate.findImplicitParamName() ? paramDef.getName() : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"set\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paramName = candidate.findImplicitParamName(paramName) + \":\" + param.getName();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \" .util.ArrayList\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paramName = candidate.findImplicitParamName(name) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paramName = candidate.findImplicitParamName(paramName) + \".\" + param.getName();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getType() : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paramName = candidate.findImplicitParamName() == null ? String.valueOf(candidate) : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \" .util.ArrayList\" : candidate.findImplicitParamName());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"?\" : candidate.findImplicitParamName(\"\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName) ? param.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"parameter\" : candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paramName = candidate.findImplicitParamNameFrom(paramName);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"set\" : candidate.findImplicitParamName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName) ? param.getName() : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paramName = candidate.findImplicitParamName(paramName) + 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paramName = candidate.findImplicitParamName() == null ? DEFAULT_LIST : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"\" : candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.findImplicitParamName() : 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paramName = candidate.findImplicitParamName() ? null : candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paramName = candidate.findImplicitParamName() ? String.valueOf(candidate.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \" .util.Date\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"Literal\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paramName = candidate.findImplicitParamNameFromSimple(paramName) ? param.getName() : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paramName = candidate.findImplicitParamName(0L, param, injectId);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paramName = candidate.findImplicitParamName(1) != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"null\" : candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paramName = candidate.findImplicitParamNameSuffix(paramName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"?\" : candidate.findImplicitParamName(1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paramName = candidate.findImplicitParamNameFromExpression(paramName) != null ? candidate.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"?\"\" : candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getParameterCount() : 0L;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"parameter\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paramName = candidate.findImplicitParamName1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paramName = candidate.findImplicitParamName(paramName) != null ? candidate.getDefault() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paramName = candidate.findImplicitParamNameSuffix();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paramName = candidate.findImplicitParamName() ? null : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paramName = candidate.findImplicitParamName() != null ? candidate.getValue() : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"Literal\" : candidate.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paramName = candidate.findImplicitParamNameSuffix() != null ? candidate.findImplicitParamName() : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paramName = candidate.findImplicitParamNameExpression(paramName) != null ? candidate.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paramName = candidate.findImplicitParamName() != null ? candidate.getFullName() : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paramName = candidate.findImplicitParamNameValue(paramName);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"\" : candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paramName = candidate.findImplicitParamName() == null ? name : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \" .util.Expression\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paramName = candidate.findImplicitParamName() != null ? candidate.getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paramName = candidate.findImplicitParamName() == null ? \"unknown\" : candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paramName = candidate.findImplicitParamNameFromSimple(paramName) + 1);",
                "identical": false
            }
        ],
        "buggy_line": "paramName = candidate.findImplicitParamName(0);",
        "fixed_line": "paramName = candidate.paramName(0);"
    },
    "Closure-168": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (n.isFinal() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (n.isFinal()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (n.isFinal() && n.getFirstChild() == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (n.isTainted() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (n.isFinal() && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (data.getFirstChild() != null && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (n.isReturn() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (n.getFirstChild() == null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (n.isUnique() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().size() > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (n.getFirstChild() != null && n.getSecond().length() > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (n.isUnclosed() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (data.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().length() > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (n.isescaped() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (n.isTainted() && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild() < 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (n.isFinal() && n.getFirstChild() != 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (n.isEnum() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (n.isExpression() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (n.isFunction() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (n.isTainted() && n.getFirstChild() == 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (n.isRequired() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (n.getSecond() != null && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (n.isFinal() && n.getName().equals(data.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (n.isFinal() && n.getFirstChild() == null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (n.getFirstChild() != null && n.isFinal()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (n.isArray() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (n.isElse() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (n.isPresent() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (n.isFinal() && n.getFirstChild() < 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (n.isAccessible() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (n.isZero() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (n.isScope() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (n.isUsedOverTainted() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (n.isBinary() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().equals(data.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (n.is strip() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (n.isCharacter() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (data.getFirstChild() == null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (n.isInterface() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (n.getFirstChildCount() == 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (n.isMixed() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (n.isAndSet() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (n.isArrayType() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (n.getFirstChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (n.getFirstChild() != null && n.getName().equals(data.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (n.isescaped() && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (n.getFirstChild() != null && n.getName().length() > 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (n.getFirstChild() != null && n.getFirstChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (n.isAsync() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (data.getFirstChild() != null && n.getFirstChild().size() > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (n.isTable() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (n.isRetain() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (data.getFirstChild() != null && n.getSecond().length() > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (n.isDate() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (n.isInline() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (n.getLastChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (n.isescaped() && n.getFirstChild() == 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (n.isTainted() && n.getFirstChild() == null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (n.isBody() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (n.isReturn() && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (n.isVariable() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (n.getFirstChild() != null && n.getType().equals(data.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (n.isTainted() && n.getFirstChild() != 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (n.isFinal() && n.getFirstChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (data.getFirstChild() != null && n.getFirstChild().length() > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (n.getLastChildCount() == 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (n.isStacking()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (n.getFirstChild() != null && n.getFirstResult() > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().next()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().equals(data.getParent())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (n.getNext() != null && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (n.getFirstChild() != null && n.getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (n.getFirstChild() != null && n.getName().equals(\"application/x-order\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().equals(target)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (n.isReturn() && n.getFirstChild() == 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (n.isFirstChild() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (n.isUnique() && n.getFirstChild() == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (n.isUsedOverTainted() && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (n.isgetClass() && n.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if(data.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (n.getSecond().getType() == Type.RECORD) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (n.getFirstChild() != null && n.getSecond().booleanValue() > 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (n.isReturn() && n.getFirstChild() != 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (n.isEnum() && n.getFirstChild() == null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (data.getFirstChild() != null && n.getFirstChild() < 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().equals(dataType)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().equals(data.getToken())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (n.getSecond() != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (n.isEnum() && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (StringUtils.isNotEmpty(n.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (n.isUnclosed() && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().intValue() > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (n.isFinal() && n.getValue() != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().isFinal()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (n.getClass().isArray() && n.getFirstChild() == 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().equals(data)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (t.getScopeDepth() <= 2) {",
        "fixed_line": "if (t.getScopeDepth() <= 1) {"
    },
    "JacksonDatabind-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "found = _prop.getName();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "found = _propsInOrder[_findFromOrdered(prop.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "found = _elementInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "found = _annotationIntrospector.findFromOrdered(prop);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "found = value.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "found = _property.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "found = _propsInOrder[_findFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "found = _propsInOrder[_findFromOrdered(key) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "found = _propsInOrder[_findFromOrdered(prop);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "found = _bean.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "found = _properties.containsKey(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "found = _idInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "found = _prop.getFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "found = _beanProperties.findFromOrdered(prop);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "found = _propsInOrder[_findFromOrdered(prop) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "found = _beanTypeInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "found = _propertyName.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "found = _prop.hasFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "found = _prop.getParameterFromOrdered(key);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "found = _properties.put(key, prop.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "found = _prop.getFromOrdered(key);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "found = _tInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "found = _collectionInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "found = _propsInOrder[_findFromOrdered(key) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "found = _propsInOrder[_findFromOrdered(prop) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "found = _properties.findFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "found = _prop.getName().equals(name);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "found = _prop != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "found = _prop.getFromOrdered(key) != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "found = _ctorInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] == null ? \"?\" : prop.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "found = _beanProperties.findFromOrdered(prop.getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "found = _elementInOrder[_findFromOrdered(prop.getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] != null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "found = _elementInOrder[_findFromOrdered(prop)] ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "found = _propInOrder[_findFromOrdered(key) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "found = _parserInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "found = _beanInOrder[_findFromOrdered(prop)] != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "found = key.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null ? String.valueOf(key) : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "found = _prop.getValue();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop.getName());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "found = name.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] == null ? \"?\" : prop.getName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] == null ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "found = _beanProperties.findFromOrdered(key);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(key) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] != null) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "found = _propsInOrder[_findFromOrdered(key) ? entry.getName() : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "found = _prop.getParameterFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "found = _elementInOrder[_findFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "found = _propsInOrder[_findFromOrdered(prop.getName()) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "found = _propInOrder[_findFromOrdered(key) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "found = _elementInOrder[_findFromOrdered(key) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] = null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "found = _beanDesc.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(key) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "found = _properties.get(key) != null ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "found = _prop.equals(key) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] == null ? \"\" : prop.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "found = _propsInOrder[_findFromOrdered(prop.getName()));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null ? prop.getType() : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] == null ? \"true\" : key.getClass().getName());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null ? key : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null ? value.toString() : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "found = _prop.getName().equals(key) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "found = _elementInOrder[_findFromOrdered(prop)] == null ? \"?\" : prop.getName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "found = _idInOrder[_findFromOrdered(key) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "found = _elementInOrder[_findFromOrdered(prop)] != null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "found = _annotationIntrospector.findFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "found = _idInOrder[_findFromOrdered(prop.getName());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "found = propName.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "found = _prop.getFromOrdered(key) + prop.getName();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] == null ? DEFAULT_LIST : prop.getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "found = _prop.withFromOrdered(key) ? prop.getName() : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] == null ? \"\" : prop.getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "found = _elementInOrder[_findFromOrdered(prop) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null ? prop.getValue() : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "found = _elementInOrder[_findFromOrdered(key) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "found = _simpleName.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "found = _prop.getFromOrdered(key) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "found = _collectionInOrder[_findFromOrdered(key) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] != null ? key.getName() : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "found = _bean.getClass().getAnnotation(prop.getName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "found = _prop.getParameterTypes().length == 0) ? null : prop.getName();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null ? key.getValue() : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "found = _prop.getName().equals(name) ? null : prop.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "found = _propsInOrder[_findFromOrdered(prop)] != null ? key.getName() : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "found = _propertyNameInOrder[_findFromOrdered(prop)] != null ? key.getValue() : null;",
                "identical": false
            }
        ],
        "buggy_line": "found = key.equals(prop.getName());",
        "fixed_line": "found = key.equals(_hashArea[i-1]);"
    },
    "Closure-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(p);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(p) + 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(first, p + 1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Context rhsContext = Context.getConfig().getInteger(p) + 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Context rhsContext = Context.getConfig().getInteger(p) + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(first, p - 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Context rhsContext = Context.getDeviceManager().getInitialState(p);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Context rhsContext = Context.getConfig().getInitialState(p);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Context rhsContext = Context.getConceptService().getParent(p);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(first, p) + 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(first, p) + 1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(first, p) - 1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Context rhsContext = Context.getConceptService(p) + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(p) + 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(p) + p;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Context rhsContext = Context.getConfig().getSerializer(p) + 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Context rhsContext = Context.getCommandContext().getHistoryManager();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.saveExpression\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Context rhsContext = Context.getOrderService().getState(p);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(CxxGrammarImpl.OTHER);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Context rhsContext = Context.getConfig().getState(p) + 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Context rhsContext = Context.getConfig().getInitialState(p) + 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Context rhsContext = Context.getPermissionsManager();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.saveUser\"));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Context rhsContext = Context.getConfig().getInitialPage(p);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Context rhsContext = Context.getConfig().getintersects(p) + 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Context rhsContext = Context.getConfig().getNextState(p);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.saveState\", p);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Context rhsContext = Context.getConfig().getParent(p);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"h\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.saveState\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Context rhsContext = Context.getConfig().getintersects(p);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Context rhsContext = Context.getConfig().getOpenmrsConstants.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Context rhsContext = Context.getConceptService().getState(p);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(Integer.valueOf(p) + 1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(p + 1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Context rhsContext = Context.getConfig().getDouble(p) + 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.saveUser(p);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Context rhsContext = Context.getConfig().getInteger(p);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Context rhsContext = Context.getConfig().getLong(p) + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Context rhsContext = Context.getConfig().getConcept(p) + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(Integer.valueOf(p));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Context rhsContext = _dotsPerPoint;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Context rhsContext = Context.getConceptService().saveC(p);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Context rhsContext = Context.getConfig().getProtocol(p) + 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Context rhsContext = Context.getConceptService().createRest(p);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Context rhsContext = Context.getConfig().getLong(p);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Context rhsContext = Context.getConfig().getSerializer(p);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(p - 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Context rhsContext = Context.getConfig().getNextState(p) + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Context rhsContext = Context.getConfig().getState(p);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Context rhsContext = Context.getCommandContext().getParent();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Context rhsContext = Context.getState(p) + 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Context rhsContext = Context.getDeviceManager().getInitialState(p) + 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Context rhsContext = Context.getConfig().getLong(\"h\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(first, p) - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Context rhsContext = Context.getConfig().getNextAstNode(p) + 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Context rhsContext = Context.getDeviceManager().getParent(p);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Context rhsContext = Context.getConfig().getParent();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Context rhsContext = Context.getDeviceService().getState(p);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Context rhsContext = Context.getConfig().getActionManager();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Context rhsContext = Context.getConfig().getInteger(p + 1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Context rhsContext = this.OTHER;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Context rhsContext = Context.getConfig().getView(p) + 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Context rhsContext = Context.getConfig().getParent(p) + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(Integer.FALSE);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Context rhsContext = Context.getAuthenticatedUser();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.save\"));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Context rhsContext = Context.getConfig().getNextSibling(p);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Context rhsContext = Context.getCommandContext() != 0 ? p : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Context rhsContext = Context.getCommandContext();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Context rhsContext = Context.getConfig().getInitialState(p) + 1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Context rhsContext = Context.getConfig().getintersects(p) + 1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Context rhsContext = Context.getServerContext().getParent();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Context rhsContext = Context.getConfig().getNextPosition(p) + 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Context rhsContext = Context.getServerContext();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Context rhsContext = Context.getConfig().getActiveView(p) + 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Context rhsContext = Context.getConfig().getInteger(p - 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Context rhsContext = Context.getLocationService().getState(p);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Context rhsContext = Context.getCalendarManager().getParent(p);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Context rhsContext = Context.getConfig().getBoolean( event.getParent());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Context rhsContext = Context.getConfig().getDouble(p);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Context rhsContext = Context.getCommandContext() != null && context.getIncludeAll()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.saveUser\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(first);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Context rhsContext = Context.getConfig().getBoolean( event.getProtocolName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Context rhsContext = Context.getConfig().getNextSibling(p) + 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Context rhsContext = Context.getConfig().getintersects(p - 1, p - 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Context rhsContext = Context.getService(RestConst.OTHER) + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Context rhsContext = Context.getConfig().getHistoryManager();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Context rhsContext = Context.getCommandContext() != null ? p : id;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Context rhsContext = Context.getDeviceManager();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(Integer.valueOf(p) + 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(first, p + 2);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(Integer.valueOf(p) + p;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.saveGroup\", p);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Context rhsContext = Context.getConfig().getProtocol(p);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(x + 1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Context rhsContext = Context.getConfig().getBoolean(\"database.saveExpression\", p);",
                "identical": false
            }
        ],
        "buggy_line": "Context rhsContext = Context.OTHER;",
        "fixed_line": "Context rhsContext = getContextForNoInOperator(context);"
    },
    "Math-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(RIGHT) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(branches) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(containing) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(true) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - 1));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(desc) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImag()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(other) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0 : 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits() ? 0 : 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits()) ? 0 : 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ret = (Double.doubleToRawLongBits(l) - Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(main) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(box) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(}') == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImagbinary()));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary)));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits ? 0 : 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImag()) == Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getReal() - 1)));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits() ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary()) == Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ret = (Double.doubleToRawLongBits(l /= 1000) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getReal() - 1));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Long.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(RIGHT) == Double.doubleToRawLongBits(rhs.getImagbinary()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() == Double.doubleToRawLongBits(l));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getValue()) == Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits(l));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getValue()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Boolean.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary()) == Double.doubleToRawLongBits());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ret = (Double.doubleToRawLongBits(l, 9) == Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Double.doubleToRawLongBits(rhs.getImaginary()) % 1000;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(RIGHT) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0 : 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Double.doubleToRawLongBits(rhs.getImaginary()) > 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits() ? 0 : Float.doubleToRawLongBits(l));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) % 1000;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Double.doubleToRawLongBits(l));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Long.doubleToRawLongBits(l));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits ? 0 : 0.0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getNaN()) == Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() == Double.doubleToRawLongBits());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(RIGHT) == Double.doubleToRawLongBits(rhs.getImaginary)));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? sz.doubleToRawLongBits() : 0.0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImag()) > 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(branches) == Double.doubleToRawLongBits(rhs.getImagbinary()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - 2));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(branches) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0 : 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Double.doubleToRawLongBits(rhs.getImaginary()) / 1000;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary()) == Double.doubleToRawLongBits(other;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ret = (Double.doubleToRawLongBits(l -> (Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits()) ? 0 : 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? \"<\" : id;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(true) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0 : 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.get ch()) == Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ret = (Double.doubleToRawLongBits(desc) + (Double.doubleToRawLongBits(rhs.getImaginary()) == Double.doubleToRawLongBits());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImag()) % 1000;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0.0 : 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary()) == Double.doubleToRawLongBits ? 0 : 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImag()) == Double.doubleToRawLongBits(other;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getMask()) == Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.get ch()) == Double.doubleToRawLongBits());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getRealed()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ret = (Double.doubleToRawLongBits(l) + Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary)));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImag()) == Double.doubleToRawLongBits());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? Float.doubleToRawLongBits() : 0.0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0 : 1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ret = (Double.doubleToRawLongBits(l) + (Double.doubleToRawLongBits(rhs.getImaginary()) == Double.doubleToRawLongBits());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getValue()) == Double.doubleToRawLongBits(l,Dialect.getImaginary()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits() ? 0 : 1));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits ? 0 : 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(containing) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0 : 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 0 : false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Double.doubleToRawLongBits(rhs.getImaginary)));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getReturnType()) == Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - ctx.doubleToRawLongBits(l));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - Double.doubleToRawLongBits(rhs.getImaginary()) + 1));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal() - ctx.doubleToRawLongBits()) % 1000;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? sz.doubleToRawLongBits() : id;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(branches) == Double.doubleToRawLongBits(rhs.getImaginary)));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits ? 0 : 1));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary())));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? 1 : 0.0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImag()) != Double.doubleToRawLongBits(other));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? \"\" : 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImaginary) == Double.doubleToRawLongBits() ? 0 : 1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(true) == Double.doubleToRawLongBits(rhs.getImaginary)));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(l));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(value) == Double.doubleToRawLongBits(rhs.getImaginary()) ? Float.doubleToRawLongBits() : id;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ret = (Double.doubleToRawLongBits(l, Double.doubleToRawLongBits(rhs.getImagModels()));",
                "identical": false
            }
        ],
        "buggy_line": "ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));",
        "fixed_line": "ret = (real == rhs.real) && (imaginary == rhs.imaginary);"
    },
    "Gson-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 0)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || last == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value > Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < Short.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || style == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value instanceof Long.MIN_VALUE)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || type == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || last == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < negative)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || initial == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < 0)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || t == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < Integer.MIN_VALUE)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 0);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || tag == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value <Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE ||More == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || a == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value > Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value > Short.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || priority == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < last) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && last == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE ||status == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < Float.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || isLength(value)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || style == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || Boolean.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < Short.MIN_VALUE)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || charset == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || type == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value instanceof Integer)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || ss == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || keyType == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value <Float.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || current == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || isLength(value)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 0.0)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || max == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value instanceof Integer)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || avail == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || a == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < parsedBytes) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE ||More == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value instanceof Long.MIN_VALUE || last == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || first == Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (last < NUMBER_CHAR_DIGIT && fitsInLong && last == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value > Boolean.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < negative)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < Character.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value <Token.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (last == NUMBER_CHAR_DIGIT && bytes != null && value instanceof Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value & Long.MIN_VALUE - 1)) != 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value > Short.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value <ializedType.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && last == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < precision)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < NumberType.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || isBoolean)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value instanceof Long.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value instanceof Float)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < 0.0)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || Character.isDigit(value)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || isBoolean)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value instanceof Float)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value <Number)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 7)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && value instanceof Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < size)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value > 255)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 500)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < parsedBytes) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE ||Binary_LONG)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || last == Integer.MIN_VALUE)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (last == NUMBER_CHAR_DIGIT && bytes != null && value instanceof Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 0)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value <Values.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || isInteger)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (last < NUMBER_CHAR_DIGIT && fitsInLong && last == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value & Long.MIN_VALUE - 1)) < 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value instanceof Long.MIN_VALUE || value < 0)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || \"\".equals(value)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 1)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < 10000ED_LONG)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < 0);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MAX_VALUE || value < last) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && value != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || value < L) {",
                "identical": false
            }
        ],
        "buggy_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {",
        "fixed_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {"
    },
    "Lang-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "Calendar c = new GregorianCalendar();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Calendar c = new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Calendar c = new GregorianCalendar(UTC);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Calendar c = new GregorianCalendar(format);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Calendar c = new GregorianCalendar(date.getTime());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Calendar c = new GregorianCalendar(date, true);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Calendar c = new GregorianCalendar(this);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Calendar c = new GregorianCalendar(formatDate(date));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Calendar c = new GregorianCalendar() {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Calendar c = new GregorianCalendar[date.getTime()];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Calendar c = new GregorianCalendar(formatXMLTime(date));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Calendar c = new GregorianCalendar(year);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Calendar c = new GregorianCalendar(String.format(date));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Calendar c = new GregorianCalendar(format,date);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Calendar c = new GregorianCalendar(String.valueOf(date));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Calendar c = new GregorianCalendar(timeZone, new GregorianCalendar());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Calendar c = new GregorianCalendar(DATE_FORMAT);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Calendar c = new GregorianCalendar(false);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Calendar c = new GregorianCalendar().format(date);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Calendar c = new GregorianCalendar(format, mTimeZone.getTimeZone());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Calendar c = new GregorianCalendar(FORMAT_TIME_FORMAT);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Calendar c = new GregorianCalendar(format, date);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Calendar c = new GregorianCalendar(format, position);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Calendar c = new GregorianCalendar(format, file);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Calendar c = new GregorianCalendar(format, {}.getTime()) ? new GregorianCalendar() : new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Calendar c = new GregorianCalendar(UTC_FORMAT);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Calendar c = new GregorianCalendar(date != null ? formatDate(date) : new GregorianCalendar();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Calendar c = new GregorianCalendar(timeZone, new GregorianCalendar[date.getTime()])];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Calendar c = new GregorianCalendar(DATE_AND_TIME_FORMAT);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Calendar c = new GregorianCalendar(format, toTimeZone()) ? new GregorianCalendar() : new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Calendar c = new GregorianCalendar(timeZone);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Calendar c = new GregorianCalendar(PRECISE_TIME_FORMAT);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Calendar c = new GregorianCalendar(TimeZone.getTimeZone());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Calendar c = new GregorianCalendar(date != null ? formatDate(date) : new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Calendar c = new GregorianCalendar(date, pos);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Calendar c = new GregorianCalendar(format, mTimeZone);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Calendar c = new GregorianCalendar(timeZone, new GregorianCalendar[date.getTime()]));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Calendar c = new GregorianCalendar(format, wTimeZone);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Calendar c = new GregorianCalendar(format, {});",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Calendar c = new GregorianCalendar(date != null ? formatDate(date) : new GregorianCalendar[date.getTime()];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Calendar c = new GregorianCalendar(formatDate) ? formatXMLTime(date.getTime()) : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.format(date));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Calendar c = new GregorianCalendar(timeZone, new GregorianCalendar[date.getTime()];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Calendar c = new GregorianCalendar(DATE_FORMAT, String.valueOf(date));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Calendar c = new GregorianCalendar(date, false);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Calendar c = new GregorianCalendar(format,OF_DAY);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Calendar c = new GregorianCalendar(Arrays.asList(date));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime() != 0L ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime() > 0 ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Calendar c = new GregorianCalendar(time);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Calendar c = new GregorianCalendar(formatDate);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Calendar c = new GregorianCalendar(FORMAT_TIME_FORMAT, String.valueOf(date));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0)).getTime() != 0L ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Calendar c = new GregorianCalendar(timeZone, new GregorianCalendar() {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Calendar c = new GregorianCalendar(formatDateLength(date));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Calendar c = new GregorianCalendar(format, wTimeZone.getTimeZone());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Calendar c = new GregorianCalendar(FORMAT_OF_DAY, String.valueOf(date));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Calendar c = new GregorianCalendar(format, time);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Calendar c = new GregorianCalendar(formatDate) ? formatTime(date.getTime()) : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0)));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Calendar c = new GregorianCalendar(format, file.getTime());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Calendar c = new GregorianCalendar(DATE_AND_TIME_FORMAT, String.valueOf(date));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Calendar c = new GregorianCalendar(format, {}.getTime());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Calendar c = new GregorianCalendar(format, JSON_FORMAT);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Calendar c = new GregorianCalendar(date, null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0)).getTime() <= 0L ? DEFAULT_TIME_FORMAT : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.format(date, true));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Calendar c = new GregorianCalendar(format.getTime());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0)).getTime() > 0 ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime()) != 0L ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime()) != null ? formatDate(date);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Calendar c = new GregorianCalendar(format, JSON_OF_DAY);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0) ? formatDate(date) : null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Calendar c = new GregorianCalendar(formatXMLTime(date.getTime()) > 0 ? new GregorianCalendar() : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime() <= 0L ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0)).getTime()) != 0L ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Calendar c = new GregorianCalendar(formatDate) ? formatXMLTime(date) : new GregorianCalendar();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Calendar c = new GregorianCalendar(name);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Calendar c = new GregorianCalendar(formatXMLTime(date.getTime()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime() <= 0L ? DEFAULT_TIME_FORMAT : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Calendar c = new GregorianCalendar(formatString(date));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Calendar c = new GregorianCalendar(timeZone, new GregorianCalendar[date.getTime()])]();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime() <= 0 ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0)).getTime() <= 0L ? DEFAULT_TIME_FORMAT : null);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0)).getTime());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Calendar c = new GregorianCalendar(format, mTimeZone.getTimeZone(), date);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Calendar c = new GregorianCalendar(format, {}.getTime()) ? new GregorianCalendar() : new GregorianCalendar();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Calendar c = new GregorianCalendar(FORMAT_OF_DAY);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0)).getTime()) != null ? formatDate(date : new GregorianCalendar());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Calendar c = new GregorianCalendar(date != null ? formatDate(date) : new GregorianCalendar()[0];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Calendar c = new GregorianCalendar(timeZone, new GregorianCalendar[date.getTime() - 1])];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDate(date, new ParsePosition(0)).getTime() != 0 ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Calendar c = new GregorianCalendar(date != null ? formatDate(date) : new GregorianCalendar());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Calendar c = new GregorianCalendar(ISO8601Utils.parseDateTime(date, new ParsePosition(0) ? formatDate(date) : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Calendar c = new GregorianCalendar(date != null ? formatDate(date) : new GregorianCalendar(date.getTime()));",
                "identical": false
            }
        ],
        "buggy_line": "Calendar c = new GregorianCalendar(mTimeZone);",
        "fixed_line": "Calendar c = new GregorianCalendar(mTimeZone, mLocale);"
    },
    "Closure-62": {
        "fixes": [
            {
                "k": 1,
                "patch": "&& 1 == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& 1 == charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "&& 0 <= ch && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "&& 1 == charno && charno < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "&& 0 <= charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "&& 1 == charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "&& 0 <= charno && Stringno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "&& 0 <= charno && charno == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "&& ch == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "&& 0 <= Integer.MAX_VALUE && Stringno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "&& 0 <= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "&& 0 <= charno && charno < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "&& 0 <= Integer.MAX_VALUE && Stringno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "&& 0 <= expected && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "&& 1 < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "&& 0 <= charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "&& 0 <= Integer.MAX_VALUE && char != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "&& 0 <= charno && sourceExcerpt.length() > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) == '\\n';",
                "identical": false
            },
            {
                "k": 24,
                "patch": "&& 0 <= Stringno && char != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "&& 0 <= Integer.MAX_VALUE && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "&& 0 <= charno && char == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "&& 0 <= sourceExcerpt.length() - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) != '\\n') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) == '\\'') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "&& 0 <= '*' && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "&& ch != charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "&& 0 <= charno && char.charAt(sourceExpert.length() - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "&& charset == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "&& 0 <= charno && char != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "&& 1 != charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "&& 0, charno = sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "&& 0 <= Stringno && char == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "&& 0 <= Integer.MAX_VALUE && Stringno == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "&& i < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "&& 0, sourceExcerpt.length() - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "&& 0, sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "&& 0 <= ch && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "&& 0 == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "&& 0 == expected && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "&& 0 <= Integer.MAX_VALUE && charno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "&& 0, sourceExpert.length() - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "&& 0 <= charno && char.charAt(sourceExpert.length() - 1) != '\\n') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "&& 0 <= charno && Character.isWhitespace(sourceExcerpt.charAt(0))) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "&& 0 == charno && charno < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "&& 0 <= Integer.MAX_VALUE && Stringno < sourceExpert.length() - 1) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "&& 0 <= encrypted && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "&& 0 <= trimmed && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "&& 0 <= ch && charno < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) != '\\'') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "&& 0 <= charno && Stringno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "&& 0 <= trimmed && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "&& 0 <= Integer.MAX_VALUE && char == sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "&& 0 <= ch && charno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "&& 0 <= charno && char.charAt(sourceExpert.length() - 1) == '\\n';",
                "identical": false
            },
            {
                "k": 60,
                "patch": "&& 1 == charno && charno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "&& wno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "&& 0 <= sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "&& 0 <= charno && char.charAt(sourceExpert.length() - 1) == '\\'') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "&& 0 <= Integer.MAX_VALUE && char == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "&& 0, sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "&& 0 <= sourceExpert.length() - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) == '\\'';",
                "identical": false
            },
            {
                "k": 68,
                "patch": "&& 1 < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "&& 0 <= charno && Stringno < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "&& c <= '/' && charno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) != '\\n';",
                "identical": false
            },
            {
                "k": 72,
                "patch": "&& i == end && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "&& 0 <= ch && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "&& 0 == sourceExcerpt.length() - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "&& 0 <= select && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "&& 0 <= Integer.MAX_VALUE && char != sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "&& 0 <= charno && Character.isWhitespace(sourceExpert.charAt(i))) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) == '\\'');",
                "identical": false
            },
            {
                "k": 79,
                "patch": "&& 0 <= charno && charno > sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "&& ch == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "&& i == 0 ? sourceExcerpt.length() - 1) : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) == '0') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "&& 0 <= expected && charno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "&& 0 <= charno && charno < sourceExpert.length() - 1) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "&& 0 <= Integer.MAX_VALUE && Stringno < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "&& 0 <= charno && Character.isWhitespace(sourceExcerpt.charAt(i))) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "&& 0 <= Integer.MAX_VALUE && charno < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "&& tno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "&& i < sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "&& 0 == sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "&& 0 <= sourceExcerpt.length() + 1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "&& 0 <= Integer.MAX_VALUE && char() < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \"true\" : \"false\";",
                "identical": false
            },
            {
                "k": 94,
                "patch": "&& 0 <= charno && charno > sourceExpert.length()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "&& i == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "&& 0 <= Integer.MAX_VALUE && charno < sourceExpert.length() - 1) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "&& 0, charno = sourceExcerpt.length() - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "&& 0 <= charno && char.charAt(sourceExcerpt.length() - 1) == '\\n');",
                "identical": false
            },
            {
                "k": 99,
                "patch": "&& 0 <= Integer.MAX_VALUE && Stringno < sourceExcerpt.length() - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "&& 0 <= sourceExpert.length()) {",
                "identical": false
            }
        ],
        "buggy_line": "&& 0 <= charno && charno < sourceExcerpt.length()) {",
        "fixed_line": "&& 0 <= charno && charno <= sourceExcerpt.length()) {"
    },
    "Closure-73": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c > 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c <= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c > 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c != 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c >= 0x1f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c >= 0x1f && c <= 0x7) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c >= '0' && c <= '9') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c < 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c >= 0x1f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c > 0x1f || c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c > 0x1f && c <= 0x7) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c == 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c > 0x1f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c <= 0x1f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c > 0x1f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c > 0x1f || c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c > 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c >= 0x40 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c >= 0x1f || c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c >= 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c >= 0x1f && c <= 0xD0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c > 0x1f) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c >= 0x1f && c <= 0x80) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c != 0x1f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c != 0x1f && c <= 0x7) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c > 0x1f || c > 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f)",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f)",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c > 0x1f && c <= 0xD0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF)",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF)",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF)",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x0020) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x0020) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f)",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f)",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7F)",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x0020) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c > 0x7f || c > SURR2_LAST) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF)",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x0020) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7F)",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x0020) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x0020) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x0020) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f)",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c >= 0x1f && c <= 0x7f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7F",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x0020) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x00000040) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f &&",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x80 && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ((c > 0x1f && c <= 0x7) || (c >= 0x80) || c <= 0x7f && c <= 0x7f && c <= 0x6f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x7f && c <= 0x07FF) {",
                "identical": false
            }
        ],
        "buggy_line": "if (c > 0x1f && c <= 0x7f) {",
        "fixed_line": "if (c > 0x1f && c < 0x7f) {"
    },
    "Cli-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "nextLineTabStop = width - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "nextLineTabStop = height - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "nextLineTabStop = (width - width) / 2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "nextLineTabStop = width - 2;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "nextLineTabStop = length - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos + 1) : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos + 1) : 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "nextLineTabStop = n - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "nextLineTabStop = (width - width) / 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "nextLineTabStop = width > -1 ? column.substring(0, pos) : defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "nextLineTabStop = _defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos + 1) : -1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "nextLineTabStop = Math.min(pos - width, height - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "nextLineTabStop = width > -1 ? line.substring(0, pos) : defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "nextLineTabStop = width / 2;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "nextLineTabStop = r - 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "nextLineTabStop = Math.min(pos, width - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "nextLineTabStop = Math.min(width - width, height - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos - 1) : -1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(0, pos) : defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(0, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(0, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "nextLineTabStop = Math.min(nextLineTabStop - width, height - 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "nextLineTabStop = width > 0 ? r.substring(0, pos) : defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "nextLineTabStop = width > -1 ? r.substring(0, pos) : defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(pos + 1) : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "nextLineTabStop = width > -1 ? info.substring(0, pos) : defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "nextLineTabStop = width > -1 ? line.substring(0, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(0, pos) : defaultNewLine + 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(pos + 1) : 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(pos + 1) : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "nextLineTabStop = _text.length - 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "nextLineTabStop = _lastNewLine - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "nextLineTabStop = Math.min(length, width - 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "nextLineTabStop = width > -1 ? bytes.length - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "nextLineTabStop = width > 0 ? r.substring(0, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos - 1) : defaultNewLine;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(pos + 1) : 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(pos + 1) : -1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "nextLineTabStop = width > -1 ? defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "nextLineTabStop = width > -1 ? line.substring(pos + 1) : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "nextLineTabStop = width > -1 ? info.substring(pos + 1) : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "nextLineTabStop = width > -1 ? column.substring(0, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "nextLineTabStop = width > -1 ? r.substring(pos + 1) : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "nextLineTabStop = Math.min(length - width, height - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "nextLineTabStop = width > -1 ? r.substring(0, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "nextLineTabStop = width > -1 ? r.substring(pos + 1) : -1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(0, pos) : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos) : defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(pos, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "nextLineTabStop = defaultNewLine - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos + 1) : 0.0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "nextLineTabStop = width > -1 ? r.substring(pos + 1) : 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "nextLineTabStop = width > -1 ? line.substring(0, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(pos, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "nextLineTabStop = width > -1 ? r.substring(0, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "nextLineTabStop = width > -1 ? new StringBuilder(width - 1) : -1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "nextLineTabStop = new StringBuilder(width - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "nextLineTabStop = width / 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos - 1) : null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "nextLineTabStop = width > -1 ? column.substring(pos + 1) : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "nextLineTabStop = width > -1 ? info.substring(0, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "nextLineTabStop = width > -1 ? line.substring(0, pos) : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "nextLineTabStop = width > -1 ? column.substring(0, pos) : defaultNewLine;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "nextLineTabStop = bytes.length - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "nextLineTabStop = width > -1 ? column.substring(0, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "nextLineTabStop = width > -1 ? line.substring(0, pos - 1) : -1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos - 1) : Matrices.EPS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "nextLineTabStop = width > -1 ? line.substring(0, pos) : -1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos + 1) : 1).append(\";\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos - 1) : 1).append(\";\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(0, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "nextLineTabStop = width > -1 ? r.substring(0, pos - 1) : -1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "nextLineTabStop = width > -1 ? result.substring(pos + 1) : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "nextLineTabStop = width > -1 ? value.substring(0, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "nextLineTabStop = width > 0 ? r.substring(0, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos - 1) : -1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "nextLineTabStop = width > -1 ? r.substring(pos, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "nextLineTabStop = width > -1 ? r.substring(pos, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(0, pos - 1)) : 0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "nextLineTabStop = width > -1 ? info.substring(pos + 1) : 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "nextLineTabStop = width > -1 ? info.substring(pos + 1) : -1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos - 1) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(0, pos - 1) : -1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "nextLineTabStop = width > -1 ? value.substring(0, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "nextLineTabStop = Math.min(scale, width - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "nextLineTabStop = width > -1 ? value.substring(pos, pos - 1) : _defaultNewLine;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(pos, pos - 1) : -1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "nextLineTabStop = width - 1, height - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "nextLineTabStop = new StringBuilder(Math.length() - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "nextLineTabStop = -1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "nextLineTabStop = width > -1 ? info.substring(pos, pos - 1) : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "nextLineTabStop = width > -1 ? info.substring(0, pos - 1) : 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "nextLineTabStop = width > 0 ? r.substring(pos - 1) : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "nextLineTabStop = width > -1 ? Integer.parseInt(text.substring(0, pos) : 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "nextLineTabStop = width > -1 ? bytes.substring(0, pos - 1) : 0;",
                "identical": false
            }
        ],
        "buggy_line": "nextLineTabStop = width - 1;",
        "fixed_line": "nextLineTabStop = 1;"
    },
    "Closure-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return mayBeStringHelper(n, recurse);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return mayBeStringHelper(n, recurse) > 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return mayBeStringHelper().isEnabled(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return mayBeStringHelper(n, recurse) == null ? true : MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return mayBeStringHelper(n, recurse) == null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return mayBeStringHelper(n, recurse) instanceof MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return mayBeStringHelper().isEnabled(n, recurse);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return mayBeStringHelper(n, recurse) == null ? false : n;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return mayBeStringHelper(n, recurse) == null ? false : MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return mayBeStringHelper().isEnabled(n) ? true : false;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return mayBeStringHelper(n, recurse) == null ? true : new MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return mayBeStringHelper(n, recurse) == 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return mayBeStringHelper(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return mayBeStringHelper(n, recurse) == null && HAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return mayBeStringHelper().isPresent(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return mayBeStringHelper(n, recurse) == null ? true : n;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return mayBeStringHelper(n, recurse) != null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return mayBeStringHelper(n, recurse_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return mayBeStringHelper(n, recurse) <= 0) ? true : false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return mayBeStringHelper(n, recurse) == null ? true : false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return mayBeStringHelper(n, recurse) > 0) ? true : false;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return mayBeStringHelper(n, recurse) != null ? true : false;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return mayBeStringHelper().isEqual(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return mayBeStringHelper() != null && n.getType().equals(\"false\")) ? true : false;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return mayBeStringHelper().isEnabled(n);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return mayBeStringHelper(n, recurse) == null ? true : ((MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return mayBeStringHelper(n, recurse) == null ? true : ((MAY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return mayBeStringHelper(n, recurse) == null ? false : new MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return mayBeStringHelper(n, recurse) < 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return mayBeStringHelper(n, recurse) >= 0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return mayBeStringHelper(n, recurse) > null ? true : false;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return mayBeStringHelper(n, recurse) >= null ? true : false;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return mayBeStringHelper(n, recurse) <= 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return mayBeStringHelper(n, recurse) == null && HAY_BE_STRING_PREDICATE.size() > 0) ? true : false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return mayBeStringHelper(n, recurse) ? true : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return mayBeStringHelper().isPresent(n, recurse);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.equals(\"false\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return mayBeStringHelper().isWeighted(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return mayBeStringHelper(n, recurse) && (n instanceof MAY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return mayBeStringHelper().containsEdge(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return mayBeStringHelper(n, recurse)[0];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return mayBeStringHelper() != null && n.getType().equals(\"true\")) ? true : false;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.equals(\"false\")) ? true : false;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return mayBeStringHelper().containsEdge(n, recurse);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return mayBeStringHelper().shouldBeString(n, recurse);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.equals(\"true\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return mayBeStringHelper(n, recurse) == 0) ? true : false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return mayBeStringHelper().isValidating(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return mayBeStringHelper(n, recurse) < null ? true : false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return mayBeStringHelper().equals(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return mayBeStringHelper().isAlignment(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return mayBeStringHelper().isTrue(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return mayBeStringHelper().contains(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return mayBeStringHelper(n, recurse) == null && HAY_BE_STRING_PREDICATE.isEmpty()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return mayBeStringHelper(n, recurse) %s;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return mayBeStringHelper(n, recurse) - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return mayBeStringHelper().isEnabled(n, recurse) && (n > 0 ? true : false);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return mayBeStringHelper(n, recurse) && (n instanceof MAY_BE_STRING_PREDICATE)) ? true : false;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return mayBeStringHelper().isEnabled(n) && recurse;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return mayBeStringHelper(n, recurse) == null && HAY_BE_STRING_PREDICATE.length > 0) ? true : false;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return mayBeStringHelper().equals(n, recurse);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return mayBeStringHelper(n, recurse) <= 0) ? true : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.getName().equals(\"false\")) ? true : false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return mayBeStringHelper(n, recurse) > 0) ? true : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return mayBeStringHelper(n, recurse) <= 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return mayBeStringHelper().isWeighted(n, recurse);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return mayBeStringHelper(n, recurse) == null ? false : true;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.getNodeName().equals(\"false\")) ? true : false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return mayBeStringHelper() != null && n.getName().equals(\"true\")) ? true : false;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return mayBeStringHelper(n, recurse) == null && HAY_BE_STRING_PREDICATE != null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.startsWith(\"08\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return mayBeStringHelper() != null && n.length() > recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return mayBeStringHelper(n, recurse) == 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return mayBeStringHelper().isPresent(n) ? true : false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return mayBeStringHelper(n, recurse) == null && HAY_BE_STRING_PREDICATE.equals(n)) ? true : false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return mayBeStringHelper().isEnabled(n, recurse) ? false : true;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return mayBeStringHelper(n, recurse) < 1) ? true : false;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return mayBeStringHelper(n, recurse) == null && n.equals(\"true\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return mayBeStringHelper(n, recurse) > 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return mayBeStringHelper().isVoided(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return mayBeStringHelper(n, recurse) == null ? true : new MAY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return mayBeStringHelper().shouldBeString(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.startsWith(\"08\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return mayBeStringHelper().isPositioned(n, recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return mayBeStringHelper(n, recurse) == null && n.equals(\"false\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return mayBeStringHelper().isValidating(n, recurse);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return mayBeStringHelper().isEnabled(n, recurse) && (n instanceof MAY_BE_STRING)) ? true : false;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return mayBeStringHelper(n, recurse) == null && HAY_BE_STRING_PREDICATE.size() > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return mayBeStringHelper() != null && n > recurse) ? true : false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return mayBeStringHelper().isEqual(n, recurse);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return mayBeStringHelper(n, recurse) == null && HAY_BE_STRING_PREDICATE.contains(n)) ? true : false;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.getName().equals(\"true\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return mayBeStringHelper(n, recurse) -> {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.getNodeName().equals(\"true\")) ? true : false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.getParent() instanceof MAY_BE_STRING ? true : false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.getName().equals(\"true\")) ? true : false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return mayBeStringHelper(n, recurse) < null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return mayBeStringHelper(n, recurse) != null && n.equals(\"true\")) ? true : false;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return mayBeStringHelper(n, recurse) && (n instanceof MAY_BE_STRING_PREDICATE ? true : false);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return mayBeStringHelper(n, recurse) == null && n.equals(\"false\")) ? true : false;",
                "identical": false
            }
        ],
        "buggy_line": "return allResultsMatch(n, MAY_BE_STRING_PREDICATE);",
        "fixed_line": "return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);"
    },
    "JacksonDatabind-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return JsonParser.Feature.UNWRAP_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return JsonDeserializer.START_ARRAY;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (actual == JsonToken.VALUE_STRING) ? null : _handleUnknownTypeId(actual);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (actual == JsonToken.VALUE_NULL) ? null : _handleUnknownTypeId(actual);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (actual == JsonToken.VALUE_NULL) ? null : _handleUnknownTypeId(actual, ctxt);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _handleUnknownTypeId(actual);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (actual == JsonToken.START_ARRAY) ? null : _handleUnknownTypeId(actual, ctxt);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (actual == JsonToken.START_ARRAY) ? null : _handleUnknownTypeId(actual);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (actual == JsonToken.VALUE_STRING) ? null : _handleUnknownTypeId(actual, ctxt);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return JsonParser.Feature.WRITE_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _handleUnknownTypeId(actual, ctxt);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : actual;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return JsonValueDeserializer.deserializeWithType(actual, ctxt, _valueType);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return JsonParser.Feature.FAIL_ON_EMPTY_STRING;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return JsonValueDeserializer.START_ARRAY;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return JsonParser.Feature.FAIL_ON_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (actual == JsonToken.VALUE_NULL ? null : _handleUnknownTypeId(actual, ctxt));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "throw ctxt.mappingException(handledType(), JsonToken.START_ARRAY);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return JsonMappingException.from(ctxt, \"Can not create polymorphic instances with unwrapped values\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (actual == JsonToken.START_ARRAY ? null : _handleUnknownTypeId(actual, ctxt));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return JsonValueDeserializer.deserialize(actual, ctxt);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return JsonValueDeserializer.deserializeWithType(actual, ctxt, _typeId);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : ctxt;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return JsonParser.BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return JsonParser.Feature.FAIL_ON_EMPTY_STRINGS;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return JsonParser.START_ARRAY;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (actual == JsonToken.VALUE_STRING) ? null : actual;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (actual == JsonToken.VALUE_NULL ? null : _handleUnknownTypeId(actual));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return JsonMappingException.wrapWithUnwrapped(actual, ctxt, _typeId, null);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return JsonValueDeserializer.deserializeWithType(actual, ctxt, _typeSerializer);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return JsonGenerator.Feature.WRITE_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : getUnknownTypeId(ctxt, typeId);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return JsonParser.Feature.FAIL_ON_EMPTY_LIST;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT ? null : _handleUnknownTypeId(actual, ctxt));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return deserializeFromObjectId(actual, ctxt);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _serializer;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _findContextualValueDeserializer(actual);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return JsonValueDeserializer.instance;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return JsonParser.Feature.UNION_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (actual == JsonToken.VALUE_STRING) ? null : _handleUnknownTypeId(actual, typeId);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return JsonValueDeserializer.deserializeWithType(actual, ctxt, _elementType);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return JsonParser.ValueDeserializer;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _handleUnknownTypeId(actual, typeId);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "throw ctxt.mappingException(\"Can not deserialize a JSON with property '\"+actual+\"', but \"+actual.getClass().getName()+\"')\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (actual == JsonToken.START_ARRAY ? null : _handleUnknownTypeId(actual));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "throw ctxt.mappingException(\"Can not deserialize a JSON with property '\"+actual+\"', but \"+actual.getClass().getName()+\"'\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (actual == JsonToken.VALUE_NULL) ? null : _handleUnknownTypeId(actual, typeId);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (actual == JsonToken.START_ARRAY) ? null : _handleUnknownTypeId(actual, typeId);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _classIfExplicit(actual);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return JsonMappingException.wrapWithUnwrapped(actual, ctxt, _typeId);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return JsonEncoding.BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _property;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return JsonMappingException.wrapWithUnwrapped(actual, ctxt, null);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return JsonEncoding.START_ARRAY;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return JsonGenerator.Feature.FAIL_ON_SINGLE_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return JsonGenerator.Feature.FAIL_ON_EMPTY_STRINGS;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return JsonParser.Feature.WRITE_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT ? null : _handleUnknownTypeId(actual));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return JsonParser.Feature.FAIL_ON_EMPTY_ARRAY;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return JsonMappingException.from(ctxt, \"Can not find a deserializer for type \"+actual);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return JsonWriteContext.STATUS_EXPECT_NAME;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "throw ctxt.mappingException(\"Can not deserialize a JSON String of type \"+actual.getClass().getName()+\"]\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT ? null : _handleUnknownTypeId(actual);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return JsonMappingException.wrapWithUnwrapped(actual, ctxt, _valueType);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _defaultTypeId;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (actual == JsonToken.START_ARRAY ? null : _handleUnknownTypeId(actual);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "throw ctxt.mappingException(\"Can not deserialize a JSON String of type \"+actual.getClass().getName()+\" in end-of-input\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (actual == JsonToken.VALUE_STRING) ? null : ctxt;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "throw ctxt.mappingException(\"Can not deserialize a JSON String of type \"+actual.getClass().getName()+\" before end-of-input\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (actual == JsonToken.VALUE_STRING) ? null : _handleUnknownTypeId(ctxt, typeId);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return JsonGenerator.Feature.FAIL_ON_EMPTY_STRING;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _unwrap(actual);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (actual == JsonToken.VALUE_STRING) ? null : _handleUnknownTypeId(p, ctxt);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return JsonMappingException.from(ctxt, \"Can not find a deserializer for \"+actual);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return JsonWriteContext.STATUS_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "throw ctxt.mappingException(\"Can not deserialize a JSON with property '\"+actual+\"', but \"+actual.getClass().getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (actual == JsonToken.START_ARRAY ? null : _handleUnknownTypeId(actual), ctxt);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : t;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (actual == JsonToken.VALUE_NULL) ? null : actual;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (actual == JsonToken.VALUE_NULL) ? null : _classIfExplicit(actual);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "throw ctxt.mappingException(\"Can not deserialize a JSON with property '\"+actual+\"', but \"+actual);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "throw ctxt.mappingException(\"Can not deserialize a JSON with property '\"+actual+\"'\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _typeId;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _handleUnknownTypeId(actual, ctxt));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _handleUnknownTypeId(ctxt, typeId);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (actual == JsonToken.VALUE_NULL ? null : _handleUnknownTypeId(actual), ctxt);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return JsonGenerator.Feature.FAIL_ON_EMPTY_LIST;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (actual == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : _unwrapAndReadTypeId(actual);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (actual == JsonToken.START_ARRAY ? null : _handleUnknownTypeId(actual, ctxt), actual);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (actual == JsonToken.START_ARRAY) ? null : _handleUnknownTypeId(actual, ctxt));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return JsonParser.END_ARRAY;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (actual == JsonToken.START_ARRAY ? null : _handleUnknownTypeId(actual, ctxt);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return JsonValueDeserializer.deserializeWithType(actual, ctxt, provider, _typeId);",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "return NullifyingDeserializer.instance;"
    },
    "Jsoup-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#([0-9a-fA-F]+)|[a-zA-Z]+)?\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#([0-9a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& getSuba-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& getSuba-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\ud83d\udc39([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#((x|X)?([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&nbsp([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\ud83d\udc39([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#((x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& getHash([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& codeString([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&nbsp([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& experiments([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& getHash([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&nbsp;x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&nbsp;x|X)?([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& URLEncoder([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& codeString([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#([0-9a-fA-F]+)|[a-zA-Z]+);?\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& png([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& experiments([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& URLEncoder([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u8046([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&offsets([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& getSuba-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u53e0([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& grateful([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& getLock([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& URLEncoder(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& URLEncoder(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& png([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u8046([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&amp([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&offsets([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u6c38([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& Assignment([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&idade([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& took([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& natively((x|X)?([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& getLock([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u53e0([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&kes([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& unmarshall([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&amp([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& grateful([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& capturing([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& receiving([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& natively((x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u722a([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& bis([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& Assignment([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+)?\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\ud83c\udf39([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u6c38([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& Label([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& EST([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& took([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&idade([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& positioning([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\uc820([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&dh([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& Segment([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&MANY)?([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& capturing([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& getSuba-fA-F]+)|[a-zA-Z]+)?\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#([0-9a-fA-F]+)|[a-zA-Z]+ );",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&kes([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& emf([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& 60([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&OnUiThread([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&rgb([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&MULTI([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u8b41([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u1164([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&MANY)?([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& unmarshall([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&SEC([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u722a([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#([0-9a-fA-F]+)|[a-zA-Z]+):?\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& Label([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final Pattern unescapePattern = Pattern.compile([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& bis([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\ud83c\udf39([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& EST([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#((x|X)?([0-9a-fA-F]+)|[a-zA-Z]+)?\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& receiving([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& 60([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\uc820([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& Segment([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#([0-9a-fA-F]+)|[0])[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"& positioning([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&MULTI([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&peek([0-9a-fA-F]+)|[a-zA-Z]+))?\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&\u1164([0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            }
        ],
        "buggy_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");",
        "fixed_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");"
    },
    "Math-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (entry.getValue() < 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (entry.getValue() != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (entry.getValue() == 0.0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (entry.getValue() == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (entry.getValue() < 0.0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (entry.getValue() == null || entry.getName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (entry.getValue() < 0.0 || entry.getHeight() > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (entry.getValue() == null || entry.getValue() < 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (entry.getValue() != null && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (entry.getValue() == null || entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (entry.getValue() != null && entry.getName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (entry.getName().equals(name) && entry.getValue() != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (entry.isDirectory() || entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entry.getValue() != null && entry.getName().equals(\"multi\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (entry.getValue() > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (entry.getValue() != null && entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (entry.getKey() > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (entry.getKey() > 0 || entry.getHeight() > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (entry.getValue() == this) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (entry.getKey() > 0 || entry.getValue() <= 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (entry.getValue() == null || entry.getDescription().length() > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (!entry.isDirectory() || entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (entry.getName().equals(name) && entry.getName().equals(\"multi\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (entry.getValue() <= 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (entry.isPrint() && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry.getValue() == null || entry.getHeight() < 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (entry.getValue() < 0.0 || entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry.getValue() != null && entry.getDescription().length() > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (entry.getValue() != null && entry.getName().equals(initial.getNodeName())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (entry.getValue() == null || entry.getStyle().isFixed()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry.getKey() == 0 || entry.getValue() < 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (entry.getValue() == null || entry.getStyle().isPaginateTable()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (entry.getValue() != null && entry.getFloatValue() < 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (entry.getValue() != null && entry.getName().equals(items[i])) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (entry.getValue() == null || \"\".equals(entry.getValue())) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (!entry.isDirectory() && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (entry.getValue() != null && entry.getName().equals(\"basic\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (entry.getValue() == null || entry.getStyle().isRunning()) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (entry.getValue() != null && entry.getNodeName().equals(\"basic\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (entry.getValue() != null && !\"\".equals(entry.getValue())) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (entry.getValue() != null && entry.getKey() > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"form\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"a\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (entry.getValue() != null && entry.getNodeName().equals(\"form\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (entry.getKey() > 0 || entry.getValue() < 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (entry.getValue() == null || entry.getHeight() > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (entry.getValue() != null && entry.getStyle().isPaginateTable()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (entry.getValue() < 0.0 || entry.getHeight() > EPS) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"basic\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (entry.getValue() != null && entry.getName().equals(\"true\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (entry.isDirectory() && entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (entry.getValue() != null && entry.getName().equals(\"..\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (entry.getValue() == null || entry.getName().equals(\"..\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (entry.getValue() < 0.0 || entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (entry.compareTo(entry.getValue())) > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (entry.getValue() == null || entry.getSize() > 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (entry.getKey() > 0 || entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (entry.getValue() != null && entry.getName().equals(initial.getLocalName())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (entry.getName().equals(name) && entry.getValue() == null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (entry.getValue() != null && entry.getStyle().isFixed()) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (entry.getValue() != null && entry.getNodeName().equals(\"multi\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (entry.getValue() != null && entry.getName().equals(defaultValue)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (entry.getValue() != null && entry.getName().equals(nameToDrop.get(i))) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (entry.getValue() != null && entry.getWidth() > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (entry.getValue() == null || entry.getSize() < 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (entry.getValue() != null && entry.getNodeName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry.getValue() != null && entry.getName().equals(elements)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (entry.getValue() == null || entry.getKey() < 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (entry.getName().equals(name) || entry.getName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (entry.getName().equals(setterName) && entry.getValue() != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (entry.getName().equals(name) && entry.getName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (entry.getValue() == null || entry.getName().equals(initial.getNodeName())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (entry.getValue() == Node.ELEMENT_NODE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (entry.getValue() == null || entry.getPosition() < 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (entry.getName().equals(name) && entry.getValue() == this) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (entry.getValue() < 0.0 || entry.getKey() > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (entry.getValue() == null || entry.getValue() < 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"tr\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (entry.getValue() < 0.0 || entry.getWidth() > EPS) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (entry.getKey() == 0 || entry.getValue() > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"body\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (entry.getKey() < 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (entry.getSize() == 0 || entry.getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(entry.getValue())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (entry.getValue() != null && entry.getName().equals(initial.getTitle())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"l\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (entry.getValue() == null || entry.getValue().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (entry.getValue() != null && entry.getName().equals(\"api-name\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (entry.getValue() != null && entry.getName().equals(o2.getNodeName())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (entry.getValue() != null && entry.getName().equals(System.getNodeName())) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (entry.getValue() == null || entry.getName().equals(defaultValue)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (entry.getValue() != null && entry.getName().equals(\"\"));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"..\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (entry.getValue() == null || entry.getNodeName().equals(\"show\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (entry.getValue() != null && entry.getName().equals(fieldName)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry.getValue() != null && entry.getName().equals(\"api-key\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (entry.getValue() == null || entry.getName().equals(currentValue)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (entry.getValue() != null && entry.getNodeName().equals(\"api-key\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "fixed_line": "if (Precision.compareTo(entry, 0d, epsilon) > 0) {"
    },
    "Mockito-29": {
        "fixes": [
            {
                "k": 1,
                "patch": "description.append(description.toString());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "description.append(\"<tr><td>\" +\" \" );",
                "identical": false
            },
            {
                "k": 3,
                "patch": "description.append(subscriber != null ?wanted.toString() : 0 );",
                "identical": false
            },
            {
                "k": 4,
                "patch": "description.append(wanted.toString());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString())).append(\" - \").append(description);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "description.append(subscriber != null ?wanted.toString() : \"\"));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "description.append(subscriber != null ?wanted.toString() : \"\";",
                "identical": false
            },
            {
                "k": 8,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString())).append(\"=\").append(description);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "description.appendText(wanted.toString());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : 0 );",
                "identical": false
            },
            {
                "k": 12,
                "patch": "description.appendText(wanted.toString())).append(\"=\").append(description);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "description.append(textFieldBytes.toString());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString())).append(\" \").append(description);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "description.appendText(wanted.toString())).append(\" \").append(description);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() == null ? 0 :wanted.toString());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "description.append(NEWLINE.getDescription() != null ?wanted.toString() : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : \"\"));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "description.appendText(wanted.toString()) + \": \").append(description);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "description.append(subscriber != null ?wanted.toString() : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "description.appendText(wanted.toString())).append(\" - \").append(description);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : \"\";",
                "identical": false
            },
            {
                "k": 24,
                "patch": "description.append(subscriber != null ?wanted.toString() : \"\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString()).append(\" - \").append(description);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "description.append(description != null ?wanted.toString() : 0 );",
                "identical": false
            },
            {
                "k": 28,
                "patch": "description.append(subscriber != null ?wanted.toString() : StandardCharsets.US_ASCII;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "description.append(subscriber != null ?wanted.toString() : \"\" );",
                "identical": false
            },
            {
                "k": 30,
                "patch": "description.append(styleable.toString());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "description.append(subscriber != null ?wanted.toString() : StandardCharsets.US_ASCII);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString())).append(\" and \");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "description.append(\"&nbsp;\").append(description.toString());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : 0L;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : \"\";",
                "identical": false
            },
            {
                "k": 37,
                "patch": "description.append(description != null ?wanted.toString() : \"\"));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : 0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "description.append(padWithNewLine() != null ?wanted.toString() : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : 0 );",
                "identical": false
            },
            {
                "k": 41,
                "patch": "description.append(subscriber != null ?wanted.toString() : 0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "description.append(subscriber != null ?wanted.toString() : 0L;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : 0).append(\" and \");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : (String) description.toString());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "description.append(position.getDescription() != null ?wanted.toString() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : \"\"));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "description.append((String) nameTextField.getValue());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "description.append(subscriber != null ?wanted.toString() : StandardCharsets.UTF_8;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "description.append(description != null ?wanted.toString() : \"\";",
                "identical": false
            },
            {
                "k": 50,
                "patch": "description.append(subscriber != null ?wanted.toString() : \"\").append(\"'\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "description.append(System.getDescription() != null ?wanted.toString() : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "description.appendText(wanted.toString())).append(\": \").append(description);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() == null ? \"null\" :wanted.toString());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "description.append(padWith ? \" \" : \"\"));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.length() - 1).append(\" and \");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : \"\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.length() - 1).append(\")\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : \"\" );",
                "identical": false
            },
            {
                "k": 59,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString().trim() : 0 );",
                "identical": false
            },
            {
                "k": 60,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString().length() : 0 );",
                "identical": false
            },
            {
                "k": 61,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString())).append(\"> \");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() == null ? 0 :wanted.toString()) + \": \").append(description);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "description.appendText(wanted.toString())).append(\" and \");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString()).append(\" \").append(description);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString())).append(\" - \").append(position.getDescription());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString())).append(\" - \").append(longitude);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value())).append(\" \").append(description);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : \"\").append(\"'\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "description.append(textFieldBytes.toString())).append(\"=\").append(description);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : false;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : 0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString() + \" \" + getCssValue()) + \": \").append(description);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "description.append(subscriber != null ?wanted.toString() : (String) description.toString());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "description.append(subscriber != null ?wanted.toString() : \"\").append(\"\\n\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "description.append(description != null ?wanted.toString() : 0L;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "description.append(position.getDescription() != null ?wanted.toString() : 0 );",
                "identical": false
            },
            {
                "k": 78,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.length() - 1).append(\">\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "description.append(NEWLINE.getDescription() != null ?wanted.toString() : 0 );",
                "identical": false
            },
            {
                "k": 80,
                "patch": "description.append(\"&nbsp;\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : \"\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "description.append(wanted.toString())).append(\"=\").append(description);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "description.append(padWithView().getDescription() != null ?wanted.toString() : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "description.append(padWithNewLine() != null ?wanted.toString() : 0 );",
                "identical": false
            },
            {
                "k": 85,
                "patch": "description.append(invocation.toString());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "description.append(padWithRoot) ? \" \" : \" \");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "description.append(System.getDescription() != null ?wanted.toString() : 0 );",
                "identical": false
            },
            {
                "k": 88,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : 0).append(\" and \");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.toString())).append(\" - \").append(System.getDescription());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() == null ? \"?\" :wanted.toString());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "description.append(String.valueOf(description.toString()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString().trim() : \"\"));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "description.append(problem.toString());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "description.append(subscriber != null ?wanted.toString() : StandardCharsets.US_ASCII).toString();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : 0) + \" \" + (String)\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "description.append(NEWLINE.getDescription() != null ?wanted.toString() : \"\"));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString().trim() : \"\";",
                "identical": false
            },
            {
                "k": 98,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.value() != null ?wanted.toString() : 0)).append(\" \").append(description);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() != null ?wanted.toString() : 0) + \" \" + (String)\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "description.append(padWithHttpStatus.NO_CONTENT.getDescription() == null ? 0 :wanted.toString());",
                "identical": false
            }
        ],
        "buggy_line": "description.appendText(wanted.toString());",
        "fixed_line": "description.appendText(wanted == null ? \"null\" : wanted.toString());"
    },
    "JacksonDatabind-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass())) ? TreeNode.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass())) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? t.getContentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()))) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : TreeNode.class);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()) ? TreeNode.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass()) || TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? Integer.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? void.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? child.getContentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()))",
                "identical": false
            },
            {
                "k": 21,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())){",
                "identical": false
            },
            {
                "k": 22,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? Long.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass())) ? TreeNode.class : TreeNode.class);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()) ? t.getContentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getType()))) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass())) ? t.getRawClass() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? e.getRawClass() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? getCurrentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getRawClass()))) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass()) || TreeNode.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? t.getActualTypeArguments() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()))?",
                "identical": false
            },
            {
                "k": 36,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : t;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? bytesRead : TreeNode.class;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : void.class;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass().getComponentType())) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? BigDecimal.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? int.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? t.getType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? static final TreeNode.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()) ? Integer.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? t.getDeclaringClass() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ?IDENT : TreeNode.class;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass())) ? TreeNode.class : t.getRawClass()));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ?1) : TreeNode.class;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getClass().getComponentType()))) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass().getComponentType()));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) return;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : TreeNode.class",
                "identical": false
            },
            {
                "k": 53,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? t : TreeNode.class;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getType()))) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? frame.getContentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getClass().getComponentType())) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : TreeNodeByName(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass()))) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass()) || TreeNode.class.isAssignableFrom(t.getRawClass()))) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) return null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? null : TreeNode.class;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? Object.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) : TreeNode.class;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass())) ? t.getContentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass())));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : t);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? dr : TreeNode.class;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? f.getContentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getClass().getSimpleName()))) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? 0.0 : TreeNode.class;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? IdentValue.empty() : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? void.class : t;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass()) || TreeNode.class.isAssignableFrom(t.getType()))) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? sz.getContentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? important : TreeNode.class;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()) ? TreeNode.class : t;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()))\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? t.getContentType() : void.class;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : IdentValue.of(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? e.getContentType() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getType()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? t.getContentType() : TreeNode.class);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getClass().getComponentType()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? IdentValue.instance : TreeNode.class;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()), t);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : type;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? NO_BINDINGS : TreeNode.class;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : TreeNode.class) : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getRawClass().getName()))) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getClass().getRawClass()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getType())) ? TreeNode.class : TreeNode.class;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "&& TreeNode.class.isAssignableFrom(t.getRawClass()) || TreeNode.class.isAssignableFrom(t.getRawClass());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : new TreeNode[t.getRawClass()];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? MatchStrength() : TreeNode.class;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : new TreeNode<>(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? IdentValue.empty() : Integer.valueOf(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? Integer.class : TreeNode.class);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) ? TreeNode.class : Object.class;",
                "identical": false
            }
        ],
        "buggy_line": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
        "fixed_line": "&& !TreeNode.class.isAssignableFrom(t.getRawClass()));"
    },
    "Math-80": {
        "fixes": [
            {
                "k": 1,
                "patch": "int j = n * n - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int j = 2 * n - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int j = 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int j = 0, n - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int j = 1 * n - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int j = i * n - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int j = 4 * n - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int j = _n * n - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int j = 3 * n - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int j = 6 * n - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int j = p * n - 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int j = 5 * n - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int j = 5;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int j = 10 * n - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int j = start * n - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int j = lastIndex * n - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int j = k * n - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int j = 0 * n - 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int j = 7 * n - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int j = q * n - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int j = 16 * n - 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int j = end * n - 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int j = 1, n - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int j = 500 * n - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int j = 4;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int j = 9 * n - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int j =each * n - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int j =DESCRIPTION * n - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int j = n - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int j = 3, * n - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int j = 11 * n - 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int j = n * i - 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int j = startIndex * n - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int j = 4) * n - 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int j = x * n - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int j = low * n - 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int j = columnPointers[j * n - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int j = step * n - 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int j = endIndex * n - 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int j = jj * n - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int j = queryParams.length * n - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int j =super.length * n - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int j = next * n - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int j = random * n - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int j = c * n - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int j = 8 * n - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int j = used * n - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int j = top * n - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int j = candidate * n - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int j = n * k - 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int j = columnPointers.length * n - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int j = columnPointers[i * n - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int j = 0) * n - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int j = last * n - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int j = d * n - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int j = 32 * n - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int j = i / n - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int j =device * n - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int j = 256 * n - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int j = 100 * n - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int j =length * n - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int j = right * n - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int j =us * n - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int j = _ * n - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int j = -1 * n - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int j = rows * n - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int j =Obj * n - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int j = _length * n - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int j = no * n - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int j = 1. * n - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int j = 2) * n - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int j = count * n - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int j = bit * n - 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int j = m * n - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int j = repeat * n - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int j = 5) * n - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int j = columnPointers[j * k - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int j =MONTH * n - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int j = avail * n - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int j = n * d - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int j = trace * n - 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int j =bound * n - 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int j = sqrt * n - 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int j =Property * n - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int j = equals * n - 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int j = propName * n - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int j =Bottom * n - 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int j = \" * n - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int j = en * n - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int j = shift * n - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int j = tail * n - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int j = queryParams * n - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int j = 2, n - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int j = l * n - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int j = bottom * n - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int j = columnPointers[j - 1] - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int j = 0, n * 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int j = * n - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int j = 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int j = max * n - 1;",
                "identical": false
            }
        ],
        "buggy_line": "int j = 4 * n - 1;",
        "fixed_line": "int j = 4 * (n - 1);"
    },
    "Chart-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dataset = dataset;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dataset = dataset == null ? IdentValuedataset : dataset;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dataset = dataset != null ? dataset.dataset : TableOrder.dataset;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dataset = dataset.dataset;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dataset = dataset == null ? System.dataset : dataset;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : TableOrder.dataset;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dataset = dataset == null ? DEFAULT_dataset : dataset;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dataset = dataset == null ?Awaredataset : dataset;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dataset = dataset == null ? Context.dataset : dataset;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dataset = dataset._dataset;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dataset = dataset == null ? \"dataset : dataset;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dataset = dataset!=null ? dataset.dataset : dataset;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dataset = dataset == null ? DEFAULT_TIMEZONE : dataset;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dataset = dataset != null ? dataset.dataset() : TableOrder.dataset;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dataset = dataset == null ?illis : dataset;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dataset = dataset == TableOrder.dataset;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dataset = dataset == null ? Restdataset : dataset;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dataset = dataset != null ? dataset.dataset : dataset;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dataset = dataset == null ? aggregate.dataset : dataset;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dataset = dataset == null ? TableOrder.DEFAULT_TIME : dataset;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : EMPTY_TIME;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dataset = dataset == null ? new JFreeChart(dataset) : dataset;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dataset = dataset == null ? new HashMap<String, Boolean>(dataset) : dataset;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dataset = dataset != null ? dataset.toString() : TableOrder.dataset;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dataset = dataset instanceofdataset;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dataset = dataset == IdentValuedataset ? TableOrder.DEFAULT_TIME : dataset;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dataset = dataset == null ? 1.0 : dataset;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dataset = dataset != null ? dataset.dataset : EMPTY;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dataset = dataset == null ? new HashSet<String>() : dataset;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dataset = dataset == null ?Instancedataset : dataset;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dataset = dataset == IdentValuedataset ? null : dataset;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dataset = dataset == null ?NAMESPACE : dataset;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dataset = dataset == null ? getEleaderS : dataset;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dataset = dataset == IdentValuedataset ? TableOrder.DEFAULT_COLUMN : dataset;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dataset = dataset != null ? dataset.getContentLength() : dataset;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dataset = dataset == null ? Proxydataset : dataset;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dataset = dataset == null ? TableOrder.DEFAULT_COLUMN : dataset;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : EMPTY;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dataset = dataset != null ? dataset : dataset;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dataset = dataset == null ? 500 : dataset;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dataset = dataset == null ? sndataset : dataset;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dataset = dataset == null ? getElevationService : dataset;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dataset = dataset != null ? dataset.dataset : EMPTY_TIME;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dataset = dataset == null ? new Defaultdataset() : dataset;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dataset = dataset != null ? dataset.dataset : that.dataset;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dataset = dataset != null ? dataset.dataset : defaultdataset;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dataset = dataset == null ? TableOrder.edit() : dataset;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dataset = dataset != null ? dataset.getTime() : dataset;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dataset = dataset == null ?parallel : dataset;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dataset = dataset == null ? TableOrder.getDefault() : dataset;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dataset = dataset != null ? dataset.name() : TableOrder.dataset;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dataset = dataset != null ? dataset.getTime() : TableOrder.dataset;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dataset = dataset == null ? EMPTY_TIME : dataset;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dataset = dataset != null ? dataset.edit() : TableOrder.dataset;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : EMPTY_HEADER;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dataset = dataset == null ? \"dataset=\" : dataset;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dataset = dataset == IdentValuedataset ? 500 : dataset;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dataset = dataset == IdentValuedataset ? 0 : dataset;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dataset = dataset == null ? NO_TIME : dataset;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dataset = dataset != null ? dataset.dataset : IdentValuedataset;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dataset = dataset != null ? dataset.dataset() : EMPTY_TIME;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : that.dataset;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dataset = dataset == null ?FLAG_TIME : dataset;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dataset = dataset == IdentValuedataset ? \"dataset\" : dataset;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dataset = dataset == null ? new HashMap<String, Date>() : dataset;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dataset = dataset == null ? getEleader_TIME : dataset;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dataset = dataset == IdentValuedataset ? 1.0 : dataset;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dataset = dataset == null ? new HashMap<String, Object>() : dataset;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dataset = dataset == null ? \"dataset\" : dataset;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : defaultdataset;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dataset = dataset == IdentValuedataset ? TableOrder.DEFAULT_IN : dataset;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dataset = dataset == null ?5,dataset : dataset;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dataset = dataset == null ? picture : dataset;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dataset = dataset!=null ? dataset : dataset;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : IdentValuedataset;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dataset = dataset == null ? getEleaderD_COLUMN : dataset;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dataset = dataset == null ? TableOrder.DEFAULT_IN : dataset;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dataset = dataset == null ? EMPTY_IN : dataset;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dataset = dataset == IdentValuedataset ? TableOrder.BASE_COLUMN : dataset;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dataset = dataset != null ? dataset.dataset : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dataset = dataset != null ? dataset.dataset() : EMPTY;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dataset = dataset != null) ? dataset.dataset : dataset;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dataset = dataset != null ? dataset.dataset : EMPTY_HEADER;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dataset = dataset == IdentValuedataset ? TableOrder.BASE_TIME : dataset;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dataset = dataset == null ? TableOrder.TIME : dataset;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dataset = dataset == null ?:\" : dataset;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dataset = dataset != null ? dataset.getContent() : dataset;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dataset = dataset == null ?DEBUG : dataset;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dataset = dataset == IdentValuedataset ? TableOrder.NONE : dataset;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dataset = dataset == null ? instant : dataset;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dataset = dataset == IdentValuedataset ? TableOrder.BASE_IN : dataset;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dataset = dataset != null ? dataset.getTime() : EMPTY_TIME;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : EMPTY_IN;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dataset = dataset == IdentValuedataset ? TableOrder.IN : dataset;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dataset = dataset == null ? TableOrder.DEFAULT_HOST : dataset;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dataset = dataset == null ? TableOrder.BASE_IN : dataset;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dataset = dataset == null ? DEFAULT_TIME : dataset;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dataset = dataset != null ? dataset.getdataset() : EMPTY_PORT;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dataset = dataset == null ? new Function<Category>() : dataset;",
                "identical": false
            }
        ],
        "buggy_line": "this.dataset = dataset;",
        "fixed_line": "setDataset(dataset);"
    },
    "Csv-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final boolean emptyHeader = header.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final boolean emptyHeader = header.trim().contains(header);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || containsHeader;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final boolean emptyHeader = header.trim().length() > 0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final boolean emptyHeader = header.trim().length();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final boolean emptyHeader = header.trim() != null && containsHeader.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final boolean emptyHeader = header.isEmpty() ? containsHeader : false;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final boolean emptyHeader = header != null && containsHeader.trim().length() > 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header) ? true : false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final boolean emptyHeader = header.length() == containsHeader;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final boolean emptyHeader = header.trim() != null && containsHeader.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : true;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final boolean emptyHeader = header.containsKey(header);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || containsHeader) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final boolean emptyHeader = header != null && containsHeader.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final boolean emptyHeader = header.trim() != null && containsHeader.trim().length() > 0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().startsWith(\"empty:\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.startsWith(\"empty:\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final boolean emptyHeader = header.isEmpty() ? containsHeader : true;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || containsHeader == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final boolean emptyHeader = header.containsKey(header) ? true : false;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header)) ? true : false;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final boolean emptyHeader = header.trim() != null && containsHeader.trim().length() > 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header) || containsHeader;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header, containsHeader);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final boolean emptyHeader = header.trim().contains(header) ? true : false;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final boolean emptyHeader = header != null && containsHeader.trim().length() > 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final boolean emptyHeader = header.containsKey(header) ? containsHeader : false;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header) ? containsHeader : false;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final boolean emptyHeader = header != null && !header.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final boolean emptyHeader = header.length() > 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header) ? true : true;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final boolean emptyHeader = header != null && containsHeader.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header) ? containsHeader : true;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final boolean emptyHeader = header.trim().containsKey(headerName);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || containsHeader.startsWith(\"empty:\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header, containsHeader);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().contains(header);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final boolean emptyHeader = header.containsKey(header) ? containsHeader : true;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().contains(header) ? true : false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || containsHeader == true;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final boolean emptyHeader = header.startsWith(\"empty:\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final boolean emptyHeader = header.contains(header);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final boolean emptyHeader = header.trim() == null || containsHeader.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final boolean emptyHeader = header.containsKey(header) || containsHeader.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final boolean emptyHeader = header.containsKey(header) ? containsHeader.trim() : true;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final boolean emptyHeader = header.containsKey(header)) ? true : false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final boolean emptyHeader = header.trim().contains(header) ? containsHeader : false;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final boolean emptyHeader = header.isEmpty() || hasHeader;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().containsKey(header);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final boolean emptyHeader = header.trim() == null || containsHeader.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header.trim());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || containsHeader != Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final boolean emptyHeader = header.containsKey(header) ? containsHeader.trim() : false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final boolean emptyHeader = header.trim().contains(header, containsHeader);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || containsHeader != null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final boolean emptyHeader = header.trim().length() > containsHeader;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader != Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final boolean emptyHeader = header.containsKey(header) ? containsHeader.trim() : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? hasHeader : false;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final boolean emptyHeader = header.containsKey(header, containsHeader);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final boolean emptyHeader = header.trim().containsKey(headerName) ? true : false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final boolean emptyHeader = header.length() == 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final boolean emptyHeader = header.trim() != null && containsHeader.trim().length() > 0) ? true : false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header) ? true : false;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final boolean emptyHeader = header.trim().contains(header) ? containsHeader : true;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final boolean emptyHeader = header.containsKey(header) ? true : true;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().startsWith(\"empty\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || isHeader(header, containsHeader);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header.trim(), containsHeader);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.startsWith(\"empty_\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().length() == 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final boolean emptyHeader = header.containsKey(header) || containsHeader.trim().isEmpty() ? true : false;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final boolean emptyHeader = header.trim().length() == 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader(header)) ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final boolean emptyHeader = header != null && containsHeader.isEmpty()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || isHeader(header) ? true : false;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final boolean emptyHeader = header.trim().contains(header) ? true : true;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final boolean emptyHeader = header.isEmpty() || hasHeader) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader != null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader == true;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().containsKey(header) ? true : false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final boolean emptyHeader = header.containsKey(header)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header)) ? true : false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final boolean emptyHeader = header.trim().length() == containsHeader;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final boolean emptyHeader = header.isEmpty() || isHeader ? containsHeader : false;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final boolean emptyHeader = header.isEmpty() || containsHeader.trim().length() > 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() || isHeader(header);",
                "identical": false
            }
        ],
        "buggy_line": "final boolean emptyHeader = header.trim().isEmpty();",
        "fixed_line": "final boolean emptyHeader = header == null || header.trim().isEmpty();"
    },
    "Closure-92": {
        "fixes": [
            {
                "k": 1,
                "patch": "int indexOfDot = trimmedNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int indexOfDot = name.indexOf('.');",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int indexOfDot = word.indexOf('.');",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int indexOfDot = name.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int indexOfDot = sb.indexOf('.');",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int indexOfDot = text.indexOf('.');",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int indexOfDot = firstNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int indexOfDot = module.indexOf('.');",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int indexOfDot = code.indexOf('.');",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int indexOfDot = trimmedNode.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int indexOfDot = key.indexOf('.');",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int indexOfDot = pathNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int indexOfDot = path.indexOf('.');",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int indexOfDot = oldModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int indexOfDot = className.indexOf('.');",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int indexOfDot = status.indexOf('.');",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int indexOfDot = config.indexOf('.');",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int indexOfDot = content.indexOf('.');",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int indexOfDot = annotationNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int indexOfDot = script.indexOf('.');",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int indexOfDot = rawModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstNode.lastIndexOf('.')));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int indexOfDot = expression.indexOf('.');",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int indexOfDot = oldNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstNode.lastIndexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int indexOfDot = rt.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int indexOfDot = node.indexOf('.');",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int indexOfDot = word.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int indexOfDot = config.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int indexOfDot = source.indexOf('.');",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int indexOfDot = sourceModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int indexOfDot = pattern.indexOf('.');",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int indexOfDot = Integer.parseInt(firstNode);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int indexOfDot = textNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int indexOfDot = sourceNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int indexOfDot = jsonModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int indexOfDot = _properties.indexOf('.');",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int indexOfDot = matcher.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int indexOfDot = Integer.parseInt(nameNode.substring(0, firstModule.lastIndexOf('.')));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int indexOfDot = sentence.indexOf('.');",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int indexOfDot = token.indexOf('.');",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int indexOfDot = property.indexOf('.');",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int indexOfDot = code.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int indexOfDot = properties.indexOf('.');",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int indexOfDot = toModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int indexOfDot =element.indexOf('.');",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstNode.lastIndexOf('.') - 1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int indexOfDot = raw.indexOf('.');",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstNode.lastIndexOf('.'));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int indexOfDot = apiModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstModule.lastIndexOf('.')));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int indexOfDot = host.indexOf('.');",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int indexOfDot = Integer.parseInt(nameNode.substring(0, firstModule.lastIndexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int indexOfDot = enumModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int indexOfDot = Integer.parseInt(nameNode.substring(0, firstModule.indexOf('.') + 1));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstModule.lastIndexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int indexOfDot = this.properties.indexOf('.');",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int indexOfDot = rawNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int indexOfDot = annotations.indexOf('.');",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int indexOfDot = LOG.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int indexOfDot = Integer.parseInt(nameNode.substring(0, firstModule.indexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int indexOfDot = param.indexOf('.');",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int indexOfDot = Integer.parseInt(nameStr.substring(0, firstNode.lastIndexOf('.')));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstModule.indexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int indexOfDot = pathModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int indexOfDot = firstModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int indexOfDot = operation.indexOf('.');",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int indexOfDot = aModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int indexOfDot = Integer.parseInt(nameStr.substring(0, firstNode.lastIndexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int indexOfDot = url.indexOf('.');",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int indexOfDot = lastIndex.indexOf('.');",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int indexOfDot = Integer.parseInt(nameValue.substring(0, firstNode.lastIndexOf('.')));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int indexOfDot = stringModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int indexOfDot = minNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstModule.indexOf('.') + 1));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int indexOfDot = Integer.parseInt(nameNode.substring(0, firstModule.lastIndexOf('.') - 1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int indexOfDot = implModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstNode.lastIndexOf('.') + 1));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int indexOfDot = initialModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int indexOfDot = Integer.parseInt(nameResolver.substring(0, firstNode.lastIndexOf('.')));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int indexOfDot = keyNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstNode.indexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int indexOfDot = properties.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int indexOfDot =firstNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstModule.lastIndexOf('.') - 1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int indexOfDot = aNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int indexOfDot = Integer.parseInt(nameNode.substring(0, firstModule.lastIndexOf('.') + 1));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int indexOfDot = modNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstNode.indexOf('.') + 1));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int indexOfDot = Integer.parseInt(nameValue.substring(0, firstNode.lastIndexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int indexOfDot = Integer.parseInt(firstNode.substring(0, firstModule.lastIndexOf('.')));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int indexOfDot = Integer.parseInt(nameNode.substring(0, firstModule.indexOf('.'));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int indexOfDot = expressionFactory.indexOf('.');",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstModule.indexOf('.'));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int indexOfDot = displayModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int indexOfDot = text.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int indexOfDot =Operator.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int indexOfDot = Integer.parseInt(nameResolver.substring(0, firstNode.lastIndexOf('.') + 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int indexOfDot = Integer.parseInt(name.substring(0, firstNode.indexOf('.'));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int indexOfDot =Plan.indexOf('.');",
                "identical": false
            }
        ],
        "buggy_line": "int indexOfDot = namespace.indexOf('.');",
        "fixed_line": "int indexOfDot = namespace.lastIndexOf('.');"
    },
    "Math-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "return FastMath.pow(2 *rich.PI, - dim / 2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return FastMath.pow(2 *rich.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return FastMath.pow(2 *rich.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return FastMath.pow(2 *\u11ac.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return FastMath.pow(2 *rich.PI, - dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return FastMath.pow(2 * relativePath.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return FastMath.pow(2 *rich.PI, -dim / 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return FastMath.pow(2 *Esc.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return FastMath.pow(2 *;\">.PI, - dim / 2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return FastMath.pow(2 * Err.PI, - dim / 2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return FastMath.pow(2 * resultList.PI, - dim / 2;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return FastMath.pow(2 * Err.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return FastMath.pow(2 *\ud83d\udd0a.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return FastMath.pow(2 * relativePath.PI, -dim / 2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return FastMath.pow(2 * Err.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return FastMath.pow(2 *\u52e2.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return FastMath.pow(2 *\u0790.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return FastMath.pow(2 *rich.PI, - dim * 8;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return FastMath.pow(2 *Shop.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return FastMath.pow(2 *Even.PI, - dim / 2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return FastMath.pow(2 * aspects.PI, - dim / 2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return FastMath.pow(2 *\u2cff.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return FastMath.pow(2 *\u02de.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return FastMath.pow(2 *\ua779.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return FastMath.pow(2 *565.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return FastMath.pow(2 *[],.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return FastMath.pow(2 * relativePath.PI, -dim / 2) * 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return FastMath.pow(2 *rich.PI, - dim / 2 * 2;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return FastMath.pow(2 *\u02de.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return FastMath.pow(2 *\u13da.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return FastMath.pow(2 *unched.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return FastMath.pow(2 *ACCOUNT.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return FastMath.pow(2 *LOSE.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return FastMath.pow(2 *\u628a.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return FastMath.pow(2 *\u5104.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return FastMath.pow(2 *unched.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return FastMath.pow(2 *\u0790.PI, -dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return FastMath.pow(2 *\ud83d\udd0a.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return FastMath.pow(2 *\u67f3.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return FastMath.pow(2 *\u02de.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return FastMath.pow(2 *\u5104.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return FastMath.pow(2 *LOSE.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return FastMath.pow(2 *rich.PI, - dim * 2);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return FastMath.pow(2 * Op.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return FastMath.pow(2 * periods.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return FastMath.pow(2 *\u11ac.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return FastMath.pow(2 *;\">.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return FastMath.pow(2 *rich.PI, -dim / 2 * 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return FastMath.pow(2 *rich.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return FastMath.pow(2 *rich.PI, -dim / 2) * 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return FastMath.pow(2 *\u0a0a.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return FastMath.pow(2 * resultList.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return FastMath.pow(2 *rich.PI, -dim / 2 * eps;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return FastMath.pow(2 *\u9f54.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return FastMath.pow(2 *ialias.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return FastMath.pow(2 *\u11ac.PI, -dim / 2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return FastMath.pow(2 *\ud5a5.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return FastMath.pow(2 *\ud5a5.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return FastMath.pow(2 *;\">.PI, - dim / 2 * 8;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return FastMath.pow(2 *\u2c44.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return FastMath.pow(2 * designed.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return FastMath.pow(2 *regexp.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return FastMath.pow(2 *\u5abd.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return FastMath.pow(2 * Err.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return FastMath.pow(2 *rich.PI, - dim / 2 * eps;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return FastMath.pow(2 *\u1803.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return FastMath.pow(2 *ACCOUNT.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return FastMath.pow(2 *\u2c64.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return FastMath.pow(2 *\u6873.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return FastMath.pow(2 *\u03c2.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return FastMath.pow(2 *\u9968.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return FastMath.pow(2 *\u934a.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return FastMath.pow(2 * aspects.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return FastMath.pow(2 * (<.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return FastMath.pow(2 *\u0937.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return FastMath.pow(2 * Err.PI, -dim / 2;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return FastMath.pow(2 * abbr.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return FastMath.pow(2 * observation.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return FastMath.pow(2 * quarter.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return FastMath.pow(2 *[],.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return FastMath.pow(2 * relativePath.PI, -dim / 2 * 2;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return FastMath.pow(2 *Esc.PI, - dim * 8;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return FastMath.pow(2 *\u4f1f.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return FastMath.pow(2 * Err.PI, - dim * 8;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return FastMath.pow(2 *[],.PI, - dim * 8;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return FastMath.pow(2 *\u05f6.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return FastMath.pow(2 * cumulative.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return FastMath.pow(2 * isc.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return FastMath.pow(2 *\u52e2.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return FastMath.pow(2 *\u16cc.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return FastMath.pow(2 *\u11ac.PI, -dim / 2) * 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return FastMath.pow(2 *\ud83d\udd0a.PI, - dim * 8;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return FastMath.pow(2 *Shop.PI, - dim * 2 * 8;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return FastMath.pow(2 *\u549a.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return FastMath.pow(2 *rich.PI, -dim / 2 * 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return FastMath.pow(2 *\u0a87.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return FastMath.pow(2 *\u6fb1.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return FastMath.pow(2 *\u02de.PI, -dim / 2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return FastMath.pow(2 *\u536b.PI, - dim * 2;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return FastMath.pow(2 *LOSE.PI, - dim * 8;",
                "identical": false
            }
        ],
        "buggy_line": "return FastMath.pow(2 * FastMath.PI, -dim / 2) *",
        "fixed_line": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *"
    },
    "Math-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "for (int i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "for(int i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (int i = 0; i < weights.length ? weights[i] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "for (int i = 1; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "for (int i = 0; i < weights.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (int i = 0; i < weights.length / sumWts; i++) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (int i = 0; i < weights.length; i += weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (int i = 0, size = weights.length; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i - 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (int i = 0; i < weights.length ? weights[i] : weights[i; i++) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i + 1]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (int i = 0; i < weightsLength; i++) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i / sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i - 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i / sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (int i = 0; i < weights.length ? weights[i + 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (int i = 0; i < weights.length ? weights[i].length - 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i + 1]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (int i = 0; i < weights.length ? weights[i / sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (int i = 0; i < weights.length / 2; i++) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (int i = 0, end = weights.length; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "for (int i = 0; i < weights[0].length; i++) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i - 1]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i * sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i - 1]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (int i = 0; i < weights.length ? weights[i + 1].length) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (int i = 0; i < weights.length ? weights[i * sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] * sumWts) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (int i = 0; i < weights.length; i++) { // weights[i]; i += weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i * sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i - 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "for (int i = 0; i < weights.length ? weights[i]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (int i = 0; i < weights.length ? weights[i].length / sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (int i = 0; i < weights.length ? weights[i], sumWts) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (int i = 0; i < weights.length ? weights[i - 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i * sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] ? weights[i + 1]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (int i = 0; i < weights.length ? weights[i : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != sumWts ? weights[i : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i].get sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i].equals(accum2) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "for (int i = 0, weights.length; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] * weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i + 1]) : null; i++) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] ? weights[i : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 && weights[i] == sumWts) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != Integer.MAX_VALUE; i++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 && weights[i] == sumWts ? Long.MAX_VALUE : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i / sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (int i = 0; i < weights.length; i += weights[i].length; i++) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (int i = 0; i < weights.length ? weights[i + 1]) : null; i++) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != sumWts ? weights[i + 1]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i + 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i].equals(accum2) : weights[i + 1]; i++) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i - 1]) : null; i++) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (int i = 0; i < weights.length ? weights[i].length) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (int i = 0; i < weights.length ? weights[i].length : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (int i = 0; i < weights.length / 8; i++) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 && weights[i] != sumWts ? weights[i : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (int i = 0; i < weights.length ? weights[i].length() : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i].getDistance() : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i / sumWts) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i + 1) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i + 1]) : null; i++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] ? weights[i]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i].getDouble() : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 && weights[i] != sumWts ? weights[i + 1]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != sumWts) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (int i = 0; i < weightsCount; i++) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (int i = 0; i < weights.length * sumWts; i++) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i].getBoolean(accum2) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (int i = 0; i < weights.length; i++) { // weights[i]; i += weights[i]; i -= weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (int i = 0; i < weights.length + 1; i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (int i = 0; i < weights.length ? weights[i], sumWts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i].getBoolean(accum2) : weights[i + 1]; i++) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i].length - 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i + 1]) : null; i++) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 && weights[i] != Integer.MAX_VALUE ? weights[i : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i + 1].equals(accum2) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (int i = 0; i < weights.length; i++) { // weights[i]; i -= weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i].getDistance() : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] == sumWts) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (int i = 0; i < weights.length ? weights[i].ts : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i].getDouble() : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 && weights[i] != Integer.MAX_VALUE ? weights[i - 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != Integer.MAX_VALUE ? weights[i]) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Double.MAX_VALUE ? weights[i - 1] : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i * sumWts - 1) : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i / sumWts : weights[i]; i -= weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 && weights[i] != Integer.MAX_VALUE ? weights[i].getBoolean() : weights[i]; i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] > 0 ? weights[i - 1 : null; i++) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != sumWts) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (int i = 0; i < weights.length; i += weights[i] != 0 ? weights[i]) : weights[i]; i++) {",
                "identical": false
            }
        ],
        "buggy_line": "for (int i = 0; i < weights.length; i++) {",
        "fixed_line": "for (int i = begin; i < begin + length; i++) {"
    },
    "Mockito-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "primitiveValues.put(double.class, 0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "primitiveValues.put(Double.class, 0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "primitiveValues.put(float.class, 0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "primitiveValues.put(double.class, 1L);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "primitiveValues.put(double.class, 0L);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "primitiveValues.put(double.class, 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "primitiveValues.put(Double.class, 0L);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "primitiveValues.put(Double.class, 1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "primitiveValues.put(long.class, 0);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "primitiveValues.put(BigDecimal.class, 0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "primitiveValues.put(byte.class, 0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "primitiveValues.put(Double.class, 1L);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "primitiveValues.put(Float.class, 0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "primitiveValues.put(int.class, 0);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "primitiveValues.put(float.class, 1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "primitiveValues.put(float.class, 1L);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "primitiveValues.put(Int.class, 0);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "primitiveValues.put(Double.class, (double) 0);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "primitiveValues.put(float.class, 0L);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "primitiveValues.put(Long.class, 0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "primitiveValues.put(Integer.class, 0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "primitiveValues.put(double.class, (float) 0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.size()]));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "primitiveValues.put(Float.class, 0L);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "primitiveValues.put(double.class, new double[primitiveValues.size()]));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "primitiveValues.put(Double.class, Integer.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "primitiveValues.put(double.class, Integer.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "primitiveValues.put(Float.class, 1L);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.size()];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "primitiveValues.put(double.class, BigDecimal.class, 0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "primitiveValues.put(short.class, 0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "primitiveValues.put(double.class, (int) 0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "primitiveValues.put(double.class, -1);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "primitiveValues.put(int.class, 1L);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "primitiveValues.put(double.class,0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "primitiveValues.put(double.class, value);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "primitiveValues.put(double.class, 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "primitiveValues.put(long.class, 0L);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "primitiveValues.put(Double.class, -1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "primitiveValues.put(Double.class, (int) 0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "primitiveValues.put(double.class, new Double[primitiveValues.size()]));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "primitiveValues.put(double.class, f);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "primitiveValues.put(float.class, (double) 0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "primitiveValues.put(double.class, 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "primitiveValues.put(double.class, new double[primitiveValues.size()];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "primitiveValues.put(String.class, 0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "primitiveValues.put(double.class, 6);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "primitiveValues.put(double.class, 0L) 0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "primitiveValues.put(double.class, (float) 1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "primitiveValues.put(Double.class, value);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "primitiveValues.put(float.class, new double[primitiveValues.size()]));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "primitiveValues.put(double.class, (short) 0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "primitiveValues.put(BigDecimal.class, 1L);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "primitiveValues.put(Double.class, Integer.valueOf(primitiveValues.size() - 1));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "primitiveValues.put(BigDecimal.class, 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "primitiveValues.put(double.class, Integer.valueOf(primitiveValues.size() - 1));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "primitiveValues.put(Double.class, 6);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "primitiveValues.put(double.class, new Double[primitiveValues.size()];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "primitiveValues.put(int.class, 0L);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "primitiveValues.put(Double.class, (float) 0);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "primitiveValues.put(BigDecimal.class, 0L);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "primitiveValues.put(BigInteger.class, 0);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "primitiveValues.put(long.class, 1L);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "primitiveValues.put(Double.class, Integer.toString(double.class) 0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "primitiveValues.put(double.class, new Double((float) 0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.cardinalityValues.size()]));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "primitiveValues.put(Double.class, f);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "primitiveValues.put(double.class, 0, 0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "primitiveValues.put(long.class, 1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "primitiveValues.put(Double.class, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "primitiveValues.put(double.class, new Integer(0));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "primitiveValues.put(Double.class, new int[primitiveValues.size()]));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "primitiveValues.put(T.class, 0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "primitiveValues.put(double.class, new Integer(0L);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.length - 1])];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.size() - 1];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "primitiveValues.put(double.class, 0F);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "primitiveValues.put(double.class, 1) * 0.01Values.get(float.class, 0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "primitiveValues.put(Decimal.class, 0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "primitiveValues.put(Double.class, 0.0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "primitiveValues.put(double.class, (byte) 0);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.int.class)];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "primitiveValues.put(double.class,Double.class, 0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "primitiveValues.put(Double.class,0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "primitiveValues.put(ByteArray.class, 0);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "primitiveValues.put(Float.class, 1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "primitiveValues.put(Double.class, new Integer(0));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "primitiveValues.put(Class.class, 0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "primitiveValues.put(Double.class, if (double) 0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "primitiveValues.put(double.class, new Double(0L);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "primitiveValues.put(double.class, 1) * 0.01Values.get(float.class, 1L);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.length - 1];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "primitiveValues.put(double.class, 1) * 0.01Values.get(float.class, 0L);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "primitiveValues.put(Double.class, (short) 0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.cardinalityValues.size()];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "primitiveValues.put(Double.class, new Double((float) 0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "primitiveValues.put(Double.class, Integer.toString(double.class) + 1L);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.size()])];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "primitiveValues.put(Double.class, 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "primitiveValues.put(Double.class, new double[primitiveValues.size() - 1]);",
                "identical": false
            }
        ],
        "buggy_line": "primitiveValues.put(double.class, 0);",
        "fixed_line": "primitiveValues.put(double.class, 0D);"
    },
    "Csv-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(null);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public static final CSVFormat EXCEL = this.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false).withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final CSVFormat EXCEL = other.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_AllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALE.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_BASE_ONLY.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames((boolean) withAllowMissingColumnNames(false));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) * 1000;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MAX_VALUE.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(true).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_BUFFER.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public static final CSVFormat EXCEL = plusFormat.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? DEFAULT : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public static final CSVFormat EXCEL = format.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._values.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._singleResult.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_values.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public static final CSVFormat EXCEL = plusNode.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? true : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(false).withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final CSVFormat EXCEL = this.withAllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? 0 : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? withAllowMissingColumnNames(false) : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MAX_VALUE.withAllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_BASE_ONLY.withAllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ONLY.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_AllowMissingColumnNames.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(true).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) + withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TIMEOUTS.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._inAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames.withAllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? this : null;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public static final CSVFormat EXCEL = plus.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames((boolean) withAllowMissingColumnNames(false));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final CSVFormat EXCEL = first.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public static final CSVFormat EXCEL = DEFAULT,AllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(true) ? DEFAULT : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALE.withAllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final CSVFormat EXCEL = this.withAllowMissingColumnNames(false) ? DEFAULT : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_AllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_argNames.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_DIMENSIONS.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PATTERN.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(true) ? 0 : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) || Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RFC2.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public static final CSVFormat EXCEL = other.withAllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) - _AllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_BUFFER_SIZE.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? Integer.MAX_VALUE : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TRANSITION.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TRANSFORMATIONS;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? DEFAULT_MAX_VALUE : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(true) ? DEFAULT : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? 1 : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(false) ? DEFAULT : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(true) ? 1 : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? DEFAULT : new CSVFormat();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(true) ? true : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_AllowMissingColumnNames.withAllowMissingColumnNames(false).withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(true) * 1000;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? withAllowMissingColumnNames(true) : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? DEFAULT : new CSVFormat());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TRANSFORMATION;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) > 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TRANSITIONS.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public static final CSVFormat EXCEL = other.withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? DEFAULT_BIGDECIMAL : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TRANSFORMATIONS.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? Integer.toString() : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames.withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false, true);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TIMEOUT_MS.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SENTINEL.withAllowMissingColumnNames(false);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_BASE_ONLY.withAllowMissingColumnNames(false).withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public static final CSVFormat EXCEL = other.withAllowMissingColumnNames(false).withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public static final CSVFormat EXCEL = this.withAllowMissingColumnNames(false).withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(true) ? 0 : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MAX_VALUE.withAllowMissingColumnNames(false).withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(false) ? 0 : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public static final CSVFormat EXCEL = this.withAllowMissingColumnNames(true) ? DEFAULT : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) ? DEFAULT_LOCALE : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public static final CSVFormat EXCEL = DEFAULT.withAllowMissingColumnNames(false) / 1000;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames(false, true);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public static final CSVFormat EXCEL = DEFAULT._AllowMissingColumnNames.withAllowMissingColumnNames(false).withAllowMissingColumnNames(true);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final CSVFormat EXCEL = other.withAllowMissingColumnNames(false) ? DEFAULT : null;",
                "identical": false
            }
        ],
        "buggy_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
        "fixed_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames(true);"
    },
    "Jsoup-43": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (element == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (element == null || element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (element == null || element.equals(current)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (element == null || element.equals(initial.get(i))) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (!element.equals(current) && !element.equals(target)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (element == null || element.equals(decodeAscii(element))) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (element == null || element.equals(elements.get(i))) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (element == null || element.equals(target)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (element.equals(elements.get(i), element)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (element.equals(target)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (element == null || element.equals(decodeAscii(element)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (!element.equals(elements.get(i))) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (element.equals(name)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (!element.equals(elements.get(i), element)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (element.equals(elements.get(i))) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (!element.equals(name)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (element.equals(current) && !element.equals(target)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (element != null && element.equals(collection.get(i))) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element.getName())) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (element == null || element.equals(collection.get(i))) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element.getPath());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (element.equals(collection.get(i))) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (element != null && element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (!element.equals(collection.get(i))) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (element.equals(initial.get(i))) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.name().toLowerCase())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (!element.equals(target)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (element == null) { // self, as per element",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.get(i).getName())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (element != null && !element.equals(collection.get(i))) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getId() + \"] is not an entity and therefore can't be instantiated: \" + element);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (element.equals(collection.get(i) || !element.equals(o)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (!element.equals(current)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.r\\n\" );",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getId() + \"] is not an entity.\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (element == null) { // non-name metadata data",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (element.equals(current) || element.equals(target)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getId() + \"] is not an entity: \" + element);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (!element.equals(current) && !element.equals(name)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (!element.equals(elements) && !element.equals(target)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element.getName().toLowerCase())) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (element == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" : element.equals(elements[i])) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getClass().getName() + \"] is not an entity and therefore can't be instantiated: \" + element);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (element != null && element.equals(target)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (element.equals(elements.get(i).getE())) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (!element.equals(initial.get(i))) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (!element.equals(current) && !element.equals(decodeAscii(element))) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (element == null || element.equals(elements[i])) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (element == null) ? null : element.equals(elements[i])) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.get(name).equals(target)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (element == null || element.equals(collection.getOppositeVertex())) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getClass().getName() + \"]\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (element == null || element.equals(name)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getId() + \"]\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names=\").equals(element)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (element == null) node.add(element);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (element.equals(elements.get(i) || !element.equals(search)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getName() + \"] is not an entity and therefore can't be instantiated: \" + element);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (element == null) throw new IllegalArgumentException(\" is not an entity: \" + element);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element.getColumnType().getName())) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element.getName());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (element == null) throw new IllegalArgumentException(\" element is not an entity: \" + element);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.getPath());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element.name().toLowerCase())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.getRawType().getName())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (element.equals(initial.get(i) || !element.equals(o)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.getColumnType().getName())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (element.equals(elements.get(i) || !element.equals(o)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element.get(i).getName())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (element == null || element.equals(o)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (element.equals(initial.get(i) || !element.equals(search)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getId() + \"] is not an integer: \" + element);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (element == null) { // self, as per [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (!element.equals(current) && !element.equals(o)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getClass().getName() + \"] is not an entity: \" + element);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getName() + \"] is not an entity: \" + element);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (element.equals(initial.get(i), element)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" : element.equals(initial.get(i).getPath())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + i);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (element == null || element.equals(action)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + i));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (!element.equals(initial.get(i) && !element.equals(target)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (!element.equals(current) && !element.equals(collection.get(i))) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (element.equals(elements) && !element.equals(target)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (element.equals(collection.get(i) || element.equals(o)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (!element.equals(current) && !element.equals(context.get(i))) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element.toString())) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.get(i).getName().equals(name)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \"implicit\" names to \" + element",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (element.equals(initial.get(i).getE())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (element == null) throw new IllegalArgumentException(\"null [\" + element.getName() + \"]\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (element == null) ? null : element.equals(current)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (element != null && element.equals(current)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (element == null) { // self, as per [JACKSON-268], we will allow use of \" + element.bpmn20.xml",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (element == null) { // self, as per [JACKSON-of-object < 0 || element.equals(target)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (element.equals(search))",
        "fixed_line": "if (element == search)"
    },
    "Mockito-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "catch (String.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent && e != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : error;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : error) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "catch (com.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "catch (List.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "catch (Route.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "catch (Constants.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e && error == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferente) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : result) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent && error == null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : result;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "catch (com.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "catch (Map.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "catch (String.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : error;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : template) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : shardId) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent != e) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent && e != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "catch ((org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : ex;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent && error;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "catch (2,org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferents) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e && error;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "catch (Swaggermockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent, e) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : method) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : values) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : options) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent = e) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new RuntimeException(e)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent && error) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : input;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "catch (Class.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "catch (EventType.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "catch (Route.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "catch (Store.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "catch (Activmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent = error;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferente = error;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "catch (Constants.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new ConversionException(e)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "catch (SchemaUtils.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent",
                "identical": false
            },
            {
                "k": 60,
                "patch": "catch (org.mockCommunication.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : () -> {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "catch (List.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "catch (org.mock 8080.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "catch (Messages.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : ex) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e && error) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "catch (org.mock\u7de9.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "catch (org.mock Esb.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "catch (getContext.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "catch (Throw.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "catch (org.mockVm.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "catch (ByteBuffer.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : e;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new Function<Operation>(error, e)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "catch (P.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : error);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "catch (Set.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentD) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e && error != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferente = e) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "catch (Consumermockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "catch (Subscription.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "catch (Entry.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e && !error.isEmpty()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : options;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new RuntimeException(e);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new ArrayList<Operation>();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e && error == null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new ConversionException(error, e)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new ConversionException(error)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent :;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new Thread(error, e)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent : new ZipException(e)) {",
                "identical": false
            }
        ],
        "buggy_line": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
        "fixed_line": "catch (AssertionError e) {"
    },
    "Math-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "return multiply(100).doubleValue();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return multiply(100 * 1024;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return getGroupValue().doubleValue();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return multiply(100 * Math.sqrt(skew).doubleValue();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return percentageValue().doubleValue();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return multiply(100 * Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return multiply(100 * Math.sqrt(1.0).doubleValue();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGINT;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : SCROLLBAR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.BIGINT;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : SCROLLBAR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : -1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.BIGINT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return multiply(100 * Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return -1 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : SCROLLBAR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : SCROLLBAR_BIGINT;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue() < 0.0 ? Integer.MAX_VALUE : SCROLLBAR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : -1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "returnHideValue().doubleValue();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return invalid(100).doubleValue();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : SCROLLBAR_BIGINT;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : -1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return getLat(100).doubleValue();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a - 1)) > Matrices.EPS ? Integer.MAX_VALUE : -1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 100;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue() < 0.0 ? Integer.MAX_VALUE : Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGMIN_VALUE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return -1 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : SCROLLBAR_BIGINT;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE - 2 : 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGINT_LTR;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a - 1)) < Matrices.EPS ? Integer.MAX_VALUE : -1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return SCROLLBAR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return multiply(100 * Math.sqrt(value).doubleValue();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return -1 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.BIGINT;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Long.MAX_VALUE : -1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE - 2 : 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue() < 0.0 ? Integer.MAX_VALUE : -1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Long.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : -1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? -1 : 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGINT_LTR ? -1 : 0.0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return multiply(100 * Math.min(skew).doubleValue();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a - 1)) > Matrices.EPS ? Integer.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return -1 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 20;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.T_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.NANOSECONDS;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : Double.valueOf(n % 2));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 1L;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "returnZero(100).doubleValue();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 100;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue() < 0.0 ? Integer.MAX_VALUE : 20;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BOTTOM;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGINT_LTR ? 1 : 0.0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : SCROLLBAR_BIGNEG;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGINT) ? -1 : 0.0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return fraction(100).doubleValue();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return -1 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a - 1)) > Matrices.EPS ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return -1 * Math.sqrt(skew).doubleValue();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : SCROLLBAR_BIGINTS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 20;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return -1 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), p> > Matrices.BIGINT) ? -1 : 0.0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return -1 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Integer.valueOf(a - 1)) : 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 100;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a - 1)) > Matrices.EPS ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGINT ? -1 : 0.0;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? Long.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE - 2 : 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a).doubleValue()) > Matrices.EPS ? Integer.MAX_VALUE : Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue() < 0.0 ? Integer.MAX_VALUE : SCROLLBAR_BIGINTS;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue()) > Matrices.EPS ? sz.doubleValue() : 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return Vert(100 * Math.sqrt(skew).doubleValue();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a - 1)) > Matrices.EPS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(a), System.getDatatype().doubleValue()) > Matrices.BIGINTS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return multiply(100 * Math.sqrt(Math.abs(skew).doubleValue() < 0.0 ? Integer.MAX_VALUE : SCROLLBAR_BIGINT;",
                "identical": false
            }
        ],
        "buggy_line": "return multiply(100).doubleValue();",
        "fixed_line": "return 100 * doubleValue();"
    },
    "Lang-6": {
        "fixes": [
            {
                "k": 1,
                "patch": "pos += Character.charCount(codePointAt(input, offset, pt));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "pos += Character.charCount(i+1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "pos += Character.charCount(i + 1));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "pos += Character.charCount(codePointAt(result, pt));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "pos += Character.charCount(codePointAt(i, pt));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "pos += Character.charCount(q) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "pos += Character.charCount(i + 1, pt.length() - 1));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "pos += Character.charCount(codePointAt(upperBound, pt));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(eventType, pt));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "pos += Character.charCount(input, offset, pt));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "pos += Character.charCount(codePointAt(datatype, pt));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "pos += Character.charCount(nextToken() + \": \" + pt);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(upperBound, pt));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "pos += Character.charCount(i + 1, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(upperBound, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "pos += Character.charCount(i + 1, Double.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(i, pt));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "pos += Character.charCount(q) > 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i])+\", pt));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "pos += Character.charCount(i + 1, pt.length());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "pos += Character.charCount(codePointAt(input, pt));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "pos += Character.charCount(i + 1, Integer.MAX_VALUE) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "pos += Character.charCount(codePointAt(inputStream, pt));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(i, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "pos += Character.charCount(codePointAt( pt, c));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "pos += Character.charCount(nextToken().trim());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "pos += Character.charCount(codePointAt(i) + \": \" + pt;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(datatype, pt));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "pos += Character.charCount(i + 1, pt.length() - 1) : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt( pt, \"{: %s\", pt));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "pos += Character.charCount(codePointAt(i) + \": \" + pt);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "pos += Character.charCount(currentPositionAt(parts[i], pt));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt( pt, c));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(i) + 1));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(i) + \": \" + pt));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "pos += Character.charCount(parts[i], pt) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(eventType, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i].length() - 1]));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i], pt));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "pos += Character.charCount(asText(input, offset, pt) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(datatype, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "pos += Character.charCount(sequenceNumber) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i])];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(upperBound, pt) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "pos += Character.charCount(codePointAt(elif, pt));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i]) + 1];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "pos += Character.charCount(codePointAt( pt,download));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "pos += Character.charCount(parts[i].length() - 1] + 1];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "pos += Character.charCount(input, offset, pt) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i], pt) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i]) - 1]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "pos += Character.charCount(codePointAt(input, startIndex, pt));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "pos += Character.charCount(i + 1, pt.length() - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "pos += Character.charCount(codePointAt(input,2, pt));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "pos += Character.charCount(StandardCharsets.UTF_8) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i]) - 1];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(i + 1));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt( pt, 1));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "pos += Character.charCount(i + 1, Double.MAX_VALUE) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "pos += Character.charCount(codePointAt(input, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i].length() - 1])];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "pos += Character.charCount(i + 1, pt.length() - 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "pos += Character.charCount(codePointAt( pt, 1));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(Keyword.MAX_VALUE, pt));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "pos += Character.charCount(currentPositionAt(parts[i].length() - 1]));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "pos += Character.charCount(codePointAt(upperBound, pt) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "pos += Character.charCount(codePointAt(i + 1, pt));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(i, pt) * 60;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "pos += Character.charCount(parts[i].length() - 1] ? 1 : 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "pos += Character.charCount(codePointAt(input, 16) * 60;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "pos += Character.charCount(codePointAt(inputEndChar, pt));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(frequency, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "pos += Character.charCount(i++, pt.length) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "pos += Character.charCount(codePointAt(QueueSize, pt));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i], pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "pos += Character.charCount(codePointAt(input, 10));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(i, pt) * 1000;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "pos += Character.charCount(asText(input, offset, pt));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "pos += Character.charCount(codePointAt( pt, 16) * 60;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(directory, pt));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "pos += Character.charCount(codePointAt(inputStream, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "pos += Character.charCount(i + 1, Integer.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "pos += Character.charCount(codePointAt(i) + 1));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "pos += Character.charCount(i + 1, Integer.MAX_VALUE) ? 1 : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(elifType, pt));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "pos += Character.charCount(asText(input, offset, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(QueueSize, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "pos += Character.charCount(asText(input, pt) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i].length()]));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "pos += Character.charCount(codePointAt(parts[i])];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "pos += Character.charCount(codePointAt(line));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(upperBound, pt) * 60;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt( pt, \"{: %d\", pt));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "pos += Character.charCount(currentPositionAt(parts, 6));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(directory, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(dd, pt)) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "pos += Character.charCount(i + 1, pt.length()) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "pos += Character.charCount(currentCharacter.codePointAt(parts[i])));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "pos += Character.charCount(codePointAt(i+1) );",
                "identical": false
            },
            {
                "k": 100,
                "patch": "pos += Character.charCount(i + 1, Double.MAX_VALUE) ? 1 : null;",
                "identical": false
            }
        ],
        "buggy_line": "pos += Character.charCount(Character.codePointAt(input, pos));",
        "fixed_line": "pos += Character.charCount(Character.codePointAt(input, pt));"
    },
    "Chart-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), null,LengthConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), null);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), c4);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), null, null);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "new Range(0.0, constraint.getWidth() + formatLengthConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "new Range(0.0, constraint.getWidth() + 1, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.max(c4));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "new Range(0.0, constraint.getWidth()), c4);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), true);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), false);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), this.height);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.max(c4);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), an LengthConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "new Range(0.0, constraint.getWidth()), Math.max(c4));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.max(c4, c4);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "new Range(0.0, constraint.getWidth()), Math.max(c4, c4);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), (int)c4);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), null,LengthConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "new Range(0.0, constraint.getWidth() && w[2] != null ? this.leftBlock.getWidth() : c4);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), size.height);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Integer.valueOf(c4));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "new Range(0.0, constraint.getWidth() + 1, null,LengthConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), null, null);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.min(c4, c4);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width - 1));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), String.valueOf(c4));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.min(c4);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), this.rightBlock.height);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width - w[2]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width - 2));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "new Range(0.0, constraint.getWidth()), Math.max(new Range(c4));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "new Range(0.0, constraint.getWidth() && w[2] != null ? this.rightBlock.getWidth() : c4);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width - h[2]), null);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "new Range(0.0, constraint.getWidth()), Math.max(c4, c4));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "new Range(0.0, constraint.getWidth() + 1,LengthConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.abs(c4);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "new Range(0.0, constraint.getWidth()), Math.max(w[2]), c4);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), (RectangleConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), null,LengthConstraintType.BOTTOM);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "new Range(0.0, constraint.getWidth()), (int)c4);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "new Range(0.0, constraint.getWidth() * w[2]), null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "new Range(0.0, constraint.getWidth()), Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), null, true);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "new Range(0.0, constraint.getWidth()), Math.min(c4, c4);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Integer.valueOf(c4);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), c4);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "new Range(0.0, constraint.getWidth() && w[2] != null ? this.leftBlock.getWidth() : c4;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "new Range(0.0, constraint.getWidth() + Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Integer.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "new Range(0.0, constraint.getWidth() - w[2]), null);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "new Range(0.0, constraint.getWidth() + NetworkLengthConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "new Range(0.0, constraint.getWidth() - w[2]), null,LengthConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), (RectangleConstraintType.FIXED);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.height);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), Math.max(c4);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "new Range(0.0, constraint.getWidth() * size.getHeight(), Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), Math.max(c4));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), true);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width - h[2]), c4);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "new Range(0.0, constraint.getWidth()), Math.max(c4);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), size.width);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "new Range(0.0, constraint.getWidth() && w[2] != null ? this.rightBlock.getWidth() : c4;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), 2);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "new Range(0.0, constraint.getWidth() + size.width);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "new Range(0.0, constraint.getWidth() + h[0]), null);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), false, true);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), this.width);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.max(new Range(c4));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "new Range(0.0, constraint.getWidth() + width[2]), c4);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.max(c4, c4));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "new Range(0.0, constraint.getWidth() + \": \" + w[2]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), Math.max(c4, c4);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), this.bottomBlock.height);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "new Range(0.0, constraint.getWidth() * 2, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), false);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.abs(c4));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), null, false);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "new Range(0.0, constraint.getWidth() + w[3]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), null,LengthConstraintType.x);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), this.rightBlock.getHeight();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "new Range(0.0, constraint.getWidth() + h[2]), (int)c4);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), null,LengthConstraintType.BIG);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width, c4);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "new Range(0.0, constraint.getWidth() + w[3];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width - w[2]), null);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "new Range(0.0, constraint.getWidth()), false);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.min(c4, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), this.rightBlock);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.sqrt(c4));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "new Range(0.0, constraint.getWidth() * size.getHeight());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Math.max(c4, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "new Range(0.0, constraint.getWidth() + 1, size.width - w[2]), c4);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), Integer.toHexString(c4));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "new Range(0.0, constraint.getWidth() - w[2]), null, null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "new Range(0.0, constraint.getWidth() + w[2]), MAX_VALUE);",
                "identical": false
            }
        ],
        "buggy_line": "new Range(0.0, constraint.getWidth() - w[2]),",
        "fixed_line": "new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),"
    },
    "Closure-86": {
        "fixes": [
            {
                "k": 1,
                "patch": "return false;",
                "identical": true
            },
            {
                "k": 2,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.function.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", value));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.function.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.notfound\", value));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.property.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", Boolean.TYPE));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.notfound\", value));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "throw new IllegalArgumentException(\"Could not find an entity: \" + value);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.method.notfound\", Boolean.TYPE));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.notfound\", \"unknown value was: \" + value);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\", Boolean.TYPE));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"Invalid value for \"+value));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.method.notfound\", Boolean.TYPE));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value was: \" + value);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.method.notfound\", value));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "throw new IllegalStateException(String.format(\"Cannot work with %s: %s\", value));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.notfound\", Boolean.TYPE));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "throw new RuntimeException(\"Could not find an entity: \" + value);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.method.notfound\", true));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value was: \" + value);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.property.notfound\", value));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.notfound\", Boolean.TYPE));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"true\"));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"]\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value was: \" + value);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"'\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"Invalid value for \"+value);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", value));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.notfound\", true));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.notfound\", \"'\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "throw new IllegalStateException(\"Could not find an entity: \" + value);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.notfound\", \"Invalid value for \"+value));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.method.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.property.notfound\", \"]\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", value));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"]\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", true));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"]\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\", value));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.method.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\", Token.TYPE));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.property.notfound\", \"'\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"true\"));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", true));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.notfound\", \"Invalid value for \"+value);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"Invalid value for \"+value));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\", true));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"Invalid value for \"+value);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.notfound\", \"true\"));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.notfound\", \"Invalid value for \"+value));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"Invalid value for \"+value));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value should be between 0\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "throw new RuntimeException(LocalMessages.get(\"error.function.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\", String.class));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value was: \" + value);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.notfound\", \"'\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.function.notfound\", \"'\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.method.notfound\", true));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "throw new ResourceDoesNotSupportOperationException(LocalMessages.get(\"error.function.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.notfound\", \"'\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.notfound\", \"Invalid value for \"+value);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.notfound\", \"true\"));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"Invalid value for \"+value);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value should be between 0\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.method.notfound\", \"Invalid value for \"+value));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.method.notfound\", \"Invalid value for \"+value);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.notfound\", true));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \" already exists\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.notfound\", \"unknown value should be between 0\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"'\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value should be between 0\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.method.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.notfound\", \"unknown value was not allowed\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.method.notfound\", value));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"null\", Token.TK_LBRACKET\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value was not found\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.function.notfound\", \"Invalid value for \"+value);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.identifier.method.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.identifier.property.notfound\", \"unknown value should be between 0\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "throw new PropertyNotFoundException(LocalMessages.get(\"error.function.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "throw new IllegalArgumentException(LocalMessages.get(\"error.function.notfound\", \"unknown value was not allowed\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.function.notfound\", \"Invalid value for \"+value);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.identifier.property.notfound\", \"'\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "throw new RuntimeException(LocalMessages.get(\"error.identifier.property.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "throw new IllegalStateException(LocalMessages.get(\"error.method.notfound\", \"true\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "throw new UnsupportedOperationException(LocalMessages.get(\"error.function.method.notfound\", \"true\");",
                "identical": false
            }
        ],
        "buggy_line": "return true;",
        "fixed_line": "return false;"
    },
    "Jsoup-47": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i + 1 < data.length()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (e.getMessage() != null && !s.isEmpty()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.trim())) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (e.getMessage() != null && !inAttribute.getNodeName().equals(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (e.getMessage() != null && !inAttribute) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getRawType())) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (e.getMessage() != null && !_id.isEmpty()) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i != 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (e.getNodeName().equals(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (id != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (e.getMessage() != null && !inAttribute.isEmpty()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getUuid())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (e.getMessage() != null && e.getNodeName().equals(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getName())) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (e.getMessage() != null && !\"\".equals(element.getNodeName())) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if(e.getMessage() != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataFormat)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (e.getMessage() != null && !\"\".equals(idAttribute.getNodeName())) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (e.getMessage() != null && !\"\".equals(idAttribute.getValue())) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (e.getMessage() != null && !data.isEmpty()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (e.getMessage() != null && !\"\".equals(idAttribute.getValue())){",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.get(\" .lang.String())) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "else if (i == 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getJavaType())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.toString())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.get(\" .lang.String))) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (e.getMessage() != null && !\"\".equals(struct.getNodeName())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getNodeName())){",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getActualTypeArguments())) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (e.getNodeName() != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getValue())) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (e.getNodeName().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (e.getMessage() != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c.isPrint() && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i + 1 < data.length() && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.toLowerCase())) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (dB != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i + 1 < value.length()) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (e.getMessage() != null && !inAttribute.getNodeName().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i < data.length - 1) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (e.getMessage() != null && !\"\".equals(input.getValue())) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (e.getMessage() != null && !\"\".equals(this.elementDescriptor.getNodeName())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i == len - 1) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getFormat())) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (e.getMessage() == Node.ELEMENT_NODE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (e.getMessage() != null && e.getNodeName().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (e.getMessage() != null && !\"\".equals(idNode.get(data))) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (e.getMessage() != null && !\"\".equals(prop.getNodeName())) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getConceptId())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getRawClass().getName())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (e.getNodeName().equals(\"form\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (e.getMessage() != null && !\"\".equals(idType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (e.getMessage() != null && !\"\".equals(parameters.get(\"value\"))) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (e.getMessage() != null && !\"\".equals(parameters.get(\" .lang.String))) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (id != null && !\"\".equals(dataType.trim())) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (id != null && !\"\".equals(element.getNodeName())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if(id != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (e.getMessage() != null && !\"\".equals(location.getNodeName())) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getRawClass())) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i.hasNext()) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (e.getMessage() != null && !inAttribute.isNegated()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (e.getMessage() != null && !inAttribute.getName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (e.getMessage() != null && !inAttribute.getNodeName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (id != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getTypeName())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (s != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i + 1 < data.length() && !\"\".equals(element.getNodeName())) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i + 1 < dataLength) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (e.getMessage() != null && !\"\".equals((String) nameTextField.getValue())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (id != null && !\"\".equals(data.trim())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (e.getMessage() != null && !\"\".equals(param.getNodeName())) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataLength)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.get(\" .lang.String\"))) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (e.getMessage() != null && !\"\".equals(idAttribute.getName())) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.substring(1))) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataObject.getNodeName())) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (e.getMessage() != null && !inAttribute.isStart()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataValue)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (e.getMessage() != null && !\"\".equals(idNode.get(MEDIA_TYPE))) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (e.getMessage() != null && !inAttribute.isNumeric()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (e.getMessage() != null && !\"\".equals(input.trim())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (e.getMessage() != null && !this.dataFormat.equals(\"\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i == 0) break;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getActualTypeArguments().isEmpty())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (s.length() > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (e.getMessage() != null && !\"\".equals(idNode.get(attributeValue))) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (dB != null && !\"\".equals(element.getNodeName())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (e != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c == '\\\\' || c == '\\'' || c == '-') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (id != null && !\"\".equals(data.getNodeName())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (e.getMessage() != null && !\"\".equals(dataType.getValue())){",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (val != null && !\"\".equals(dataType.getNodeName())) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (e.getMessage() != null && !\"\".equals(location.toString())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (e.getMessage() != null && !\"\".equals(idNode.get(i+1))) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (id != null && !\"\".equals(dataFormat)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i + 1 < data.length()) break;",
                "identical": false
            }
        ],
        "buggy_line": "if (!inAttribute)",
        "fixed_line": "if (!inAttribute || escapeMode == EscapeMode.xhtml)"
    },
    "Csv-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (current == '\\n') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (current == '\\r' && current == '\\n') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (current == '\\r') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (current == -1 || current == '\\n') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (current == '\\n' || current == '\\r') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (current == -1 || current == '\\r') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (current == '\\n' && current == '\\r') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (current == 0 || current == '\\n') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (current == -1 && current == '\\n') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (current == 0 && current == '\\n') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (current == -1 || current == -1) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (current == last && current == '\\n') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (current == -1 && current == -1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (current != '\\n') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (current >= 0 && current <= lastChar) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (current == -1 || current == '\\r' || current == '\\n') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (current == -1 || current == '-') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (current == '\\r' || current == '\\n') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (current >= 0 && current <= this.source.length() && current == '\\n') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (current > 0 && current <= this.source.charAt(current) == '\\n') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (current == ' || current == '\\r' || current == '\\n') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (current > 0 && current < length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (current == -1 && current == '\\r') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (current > 0 && current <= this.source.charAt(current - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (current > 0 && current == '\\n') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (current == last) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (current > 0 && current <= this.source.length() - 1) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (current == -1 || current == '\\n' || current == '\\r') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (currentCounter < lastChar && current == '\\n') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (current >= 0 && current < length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (current == lastChar) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (current <= lastChar && current == '\\n') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (currentCounter <= lastChar && current == '\\n') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (current == 0 || current == '\\n' || current == '\\r') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (current == nextCounter && current == '\\n') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (current >= 0 && current <= '\\n') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (current == 'Value || current == '\\r' || current == '\\n') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (current > 0 && current <= lastChar) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (current == last || current == '\\n') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (current > 0 && current < name.length() - 1) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (current == -1 && current == '\\r' && current == '\\n') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (current == ' || current == '\\n') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (current == '\\r' && lastChar == '\\n') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (current == -1 && current == '-') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (!currentCounter < lastChar && current == '\\n') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (currentCounter < lastChar) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (current == '\\n' || current == '\\r';",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (current == -1 || current == next && current == '\\n') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (current == '\\n') && current == '\\r' || current == '\\n') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (current == ' || current == '\\n' || current == '\\r') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (current == 0 || current == '\\r') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (current == -1 && current == '\\r' || current == '\\n') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (current >= 0 && current <= this.source.length() && current == lastChar) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (current > 0 && current <= '\\n') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (current != -1 && current == '\\n') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (current == last && current == '\\r') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (current > 0 && current < length - 1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (current == '\\n') && current == '\\r' && current == '\\n') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (current > 0 && current != '\\n') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (current > 0 && current <= this.source.charAt(current) - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (current == '\\r') && current == '\\n') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (current.charAt(current) == '\\n') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (current >= 0 && current <= this.source.charAt(current) == '\\n') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (current >= 0 && current < lastChar) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (current >= 0 && current < name.length() - 1) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (current == '\\n' && current == '\\r';",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (current == -1 || current == '\"') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (current > 0 && current <= this.source.length() || current == '\\n') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (current >= 0 && current <= this.source.length() && current < lastChar) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (current == 0 && current == '\\r') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (current > 0 && current <= this.source.length() - lastChar) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (current == '\\r' && current != '\\n') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (current == 0 && current < length) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (current == '\\n') && current == '\\r';",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (current >= 0 && current <= this.source.length() && current != '\\n') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (current != '\\n' && current == '\\r') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (current >= 0 && current <= this.source.length()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (current == '\\r' && current < lastChar) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (current <= 0 && current == '\\n') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (current == ' || current == '\\r') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (current > 0 && current <= this.source.length() && current == '\\n') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (current >= 0 && current <= this.source.length() && !current.equals(current)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (current == ' || current == '\\r' || current == '\\t') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (current == -1 && current == '\"') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (current == '\\n') && current == '\\r') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (current > 0 && current <= this.source.charAt(current) != '\\n') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (current == 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (current >= 0 && current <= this.source.charAt(current - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (current >= 0 && current <= this.source.length() || current == '\\n') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (current == -1 || current == '\\r' || current == '\\t') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (current == 0 && current <= '\\n') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (current == 0 && current != '\\n') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (currentCounter <= lastChar && current == '\\n' || current == '\\r') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (current >= 0 && current <= size) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (current <= last && current == '\\n') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (current < lastCounter && current == '\\n') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (current > 0 && current <= this.source.length() + 1) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (current >= 0 && current <= this.source.length() && current < length) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (current == -1 || current == '\\n' || c == '\\r') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (current >= 0 && current <= max) {",
                "identical": false
            }
        ],
        "buggy_line": "if (current == '\\n') {",
        "fixed_line": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {"
    },
    "Jsoup-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i != last - 1) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i < last) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (i >= last && seq.length() <= last) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (i >= last && seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (last <= last && seq.charAt(i) == ',') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i <= last && seq.length() - 1) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i < last - 1 && seq.charAt(i + 1) == ',') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i < last - 1 && seq.charAt(i + 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if(last <= last && i++, seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i < last && i++, seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (last <= last && seq.length() - 1) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i < last - 1 && input[i] != '-') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i <= last && seq.charAt(i + 1) == input[i - 1]) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i < last - 1 && Character.isDigit(input[i])) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i > last && seq.charAt(i + 1) == input[i - 1]) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (++i < last && i++, seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i > 0 && i++, seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i < last && i++, seq.length() - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (last < 0) { // EOF at this point signifies empty value",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i >= last && seq.length() - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i < last - 1 && input[i] != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i <= last && seq.charAt(i + 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i >= last && seq.length() < last) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (last <= last && i++, seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i < last - 1 && seq.charAt(i + 1) == '{') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (last <= last && seq.length() > i) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (++i < last && i++, seq.length() - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i > 0 && i++, seq.length() - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (last <= last && seq.charAt(i + 1) == input[i - 1]) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if(last <= last && seq.charAt(i) == ',') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i >= last && seq.length() - 1) != input[i + 2]) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i <= last && seq.charAt(i) == ',') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i < last && seq.length() - 1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i < last - 1 && seq.charAt(i + 1) == '-') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if(last <= last && i++, seq.length() - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i <= last && i++, seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i < last - 1 && seq.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (++offset < last && i++, seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i > last && seq.charAt(i + 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i >= last && seq.length() - 1) != input[i + 1] {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i < last - 1) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (last <= last && i++, seq.length() - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i <= last && seq.charAt(i + 1) == ',') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i <= last && seq.charAt(i + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (last <= last && seq.charAt(i) == ' ') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i < last - 1 && seq[i] != '-') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i >= last && seq.charAt(i + 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (++offset < last && i++, seq.length() - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i <= last && seq.charAt(i - 1) == ' ') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i >= last && seq.charAt(i + 1) == input[i - 1]) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if(last <= last && seq.length() > i) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i < last - 1 && seq[i] != 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (i >= last && i < last) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i >= last - 1 && seq.charAt(i + 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i > last && seq.charAt(i + 1) == ',') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (last <= last && seq.charAt(i) == input[i - 1]) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i > last && seq.charAt(i) == ',') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i > last && seq.charAt(i - 1) == ',') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i > last && seq.charAt(i - 1) == input[i - 1]) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (++i >= last && i < last) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i < last - 1 && seq.charAt(i + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if(last <= last && seq.charAt(i + 1) == input[i - 1]) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (last < last && i++, seq.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i <= last && i++, seq.length() - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i <= last && seq.charAt(i) == ' ') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (last <= last && seq.charAt(i + 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i <= last && seq.charAt(i - 1) == ',') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i >= last && seq.length() - 1) < input[i + 1]) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i < last - 1 && seq[i] != input[i]) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i <= last && seq.charAt(i - 1) == input[i + 1]) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (last <= last && seq.charAt(i) != ',') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i != last) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i <= last && seq.charAt(i - 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i >= last && seq.length() - 1) != input[i + 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (last <= last && seq.charAt(i + 1) == ',') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i < last - 1 && i < length) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (++offset < last && i++, seq.length - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i < last - 1 && seq[i] != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i < last - 1 && Character.isDigit(input[i]))) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i <= last && seq.charAt(i - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (last < 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i < last) { // EOF at this point signifies empty value",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i > last - 1 && seq.charAt(i + 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i > last && seq.charAt(i - 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (++offset < last && i++, seq.length - 1) != input[i + 1]) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (last <= last && seq.charAt(i) == '-') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i > last && seq.charAt(i - 1) == input[i + 1]) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i < last - 1 && input[i] != '\\n') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i > last && seq.charAt(i - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i < last && i++, seq.length() - 1) != input[i + 2]) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i >= last && seq.length() - 1) != input[i] {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (last <= last && seq.charAt(i) != ' ') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (last <= last && seq.charAt(i - 1) == ',') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (last <= last && seq.length() > 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if(last <= last && seq.charAt(i + 1) == input[i]) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i < last - 1 && seq.charAt(i + 1) == '.') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i < last && i++, rows.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if(last <= last && i++, rows.length() - 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i >= last && seq.length() + 1) != input[i]) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i >= last && seq.length() - 1) == input[i]) {",
                "identical": false
            }
        ],
        "buggy_line": "if (offset < length) {",
        "fixed_line": "if (offset < length && last <= length) {"
    },
    "Mockito-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (actualTypeArgument instanceof TypeVariable) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (actualTypeArgument != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (!actualTypeArgument.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (!actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (!StringUtils.isBlank(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (!actualTypeArgument.equals(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (actualTypeArgument != null && actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (!StringUtils.isNotBlank(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (actualTypeArgument.equals(typeParameter) || Map.class.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(Boolean.class)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (actualTypeArgument instanceof Class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (actualTypeArgument.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || (actualTypeArgument instanceof WildcardType)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || Map.class.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom((String) actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument instanceof WildcardType) || Map.class.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (!(actualTypeArgument instanceof TypeVariable<?>)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || isBoolean((String) actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (!StringUtils.hasText(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(typeParameter)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(clazz)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || (actualTypeArgument instanceof WildcardType<?>)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(Boolean.TRUE)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType<?>)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || \"object\".equals(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType) || isBoolean((String) actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (!actualTypeArgument.equals(actualTypeArgument instanceof WildcardType) || Map.class.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (! (actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (!actualTypeArgument.equals(actualTypeArgument instanceof WildcardType)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType().equals(Boolean.FALSE)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument instanceof WildcardType) || Map.class.equals(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType<?>)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (!actualTypeArgument.equals(typeParameter) || Map.class.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (!actualTypeArgument.equals(actualTypeArgument)){",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(rawTypeArgument)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (!Collection.class.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (!actualTypeArgument.equals(actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(Boolean.FALSE)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType().equals(typeParameter)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType().equals(typeParameter.getActualTypeArguments()))) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).equals(Boolean.FALSE)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (!StringUtils.isNullOrEmpty(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || \"object\".equals(actualTypeArgument.getClass())) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || (actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType) || isBoolean((String) actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (!(actualTypeArgument instanceof TypeVariable)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType().equals(typeParameter.getActualTypeArguments()[0])) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(typeParameter.getRawType())) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || (actualTypeArgument instanceof WildcardType) || isBoolean((String) actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (!name.equals(actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (actualTypeArgument instanceof WildcardType || actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument instanceof WildcardType) || isBoolean(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType) || typeParameters.containsKey(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || Map.class.equals(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (!rawTypeArgument.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (!allowedSubtypes[i].isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom((Class<?>) actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType() == typeParameters.size()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || (actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType) || typeParameters.containsKey(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom((String) actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(contextualActualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType() == typeParameters.get(contextualActualTypeArguments[i])) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(class)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || \"object\".equals(actualTypeArgument.getClass().getName())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType() == typeArguments.length) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (!TypeArgument.class.isAssignableFrom(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(expTypeArgument)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || typeParameters.containsKey(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || (actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof WildcardType<?>)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType().equals(typeParameter.getRawType())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(Boolean)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (!StringUtils.hasText(actualTypeArgument instanceof WildcardTypeArgument)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument)){",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument instanceof WildcardType)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || isLength(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || isSafeTypeParameters(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom((String) actualTypeArgument);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType().isAssignableFrom(Boolean.class)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(varTypeArgument)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || (actualTypeArgument instanceof WildcardType) || actualTypeArgument instanceof TypeVariable<?>)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument instanceof WildcardType) || isBoolean((String) actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (actualTypeArgument instanceof GenericArrayType) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (!actualTypeArgument.equals(actualTypeArgument instanceof WildcardType) || Map.class.equals(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType() != typeParameters.get(\"name\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (!nameIsTextualActualTypeParameters.containsKey(typeParameter)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(actualTypeArgument.getClass())) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getType().equals(Boolean.FALSE)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(Boolean.TYPE))) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (!this.actualTypeArgument instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (!(actualTypeArgument instanceof WildcardType) || ClassUtil.isBogusClass(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).isAssignableFrom(additionalProperties.get(\"name\"))) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (!actualTypeArgument.equals(actualTypeArgument instanceof WildcardType) || \"object\".equals(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (!StringUtils.isEmpty(actualTypeArgument)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (!languageSpecificPrimitives.contains(actualTypeArgument instanceof WildcardType) || isSafeTypeParameters(actualTypeArgument)) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (typeParameter != actualTypeArgument) {"
    },
    "Math-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 0.0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return NaN;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) || (isInfinite == 0.0)) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return com.google.protobuf.TBaseHelper.getNaN(real, 0.0) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(afterNaN) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(isNaN) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : IdentValue.SMALL_BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return com.google.protobuf.GeneratedMessageV3.writeString(output, isNaN) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return com.google.protobuf.BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Float.valueOf(isNaN) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : IdentValue.BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) || (isInfinite == 0.0)) ? 0.0 : Float.BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZdWT8CLI2MnewArrayList() ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + \"]\";",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : IdentValue.SMALL_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZdWT8CLI2MUTDOWN) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : Float.BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZNCHRONOUS_CHARACTERS;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(text, 0.0) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + Integer.MAX_VALUE) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43BIGINT_CHARACTERS;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + Integer.MAX_VALUE ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43BIGINT_CHARACTERS;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + Integer.MAX_VALUE)) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZNCHRONOUS_CHARACTERS;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + 0.0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) || (isInfinite == 0.0)) ? 0.0 : Float.parseFloat(BIGINT_DECIMAL);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZNCHRONOUS_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return com.google.protobuf.Cc7f-0b8aBIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(text) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return com.google.protobuf.Cc7f-0b8aBIGINT_CHARACTERS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return com.google.protobuf.Codedc7f-0b8aBIGINT_CHARACTERS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return com.google.protobuf.Codedc7f-0b8aBIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return com.google.protobuf.Cc7f-0b8aV3MAZNCHRONOUS_CHARACTERS;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return com.google.protobuf.Cc7f-0b8aV3MAZNANOSECONDS_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + \" < 0.0 ? Integer.MAX_VALUE : 0.0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) || (isInfinite == 0.0)) ? 0.0 : Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZdWT8CLI2MUTDOWN ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZNANOSECONDS_BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return com.google.protobuf.Cc7f-0b8aV3MAZNANOSECONDS_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZNCHRONOUS_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZigzag;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : NaN;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZigzag;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(afterNaN) ? 0.0 : Float.valueOf(isNaN)) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return com.google.protobuf.Cc7f-0b8aBIGINT_CHARACTIVITI_NEGATIVE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(isNaN) ? 0.0 : Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZNANOSECONDS_BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : IdentValue.BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return com.google.protobuf.Codedc7f-0b8aBIGINT_CHARACTIVITI_NEGATIVE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(afterNaN) ? 0.0 : Float.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZNANOSECONDS_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return com.google.protobuf.Cc7f-0b8aV3MAZNANOSECONDS_BIGINT_DECIMAL;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 5)) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return com.google.protobuf.Codedc7f-0b8aBIGINT_CHARACTIVITI_ARRAY;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return com.google.protobuf.Cc7f-0b8aBIGINT_CHARACTIVITI_ARRAY;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return com.google.protobuf.CodedToNumber(_real) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(afterNaN) ? 0.0 : Float.valueOf(isNaN);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return com.google.protobuf.Cc7f-0b8aV3MAZNANOSECONDS_BIGINTS;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZNANOSECONDS_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) || (isInfinite == 0.0)) ? 0.0 : Float.BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZNANOSECONDS_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return com.google.protobuf.Cc7f-0b8aV3MAZNCHRONOUS_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : IdentValue.BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZdWT8CLI2MUTDOWN;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) ? 0.0 : Float.valueOf(isNaN));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : Float.BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43BIGINT_CHARACTIVITI_NEGATIVE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return com.google.protobuf.Cc7f-0b8aBIGINT_CHARACTIVITI_DECIMAL;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + Integer.MAX_VALUE)];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(textField, 0.0) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return com.google.protobuf.Codedc7f-0b8aBIGINT_CHARACTIVITI_DECIMAL;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : IdentValue.NONE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZNANOSECONDS_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43BIGINT_CHARACTIVITI_NEGATIVE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43MAZdWT8CLI2MICOLON_ARRAY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) || (isInfinite ? 0.0 : 0.0))[0];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : IdentValue.SMALL_BIGINT_CHARACTIVITI_ARRAY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return com.google.protobuf.GeneratedMessageV3.computeStringSize(null, isNaN) || (isInfinite == 0.0)) ? 0.0 : Float.parseFloat(Double.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + \"Z\";",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZNCHRONOUS_VALUE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return com.google.protobuf.CodedToNumber(_real) & ((1L << 18) - Long.MAX_VALUE) + Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return com.google.protobuf.toArray(newNaN) ? 0.0 : IdentValue.SMALL_BIGINT_INTEGER;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return com.google.protobuf.Cc7f-0b8aV3MAZNANOSECONDS_EQUALS;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return com.google.protobuf.Cc7f-0b8aBIGINT_FLOAT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZNCHRONOUS_BIGINTS;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return com.google.protobuf.Codedc7f-0b8a-43BIGINT_CHARACTIVITI_ARRAY;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return com.google.protobuf.Cc7f-0b8a-43MAZNCHRONOUS_FLOATS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return com.google.protobuf.TBaseHelper.getNaN(real, 0.0) <= 0.0;",
                "identical": false
            }
        ],
        "buggy_line": "return NaN;",
        "fixed_line": "return INF;"
    },
    "Mockito-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (methodsGuru.getAnnotation(invocation.getMethod()) != null ? Integer.parseInt(invocation.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return Math.min(methodsGuru, (int)invocation.getParameters().size() > 0 ? Integer.parseInt(invocation.getMethod()) : null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod() != null ? Integer.parseInt(invocation.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? 1 : 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod()) != null ? Integer.parseInt(invocation.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (methodsGuru.getAnnotation(invocation.getMethod()) != null ? Integer.parseInt(invocation.getDeclaringClass()) : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntity\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (methodsGuru.getMethod() == JsonToken.VALUE_EMBEDDED_OBJECT) ? new TypeLiteral(invocation.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityManagerFactory\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] != null ? Integer.parseInt(invocation.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (methodsGuru.getMethod() & Modifier.ABSTRACT) != 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return 0; // should not be assigned. Also declare the methods parameters as '\"+invocation.getDeclaringClass().getName()+\"')\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewClass());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewManager\".equals(invocation.getReturnType()));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityViewClass());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewClass\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return 0; // should not be assigned. Also declare the methods parameters as '\"+invocation.getName()+\"')\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewManager\".equals(invocation.getDeclaringClass()));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (methodsGuru.getMethod() == JsonToken.VALUE_EMBEDDED_OBJECT) ? void.of(invocation.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "throw new IllegalArgumentException(\"Could not find method for class \"+invocation.getClass().getName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewManager\".equals(invocation.getMethod())));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] != null ? Integer.parseInt(invocation.getMethod()) : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod() != null ? Integer.parseInt(invocation.getReturnType()) : \"com.blazebit.persistence.impl.function.entityClass()));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.TYPE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClass().getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return Math.min(methodsGuru, (String) invocation);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.deserialize(invocation.getReturnType()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewManager\".equals(invocation.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewManager\".equals(invocation.getMethod()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Math.min(methodsGuru, (int)invocation.getParameters().size() > 0 ? Integer.parseInt(invocation.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (methodsGuru.getMethod() == JsonToken.VALUE_EMBEDDED_OBJECT) ? Modifier.getMethod() : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityViewClass());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod()).getReturnType() == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod() != null ? Integer.parseInt(invocation.getReturnType()) : \"com.blazebit.persistence.impl.function.entityViewClass()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.TYPE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClass());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClass());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityViewClass\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.TYPE ? \"method\" : \"com.blazebit.persistence.impl.function.entityViewClass());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClass().getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.deserialize(invocation.getDeclaringClass()));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.TYPE ? \"method\" : \"com.blazebit.persistence.impl.function.entityViewClass().getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityViewClass().getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewClass<Method>(invocation.getReturnType()));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityClass().getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityViewClass());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod()).getReturnType() == Integer.MAX_VALUE ? 1 : 0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityClass\";",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (methodsGuru.getMethod() == JsonToken.VALUE_EMBEDDED_OBJECT) ? void.of(invocation.getMethod()) : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityClass());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityViewClass().getName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityClass());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod() != null ? Integer.parseInt(invocation.getMethod()) : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (methodsGuru.getMethod() == JsonToken.VALUE_EMBEDDED_OBJECT) ? new Method(invocation.getReturnType()) : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClass().getName()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return Math.min(methodsGuru, (int)invocation.getParameters().size() > 0 ? Integer.parseInt(invocation.getMethod()) : \"com.blazebit.persistence.impl.function.entityClass()));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.getClass().getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClass\";",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntity.getReturnType());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod() != null ? Integer.parseInt(invocation.getReturnType()) : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewClass()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityClass().getName()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityViewClass().getName()));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod()) != null ? Integer.parseInt(invocation.getDeclaringClass()) : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return Math.min(methodsGuru, (int)invocation.getParameters().size() > 0 ? Integer.parseInt(invocation.getMethod())) : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.TYPE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClass().getName()));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.TYPE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClass\";",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return Math.min(methodsGuru, (int)invocation.getParameters().size() > 0 ? Integer.parseInt(invocation.getMethod()) : \"com.blazebit.persistence.impl.function.entityViewClass());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (methodsGuru.getAnnotation(invocation.getMethod()) != null ? Integer.parseInt(invocation.getReturnType()) : null);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityViewClass().getName()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewClass<?>\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntity\";",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return Math.min(methodsGuru, (int)invocation.getParameters().size() > 0 ? Integer.parseInt(invocation.getMethod()) : \"com.blazebit.persistence.impl.function.entityClass());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntity((String) invocation);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityManagerFactory\"));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityViewClass().getName());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntity\", String.class);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewManager\".equals(invocation.getMethod().getReturnType()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entityClass\";",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (methodsGuru.getMethod() == JsonToken.VALUE_EMBEDDED_OBJECT) ? new TypeLiteral(invocation.getDeclaringClass()) : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return Math.min(methodsGuru, (int)invocation.getParameters().size() > 0 ? Integer.parseInt(invocation.getMethod()) : \"com.blazebit.persistence.impl.function.entityViewClass()));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.TYPE ? \"method\" : \"com.blazebit.persistence.impl.function.entityViewClass().getName()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return 0; // should not be assigned. Also declare the methods parameters as '\"+invocation.getClass().getName()+\"')\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntity));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewClass().getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntity.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewClass<Method>(invocation.getReturnType());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (methodsGuru.getParameters() & Modifier.ABSTRACT) != 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewManager\".equals(invocation.getMethod())) + \"[]\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityViewClass\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return 0; // should not be assigned. Also declare the methods parameters as '\"+invocation.getReturnType()+\"' (for class \"+invocation.getDeclaringClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityViewManager\".equals(invocation.getReturnType());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return 0; // just for non-isAssignableFrom(invocation.getReturnType()) && method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"method\" : \"com.blazebit.persistence.impl.function.entityClassLoaders\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityClass());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntity);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? 1 : 0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return Math.min(methodsGuru, method.getParameterTypes()[0] == Integer.MAX_VALUE ? \"true\" : \"com.blazebit.persistence.impl.function.entity.ValuesEntityView().getDeclaringClass());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return Math.min(methodsGuru, (int)invocation.getMethod()).getReturnType() == Integer.MAX_VALUE ? 0 : 1;",
                "identical": false
            }
        ],
        "buggy_line": "return 1;",
        "fixed_line": "return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;"
    },
    "Time-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (next == prev) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (next == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (next == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (next == prev - nextAdjusted) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (next == prev && nextAdjusted) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (next == nextTransition) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (next == TableId) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (next == current) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (next == current - nextAdjusted) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (next == null && currentTransition.equals(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (currentTransition.equals(nextAdjusted) && nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (next == prev && currentTransition.equals(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (next == prev && current != nextAdjusted) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (nextLocal == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (next == current && prev == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (currentTransitions.contains(nextAdjusted) && nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (next == null && prev == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (currentTransitions.size() > nextAdjusted) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (next == null && nextAdjusted) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (next == current && nextAdjusted) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (next == now) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (next == 0 && nextAdjusted) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (next == last - nextAdjusted) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (currentTransition.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (currentTransitions.contains(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (next == BANG) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (nextOffset == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if ((prev == nextAdjusted) && isTransitions(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (offset == prev - nextAdjusted) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (next == IdentValue.BOTTOM || prev == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (currentTransition.equals(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (currentTransition.equals(nextLocal + nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (next == prev && nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (next == offsetPrev || nextAdjusted) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (next == prev && current != nextTransition) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (next == prev && !currentTransition.equals(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if ((prev = nextAdjusted) nextAdjusted.get(nextLocal)) > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (nextIndex == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (next == e && prev == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (next == prev && nextAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (next == prev && currentTransition.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (next == next && currentTransition.equals(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if ((prev == nextAdjusted) && !nextAdjusted.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (next == nextLocal) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if ((prev == nextAdjusted) && !nextAdjusted.equals(next)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (currentTransitions.contains(nextLocal)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (currentTransitions.size() > prev) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if ((prev == nextAdjusted) && currentTransition.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (next == null || nextAdjusted) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (currentTransitions.contains(nextAdjusted) && nextAdjusted != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if ((prev == nextAdjusted) && (nextTransition().equals(current)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (next == nextType) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if ((prev == nextAdjusted) && (nextAdjusted.equals(next)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if ((prev = nextAdjusted) nextAdjusted[nextLocal];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (next == null && currentTransition.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (next == lastTransition) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (next == prev && currentTransition().equals(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (offset == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (next == nextNum) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if ((prev == nextAdjusted) && (nextTransition().equals(current))) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (next == prev && current.equals(nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if ((prev == nextAdjusted) && (nextAdjusted.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (currentTransitions.size() > prev && !nextAdjusted) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if ((prev == prev) && (nextAdjusted.equals(next)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if ((prev == nextAdjusted) && (nextOffset + 1) != null)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (nextAdjusted > nextTransition.get - offsetLocal) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (next == next - offsetPrev) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (next == nextFuture) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (nextNext == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (currentTransition.equals(nextAdjusted) && nextAdjusted != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if ((prev == prev) && (nextAdjusted < nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (next == next()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if ((prev = nextAdjusted) nextAdjusted.get(nextLocal)) == -1) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if ((prev == nextAdjusted) && !nextAdjusted.equals(current)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (currentTransition.equals(nextAdjusted) && prev == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (next == nextSubed) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (next == nextAdjusted && prev == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (next == prev && nextAdjusted.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if ((prev = nextAdjusted) nextTransitions.get(nextLocal)) > 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if ((prev == nextAdjusted) && (nextEntity != null)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (next == previousTransition) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if ((prev = nextAdjusted) nextAdjusted.get(nextOffset + 1) > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if ((prev == nextAdjusted) && (nextAdjusted.equals(current))) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (next == next - offsetPrev || prev == nextAdjusted) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (currentTransitions.contains(nextLocal + nextAdjusted)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (next == offsetPrev || nextAdjusted.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (next == BCELL) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (currentTransition.equals(nextLocal) && nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if ((prev == nextAdjusted) || (nextAdjusted.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (next == next && currentTransition.equals(nextLocal)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if ((prev == nextAdjusted) && currentTransitions.contains(nextLocal)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if ((prev == nextAdjusted) || (nextAdjusted.equals(next)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (next == offsetPrev) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (next == prev && nextAdjusted.equals(current)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (next == nextTransition.prev) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (nextTransitions.equals(current) && !nextAdjusted) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if ((prev == nextAdjusted) && (nextAdjusted.equals(nextType)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (next == nextEntity) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (nextLocal == prev) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (offsetLocal > 0) {",
        "fixed_line": "} else if (offsetLocal >= 0) {"
    },
    "JacksonCore-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (_hasSegments) return 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (_resultString == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (_resultString.hasSegments) return 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (_hasSegments) return _resultString;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (_resultString.hasSegments()) return _currentSegment;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (_resultString.hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (_hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (_hasSegments) return _resultArray;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (!_hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (_resultString == _currentSegment) return 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (!_hasSegments) return _resultString;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_hasSegments || _resultArray.equals(_currentSegment)) return 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (_resultString == null || _currentSegment.hasSegments()) return 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (_resultString == _currentSegment.length) return 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_resultString.hasSegments()) return 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (_closed) return _currentSegment;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_hasSegments && _resultString.equals(_currentSegment)) return 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (!_hasSegments) return _resultArray;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (_resultString == ctxt) return _currentSegment;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (_resultString == null) return 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (_hasSegments && _resultArray.equals(_currentSegment)) return 0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (!_hasSegments) return 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_resultString != null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_currToken == JsonToken.START_ARRAY) return _currentSegment;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (_resultString.hasSegments) return ser;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (_resultString.hasSegments()) return null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (_hasSegments || _resultString.equals(_currentSegment)) return 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_resultObject == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (_resultString == STATE_UNNAME) return _currentSegment;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_resultString == _currentSegment) return this;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (_state == STATE_UNNAMED_VALUE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (_resultString == null || _currentSegment.hasSegments()) return this;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (_hasSegments || _resultArray.equals(_currentSegment)) return this;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (_objectIdReader != null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_resultString.hasSegments()) return this;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_hasSegments) return _resultObject;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (_resultString.hasSegments) return this;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (_resultString.equals(_currentSegment, _segmentCount)) return 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (_currToken == JsonToken.START_ARRAY && _currentSegment != null) return 0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (_closed) return _resultString;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (_hasSegments || _resultArray.equals(MAX_VALUE)) return 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (_resultString.equals(_currentSegment)) return 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_resultString.equals(_currentSegment, _segmentId)) return null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (_resultString == null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (_hasSegments || _resultArray.equals(currentSegment)) return 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (_parsingContext.inObject()) return _currentSegment;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (_resultString == null || _currentSegment.hasSegments()) return ser;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (_currToken == JsonToken.START_ARRAY && _currentSegment.hasSegments()) return 0;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_resultString.equals(_currentSegment)) return _segment;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (_resultString.equals(_currentSegment)) return _currentSegment;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (_hasSegments && _resultArray;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_hasSegments || _resultArray.equals(next)) return 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (_hasSegments) return ser;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_resultString.endsWith(_currentSegment)) return _currentSegment;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (_currToken == JsonToken.START_ARRAY && _currentSegment.hasSegments()) return null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (_segmentCount >= _currentSegment.length) return 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (_resultString == JsonEncoding.UTF8) return _currentSegment;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (_annotationIntrospector.hasSegments(_resultString)) return _currentSegment;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (_hasSegments && _resultArray != null) return 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (_resultString == null) return _segmentSegment;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (_resultString == STATE_ROOT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (_hasSegments && _resultString.equals(_currentSegment)) return this;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (_currToken == JsonToken.START_OBJECT || _currentSegment.hasSegments()) return null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (_hasSegments || _resultString.equals(_currentSegment)) return this;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_state == STATE_UNNAME) return _currentSegment;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (_resultString.equals(_currentSegment) && _resultArray;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_hasSegments || _resultArray.equals(_currentSegment)) return result;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_resultString.hasSegments(name)) return _currentSegment;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_currToken == JsonToken.START_OBJECT || _currentSegment.hasSegments()) return 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (_resultString == null && _currentSegment.hasSegments()) return 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_objectIdReader != null) return _resultString;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (_resultString.hasSegments()) return ser;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (_hasSegments || _resultArray.equals(JsonGenerator.Feature.UNWRAP_SINGLE_VALUE)) return 0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (_hasSegments || _resultArray.equals(_currentSegment)) return null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_resultArray == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_resultString == null) return continue;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (_resultString.equals(_currentSegment, _segmentId)) return 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (_hasSegments && _resultArray.equals(_currentSegment)) return this;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (_objectIdReader == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (_resultString != null && _currentSegment.hasSegments()) return 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (_resultString == _segmentCount) return 0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (_resultString.equals(_currentSegment)) return _segmentCount;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (_resultObject == _currentSegment) return 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (_resultString == null) return this;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (_hasSegments || _resultArray.equals(JsonGenerator.Feature.IGNORE_UNKNOWN)) return 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (_currToken == JsonToken.START_OBJECT || _resultString.hasSegments()) return 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (_resultString.hasMore()) return _currentSegment;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (_hasSegments && _resultString.equals(_currentSegment, 0, _segmentCount)) return 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (_state == STATE_UNNAMED_VALUE) return _resultString;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (_resultString.equals(_currentSegment, _resultArray)) return null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (_resultString.hasSegments) return null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_hasSegments && _resultArray.length() == 0) return null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (_currToken == JsonToken.START_ARRAY && _currentSegment.hasSegments()) return this;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (_hasSegments || _resultArray.equals(JsonGenerator.Feature.WRITE_BIGDECIMAL)) return 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (_resultString.hasSegments()) return resultArray;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (_currToken == JsonToken.START_ARRAY) return _resultString;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (_resultString.hasSegments()) return _segment;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (_hasSegments || _resultArray.equals(JsonGenerator.Feature.EMBEDDED_ARRAY)) return 0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (_resultString.equals(_currentSegment) && !_hasSegments) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_resultString.equals(_currentSegment, _resultArray)) return _currentSegment;",
                "identical": false
            }
        ],
        "buggy_line": "if (!_hasSegments)  return _currentSegment;",
        "fixed_line": "if (!_hasSegments && _currentSegment != null)  return _currentSegment;"
    },
    "Time-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "instantLocal, chrono, iBivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "instantLocal, chrono, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "instantLocal, chrono,iLocale, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "instantLocal, chrono, iLocale,iDefaultYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "instantLocal, chrono, iCivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "instantLocal, chrono, iLocale, consumer, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "instantLocal, chrono, iLocale,iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "instantLocal, chrono, iNivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "instantLocal, chrono, iLocale,iToYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "instantLocal, chrono, iFivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "instantLocal, chrono, iLocale, int iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "instantLocal, chrono, iVivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "instantLocal, chrono, iLocale, hardware, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "instantLocal, chrono, iLocale, OivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "instantLocal, chrono, iDivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "instantLocal, chrono, iLocale, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "instantLocal, chrono, iLocale, offset,iDefaultYear);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "instantLocal, chrono, iLocale, lineOffset, iDefaultYear);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "instantLocal, chrono, iLocale, member, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "instantLocal, chrono, iLocale, version, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "instantLocal, chrono, iSivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "instantLocal, chrono, iLocale, length,VivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "instantLocal, chrono, iGivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "instantLocal, chrono, iLocale, bucket.getYearYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "instantLocal, chrono, newLocale, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "instantLocal, chrono, iAivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "instantLocal, chrono, iLocale, consumer, iBivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "instantLocal, chrono, iLocale, cachedMillis, iDefaultYear);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "instantLocal, chrono, iLocale, platform, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "instantLocal, chrono, iLocale,TABucket, iDefaultYear);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "instantLocal, chrono, iLocale, sizeAivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "instantLocal, chrono, iLocale, int iBivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "instantLocal, chrono, iLocale, bean, iDefaultYear);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "instantLocal, chrono, iLocale, sizeToYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "instantLocal, chrono, iLocale,ives, iDefaultYear);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "instantLocal, chrono, iLocale,MEMBERSPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "instantLocal, chrono, iLocale, indexToYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "instantLocal, chrono, iLocale, void.AivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "instantLocal, chrono, iLocale, bufferedOffset, iDefaultYear);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "instantLocal, chrono, iLocale, void.HivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "instantLocal, chrono, iLocale, cachedYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "instantLocal, chrono, iLocale,instantMillis, iDefaultYear);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "instantLocal, chrono, iLocale,chr, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "instantLocal, chrono,iLocale, iBivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "instantLocal, chrono, iLocale, lrono, iDefaultYear);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "instantLocal, chrono, iLocale, availableMillis, iDefaultYear);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "instantLocal, chrono, iLocale, hardware, iBivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "instantLocal, chrono, iLocale, remainingWidth, iDefaultYear);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "instantLocal, chrono, iLocale, fileName, iDefaultYear);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "instantLocal, chrono, iLocale, selectMillis, iDefaultYear);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "instantLocal, chrono, iLocale,iDefaultYear);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "instantLocal, chrono, iLocale, Thread.currentThread().getContextClassLoader());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "instantLocal, chrono, iLocale, haveMillis, iDefaultYear);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "instantLocal, chrono, iLocale, fileName, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "instantLocal, chrono, iLocale, possibleYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "instantLocal, chrono, iLocale,iouYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "instantLocal, chrono, iLocale, EmbeddedStart, iDefaultYear);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "instantLocal, chrono, iLocale, lineOffset, iPivotYear);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "instantLocal, chrono, iLocale, voided, iDefaultYear);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "instantLocal, chrono, iLocale, offset, bucket.getYearYear);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "instantLocal, chrono, iLocale, member, iDefaultYear);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "instantLocal, chrono, iLocale, width, height);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "instantLocal, chrono, iLocale, member, iBivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "instantLocal, chrono, iLocale, 2);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "instantLocal, chrono, iLocale, 0, 0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "instantLocal, chrono, iLocale, Integer.MIN_VALUE, iDefaultYear);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "instantLocal, chrono, iLocale, lineStart, iDefaultYear);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "instantLocal, chrono, iLocale, tr, iDefaultYear);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "instantLocal, chrono, iBivotYear, iPivotYear);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "instantLocal, chrono, iLocale, true);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "instantLocal, chrono, iLocale, 0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "instantLocal, chrono, iLocale, column, iDefaultYear);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "instantLocal, chrono, iLocale,iDefaultYear, iPivotYear);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "instantLocal, chrono, iLocale, desc, iDefaultYear);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "instantLocal, chrono, iLocale, consumer, iDefaultYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "instantLocal, chrono, iLocale, DEFAULT_DELIMITER, iDefaultYear);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "instantLocal, chrono, iLocale, cardinality, iDefaultYear);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "instantLocal, chrono, iLocale, 0, lengthDefaultYear);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "instantLocal, chrono, iLocale, desc, iPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "instantLocal, chrono, iLocale, startDefaultYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "instantLocal, chrono, iLocale, Embedded.valueOf(iDefaultYear));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "instantLocal, chrono, iLocale, lineOffset, iToYear);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "instantLocal, chrono, iLocale, position);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "instantLocal, chrono, iLocale, desc, iPivotYear);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "instantLocal, chrono, iLocale, {}\", bucket.getYear());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "instantLocal, chrono, iLocale, offset, bucket.getYear(iDefaultYear);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "instantLocal, chrono, iLocale, bucket.getYearYear, iPivotYear);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "instantLocal, chrono, iLocale, bucket.getYearYear);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "instantLocal, chrono, iLocale, offset, bucket.getYear());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "instantLocal, chrono, iLocale, Thread.currentThread().getOffsetDateTimeZone(iDefaultYear);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "instantLocal, chrono, iLocale, platform, iDefaultYear);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "instantLocal, chrono, iLocale, Thread.currentThread().getOffsetDateTime()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "instantLocal, chrono, iLocale,ipper, bucket.getYear());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "instantLocal, chrono, iLocale, Thread.currentThread().getOffset(), iDefaultYear);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "instantLocal, chrono, iLocale, Integer.parseInt(bucket));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "instantLocal, chrono, iLocale, 0, length);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "instantLocal, chrono, iLocale, Integer.parseInt(chrono));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "instantLocal, chrono, iLocale, Thread.currentThread())));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "instantLocal, chrono, iLocale, Thread.currentThread().getOffset(iDefaultYear);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "instantLocal, chrono, iLocale, {}\", bucket.getYear(), iCivotYear);",
                "identical": false
            }
        ],
        "buggy_line": "instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);",
        "fixed_line": "instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));"
    },
    "Math-58": {
        "fixes": [
            {
                "k": 1,
                "patch": "return fit == null ? 0 : guess.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return fit == null ? guess.length : guess.length;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return fit != null ? guess.length : 0L;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return fit == null ? Collections.EMPTY_LIST : guess.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return fit != null ? guess.length : 0 + guess.length;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1]];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1]];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length] ? guess.length - 1] : null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return fit.collect(Collectors.toByteArray()) ? guess.length : guess.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length] ? guess.length - 1] : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return fit == null ? 0 : guess.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] == 0 ? 0 : guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1]).getCount()];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] == 0 ? 0 : guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return fit != null ? guess.length : 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return fit != null ? guess.length : new ParameterGuesser(getObservations(), guess);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? this.getObservations() : guess);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return fit != null ? guess.length : 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? this.getObservations() : guess);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1]].getCount()];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length > 0 ? guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return fit && guess.length > 0 ? guess[0].get(0) : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return fit.invoke(session, guess);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length != 0 ? guess[0].get(0) : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return fit.collect(Collectors.toByteArray(), guess);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1]).getOffset() != null ? guess.length : 0L;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length] ? guess.length - 1)) : null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1) : guess.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1]].getCount()];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? guess.length - 1)) : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return fit && guess.length > 0 ? guess[0] : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return fit.registerModule(new ParameterGuesser());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length > 0 ? guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length != 0 ? guess[0].get(0) : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.size()]));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1).get();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length == 0 ? null : guess.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length == 0 ? null : guess.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length == 1) ? null : guess.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? this.getObservations() : guess.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length] ? guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? this.getObservations() : guess.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return guess.length == 0 ? null : guess.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return fit.invoke(guessed, guess);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return fit != null ? guess.length : 0 || guess.length > 255);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1]).getOffset() != null ? guess.length : 0 );",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? -1 : guess.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1).get();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return fit.newCall(getObservations(), guess);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return fit != null ? guess.length : 0 );",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return fit.invoke(Collections.singletonList(guessed), guess);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.size()]));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length > 0 ? guess[0].get(0) : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length != 0 ? guess[0] : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length == 1) ? null : guess.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1).getTokenValue();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1).toString();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1).find();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1]).getOffset+1, guess.length);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1]), guess);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? guess.length - 1)) : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return fit.signum(guessed);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? null : guess.length);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return fit != null ? guess.getCount() : 0L;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return fit == guess.length ? 0 : guess.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? guess.length : guess.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length != 0 ? guess.get(0) : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length != 0 ? guess[0] : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return fit != null ? guess.length : new ParameterGuesser(getObservations()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length > 0 ? guess[0] : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length != 0 ? guess.get(0) : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length > 0 ? guess[0].get(0) : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length == 0 ? null : guess.length);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1) : guess.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1]).getOffset() != null ? guess.length : 0);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return fit.compareAndSet(guessed, guess);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? guess.length : 0)).get();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1]).values().length];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return fit.invoke(Collections.emptyList(), guess);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1).getTokenValue();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length] ? guess.length - 1)) : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] && guess.length == 0 ? null : guess.length);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length] ? guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? this.getObservations() : guess;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1).toString();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return fit != null ? guess.length : new ParameterGuesser();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return fit.collect(Collectors.toByteArray()) ? guess.length - 1, guess.length) : null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] && guess.length > 0 ? guess[0] : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? guess.length : 0).getClass().getSimpleName(), guess);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return fit != null ? guess.length : Collections.singletonList(EMPTY_LIST);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return guess.length != 0 ? guess.length - 1) : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] == null ? 0 : guess.length - 1).find();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? guess.length - 1]) : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1]]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return fit.toArray(new ParameterGuesser[guessed.length - 1] ? guess.length : 0));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? -1 : guess.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? guess.length : 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return fit.values().toArray(new ParameterGuesser[guessed.length - 1] ? 0 : 0, guess.length);",
                "identical": false
            }
        ],
        "buggy_line": "return fit(new Gaussian.Parametric(), guess);",
        "fixed_line": "return fit(guess);"
    },
    "Jsoup-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").trim();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return accum.toString().replace(\"\\\"\", \"?\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return accum.toString().replace(\"\\\\.\", \"_\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return accum.toString().toUpperCase();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return accum.toString().replace(\"\\n\", \"\").trim();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return accum.toString().replace(\"\\\"\", \" \");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return accum.toString().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return accum.toString().replace(\".\", \"\").trim();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return accum.toString().replace(\"\\n\", \" \");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return accum.toString().toLowerCase();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return accum.toString().replace(\",\", \" \");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return accum.toString().replace(\"\\\"\", \"\"));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").toUpperCase();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return accum.toString().replace(\"-\", \" \");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return accum.toString().replace(\".\", \"\").toUpperCase();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return accum.toString().getBytes(\"UTF-8\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return accum.toString().replace(\"\\\"\", \"\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return accum.toString().getBytes(\"utf-8\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return accum.toString().replace(\"?\", \"\").trim();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return accum.toString().replace(\"\\\\{\" + \"}\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return accum.toString().split(\"\\\\s+\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return accum.toString().replaceAll(\"\\\\.\", \"_\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return accum.toString();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return accum.toString().replace(\"\\n\", \"\").toUpperCase();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return accum.toString().replace(\"\\\\.\", \"\"));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").trim() + \"}\";",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return accum.toString().replace(\"\\\"\", \"<=\").trim();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return accum.toString().replace(\"-\", \"\").trim();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").toUpperCase() + \"}\";",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return accum.toString().replace(\"\\\"\", Matcher.quoteReplacement(accum));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return accum.toString().getBytes(\"UTF-8\"));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return accum.toString().replace(\"\\\\.\", \"\\\\\\\\\"));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return accum.toString().replace(\"\\\"\", \"\\\\\\\\\"));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return accum.toString().replace(\"=end\", \"?\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return accum.toString().replace(\"\\\"\", \"|\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return accum.toString().replace(\"\\\\.\", \"\\\\\\\\\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return accum.toString().replace(\" \", \" \");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return accum.toString().replace(\"\\\"\", \"\")));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return accum.toString().replace(\"?\", \" \");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return accum.toString().replace(\"\\\"\", Matcher.quoteReplacement(accum)));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return accum.toString().replace(\"\\\"\", \"<\").toUpperCase() + \">\";",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").toUpperCase() + \"}\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return accum.toString().replace(\"\\n\", \"<=\").trim();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return accum.toString().replace(\"\\\"\", \"<\").toLowerCase() + \">\";",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").trim() + \".html\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return accum.toString().replace(\"\\n\", \"<a>\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return accum.toString().replace(\"\\\"\", \"<\").trim() + \">\";",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return accum.toString().replace(\"\\\"\", \":\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return accum.toString().replace(\"'\", \" \");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return accum.toString().replace(\",\", \"\").trim();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return accum.toString().replace(\"\\\\{\", \" \");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return accum.toString().replace(\"\\\"\", \", \");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").trim() + \"}\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return accum.toString().replace(\"\\\"\", \"?\".equals(accum) ? \"\" : \"\"));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return accum.toString().replace(\"-\", \"\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return accum.toString().replace(\"-\", \"\").toUpperCase();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return accum.toString().replace(\"?\", \"\").toUpperCase();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return accum.toString().replace(\"\\\"\", \"-\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return accum.toString().replace(\"\\\\.\", \"|\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return accum.toString().replace(\"'\", \"?\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return accum.toString().replace(\"\\\"\", \"<\").trim() ? \"\".to\" : \"\"));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").toUpperCase() + \".value\";",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return accum.toString().replace(\"\\r\\n\", \"\").trim();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return accum.toString().replace(\"\\\"\", \"\\\\\\\\\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return accum.toString().replace(\"\\\\s+\", \"\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return accum.toString().replace(\"\\\\.\", \"\").toUpperCase();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return accum.toString().replace(\"{\" + \"}\";",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return accum.toString().replace(\"\\\"\", \"<=\").trim() + \"}\";",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return accum.toString().replace(\"\\\"\", \"<value>\";",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return accum.toString().replace(\"\\\\{\" + \"}\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return accum.toString().replace(\",\", \"?\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return accum.toString().replace(\"'\", \"\").trim();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return accum.toString().replace(\"\\n\", \"<br>\";",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return accum.toString().replace(\"\\\"\", \"e\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return accum.toString().split(\",\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return accum.toString().replace(\"\\\\s+\", \"\").toUpperCase();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return accum.toString().replace(\",\", \"\").toUpperCase();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return accum.toString().replace(\"\\\"\", \"}\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").toUpperCase() + \"|\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return accum.toString().replace(\"\\\"\", \"<=\").toUpperCase() + \"}\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").toUpperCase() + \".value\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return accum.toString().replace(\"\\\\\", \" \");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return accum.toString().replace(\"$\", \" \");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return accum.toString().replace(\".\", \" \");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return accum.toString().replace(\"\\\\.\", \"\\\\\\\\\").replaceAll(\"]\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return accum.toString().compareTo(accum);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return accum.toString().replace(\"\\n\", \"\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").toUpperCase() + \"\\\"\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").trim() + \".value\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return accum.toString().replace(\"\\\"\", \"\\n\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return accum.toString().replace(\"\\\\.\", \"_\").toLowerCase() + \"]\";",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return accum.toString().replace(\"/ui\", \" \");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return accum.toString().replace(\"\\\"\", \"<=\" + RestConstants.URI_PREFIX + \"}\";",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return accum.toString().replace(\"\\\\.\", \"\\\\\\\\\").toLowerCase() + \"}\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return accum.toString().replace(\"\\\"\", \"25\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return accum.toString().replace(\"\\\"\", \"<=\" + RestConstants.URI_PREFIX + \"}\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return accum.toString().replace(\"-\", \"<=\").trim();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").toUpperCase() + \".html\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return accum.toString().replace(\"\\\"\", \"\").trim() + \"\\\"\";",
                "identical": false
            }
        ],
        "buggy_line": "return accum.toString().trim();",
        "fixed_line": "return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();"
    },
    "JacksonCore-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "char c = str.charAt(i++);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "char c = str.charAt(i++).charAt(i++);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "char c = str.charAt(i++ + 1) == '{') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "char c = str.charAt(i++ + 1) == '0') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "char c = str.charAt(i++ - 1) == '-') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "char c = str.charAt(i + 1) == '-') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "char c = str.charAt(i++ - 1) == '{') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "char c = str.charAt(i + 1) == '{') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "char c = str.charAt(i++ - 1) == '0') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "char c = str.charAt(i++).length();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "char c = str.charAt(i++ + 1) < '0') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : i;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "char c = str.charAt(i++ + 1) == '+') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "char c = str.charAt(i++ + 1) == ':') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "char c = input.charAt(i++);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "char c = str.charAt(i++ - i++);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "char c = str.charAt(i++ - 1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "char c = str.charAt(i++ + 1) == '{') ? 1 : i;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "char c = str.charAt(i++ + 1) == '0') ? 1 : i;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "char c = string.charAt(i++);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "char c = len -i >= len ? str.charAt(i + 1) : 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "char c = str.charAt(i++ + 1) == '\\n') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "char c = str.charAt(i);",
                "identical": true
            },
            {
                "k": 25,
                "patch": "char c = str.charAt(i + 1) == '0') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "char c = len -i >= len ? str.charAt(i++ : i + 1) : 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "char c = str.charAt(i++ - 1) == '-') ? 1 : i;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? -1 : 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "char c = str.charAt(i++ + 1) == '-';",
                "identical": false
            },
            {
                "k": 30,
                "patch": "char c = len -i >= len ? str.charAt(i + 1) : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "char c = name.charAt(i++);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "char c = len -i >= len ? str.charAt(i + 1) : i;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "char c = str.charAt(i++ - 1) == '\\n') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? -1 : i;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "char c = str.charAt(i++ + 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "char c = str.charAt(i++];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "char c = len.charAt(i++);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "char c = text.charAt(i++);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "char c = str.charAt(i++ + 1) < '0') ? i : 0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "char c = str.charAt(i++ * i + 1) == '0') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "char c = str.charAt(i++ + 1) == '{';",
                "identical": false
            },
            {
                "k": 42,
                "patch": "char c = str[i].charAt(i++);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "char c = str.charAt(i++ - 1) == '+') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "char c = str.charAt(i + 1) == '-') ? 1 : i;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "char c = len -i >= len ? str.charAt(i + 1) : '\\n')\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "char c = str.charAt(i++ - 1) == ':') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "char c = len -i >= len ? str.charAt(i + 1) : '\\n';",
                "identical": false
            },
            {
                "k": 50,
                "patch": "char c = str.charAt(i++ * i + 1) == '-') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 0 : 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "char c = str.charAt(i++ - 1) < '0') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "char c = str.charAt(i++ + 1) == ' ') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : '\\n';",
                "identical": false
            },
            {
                "k": 55,
                "patch": "char c = str.charAt(i++));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 0 : 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i >= len) c = str.charAt(i++);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "char c = str.charAt(i++ + 1) == ';') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "char c = str.charAt(i++ + 1) == '\\n';",
                "identical": false
            },
            {
                "k": 60,
                "patch": "char c = str.charAt(i++ + 1) == '0';",
                "identical": false
            },
            {
                "k": 61,
                "patch": "char c = str.charAt(i++ + 1) == '\\'') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "char c = str.charAt(i + 1) < '0') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "char c = str.charAt(i + 1) == ':') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "char c = str.charAt(i++).charAt(i);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "char c = str.charAt(i++ + 1) != '0') ? i : 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : -1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "char c = str.charAt(i++ + 1) == '.') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : 0, i);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "char c = ch.charAt(i++);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "char c = str.charAt(i++ + 1) == '\\'' ? 1 : 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "char c = str.charAt(i++ - 1) == '-') ? -1 : i;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "char c = str.charAt(i++).trim();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "char c = str.charAt(i++ + 1) < '0') ? -1 : 0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "char c = str.charAt(i++ - 1) == '-';",
                "identical": false
            },
            {
                "k": 75,
                "patch": "char c = str.charAt(i++ + 1) == '/') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "char c = str.charAt(i++ + 1) < '0') ? 1 : i;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "char c = str.charAt(i++ + 1) == '0') ? -1 : i;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "char c = str.charAt(i++ - 1) == '-') ? -1 : 0;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "char c = str.charAt(i + 1) == '+') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "char c = str.charAt(i + 1) == '{') ? 1 : i;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : 0, len;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "char c = str.charAt(i++ + 1) == '+') ? 1 : i;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? 1 : 0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "char c = str.charAt(i++ + 1) == '0') ? 0 : 0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "char c = str.charAt(i++ + 1) == '{') ? 1 : 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "char c = str.charAt(i++ + 1) == '0') ? -1 : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "char c = str.charAt(i++ + 1) == '#') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "char c = str.charAt(i++ + 1) == '{') ? 0 : 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "char c = str.charAt(i++ - 1) == '-') ? 1 : i + 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "char c = str.charAt(i++ + 1) == '0') ? 1 : 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "char c = str.charAt(i++ + 1) == '0') ? 0 : 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "char c = str.charAt(i++ + 1) == '-') ? index : i;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "char c = len -i >= len ? str.charAt(i) : i;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "char c = _source.charAt(i++);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "char c = str.charAt(i++ - 1) == '0') ? 1 : i;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "char c = str.charAt(i++ );",
                "identical": false
            },
            {
                "k": 97,
                "patch": "char c = len -i >= len ? str.charAt(i++ : i + 1) : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "c = str.charAt(i++);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "char c = str.charAt(i++ + 1) == ':') ? 1 : i;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "char c = str.charAt(i + 1) == '-') ? -1 : 0;",
                "identical": false
            }
        ],
        "buggy_line": "char c = str.charAt(i++);",
        "fixed_line": "char c = str.charAt(i);"
    },
    "Math-75": {
        "fixes": [
            {
                "k": 1,
                "patch": "return getCct((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return getCct((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return getCct((Comparable<?>) v).getPct();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this.getPct((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return getCct((Comparable<?>) v).getPct(v);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return getCct((Comparable<?>) v).delegate();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return this.getPct((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return getCct((Comparable<?>) v).floatValue();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return getCct((Comparable<?>)v).doubleValue();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return getCct((Comparable<?>)v).getPct(v);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this.getPct((Comparable<?>) v).floatValue();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return getCct(v);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Math.min(v, getCct((Comparable<?>) v).getPct());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return getCct(v).getPct((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return getCct((Comparable<?>)v).getPct();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (v != null) ? getCct(v) : 0.0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return getCct((Comparable<?>)v);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return getCct((Comparable<?>) v).getPct());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return getCct(v) < 0.0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (v instanceof Comparable<?>) ? getCct(v) : 0.0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return 0.0((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return 0.0((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (v == null) ? 0.0 : getCumPct((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return Math.abs((Comparable<?>) v).getPct();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return Math.min(v, getCct((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (v == null) ? 0.0 : getCumPct((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this.getPct((Comparable<?>) v).delegate();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return Math.min(v, getCct((Comparable<?>) v).doubleValue());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this.getPct(v) < 0.0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (v == null) ? 0.0 : getCumPct(v);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Math.abs((Comparable<?>)v).getPct();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return this.getPct((Comparable<?>) v).floatValue());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return getCct((Comparable<?>) v).delegate().getPct(v);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this.getPct(v);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return getCct(v -> v instanceof Comparable<?>) ? 0.0 : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return this.getPct(v) ? 0.0 : Math.sqrt(v);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return getCct((Comparable<?>) v).doubleValue() < 0.0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return Math.abs((Comparable<?>)v).getPct(v);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return getCct((Comparable<?>) v).delegate.getPct(v);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return Math.abs((Comparable<?>) v).getPct(v);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return getCct(v, (Comparable<?>) v).getPct();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.getPct(v) ? getCct(v) : 0.0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return getCct((Comparable<?>)v).floatValue();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return getCct((Comparable<?>) v).getPct()) < 0.0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return getCct(v) ? 0.0 : Math.sqrt(v);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this.getPct(v) ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return getCct(v.getPct((Comparable<?>) v).doubleValue());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return getCct(v, (Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return getCct(v -> v instanceof Comparable<?>) ? (float) v).getPct() : 0.0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return getCct(v, false);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.getPct(v) == null ? 0.0 : getCumPct((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return getCct((Comparable<?>) v).getPct(v.toString());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return getCct((Comparable<?>) v).floatValue() < 0.0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return getCct((Comparable<?>) v).lookFor(v);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (v == null) ? 0.0 : getCumPct(v, DEFAULT_LIST_DELIMITER);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return getCct(v) ? 0.0 : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this.getPct(v) == null ? 0.0 : getCumPct((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return getCct((Comparable<?>) v).floatValue() * 0.0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this.getPct(v) != null ? getCct(v) : 0.0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return getCct((Comparable<?>) v).getPct(), this.v);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return getCct(v) ? 0.0 : Math.abs(v);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return Math.abs((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return getCct((Comparable<?>) v).floatValue());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return Math.min(v, getCct((Comparable<?>) v).floatValue());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this.getPct((Comparable<?>) v).doubleValue());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return getCct(v.getPct((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this.getPct(v) ? 0.0 : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return Math.min(v, getCct((Comparable<?>) v).delegate());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return Math.abs((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (v == null) ? 0.0 : getCumPct((Comparable<?>) v).getPct();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return Math.abs((Comparable<?>)v);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return getCct(v) ? 0.0 : Math.abs(v).getPct();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this.getPct(v) ? 0.0 : Math.abs(v);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this.getPct((Comparable<?>) v).floatValue() == 0.0 ? 0.0 : Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return getCct(v -> v instanceof Comparable<?>) ? (float) v : 0.0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return getCct((Comparable<?>)v).delegate();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return getCct((Comparable<?>) v).floatValue() == 0.0 ? 0.0 : Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this.getPct((Comparable<?>) v).lookFor(v);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return Math.abs(v) < 0.0 ? getCct(v) : 0.0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return getBct((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return getCct(v).doubleValue();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return getMct((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return getText((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return ((Comparable<?>) v).getPct(v);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return Math.sqrt((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return getCct((Comparable<?>) v).floatValue() ? 0.0 : 0.0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return getCct((Comparable<?>) v).floatValue() == _values ? 0.0 : Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return getCct((Comparable<?>) v).doubleValue() + 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (v == null) ? 0.0 : getCumPct(v, DEFAULT_LIST_DELIM);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.getPct(v) == null ? 0.0 : Math.sqrt(v);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return getBct((Comparable<?>) v).doubleValue();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return getCct((Comparable<?>)v).getPct());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return getCct(v -> v instanceof Comparable<?>) ? (float) v : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this.getPct(v) == null ? 0.0 : getCumPct((Comparable<?>) v).doubleValue());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return Math.abs(v) < 0.0 ? getCct(v) : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return Math.min(v, getCct((Comparable<?>) v).getPct()) < 0.0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return ((Comparable<?>) v).getPct();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return getCct((Comparable<?>) v).floatValue() : 0.0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return Math.abs(v) < 0.0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return 0.0((Comparable<?>) v).getPct();",
                "identical": false
            }
        ],
        "buggy_line": "return getCumPct((Comparable<?>) v);",
        "fixed_line": "return getPct((Comparable<?>) v);"
    },
    "Chart-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / 255.0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int g = (int) ((this.upperBound / this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int g = (int) ((v / this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / 255.0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int g = (int) ((this.lowerBound / this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int g = (int) ((this.lowerBound / this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int g = (int) ((value - this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int g = (int) ((v - this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int g = (int) ((this.lowerBound * this.upperBound) / 255.0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int g = (int) ((value - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int g = (int) ((this.upperBound * this.lowerBound) / 255.0);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int g = (int) ((this.lowerBound * v) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int g = (int) ((value - this.lowerBound) / 255.0);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int g = (int) ((v * this.lowerBound - this.upperBound) / 255.0);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound * 255.0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) % 255.0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int g = (int) ((value / this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int g = (int) ((this.upperBound == v) ? 0 : this.lowerBound);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int g = (int) ((v - this.upperBound) / (this.lowerBound);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / (v));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int g = (int) ((value - this.lowerBound) / (this.upperBound));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int g = (int) ((value - this.lowerBound) / (this.upperBound * 255.0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int g = (int) ((value - this.upperBound) / (this.lowerBound);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int g = (int) ((value - this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / (v));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int g = (int) ((this.upperBound * v) / (this.lowerBound);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int g = (int) ((this.lowerBound & this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length - 1) * 255.0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int g = (int) ((v / this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.doubleValue() / 255.0);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / 255.0));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int g = (int) ((v - this.upperBound) / (this.lowerBound * 255.0);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int g = (int) ((v * this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int g = (int) ((value - this.upperBound) / (this.lowerBound * 255.0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int g = (int) ((this.lowerBound == v) ? 0 : this.upperBound);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int g = (int) ((this.lowerBound & this.upperBound) / 255.0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int g = (int) ((value - this.upperBound) / 255.0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int g = (int) ((this.upperBound == null) ? 0 : this.lowerBound);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / (v * 255.0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length - 1) / 255.0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int g = (int) ((this.upperBound == null) ? 0 : this.lowerBound.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int g = (int) ((value * this.lowerBound - this.upperBound) / 255.0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.doubleValue() * 255.0);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) % 255.0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / (v * 255.0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "double g = (int) ((this.lowerBound / this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int g = (int) ((v - this.lowerBound) / 255.0);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / 255.0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int g = (int) ((v - this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / (v).length);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length - 1) * 255.0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "double g = (int) ((this.lowerBound - this.upperBound) / 255.0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int g = (int) ((value - this.upperBound) / (this.lowerBound));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / (v);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / (v)));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "double g = (int) ((this.upperBound / this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / (v + 1) * 255.0);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.value;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int g = (int) ((this.upperBound == null) ? 0 : this.lowerBound.length() / 255.0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int g = (int) ((v - this.upperBound) / (this.lowerBound));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound * 255.0));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int g = (int) ((this.upperBound == null) ? 0 : this.lowerBound.length - 1) / 255.0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / (v + 1) * 255.0);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int g = (int) ((this.lowerBound - this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) * 255.0 / 255.0);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "double g = (int) ((this.lowerBound - this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / (v);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int g = (int) ((this.lowerBound - this.lowerBound) / 255.0);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length() / 255.0);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int g = (int) ((this.upperBound == null) ? 0 : this.lowerBound.length - 1) * 255.0);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int g = (int) ((this.upperBound == Integer.MAX_VALUE) ? 0 : this.lowerBound);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / (v, this.upperBound);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int g = (int) ((value - this.lowerBound) / (this.upperBound * 255.0));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length() * 255.0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / (v)));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int g = (int) ((this.upperBound == null) ? 0 : this.lowerBound.value;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / (v).length * 255.0);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "double g = (int) ((value - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int g = (int) ((v * this.lowerBound) / 255.0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "double g = (int) ((this.upperBound - this.lowerBound) * 255.0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int g = (int) ((this.upperBound == null) ? 0 : this.lowerBound.length() * 255.0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int g = (int) ((v * this.lowerBound) / (this.upperBound));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int g = (int) ((value / this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int g = (int) ((this.upperBound == null) ? 0 : this.lowerBound.length());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.doubleValue());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "double g = (int) ((this.lowerBound / this.upperBound) * 255.0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int g = (int) ((this.lowerBound == null) ? 0 : this.upperBound.length - v;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / (v, this.upperBound);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int g = (int) ((this.lowerBound * this.lowerBound) / 255.0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int g = (int) ((value - this.lowerBound) % 255.0);",
                "identical": false
            }
        ],
        "buggy_line": "int g = (int) ((value - this.lowerBound) / (this.upperBound",
        "fixed_line": "int g = (int) ((v - this.lowerBound) / (this.upperBound"
    },
    "Lang-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal1.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.DAY_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal1.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.DAY_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.DAY_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == null\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cal2.get(Calendar.HOUR_OF_DAY) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cal2.get(Calendar.HOUR) == cal2.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cal1.get(Calendar.HOURS) == cal2.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.DAY_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal1.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cal1.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) == 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cal2.get(Calendar.HOURS) == cal2.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.HOUR)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.MILLISECOND));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.DAY_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cal2.get(Calendar.HOUR) &&cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.MINUTE) &&cal2.get(Calendar.HOUR_OF_YEAR)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.SECOND));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR) &&cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.MILLISECOND));",
                "identical": false
            }
        ],
        "buggy_line": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&",
        "fixed_line": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&"
    },
    "Mockito-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringDescription.toString(arg).equals(arg.toString());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringDescription.toString(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg.toString())) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringDescription.valueOf(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg.toString());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringDescription.valueOf(arg).equals(arg));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString())));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringDescription != null && arg.toString().equals(arg) ? arg.toString() : arg;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringDescription.toString().equals(arg) ? arg.toString() : arg;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringDescription.toString() == null ? \"null\" : arg.toString().equals(arg));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringDescription.toString().equals(arg) || arg.equals(arg));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringDescription != null ? !arg.equals(arg) : arg;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringDescription.toString(arg).equals(arg.toString())));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (arg == null) ? String.valueOf(arg).equals(arg)) : arg;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg) ? arg.toString() : arg;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringDescription.valueOf(arg).equals(arg)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringDescription.valueOf(arg).equals(arg) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringDescription != null ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringDescription.compareTo(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (arg == null) ? String.valueOf(arg).equals(arg) : arg;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringDescription != null && arg.getClass().equals(arg.toString())) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringDescription != null ? arg.toString() : \"\";",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringDescription.valueOf(arg).equals(arg) || arg.equals(arg));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (arg == null) ? String.valueOf(arg).equals(arg) : arg.toString());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringDescription.toString().equals(arg) || arg.equals(arg);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg.toString()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringDescription.compareTo(arg).equals(arg.toString());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringDescription != null && arg.toString().equals(arg) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (arg == null ? String.valueOf(arg) : arg;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringDescription.toString(arg).equals(arg.toString()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringDescription != null && arg.getName().equals(arg) ? arg.toString() : arg;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringDescription.valueOf(arg).equals(arg) || arg.equals(arg);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringDescription.toString().equals(arg);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringDescription != null && !arg.equals(arg)) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (arg == null) ? String.valueOf(arg).equals(arg) : arg.toString().equals(arg));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringDescription.toString().equals(arg).getName();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringDescription != null && arg.getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg).toString());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringDescription != null && arg.getName().equals(arg.toString())) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringDescription == null ? \"null\" : arg.toString().equals(arg));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringDescription != null && arg.getClass().isArray() && arg.getName().equals(arg.toString())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringDescription != null && arg.toString().equals(arg);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg.trim())) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringDescription.toString(arg).equals(arg.toString())) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringDescription.toString() == null ? \"\" : arg.toString().equals(arg));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringDescription.startsWith(arg) ? arg.toString() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringDescription.toString() == null ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringDescription != null && arg.toString().equals(arg) ? arg : arg;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringDescription != null && arg.getClass().equals(arg) ? arg.toString() : arg;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString())) : false;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringDescription.toString().equals(arg) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringDescription.toString().equals(arg) || arg.equals(arg).getDeclaringClass().getName());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringDescription.toString() == null ? \"null\" : arg.getClass().getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringDescription.valueOf(arg).equals(arg) ? arg.toString() : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString()) && arg.equals(arg));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg)) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringDescription.toString().equals(arg) || arg.equals(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString())) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringDescription.toString().equals(arg).toUpperCase();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringDescription.startsWith(arg) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringDescription.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringDescription.toString(arg).equals(arg.toString()) && arg.equals(arg);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringDescription.contains(arg) || arg.equals(arg).toString();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringDescription != null && arg.getClass().equals(arg.toString());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (arg == null) ? String.valueOf(arg).equals(arg) : arg.toString()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringDescription.toString(arg).equals(arg)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringDescription.toString(arg).equals(arg) || arg.equals(arg);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg) ? arg.toString() : \"\";",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringDescription != null && arg.toString().equals(arg) ? arg.toString() : \"\";",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringDescription != null && arg.getName().equals(arg) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString()) || arg.equals(arg);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringDescription.compareTo(arg) < arg;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringDescription.toString().equals(arg) ? arg : arg;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringDescription != null && arg.toString().equals(arg.toString())) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringDescription != null && arg.toString().equals(arg) ? arg.getName() : arg;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringDescription != null && !arg.equals(arg) ? arg.toString() : arg;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringDescription.toString().equals(arg) || arg.equals(arg).getClass().getName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringDescription.toString().equals(arg) || arg.equals(arg).getDeclaringClass().getName() == arg;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString()) && arg.equals(arg);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringDescription.contains(arg) ? arg.toString() : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringDescription.toString(arg).equals(arg));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringDescription.equals(arg) || arg.equals(arg).toString();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringDescription != null && arg.toString().equals(arg) ? arg.getValue() : arg;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringDescription.toString(arg).equals(arg.toString()) || arg.equals(arg);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringDescription.toString() == null ? \"null\" : arg.toString().equals(arg).toString());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString()) || arg.equals(arg));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringDescription != null && arg.equals(arg) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg.toString())){",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringDescription == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringDescription.startsWith(arg) ? !arg.equals(arg) : arg;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringDescription.valueOf(arg).equals(arg.toString())) + false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg.toString())) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringDescription != null && !arg.equals(arg) ? arg.toString() : false;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringDescription.toString().equals(arg) || arg.equals(arg).getDeclaringClass().isAssignableFrom(arg);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringDescription != null && arg.getClass().getName().equals(arg).toString();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringDescription.toString().equals(arg) || arg == null;",
                "identical": false
            }
        ],
        "buggy_line": "return StringDescription.toString(m).equals(arg.toString());",
        "fixed_line": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());"
    },
    "Codec-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, urlSafe, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int len = getEncodeLength(binaryData, 0, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, urlSafe);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int len = getEncodeLength(binaryData, lastResultSize);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, columnSize);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,brid_SEPARATOR);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, null, maxResultSize);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int len = getEncodeLength(binaryData, hasResultSize);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, dao_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,Mig_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, insets_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int len = getEncodeLength(binaryData,Urls, MIME_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,\u7c7b_SEPARATOR);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,folder);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int len = getEncodeLength(binaryData,2, MIME_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, Having_SEPARATOR);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, null, urlSafe);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, trusted_SEPARATOR);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int len = getEncodeLength(binaryData, maxResultSize);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,ToBe_SEPARATOR);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, length);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, JP_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,Paragraph_SEPARATOR);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, Having_SEPARATOR);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,une_SEPARATOR);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, df_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,0000000);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, sender, maxResultSize);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int len = getEncodeLength(binaryData,64,_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int len = getEncodeLength(binaryData, startIndex, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,gender, maxResultSize);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, 20.0_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, printStackTrace_SEPARATOR);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, ourResultSize);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "byte len = getEncodeLength(binaryData, urlSafe, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, Al_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,00000002);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,0-9_SEPARATOR);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,drag_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,\u0792_SEPARATOR);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, continue);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,)',_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int len = getEncodeLength(binaryData, startIndex, MIME_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, status);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,ange_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int len = getEncodeLength(binaryData,Directories, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,\u8846_SEPARATOR);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, junk_SEPARATOR);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, binaryData);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, column.length);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, exact_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, questions);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, instant_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,toggleClass_SEPARATOR);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,\u521a_SEPARATOR);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, localcontext_SEPARATOR);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "long len = getEncodeLength(binaryData, urlSafe, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, degree_SEPARATOR);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,\u90aa_SEPARATOR);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int len = getEncodeLength(binaryData, server, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,~_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, 9]_SEPARATOR);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, voCollection_SEPARATOR);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, minResultSize);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int len = getEncodeLength(binaryData, elementData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,olver_SEPARATOR);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, scala_SEPARATOR);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int len = getEncodeLength(binaryData,Urls, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,eon_SEPARATOR);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, insets);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,ici_SEPARATOR);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, maxResultSize);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, Login_SEPARATOR);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, passResultSize);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, explained_SEPARATOR);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,25,_SEPARATOR);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, rawResultSize);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int len = getEncodeLength(binaryData, propertyName, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, PCollection_SEPARATOR);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, colorData);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int len = getEncodeLength(binaryData, size, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, interpolator_SEPARATOR);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, MAX_SEPARATOR);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int len = getEncodeLength(binaryData, server, MIME_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, columnSize);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE,~_SEPARATOR);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int len = getEncodeLength(binaryData, urlSafe,900_SEPARATOR);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, ownerSafe);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, null);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, null, hasResultSize);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int len = getEncodeLength(binaryData, file, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, 127_SEPARATOR);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int len = getEncodeLength(binaryData, urlSafe, encoder_SEPARATOR);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, length);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, exact_SEPARATOR);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, measurementsData);",
                "identical": false
            }
        ],
        "buggy_line": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "fixed_line": "long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);"
    },
    "Collections-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "private final Object readResolve() {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private final Object readResolve;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static Object readResolve() {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "protected Object readResolve() {",
                "identical": true
            },
            {
                "k": 5,
                "patch": "private static Object readResolve;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private final Object readResolve = new Object();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final Object readResolve() {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static Object readResolve = new Object();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "protected Object readResolve;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final Object readResolve;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private int readResolve() {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private final Object readResolve = new Object[this.size()];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final Object readResolve = new Object();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private final Object readResolve = this;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private final Object readResolve = Logger.getLogger(getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static Object readResolve = new Object[this.size()];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private final Object readResolve = new Object(this);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private final Object readResolve = Logger.getLogger(getClass().getName());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static String readResolve() {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private final Object readResolve = new Object[this.getClass().getSimpleName()];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private final Object readResolve = new Object[this.getClass().getClassLoader()];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private final Object readResolve = new Object[this.index];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final Object readResolve = new Object[this.size()];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private final Object readResolve = new Object[this.index()];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private final Object readResolve = new Object[this.getInputType().getSimpleName()];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private final Object readResolve = new Object[this.getStatus()];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static Object readResolve = new Object[this.getClass().getSimpleName()];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private final Object readResolve = new Object[this.getInputCount()];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private final Object readResolve = new Object[this.data.size()];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private final Object readResolve = new Object[this.getClass()];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private final Object readResolve = new Object[values.size()];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private final Object readResolve = new Object[this.values.size()];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private final Object readResolve = System.currentTimeMillis();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static int readResolve() {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static Object readResolve = new Object(this);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private final Object readResolve = getCcalculatedObject() {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private final Object readResolve = new Object[this.getNoOfParties()];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private Object readResolve() {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private final static Object readResolve() {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private final Object readResolve : new Object();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private final Object readResolve = Logger.getLogger(getClass().getSimpleName() + \".html\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private final Object readResolve = new Object[this.context.getInputType().getSimpleName()];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private final Object readResolve = DEFAULT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private final Object readResolve = new Object[this];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private final Object readResolve = new Object[this.properties.size()];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private final Object readResolve = new Object[this);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private final Object readResolve = new Object[this.n];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private final Object readResolve = null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static Object readResolve = new Object[this.getInputCount()];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private final Object readResolve = new Object[this.getErrorCount()];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private final Object readResolve = Logger.getLogger(getClass().getSimpleName() + \".value\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static Object readResolve = new Object[this.index];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private final Object readResolve = new Object[this.getParent()];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static Object readResolve = new Object[this.getInputType().getSimpleName()];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private final Object readResolve = new Object[this.config.getInputType().getSimpleName()];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static Object readResolve = new Object[this.getClass().getClassLoader()];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static Object readResolve = new Object[this.getStatus()];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private final Object readResolve = new Object[this.names.length];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "protected Object readResolve = new Object();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static Object readResolve = new Object[this.index()];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private final Object readResolve = new Object[this.v];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private final Object readResolve = DEFAULT_LISTED_DELIM;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static Object readResolve = new Object[this];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private final Object readResolve = new Object[this.getStatusLine()];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private final Object readResolve = getCcalculatedObject();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private final Object readResolve = new Object[this.getPosition()];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private final Object readResolve = new Object[this.hashCode()];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "protected final Object readResolve() {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private final Object readResolve = LoggerFactory.read(this);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static Object readResolve = new Object[this.getClass()];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private final Object readResolve = DEFAULT_CLOSED;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private final Object readResolve = new Object[this.getDirection()];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private final Object readResolve = new Object[this.getOutputCount()];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private final Object readResolve = new Object[this.getObject()];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private final Object readResolve = new Object[this.ordinal()];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private final Object readResolve = new Object[this.getOutput()];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static Object readResolve = new Object[this.n];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final Object readResolve = new Object[this.getInputType().getSimpleName()];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private final Object readResolve = new Object[this.names.length()];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private Map<Object, Object> readResolve() {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private final Object readResolve = new Object[this.getStart()];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private final Object readResolve = factory.createObject();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private final Object readResolve = DEFAULT_BEFORE_UNIONS;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final Object readResolve = new Object[this.getInputCount()];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private final Object readResolve = Logger.getLogger(getClass().getSimpleName()) ? -1 : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private final Object readResolve = new Object() {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private final Object readResolve = Logger.getLogger(getClass().getSimpleName()) ? null : new Object();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private final Object readResolve = new Object[this.config.getOutput()];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private final Object readResolve = new Object[this.myId];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private final Object readResolve = new Object[this.names.size()];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private final Object readResolve = new Object[this.getInputIndex()];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private final Object readResolve = new Object[this.partition()];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private final Object readResolve = new Object[this.getNumber()];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private final Object readResolve = new Object[this.data.length()];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private final Object readResolve = new Object[this.logPosition()];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private final Object readResolve = new Object[this.getInputParameter()];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private final Object readResolve = new Object[this.remaining()];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private final Object readResolve = new Object[this.getStartObject()];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static Object readResolve = this;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private final Object readResolve = 1;",
                "identical": false
            }
        ],
        "buggy_line": "private Object readResolve() {",
        "fixed_line": "protected Object readResolve() {"
    },
    "Codec-3": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (value.getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (value.startsWith(\"$GPRMC\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (value.contains(index + 1, 4, \"I\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (contains(value, index + 1, 2, \"W\".length())) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (contains(value, index + 1, 2, \"W\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (value.contains(index + 1, 2, \"I\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".length())) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (index >= 3 && value.charAt(index + 1) == '{') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (contains(value, index + 1, 4, \"I\".length())) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (contains(value, 0, 0 && value.length() > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (value.contains(index + 1, 4, \"I\".length())) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (value.contains(index + 1, 3, \"I\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (value.contains(index + 1, 2, \"W\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (value.getClass().getSimpleName().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (value.endsWith(\"+0000\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".equals(value.toString())) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (value.contains(index + 1, 4, \"J\".length())) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".equals(value)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (contains(value, index + 1, 4, \"I\".equals(value.toString())) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (contains(value, index + 1, 2, \"I\".length())) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (index > 0 && value.charAt(index + 1) == ':') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (contains(value, index + 1, 4, \"I\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (value.contains(index + 1, 2, \"\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (value.contains(index + 1, 2, \"AGGI\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (contains(value, index + 1, 4, \"I\".equals(value)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (value.getClass().getName().equals(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (value.contains(index + 1, 4, \" [END_BUGGY] \".length())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (value.contains(index + 1, 4, \" '{') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (index != -1) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".equals(value.length())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (contains(value, index + 1, 3, \"I\".length())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (contains(value, index + 1, 3, \"W\".length())) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".equals(value.charAt(index + 1))) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (index > 0 && value.charAt(index + 1) == '{') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (value.contains(index + 1, 2, \"I\".length())) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (index == arguments.length()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (value.startsWith(\"$\") || values.contains(value)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (index >= 3 && value.charAt(index + 1) == '2' && value.charAt(index + 2) == '0') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (value.contains(index + 1, 2, \"Z\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (value.charAt(index + 1) == '\\\"') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".equals(value.charAt(index + 1) == '{') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (value.startsWith(\"I\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (value.contains(index - 1, 3, \"I\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (index >= length) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".equals(value.length() - 1)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (value.contains(index + 1, 3, \"I\".length())) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (value.getClass().getSimpleName().equals(\"file\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (contains(value, index + 1, 4, \"W\".length())) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (contains(value, index + 1, 2, \"I\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (contains(value, 0, 3, \"W\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (value.contains(index + 1, 3, \"Z\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (contains(value, 0, 3)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (value.contains(index + 1, 3, \"J\".length())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (contains(value, index + 1, 2, \"AGGI\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (value.equals(\"$\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (contains(value, index + 1, 3, \"W\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (value.contains(index + 1, 3, \"Stack\".length())) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".equals(value.charAt(index + 1) == '0') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (index == 3 && value.charAt(index + 1) == '{') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (index == 0 && value.charAt(index + 1) == ':') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (value.startsWith(\"$\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (value.contains(index + 1, 4, \"Z\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (value.charAt(index + 1) == '{') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (value.contains(index + 1, 4, \"Stack\".length())) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (contains(value, index + 1, 4, \"J\".equals(value.length() - 5)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (value.contains(index + 1, 2, \"W\".length())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (value.contains(index + 1, 4, \"I\".equals(value)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (contains(value, index + 1, 3, \"J\".equals(value.charAt(index + 1))) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (contains(value, 0, 3, \"I\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (value.getClass().getSimpleName().equals(\"obj\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (index >= 3 && value.charAt(index + 1) == ':') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (index == 3 && value.charAt(index + 1) == ':') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (contains(value, index + 1, 4, \"W\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (contains(value)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (contains(value, index + 1, 3, \"J\".equals(value.toString())) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (value.length() > 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (contains(value, index + 1, 3, \"J\".equals(value.length() - 1)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (value.getClass().isText()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (value.contains(index + 1, 4, \"J\".equals(value)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (value.getClass().getSimpleName().equals(\"general\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (contains(value, index + 1, 3, \"I\".equals(value.toString())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (index > 0 && value.charAt(index + 1) == '-') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (value.contains(index + 1, 4, \" 4\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (contains(value, index + 1, 2, \"W\".equalsIgnoreCase(value)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (value == null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (value.equals(\"*\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (contains(value, index + 1, 3, \"J\".length())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (value.contains(index + 1, 3, \" '{') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (contains(value, index + 1, 3, \"J\".equals(value)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (index >= 3 && value.charAt(index + 1) == '2' && value.charAt(index + 2) == '{') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (value.charAt(index + 1) == '}') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (index > 0 && value.charAt(index - 1) == ':') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (contains(value, index + 1, 3, \"J\".equals(value.charAt(index + 1) == '{') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (contains(value, index + 1, 3, \"J\".equals(value.length())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (contains(value, index + 1, 2, \"\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (value.startsWith(\"$\") || isBoolean(value)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (value.equals(\"+\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (index > 0 && index + 1, 2, \"W\".length())) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (contains(value, index + 1, 3, \"J\".equals(value.charAt(index + 1) == '0') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (contains(value, 0, 0 && value.length() > 1) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (contains(value, index + 1, 4, \"IER\")) {",
        "fixed_line": "} else if (contains(value, index + 1, 3, \"IER\")) {"
    },
    "Jsoup-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"placed\", \"title\"};",
                "identical": false
            },
            {
                "k": 4,
                "patch": "protected static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\".length\", \"title\"};",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"+plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"size\", \"title\"};",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final String[] preserveWhitespaceTags = {\"catch\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"map\", \"title\"};",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"ca\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String[] preserveWhitespaceTags = {\"key\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"latitude\", \"title\"};",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"found\", \"title\"};",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String[] preserveWhitespaceTags = {\"800\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"catch\", \"title\"};",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext_end\", \"title\"};",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"username\", \"title\"};",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final String[] preserveWhitespaceTags = {\"longitude\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \",title\"};",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final char[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"update\", \"title\"};",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"len\", \"title\"};",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"25\", \"title\"};",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"forment\", \"title\"};",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"array\", \"title\"};",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String[] preserveWhitespaceTags = {\"type\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String[] preserveWhitespaceTags = {\"string\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String[] preserveWhitespaceTags = {\"parameters\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"status\", \"title\"};",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final String[] preserveWhitespaceTags = {\"pre\", \"placed\", \"title\"};",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"multi\", \"title\"};",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"execution\", \"title\"};",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \" initial\", \"title\"};",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final String[] preserveWhitespaceTags = {\"raw\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintexted\", \"title\"};",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \" Exception\", \"title\"};",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String[] preserveWhitespaceTags = {\"matches\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String[] preserveWhitespaceTags = {\"entity\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"+title\"};",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String[] preserveWhitespaceTags = {\"\" + \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String[] preserveWhitespaceTags = {\"local\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"total\", \"title\"};",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"'plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"comparator\", \"title\"};",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaactive\", \"title\"};",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plac\", \"title\"};",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"lookup\", \"title\"};",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"placd\", \"title\"};",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"forintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"sub\", \"title\"};",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \" increment\", \"title\"};",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String[] preserveWhitespaceTags = {\"example\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final String[] preserveWhitespaceTags = {\"autocomplete\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final String[] preserveWhitespaceTags = {\"uri\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final String[] preserveWhitespaceTags = {\"value\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String[] preserveWhitespaceTags = {\"x\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title}\", \"title\"};",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"delivered\", \"title\"};",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final String[] preserveWhitespaceTags = {\"offset\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"decode\", \"title\"};",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final String[] preserveWhitespaceTags = {\"</\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \".plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String[] preserveWhitespaceTags = {\"default\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"Feedback\", \"title\"};",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String[] preserveWhitespaceTags = {\"span\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"TRUE\", \"title\"};",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"as\", \"title\"};",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"center\", \"title\"};",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"button\", \"title\"};",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titlePrefix\", \"title\"};",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"offset\", \"title\"};",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"throwable\", \"title\"};",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"bytes\", \"title\"};",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"yes\", \"title\"};",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaations\", \"title\"};",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"sb\", \"title\"};",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"em\", \"title\"};",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"commit\", \"title\"};",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"INTERVAL\", \"title\"};",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"ss\", \"title\"};",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"key\", \"title\"};",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"co\", \"title\"};",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \";\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titlesetSize\", \"title\"};",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title};",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"table\", \"title\"};",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"annotation\", \"title\"};",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"test\", \"title\"};",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"description\"};",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"Parallelism\", \"title\"};",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"addresses\", \"title\"};",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"column\", \"title\"};",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"collect\", \"title\"};",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \")\";",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"meta\", \"title\"};",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"positions\", \"title\"};",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"src\", \"title\"};",
                "identical": false
            }
        ],
        "buggy_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
        "fixed_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};"
    },
    "Codec-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (i == 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Character.isJavaLang(lineSeparator) && buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (Character.isDigit(lineSeparator) || buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (Character.isJavaLang(lineSeparator) && buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (isLength(lineSeparator) && buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(i + 1) == ':') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Character.isDigit(lineSeparator) || buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (Character.isDigit(lineSeparator) && buf[pos++] == '\\n') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos + 1) == ':') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i + 1 < length) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Character.isJavaLang(lineSeparator) && buf[pos++] == '\\n') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (Character.isJavaLang(lineSeparator) || buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos++] != '\\n') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (Character.isDigit(lineSeparator) && lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (Character.isDigit(lineSeparator) && lineSeparator.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (Character.isWhitespace(lineSeparator) || lineSeparator.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Character.isArray(lineSeparator) && buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (Character.isJavaLang(lineSeparator) && buf.charAt(i + 1) == ':') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i < length) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf[pos++] == '\\n') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (isLength(lineSeparator) && buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (isLength(lineSeparator) || buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i < length - 1 && buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (encode(lineSeparator, 0, buf.length)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf.charAt(pos + 1) == ':') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (isLength(lineSeparator) || lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Character.isArray(lineSeparator) && buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Character.isWhitespace(lineSeparator) || lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos++] == '\\n') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Character.isDigit(lineSeparator) && lineSeparator[i] != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i > 0 && buf.charAt(pos - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(i + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf.charAt(i + 1) == ':') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (isLength(lineSeparator) || buf.charAt(i + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (Character.isWhitespace(lineSeparator) || Character.isAlphabetic(lineSeparator)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Character.isDigit(lineSeparator) || buf.charAt(i + 1) == ':') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.isISOControl(lineSeparator)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (Character.isDigit(lineSeparator) && buf[pos] == '\\n') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i >= buf.length) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (add(lineSeparator, 0, buf.length)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i < lineSeparator.length - 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.charAt(i + 1) == ':') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos - 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.isJavaIdentifierPart(lineSeparator)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (Character.isDigit(lineSeparator) && buf[pos++] != '\\n') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf.charAt(pos++] != '\\n') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Character.isDigit(lineSeparator) || lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (Character.isWhitespace(lineSeparator) || Character.isISOControl(lineSeparator)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.isJavaLang(lineSeparator)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Character.isJavaLang(lineSeparator) || buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (Character.isJavaLang(lineSeparator) && buf.charAt(pos + 1) == ':') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (encode(lineSeparator, 0, lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (add(lineSeparator, 0, lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (isLength(lineSeparator) && buf.charAt(pos + 1) == ':') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i > 0 && buf.charAt(pos + 1) == '\\n') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (isLength(lineSeparator) && lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf[pos++] != '\\n') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos + 1) == '0') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Character.isJavaLang(lineSeparator) && buf[pos++] != '\\n') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.charAt(i + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (buf.charAt(pos) == '\\n') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos++]) == '\\n') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Character.isJavaLang(lineSeparator) && buf[pos] == '\\n') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(i + 1) == ',') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (isLength(lineSeparator) && buf.charAt(pos++] != '\\n') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i > 0 && buf[pos] != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(i + 1) != '\\n') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos + 1) != '\\n') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i > 0 && buf.charAt(pos - 1) == ':') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Character.isDigit(lineSeparator) && lineSeparator[pos] != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Character.isDigit(lineSeparator) || buf.charAt(i + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos + 1) == '-') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf[pos] == '\\n') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i > buf.length - 1) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf.charAt(i + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i > 0 && buf.charAt(pos + 1) == ':') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf.charAt(pos++] == '\\n') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.length > 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i > 0 && buf.readableBytes() >= length) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Character.isJavaLang(lineSeparator) && buf.charAt(i + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(i + 1) == '-') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Character.isArray(lineSeparator) && buf[pos++] == '\\n') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (isLength(lineSeparator) && buf.charAt(pos++] == '\\n') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (inAvroSchema.charAt(pos) == '\\n') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Character.isJavaLang(lineSeparator) || buf.charAt(i + 1) == ':') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (Character.isDigit(lineSeparator) && buf.charAt(pos + 1) == '/') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (Character.isDigit(lineSeparator) && buf[pos] != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Character.isWhitespace(lineSeparator) && buf.charAt(pos + 1) == ' ') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Character.isWhitespace(lineSeparator) && lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Character.isWhitespace(lineSeparator) || buf.charAt(pos + 1) == ':') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i < length - 1 && buf.charAt(pos + 1) == ':') {",
                "identical": false
            }
        ],
        "buggy_line": "if (lineLength > 0) {",
        "fixed_line": "if (lineLength > 0 && pos > 0) {"
    },
    "JacksonDatabind-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (previous != null) && previous.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (previous != null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (previous != null) && _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (previous != null) ? previous.equals(ann) : _annotations;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType(), _annotations);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (previous != null) && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (previous != null) && _annotations.equals(ann.value());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType())) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType()));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (previous != null) && _annotations.equals(ann.value);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (previous != null) && previous.equals(_annotations);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (previous != null && previous.equals(_annotations));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (previous != null) && _annotations.equals(ann.endpoint);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (previous != null) && _annotations.containsKey(ann.annotationType());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (previous != null) && _annotations.equals(ann)) ? true : false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType()) ? previous.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (_annotations == null) && _annotations.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (previous != null) ? previous.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (previous == null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (previous != null) && previous.equals(ann.annotationType(), _annotations);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (previous != null) || _annotations.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType) ? previous : _annotations;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (previous != null) && !previous.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (previous != null) ? previous.equals(ann) : _annotations == null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType())) ? previous : _annotations;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (previous != null) && previous.equals(ann.annotationType);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType().getSimpleName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (previous != null) || _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (previous != null) && _annotations.contains(ann.annotationType());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (previous != null) && _annotations.equals(ann.type());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (previous != null && _annotations.equals(ann) ? previous.value() : _annotations;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType()) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (previous != null) || previous.equals(_annotations);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (previous != null) && end.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (previous != null) || previous.equals(ann)) ? true : false;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (previous != null) && _annotations.equals(ann.property);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType) ? previous.value() : _annotations;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (previous != null) && _annotations.containsKey(ann.annotationType())) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (previous != null) && n.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (previous != null && previous.equals(_annotations) ? _annotations.get(ann) : false;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (previous != null) || previous.equals(ann)) ? false : _annotations;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType) ? previous.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType()) ? previous : _annotations;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (previous != null) && _timestamp.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType())) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (previous != null) && _annotations.equals(ann._annotations);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (previous != null && _annotations.containsKey(ann.annotationType()) ? previous.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (previous != null) && previous.equals(ann)) ? true : false;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (previous != null) && previous.equals(ann)) ? false : _annotations;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType(), previous);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (previous != null) && _annotations.equals(ann.debug());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (previous != null && previous.equals(_annotations)) ? _annotations.get(ann) : false;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType())) ? previous : false;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (previous != null && _annotations.size() > 0) ? previous.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (previous != null) && _annotations.equals(ann)) ? false : _annotations;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (previous != null && previous.equals(_annotations)) ? _annotations.equals(ann.value() : false;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (previous != null && _annotations.containsKey(ann.annotationType())) ? previous : false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (previous != null) && !previous.equals(ann.annotationType(), _annotations);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType())) ? false : _annotations;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (previous != null && _annotations.containsKey(ann.annotationType()));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType(), _annotations);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType) ? previous : false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType()) ? previous.equals(ann) : that.property == null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (previous != null ? previous.equals(ann) : _annotations;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (previous == null) || previous.equals(ann)) ? false : _annotations;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (previous != null) && _annotations.equals(ann.type);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType()) ? previous.value() : _annotations;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (previous == null) ? _annotations.equals(ann) : previous.equals(ann);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (previous != null && previous.equals(_annotations)) ? _annotations.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType()) ? previous : _annotations;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (previous != null && _annotations.equals(_annotations)) ? previous.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType().getRawClass());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (previous != null && _annotations.size() > 0 ? previous.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (previous != null && previous.equals(_annotations)) ? _annotations.equals(ann.annotationType() : false;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (previous != null && previous.equals(_annotations);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType)) ? previous.equals(ann) : false;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (previous != null && _annotations.containsKey(ann.annotationType())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (previous != null) && previous.equals(ann.annotationType()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (previous != null) ? previous.equals(ann) : that.property == null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType().getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType())) ? false : _annotations;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType()) ? previous.equals(ann) : that.property == null);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (previous != null) ? previous.equals(ann) : _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType(_annotations));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (previous != null) && max.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (previous != null ? previous.equals(ann) : _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (previous != null && _annotations.equals(ann.value));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (previous != null) && _annotations.equals(ann.values());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType) ? previous : _annotations);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (previous != null) && !_annotations.equals(ann.annotationType());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType(_annotations));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (previous != null && _annotations.equals(ann.annotationType) ? previous : _annotations == null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (previous != null) ? previous : _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (previous != null) && _annotations.equals(ann.annotationType().getName(), _annotations);",
                "identical": false
            }
        ],
        "buggy_line": "return (previous != null) && previous.equals(ann);",
        "fixed_line": "return (previous == null) || !previous.equals(ann);"
    },
    "JacksonDatabind-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, null)) {",
                "identical": true
            },
            {
                "k": 3,
                "patch": "if (buffer.readIdProperty(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (buffer.readIdProperty(propName)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (_ctorParameters != null && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (_objectIdReader != null && creatorProp.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (buffer.readIdReader(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (buffer.readIdProperty(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_deserializeWithErrorWrapping(p, ctxt, creatorProp.deserialize(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (creatorProp.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (buffer.read(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (buffer.readId(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (_objectIdReader != null && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (ext.handlePropertyValue(p, ctxt, creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (creatorProp.handlePropertyValue(p, ctxt, propName, null)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (creatorProp.handlePropertyValue(p, ctxt, creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (_ctorParameters != null && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (_deserializeAndSet(p, ctxt, creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, creatorProp))) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_objectIdReader != null && creatorProp.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (buffer.readPropertyValue(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (!buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (_objectIdReader != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (buffer.readIdProperty(propName) != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (buffer.readIdProperty(_creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_creatorProp.handlePropertyValue(p, ctxt, creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_objectIdReader != null && creatorProp.nextToken() != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (creatorProp.handlePropertyValue(p, ctxt, creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (_deserializeWithErrorWrapping(p, ctxt, creatorProp);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, creatorProp)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (creatorProp.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_objectIdReader != null && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_customCreator && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (ext.handlePropertyValue(p, ctxt, creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_objectIdReader != null && creatorProp.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (creatorProp.handlePropertyValue(p, ctxt, propName, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (_ctorParameters != null && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (creatorProp.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (buffer.readIdReader(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_OBJECT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (creatorProp.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (_objectIdReader != null && creatorProp.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.FAIL_ON_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (_creatorProp.handlePropertyValue(p, ctxt, creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_deserializeAndSet(p, ctxt, creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_objectIdReader != null && _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_objectIdReader != null && creatorProp.nextToken() != JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_deserializeWithErrorWrapping(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, value)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (buffer.assignParameter(creatorProp, _deserializeAndSet(p, ctxt, creatorProp))) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (buffer.read(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (_ctorParameters != null && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.FAIL_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (_ctorParameters != null && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (creatorProp.handlePropertyValue(p, ctxt, propName, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_SINGLE_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (creatorProp.findCreatorProperty(propName) != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (creatorProp.nextToken() == JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (buffer.readId(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (_objectIdReader != null && creatorProp.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (_customCreator && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.FIELD_NAME && ctxt.isEnabled(DeserializationFeature.FAIL_ON_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (_deserializeWithErrorWrapping(p, ctxt, creatorProp) != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_objectIdReader != null && creatorProp.equals(propName)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (creatorProp.nextToken() == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (buffer.readIdProperty(propName) && ctxt.isEnabled(DeserializationFeature.ADJUST_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (ext.handlePropertyValue(p, ctxt, propName, creatorProp).deserialize(p, ctxt));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (buffer.readPropertyValue(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (buffer.readIdProperty(propName)) continue;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (!buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (buffer.readIdProperty(propName) == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_objectIdReader != null && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_OBJECT)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {",
        "fixed_line": "if (ext.handlePropertyValue(p, ctxt, propName, null)) {"
    },
    "JacksonDatabind-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "sb.append(';');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "sb.append(']');",
                "identical": false
            },
            {
                "k": 3,
                "patch": "sb.append('?');",
                "identical": false
            },
            {
                "k": 4,
                "patch": "sb.append(')');",
                "identical": false
            },
            {
                "k": 5,
                "patch": "sb.append('<');",
                "identical": false
            },
            {
                "k": 6,
                "patch": "sb.append(' ');",
                "identical": false
            },
            {
                "k": 7,
                "patch": "sb.append('}');",
                "identical": false
            },
            {
                "k": 8,
                "patch": "sb.append(\", \");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null;\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "sb.appendEnd(sb) ? _referencedType.getGenericSignature() : null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "sb.append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "sb.append(this) ? _referencedType.getGenericSignature() : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "sb.append(String.valueOf(_referencedType).getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null;\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "sb.append(String.valueOf(_referencedType)).append(';');",
                "identical": false
            },
            {
                "k": 21,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null;\".equals(sb);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "sb.append(\"\\n - _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : new StringBuilder();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb, false) : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb)) : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb))) : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "sb.append(\"\\n - _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : !_referencedType.getGenericSignature(sb);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature() : EMPTY;\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? !_referencedType.getGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb, false) : null;\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;\";",
                "identical": false
            },
            {
                "k": 35,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb, false) : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "sb.append(\"\\n - _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : null;\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb, false) : new StringBuilder();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : new StringBuilder();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb, false) : 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null;\".equals(sb));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;\".equals(sb);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb)).append(';');",
                "identical": false
            },
            {
                "k": 45,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : new StringBuilder();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : !_referencedType.getGenericSignature(sb)).append(';');",
                "identical": false
            },
            {
                "k": 47,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "sb.append(String.valueOf(_referencedType).getGenericSignature() != null ? _referencedType.getGenericSignature()) : null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature() : EMPTY_BINDINGS);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature() : EMPTY)).append(';');",
                "identical": false
            },
            {
                "k": 51,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : JsonToken.VALUE_EMBEDDED_OBJECT;\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null;\".equals(sb, false);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : 0 );",
                "identical": false
            },
            {
                "k": 54,
                "patch": "sb.append(' ').append(sb);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : 0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature() : EMPTY_BINDINGS;\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : buf;\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : new StringBuilder());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : !_referencedType.getGenericSignature(_referencedType)).append(';');",
                "identical": false
            },
            {
                "k": 62,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb, false) : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : EMPTY;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "sb.append(\"CASE WHEN \").append(_referencedType);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : !_referencedType.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : EMPTY;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb)).append(';');",
                "identical": false
            },
            {
                "k": 68,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb)) : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : !_referencedType.getGenericSignatureOrDefault(sb);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? String.valueOf(sb) : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null;\")) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "sb.append(\"' id='\").append(sb) ? _referencedType.getGenericSignature() : null;\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : !_referencedType.getGenericSignature(sb, false);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb, false) : new StringBuilder();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null;\".equals(sb));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "sb.append(String.valueOf(_referencedType).getGenericSignature() != null ? _referencedType.getGenericSignature(sb)) : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "sb.append(String.valueOf(_referencedType).getGenericSignature() != null ? _referencedType.getGenericSignature(sb, false) : null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : buf;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb, true) : null;\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : 0 );",
                "identical": false
            },
            {
                "k": 81,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb, false) : 0);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature() : null;\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature() : 0L;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "sb.append _referencedType.getGenericSignature() == null ? \"null\" : _referencedType.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "sb.append('+');",
                "identical": false
            },
            {
                "k": 87,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : null;';",
                "identical": false
            },
            {
                "k": 88,
                "patch": "sb.append _referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : new StringBuilder();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb)) : null;\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb, true) : null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "sb.append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb, false) : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature()) : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : new StringBuilder());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : null; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb, false) : 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "sb.append(String.valueOf(_referencedType).getGenericSignature() != null ? _referencedType.getGenericSignature(sb, false) : new StringBuilder();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "sb.append(\": \").append(_referencedType.getGenericSignature() != null ? _referencedType.getGenericSignature(sb) : 0L;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "sb.append(\"UNKNOWN=\").append(_referencedType != null ? _referencedType.getGenericSignature(sb) : \"?\";",
                "identical": false
            },
            {
                "k": 100,
                "patch": "sb.append(\" [type=\").append(_referencedType);",
                "identical": false
            }
        ],
        "buggy_line": "sb.append(';');",
        "fixed_line": "sb.append(\">;\");"
    },
    "Closure-114": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (nameNode.isTextual()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (parent.getNodeType() == Node.ELEMENT_NODE) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (node.getNodeType() == Node.ELEMENT_NODE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (nameNode.isMinusNode()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (current.getNodeType() == Node.ELEMENT_NODE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (nameNode.isNull()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (l == n - 1) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (nameNode.getNodeType() == Node.ELEMENT_NODE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (oppositeNode.isPlusNode()) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (nameNode.getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (l == n) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (oppositeNode.getType().equals(nameNode.getNodeName())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (StringUtils.isNotEmpty(nameNode.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (oppositeNode.getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (StringUtils.isNotEmpty(nameNode)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (nameNode.getNodeName().equals(\"tr\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (node.getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (parent.getNext() != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (nameNode.isArray()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (nameNode.isUsedOverTainted()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (oppositeNode.isMinusNode()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (current.getType().equals(nameNode.getNodeName())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (oppositeNode.getType().equals(nameNode.getLocalName())) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (nameNode.class.isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (l == RestVariableScope.LOCAL) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (current.getToken().getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (oppositeNode.getType().equals(nameNode.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (current.getNodeName().equals(\"tr\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (node.getNodeName().equals(\"tr\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (isUsedOverTainted(nameNode)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (parent.getNodeName().equals(\"tr\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (current.getType().equals(nameNode.getLocalName())) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (nameNode.isyped()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (l == RestVariable.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (mustache.class.isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (l >= n) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (class.isAssignableFrom(c)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (StringUtils.isNotEmpty(nameNode) && operation.getParent() != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (parent.getNodeName().equals(\"l\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (current.getToken().getType().equals(nameNode.getName())) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (parent.getNodeName().equals(\"img\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (nameNode.getNodeName().equals(\"l\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (nameNode.getType().isCollection()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (parent.getType().equals(nameNode.getNodeName())) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (StringUtils.isNotEmpty(nameNode) && parent.getParent() != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (nameNode.getNodeName().equals(\"form\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (node == null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (nameNode.isNameValue()) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (nameNode.isCollection()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (nameNode.isName()) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (current.getToken().getType().equals(nameNode.toString())) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (oppositeNode.getType().isArray()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (StringUtils.isNotEmpty(description)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (current.getToken().getType().equals(nameNode.getNodeName())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (nameNode.getType().isArray()) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (nameNode.getNodeName().equals(\"img\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (oppositeNode.getType().isUndirected()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (Boolean.FALSE.equals(nameNode.getNodeName())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (nameNode.getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (nameNode.getText().equals(\"true\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (parent.getTokenValue().equals(nameNode.getNodeName())) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (node.getToken().getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (parent.getNodeName().equals(\"form\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (parent.getToken().getType().equals(nameNode.toString())) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (parent.getType().equals(nameNode.getLocalName())) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (StringUtils.isNotEmpty(nameNode.getParent())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (parent.getType().equals(nameNode)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (nameNode.isExpressionEnabled()) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (StringUtils.isNotEmpty(nameNode.getToken())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (oppositeNode.getType().equals(nameNode)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (parent.getFirstChild().isTextual()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (StringUtils.isNotBlank(nameNode.getTokenValue())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (parent.getToken().getType().equals(nameNode.getNodeName())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (parent.getToken().getType().equals(nameNode.getName())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (nameNode.getToken().getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (flow == null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (nameNode.getType().equals(\"null\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (level >= 1 && n % 2 == 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (nameNode.getNodeName().equals(\"input\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (parent.getToken().getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (current.getType().equals(String.class)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (nameNode.isMemberClass()) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (parent.getTokenValue().equals(nameNode.getParent())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (nameNode.getType().equals(\"select\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (nameNode.isNameual()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (parent.getFirstDescendant(CxxGrammarImpl.functionName) != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (parent.getLocalName().equals(\"img\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (level >= 1 && task.getFirstDescendant(CxxGrammarImpl.functionName) != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (oppositeNode.getToken().getType().equals(nameNode.getNodeName())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (current.getToken().getType().equals(nameNode)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (nameNode.getToken().getType().equals(CxxKeyword.IDENTIFIER)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (name.equals(\"class\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (level >= 1 && task.getFirstChild().isNextSibling()) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (nameNode.class.isAssignableFrom(cls)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (node.getNodeName().equals(\"img\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (StringUtils.isNotEmpty(n)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (parent.isEqualTo(nameNode)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (nameNode.getNodeName().equals(\"true\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (StringUtils.isNotEmpty(l) && !recordNode.getTokenValue().equals(nameNode))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (nameNode.getNodeName().equals(\"class\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (!(parent.isCall() && parent.getFirstChild() == n)) {"
    },
    "Math-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tree.isBary()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (this.tree.isBary()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (this.tree.getType().equals(Double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (this.tree.getType().isAssignableFrom(Double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (this.tree.getType().equals(BaryType.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if(tree.isBary()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (!tree.isBary()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (this.tree.getType().equals(BigDecimal.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (this.tree.getType().equals(Float.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (this.tree.compareTo(Double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (this.tree == null || tree.getType() == Type.POSITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tree == null || tree.isAssignableFrom(Double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (left == null || tree.getType() == Type.POSITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_IDENT) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tree == null || tree.getType() == Type.POSITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (this.tree.getType() == Type.POSITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tree.isBlaze() || tree.isAssignableFrom(Double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (BigDecimal.class.isAssignableFrom(v)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tree.getType() == Type.POSITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tree.isB1]()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (left.getValue() == null || ((Double) tree).isBary()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (this.tree == null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (this.tree.getType().equals(double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tree.getType().equals(Double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (this.tree.getType().equals(BaryConstants.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tree.isBary() || Double.POSITIVE_INFINITY.equals(value)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tree == null || tree.isBary()) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_MICOLON) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_PERCENTAGE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (this.tree.getValue() == null || tree.getType().equals(Double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tree == null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tree.isBary() || Double.POSITIVE_INFINITY.equals(v)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (param.getValue() == null || ((Double) tree).isBary()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (this.tree.getValue() == null || ((Double) tree).isBary()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (this.tree.compareTo(Double.POSITIVE_INFINITY) <= 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tree == null || tree.isEmpty()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (this.tree.getType().equals(BaryV.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tree.isBary() || Double.NEGATIVE_INFINITY.equals(Double.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (this.tree.isBary(v)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tree.isBary() || Double.NEGATIVE_INFINITY.equals(value)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_URI) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (left == null || tree.isBary()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (this.tree.get(v) == 0.0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( Query.class.isAssignableFrom(v)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tree.isBary() || Double.POSITIVE_INFINITY.equals(property)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tree.isBary() || Double.NEGATIVE_INFINITY.equals(1.0)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_INFINITY) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (this.tree.getType().equals(\"M\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (this.tree.compareTo(Double.POSITIVE_INFINITY) < 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (this.tree.compareTo(Double.POSITIVE_INFINITY) == 0.0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (BigDecimal.class.isAssignableFrom(tree)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (this.tree.get(v) == null || tree.getAttribute() != Double.POSITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (input.getValue() == null || ((Double) tree).isBary()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_EMBEDDED) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (this.tree == null || tree.isBary()) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tree.isBary() || Double.NEGATIVE_INFINITY.equals(param)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (this.tree.equals(\"B\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (this.tree == null || tree.isEmpty()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tree == IdentValue.NONE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tree.isBlaze()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (this.tree.compareTo(Double.POSITIVE_INFINITY) == -1) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (left == null || tree.isEmpty()) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tree.isBary() || ((Double) tree).isNaN()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_NUMBER) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tree.isUndirected()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (left.getValue() == null || ((Double) tree).isInitialized()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Double.POSITIVE_INFINITY != null && tree.getType().equals(BigDecimal.POSITIVE_INFINITY)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (this.tree.getType().equals(Double.POSITIVE_INFINITY) || Boolean.FALSE.equals(v)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (left.getValue() == null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_MUT) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (this.tree.getType().isUndirected()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (tree.isBary() || Double.POSITIVE_INFINITY.equals(param)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (left.getValue() == null || tree.isBary()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (push == null || tree.isBary()) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (left.equals(\"B\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (this.tree.compareTo(Double.POSITIVE_INFINITY) >= 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (this.tree.getType().equals(\"MID\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (this.tree.getType().equals(BORDER_INFINITY)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (this.tree == null || tree.getType() == Type.Bary.MIDDLE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (this.tree.get(v) == null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (this.tree.getType() == CSSPrimitiveValue.CSS_ARRAY) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tree.isBary() || Double.POSITIVE_INFINITY.equals(SPAN)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tree.isBary() || Double.NEGATIVE_INFINITY.equals(property)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (att.getValue() == null || tree.isBary()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (this.tree.size() == 1) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tree.isBary() || Double.POSITIVE_INFINITY.equals(1.0)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (left.getValue() == null || ((Double) tree).isBaryType()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (tree.isBary() || Double.NEGATIVE_INFINITY.equals(v)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tree.isBary() || Double.NEGATE_INFINITY.equals(value)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (this.tree == null || tree.getValue() == v) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (this.tree.isBaryType()) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (this.tree.compareTo(Double.POSITIVE_INFINITY) == 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (this.tree.getValue() == null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tree.isBary() || ((Double) tree).isInitialized()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (tree.isBary() || ((Double) tree).isBigDecimal()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( this.tree.isBary()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tree.isBary() || Double.NEGATIVE_INFINITY.equals(\"0\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (param.getValue() == null || ((Double) tree).isBaryType()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Vector2D.NaN.size() == 1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (this.tree.getValue() == null || ((Double) tree).isBaryType()) {",
                "identical": false
            }
        ],
        "buggy_line": "if ((Boolean) tree.getAttribute()) {",
        "fixed_line": "if (tree.getCut() == null && (Boolean) tree.getAttribute()) {"
    },
    "Lang-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "classes[i] = classes[i].getClass();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "classes[i] = classes[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "classes[i] = classes[i].getClass().getMethod(classes[i]);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "classes[i] = classes[i].getClass().getClassLoader();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "classes[i] = classes[i].getClass().getMethod(array[i]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "classes[i] = classes[i].getClass().getComponentType(classes[i]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "classes[i] = classes[i].getClass().getComponentType(array[i]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "classes[i] = classes[i].getClass().getMethod(name, classes[i]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "classes[i] = classes[i].getClass().getField(classes[i]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "classes[i] = classes[i].getClass().getMethod(name);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "classes[i] = classes[i].getClass().getSimpleName();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "classes[i] = classes[i].getClass().getField(name);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "classes[i] = classes[i].getClass().getComponentType();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "classes[i] = classes[i].getClass().getInterfaces();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "classes[i] = classes[i].getClass().getReturnType();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "classes[i] = classes[i].getClass().getMethod(\"set\", classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "classes[i] = classes[i].getClass().getMethod(cc, array[i]);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "classes[i] = classes[i].getClass().getSuperclass();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "classes[i] = classes[i].getRawClass();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "classes[i] = classes[i].getClass().getMethod(classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "classes[i] = classes[i].getClass().getAnnotation(classes[i]);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "classes[i] = classes[i].getClass().getMethod(int.class);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "classes[i] = classes[i].getClass().getMethod(name, classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "classes[i] = classes[i].getClass().getMethod();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "classes[i] = classes[i].getClass().getMethod(String.valueOf(array[i]));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "classes[i] = classes[i].getClass().getField(array[i]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "classes[i] = classes[i].getClass().getComponentType(classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "classes[i] = classes[i].getClass().getMethod(Append[i]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "classes[i] = array[i].getClass().getMethod(classes[i]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "classes[i] = classes[i].getClass().getMethod(array[i], classes[i]);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "classes[i] = classes[i].getClass().getMethod(values[i]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "classes[i] = classes[i].getClass().getMethod(parts[i]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "classes[i] = classes[i].getClass().getMethod( array[i]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "classes[i] = classes[i].getClass().getMethod(s[i]);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "classes[i] = classes[i].getClass().getResolved(array[i]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "classes[i] = classes[i].getClass().getComponentType(array[i], classes[i]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "classes[i] = classes[i].getClass().getDeclaredMethod(array[i]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "classes[i] = classes[i].getClass().getEnclosingClass();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "classes[i] = classes[i].getClass().getMethod(name).getName();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "classes[i] = classes[i].getClass().getField(name, classes[i]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "classes[i] = classes[i].getClass().getMethodInfo(classes[i]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "classes[i] = classes[i].getClass().getMethod(suffixes[i]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "classes[i] = classes[i].getClass().getMethod(\"equals(array[i]);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "classes[i] = classes[i].getClass().getMethods();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "classes[i] = classes[i].getClass().getMethod(ctxt, array[i]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "classes[i] = classes[i].getClass().getMethodInfo(array[i]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "classes[i] = classes[i].getClass().getMethod(Class, array[i]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "classes[i] = classes[i].getClass().getDeclaredMethod(classes[i]);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "classes[i] = classes[i].getClass().getMethod(\"valueOf(array[i]);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "classes[i] = classes[i].getClass().getField(classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "classes[i] = classes[i].getClass().getMethod(\"set\", classes[i]);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "classes[i] = classes[i].getClass().getMethod(Classes[i]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "classes[i] = classes[i].getClass().getDeclaredField(name);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "classes[i] = classes[i].getClass().getMethod(declaredTypeArguments[i], classes[i]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "classes[i] = classes[i].getClass().getRawClass();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "classes[i] = classes[i].getClass().getMethod(datatype[i]);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "classes[i] = classes[i].getClass().getResolvedClass();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "classes[i] = classes[i].getClass().getDeclaredField(classes[i]);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "classes[i] = classes[i].getClass().getField(name, classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "classes[i] = classes[String.valueOf(array[i].getClass().getName());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "classes[i] = classes[i].getClass().getMethod(ref[i]);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "classes[i] = classes[i].getClass().getMethod(ClassUtils.toField(classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "classes[i] = classes[i].getClass().getMethod(fieldName);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "classes[i] = classes[i].getClass().getMethod(declaredTypeArguments[i]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "classes[i] = classes[i].getClass().getDeclaredMethods();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "classes[i] = classes[i].getClass().getMethod(enumClass, array[i]);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "classes[i] = classes[i].getClass().getMethod(clazz);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "classes[i] = classes[i].getClass().getMethod(config, array[i]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "classes[i] = classes[i].getClass().getMethod(method, array[i]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "classes[i] = classes[String.valueOf(array[i].getClass());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "classes[i] = classes[i].getClass().getResolved(array[i], classes[i]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "classes[i] = classes[i].getClass().getMethod(\" .util.Date\", classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "classes[i] = classes[i].getClass().getDeclaredField(name, classes[i]);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "classes[i] = classes[i].getClass().getMethod(cc, array[i], classes[i]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "classes[i] = classes[i].getClass().getMethod(classes[i], classes);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "classes[i] = classes[i].getClass().getMethod(consumer, array[i]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "classes[i] = classes[i].getClass().getMethod(\"array[i]);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "classes[i] = classes[i].getClass().getDeclaredField(name, classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "classes[i] = classes[i].getClass().getDeclaredMethod(name, classes[i]);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "classes[i] = classes[i].getClass().getMethod(int.class, array[i]);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "classes[i] = classes[i].getClass().getMethod(String.class);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "classes[i] = classes[i].getClass().getMethod(ClassUtil.toPath(array[i], classes[i]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "classes[i] = classes[i].getClass().getMethod(justClass, array[i]);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "classes[i] = array[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "classes[i] = classes[i].getClass().getMethod(\"array[i];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "classes[i] = classes[i].getClass().getDeclaredMethod(name, classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "classes[i] = classes[i].getClass().getAnnotation(Class<?>[i]);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "classes[i] = classes[i].getClass().getField(fieldName);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "classes[i] = classes[i].getClass().getMethod(array[i], classes);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "classes[i] = classes[i].getClass().getMethod(JsonGenerator.class);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "classes[i] = classes[i].getClass().getMethod(\"<Class<?>, void.class)[0];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "classes[i] = classes[i].getClass().getResolved(name, classes[i], classes[i]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "classes[i] = classes[i].getClass().getMethod(method.getName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "classes[i] = classes[i].getClass().getMethod(\"equals(classes[i]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "classes[i] = classes[i].getClass().getMethod(ClassUtils.toField(classes[i], classes[i]));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "classes[i] = classes[i].getClass().getMethod(parts[i], classes[i]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "classes[i] = classes[i].getClass().getMethod(fieldName, classes[i]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "classes[i] = classes[i].getClass().getMethod( trace);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "classes[i] = classes[i].getClass().getMethod(plus[i]);",
                "identical": false
            }
        ],
        "buggy_line": "classes[i] = array[i].getClass();",
        "fixed_line": "classes[i] = array[i] == null ? null : array[i].getClass();"
    },
    "Closure-67": {
        "fixes": [
            {
                "k": 1,
                "patch": "&& n.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "&& n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "&& n.getClass() == Token.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& n.getType() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (n.getFirstChild() == null && n.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (n.getFirstChild() == null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "|| n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (n != null && n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (n.getType() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (n.isFormaled() && n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "|| n.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "&& n.getFirstChild() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (n.isFormProperties() && n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (n.getFirstChild() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (n.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (n.isVoided() && n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (n.getFirstChild() == null || n.isFormaled()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "&& n.getType() == Token.TK_PLUS) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (n != null && n.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "|| n.getClass() == Token.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (n.isDuration() && n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (n.isProperties() && n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (n.getFirstChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (n.isFormaled() && n.getType() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "|| n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "&& n.getType() == Token.TK_LBRACKET) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (n.getFirstChild() == null && n.getType() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "|| n.getType() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "|| n.isVar() && n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (n.isFormaled() && n.getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "&& n.getType() == Token.TK_PLATFORM_SYM) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "&& n.isVarArgs() && n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "&& n.getType() == Token.TK_IMPORT_SYM) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "&& n.getFirstChild().getType() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "&& n.getType() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "&& n.getFirstChild() != Token.TK_IMPORT_SYM) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "&& n.getFirstChild() != Token.TK_PLUS) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (n.isStartObject() || n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (n.getFirstChild() == null && n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (n.getFirstChild() == null && n.getFirstChild() != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "|| n.getFirstChild() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (n.isFormaled() && n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_PLUS) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (n.getFirstChild() == null && n.isFormaled()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "&& n.getType() == Token.TK_IDENT) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (n.isFormaled() && n.getFirstChild() != Token.TK_PLUS) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (n.isFormaled() && n.getFirstChild() != Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (n.isFormaled() && n.getFirstChild() != Token.TK_IMPORT_SYM) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().isFormaled()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "&& n.getType() == Token.TK_CELL) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_IMPORT_SYM) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (n.getFirstChildCount() == 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (n.getFirstChild() == null && n.isStarted()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (n.isFormaled() && n.getFirstChild() != Token.TK_COMPACT) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "&& n.getFirstChild() != Token.TK_COMPES) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (n.getFirstChild() == null && n.getType() == Token.TK_PLUS) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (n.getType() == Token.TK_LBRACKET) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_IDENT) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "&& n.getClass().getName() == Token.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (n != null && n.getType() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_GREATER) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (n.getFirstChild() == null || n.getFirstChild() == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild() > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (n.getFirstChild() == null && n.getType() == Token.TK_COMPACT) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (n.isFormProperties() && n.getFirstChild() != Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "&& n.getFirstChild() == Token.TK_PLUS) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (n.getFirstChild() != null && n.getFirstChild().size() > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "&& n.getFirstChild() != Token.TK_COMPACT) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "&& n.getFirstChild() != Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "&& n.getType() == CSSPrimitiveValue.CSS_IDENT) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "&& n.getFirstChild() == Token.TK_PLATFORM_SYM) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (n.isFormaled() && n.getType() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "&& n.getType() == Token.TK_COLON) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (n.getFirstChild().isFormaled()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_COMPE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (n.isFormProperties() && n.getFirstChild() != Token.TK_PLUS) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "&& n.getFirstChild() != null && n.getFirstChild().getType() > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (n.isStartObject() || n.getFirstChild() == Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (n.isFormaled() && n.getFirstChild() != Token.TK_COMPES) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (n.isFormaled() && n.getFirstChild() != Token.TK_COMPE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (n.isFormProperties() && n.getFirstChild() != Token.TK_IMPORT_SYM) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_PLATFORM_SYM) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_COMPACT) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "&& n.getFirstChild() == Token.TK_IDENT) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (n.getFirstChild() == null && n.getType() == Token.TK_IMPORT_SYM) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_CELL) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (n.isFormProperties() && n.getFirstChild() != Token.TK_COMPACT) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (n != null && n.getFirstChild() != Token.TK_LBRACE) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "&& n.getFirstChild() != Token.TK_IDENT) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "&& n.getType() == CSSPrimitiveValue.CSS_INHERIT) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (n != null && n.getFirstChild() != Token.TK_PLUS) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (n.getFirstChild() == null && n.isVarArgs()) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (n.getFirstChild() == null || n.getType() == Token.TK_NAMESPACE_SYM) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (n != null && n.getFirstChild() != Token.TK_IMPORT_SYM) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "&& n.getFirstChild() == Token.TK_COMPACT) {",
                "identical": false
            }
        ],
        "buggy_line": ") {",
        "fixed_line": "&& assign.getParent().getType() == Token.EXPR_RESULT) {"
    },
    "Math-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (double) Math.sqrt(n * m);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (double) Math.sqrt(n * getNumberOfSuccesses()) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (double) Math.sqrt(n * m - 1) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (double) Math.sqrt(n * m - 1) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (double) getMaxCount() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (double)((float) getPopulationSize()) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (double) getHeight() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (double) (n *ChildNodes()) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (double) getPopulationCount() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (double) getPopulationShare()) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (_double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (double) Math.sqrt(n * getNumberOfSuccesses()) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (double) shareses / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (double) Math.abs((double) getPopulationSize()) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (double)((float) getPopulationSize()) / (double) getPopulationSize);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (double) (n * m - 1) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (double) Math.sqrt(n * m - 3) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (double) (n * m + 1) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (double) (n * _dotsPerPoint) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (double) satellites / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (double) (n * m);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (double) (n * distance / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (double)((float) getPopulationSize()) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (double) Math.sqrt((double) getPopulationSize()) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (double) 0) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (double) Math.sqrt(n * m - 2) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (double) Math.sqrt(n * 180) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (double)((float) getPopulationSize()) / (double) getPop;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (double) Math.sqrt(n * 180) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (double) Math.abs((double) getPopulationSize()) / (double) getPopulationSize);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPop;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (double) Math.sqrt(n * m - 1) / (double) getPop;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (double) Math.abs((double) getPopulationSize()) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (double) Math.sqrt(n * m - 3) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (double) Math.sqrt((double) getPopulationSize()) / (double) getPopulationSize);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (double) 1.0 / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (double) Math.sqrt(n * m;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (double) getPopulationCount();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (double) Math.sqrt(n * _op;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (double) Math.sqrt(n * m - 1) / (double) getPopulationSize);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (double) Math.abs(n * m);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (double) (n * _float) getPopulationSize();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (double)((float) getPopulationSize()) / (double) getPopulationSize));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (double) Math.sqrt(n * getNumberOfSuccesses()) / (double) getPopulationSize);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (double) Math.sqrt((double) getPopulationSize()) / (double) getPop;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationNumber();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (double) Math.sqrt(n * getNumberOfSuccesses()) / (double) getPop;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (double) Math.sqrt(n * m)).length();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (double) Math.sqrt((double) getPopulationSize()) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (double) Math.sqrt(n * getNumberOfSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (double) Math.sqrt((double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (double) Math.sqrt(n * _opCount);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (double) (n * distance / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (double) Math.sqrt(n * n);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (double) Math.abs((double) getPopulationSize()) / (double) getPop;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationFloat();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (double) Math.sqrt(n * m - 2) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (double) (n * N}, _float) getPopulationSize();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (double) Math.sqrt(n * N);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (double)((float) getPopulationSize()) / (double) getPopulationSize()).length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (double)cardinality * n;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (double) (n * m - 1) / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (double)((float) getPopulationSize()) / (double) getPop);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopCheckSize();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (double) Math.ceil(n * N}, getPopulationSize()) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (double) Math.sqrt(n * m / N);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (double) getPopulationCount() / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (double) getMaxCount() / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationCount();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationCount;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationMean;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (double) Math.sqrt(n * _dotsPerPoint);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (double) Math.sqrt(n * m / N}, getPopulationSize());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (double) Math.sqrt(n * m - 1) / (double) getPopulationSize()).length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double)rows;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (double) Math.sqrt(n * m)).mod(modulus);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize()).length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getNullValue();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (double) Math.sqrt(n * m - 1) / (double) getPopulationSize()).length();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (double)((float) getPopulationSize()).length();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (double) Math.sqrt(n * _op).length();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize() - 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) _opulationSize();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getChildopulationSize();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (double) Math.abs((double) getPopulationSize()) / (double) getPopulationSize()).length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (double) getHeight() / (double) getPopulationSize());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (double) Math.abs((double) getPopulationSize()) / (double) getPopulationSize));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (double) Math.sqrt(n * m));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (double)((float) getPopulationSize());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (double) _opCount / NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize().length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (double) Math.abs(z);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double)getSize();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (double) (n * getNumberOfSuccesses()) / (double) getPopulationSize_;",
                "identical": false
            }
        ],
        "buggy_line": "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
        "fixed_line": "return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());"
    },
    "Codec-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new String(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new StringIso8859_1(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).toByteArray();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new String(bytes.length, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new String(bytes, Charsets.ISO_8859_2);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new String(bytes, 0, bytes.length);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).toByteArray());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 == null ? null : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new StringShso8859_1(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).toCharArray();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new StringSso8859_1(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new String(bytes[0], Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).toByteArray(), bytes);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new String(bytes, Charsets.ISO_8859_1(), bytes);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new String(bytes != null ? bytes.length : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new String[bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new String(bytes, Charsets.ISO_8859_1\", bytes);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != null ? bytes : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new String[] { bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 ? bytes : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 == null ? bytes : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new String(readBytes, bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + bytes;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new String(bytes, Charsets.ISO_8859_1)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new String((bytes, Charsets.ISO_8859_1) bytes);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) != null ? bytes : Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) == null ? null : Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).toCharArray(), bytes);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? new String[bytes.length - 1]) : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + (bytes == null ? null : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + \"/\" + bytes;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new StringGso8859_1(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new String(bytes, Charsets.ISO_8859_1};",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new String(bytes, Charsets.ISO_8859_1D);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new StringIso8859_1((bytes, Charsets.ISO_8859_1) bytes);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 == null ? bytes[0] : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + byte[bytes.length];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + \"-\" + bytes;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? new String[bytes.length - 1] : null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new String(bytes, 0, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) == null ? null : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new String(!bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? bytes : Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+\"]\";",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new String<>(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).getBytes(\"UTF-8\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + (bytes != null ? bytes : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new String[] {bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new String(bytes, Charsets.ISO_8859_1)) : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new String(bytes, Charsets.ISO_8859_1());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new String(bytes, Charsets.ISO_8859_1().toByteArray(), bytes);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new String(bytes, Charsets.ISO_8859_1)) + null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? bytes : null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+\".length+\"]\";",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).toString();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new String(bytes, Charsets.ISO_8859_1));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+\".toByteArray());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + byteLen;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new String[bytes, Charsets.ISO_8859_1];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new String(!bytes.length, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? new String[bytes.length - 1)) : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new StringArray(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) -> {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new String[bytes, Charsets.ISO_8859_1).toByteArray();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new String(bytes, StandardCharsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= true ? bytes : null);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) -> null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 == null ? null : Charsets#ISO_8859_1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + byteLength);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + \":\" + bytes;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new String(bytes), Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != null ? bytes : Charsets#ISO_8859_1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).getBytes();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) != null ? bytes : Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "throw new String(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+\", null);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new String(buffer, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new String(bytes, marker.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? new String(bytes)) : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new StringIso8859_1(bytes);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).toCharArray());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? new String(bytes[0] : \"UTF-8\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? new String(bytes), Charsets.ISO_8859_1 : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new String(field, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + \" bytes\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + \" bytes\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? new String(bytes[0] : \"UTF-8\"));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= true ? bytes[0] : null);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new String(bytes, Charsets.ISO_8859_1).toBytes(bytes);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) / 1000.0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 );",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 : \"UTF-8\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new String(bytes, Charsets.ISO_8859_1().toByteArray());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new String((bytes, Charsets.ISO_8859_1) bytes).length);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) ? new String(bytes).toByteArray()) : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + \" -> \" + bytes);",
                "identical": false
            }
        ],
        "buggy_line": "return new String(bytes, Charsets.ISO_8859_1);",
        "fixed_line": "return newString(bytes, Charsets.ISO_8859_1);"
    }
}