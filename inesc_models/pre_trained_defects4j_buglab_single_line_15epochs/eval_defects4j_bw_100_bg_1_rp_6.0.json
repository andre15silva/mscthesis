{
    "Closure-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (target != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (target == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (qualifiedName != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (callee != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (targetName != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (paramName != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (functionName != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (target.newName != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (ownerName != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (elements != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (qName != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (seconds != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (LEGName != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( author != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (ANGE != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (fName != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( Info != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (fsName != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (callee != null;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (callName != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (currName != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (FEATUREName != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( 6, 8 != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( timesName != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( verticalName != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( us != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (HourName != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( vertical != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (calculated != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Freq != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( 0),Name != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (OrdinalName != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (superName != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( id != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( 112Name != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (cycleName != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (\u2b05 != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (callNode != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( 6,Name != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( overlapName != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (2.parent != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ({\" != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( currentToken != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( 6,ated != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (qlen != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( containsName != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (cost != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (target != null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( eq != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( dcName != null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Constants != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (SPACE != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( pojo != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (DLE != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (\u2cd0 != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Expressions != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (rhs != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( El != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (collection != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( m != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( district != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( MouseEvent != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (\u6c17 != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (Extra != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( nulls != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (fs != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( links != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (MIN != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_parent != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (\u8501 != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (icky != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (ury != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (ITHOUT != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (ns != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( 65 != null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (\u06f3 != null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parent != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (isted != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (target == null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (_target == null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (leneck != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (UMMY != null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Dataset != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( Co != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( 26, != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (serving != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( invocation != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( TH != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( Following != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Period != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (\u58c1 != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (vl != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (dc != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( mnt != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (dest != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (routine != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( ComponentName != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (matched != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (qualifiedName != null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Scanner != null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (target != null) {",
        "fixed_line": "if (target != null && target.getType() == Token.STRING) {"
    },
    "Closure-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean isOverride = parent.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean isOverride = t.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean isOverride = addGlobalScope || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean isOverride = parent.inGlobalScope() || anparent;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean isOverride = addGlobalScope instanceofinGlobalScope;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean isOverride = t.inGlobalScope() || anparent;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean isOverride = anclazz || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean isOverride = getGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean isOverride = property != 0 && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean isOverride = addGlobalScope && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean isOverride = n.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean isOverride = parent && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean isOverride = result || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean isOverride = n.inGlobalScope() || t.objectType;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean isOverride = anc != 0 && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean isOverride = parent.inGlobalScope() || an object;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean isOverride = parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean isOverride = parent.inGlobalScope() || toKey;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean isOverride = anclazz && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean isOverride = this.inGlobalScope;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean isOverride = property != 0 && anc.inGlobalScope;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean isOverride = parent.inGlobalScope() || propertyType;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean isOverride = addType != 0 && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean isOverride = anparent && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean isOverride = t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean isOverride = parent.inGlobalScope() || name;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean isOverride = anparentType != 0 && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean isOverride = anc || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean isOverride = parent.inGlobalScope() || anobjectType;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean isOverride = r || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean isOverride = parent.inGlobalScope() || to anparent;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean isOverride = parent.inGlobalScope() || value;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean isOverride = addGlobalScope || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean isOverride = parent.inGlobalScope() || result;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean isOverride = result || anparent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean isOverride = an.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean isOverride = property != 0 && anns.inGlobalScope;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean isOverride = result || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean isOverride = src.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean isOverride = parent.inGlobalScope() || len;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean isOverride = parent.inGlobalScope() || anns.objectType;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean isOverride = addGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean isOverride = parent.inGlobalScope() || topropName;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean isOverride = getGlobalScope() || t.objectType;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean isOverride = getGlobalScope() || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean isOverride = property || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean isOverride = parent.inGlobalScope() || nativeType;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean isOverride = src.inGlobalScope() || anparent;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean isOverride = parent.inGlobalScope() || addType;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean isOverride = n.inGlobalScope() || anparent;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean isOverride = parent.inGlobalScope() || SUNINIT;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean isOverride = parent.inGlobalScope() || 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean isOverride = parent.inGlobalScope() || minValue;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean isOverride = n.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean isOverride = parent.inGlobalScope() || SUNINITIALIZED;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean isOverride = initialize && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean isOverride = parent.inGlobalScope() || anns.objectIdReader;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean isOverride = exceptions || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean isOverride = parent.inGlobalScope() || altType;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean isOverride = t.inGlobalScope() || an object;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean isOverride = parent.inGlobalScope() || anns.objectNode;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean isOverride = anparent || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean isOverride = t.inGlobalScope() || value;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean isOverride = getGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean isOverride = t.inGlobalScope() || anobjectType;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean isOverride = n.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean isOverride =ilingScope.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean isOverride = ConcreteType.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean isOverride = other.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean isOverride = propertyMap || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean isOverride = propertyType || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean isOverride = anns.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean isOverride = parent.inGlobalScope() || firstChild;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean isOverride = property || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean isOverride = src.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean isOverride = parent.inGlobalScope() || an In;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean isOverride = parent.inGlobalScope() || added;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean isOverride = anc.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean isOverride = parent.inGlobalScope() || toType;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean isOverride = t.inGlobalScope() || to anparent;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean isOverride = parent.inGlobalScope() || off;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean isOverride = n.inGlobalScope() || t.objectConstType;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean isOverride = parent.inGlobalScope() || globalType;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean isOverride = filter.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean isOverride = t.inGlobalScope() || anns.objectType;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean isOverride = getGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean isOverride = parent.inGlobalScope() || toChild;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean isOverride = parent.inGlobalScope() || existing.objectType;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean isOverride = parent.inGlobalScope() || ownerType;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean isOverride = property != 0 && anparent;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean isOverride = t.inGlobalScope() || rightScope;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean isOverride = an.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean isOverride = an && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean isOverride = parent.inGlobalScope() || anns.isGlobalScope;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean isOverride = parent.inGlobalScope() || to an In;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean isOverride = parent.inGlobalScope() || anobject;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean isOverride = ConcreteType.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean isOverride = parent instanceofinGlobalScope;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean isOverride =[4] || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean isOverride = t.inGlobalScope() || SUNINITIALIZED;",
                "identical": false
            }
        ],
        "buggy_line": "boolean isOverride = t.inGlobalScope() &&",
        "fixed_line": "boolean isOverride = parent.getJSDocInfo() != null &&"
    },
    "Time-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "Partial newPartial = new Partial, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Partial newPartial = new Partial;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Partial newPartial = new Partial, iChronology, newTypes;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Partial newPartial = new Partial(0, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Partial newPartial = new Partial, newTypes, _length - iValues.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Partial newPartial = new Partial, newTypes, iValues);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Partial newPartial = new Partial[iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Partial newPartial = new Partial, newTypes, newValues;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Partial newPartial = new Partial, newTypes, this.iChronology);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Partial newPartial = new Partial, iChronology, newTypes);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Partial newPartial = new Partial, newTypes, this.length - iValues.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Partial newPartial = new Partial>(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Partial newPartial = iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Partial newPartial = new Partial(1, iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Partial newPartial = new Partial, newTypes, 0, iValues.length);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Partial newPartial = new Partial(0, iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Partial newPartial = new PartialChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Partial newPartial = new Partial, newTypes, this.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1, newValues.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Partial newPartial = new Partial desc, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Partial newPartial = new Partial, newTypes, iValuesCount + 1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Partial newPartial = new Partial, newTypes, isValues);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Partial newPartial = new Partial(1, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Partial newPartial = new Partial, newTypes, this.length - iValues;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Partial newPartial = new Partial, newTypes, this.length);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Partial newPartial = new PartialSIF, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Partial newPartial = new Partial, _iChronology, newTypes;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Partial newPartial = new Partial, _creatorChronology, newTypes;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues.length + 1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Partial newPartial = new PartialKey, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Partial newPartial = new PartialPrinter, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Partial newPartial = new Partial, newTypes, _length);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Partial newPartial = new Partial, this.iChronology, newTypes;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Partial newPartial = new Partial, newChronology, newTypes;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Partial newPartial = new Partial; //, newTypes, newValues",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues.length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues.length + 1, newValues);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length-1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Partial newPartial = new Partial(0, i, newTypes, newValues;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Partial newPartial = new Partial, newTypes, day).iChronology;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Partial newPartial = new PartialValidChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Partial newPartial = new PartialThreshold, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues).length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Partial newPartial = new Partial, newTypes, _length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Partial newPartial = new Partial, newTypes, 1, iValues.length - iValues.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Partial newPartial = new Partial(0, i, newTypes, newValues.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Partial newPartial = new Partial, newTypes, _value;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Partial newPartial = new Partial, _creatorChronology, newValues);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Partial newPartial = new Partial, newTypes, _type);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Partial newPartial = new PartialType, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Partial newPartial = new Partial BeanChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Partial newPartial = newChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Partial newPartial = new Partial, newTypes, value);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length - 1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Partial newPartial = new Partial, _isChronology, newTypes;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length + 1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1, newValues);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Partial newPartial = new Partial, newTypes, 1, iValues.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Partial newPartial = new Partial, newTypes, _argTypes;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Partial newPartial = new PartialThreshold, newTypes, iValues.length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Partial newPartial = new Partial, iTypes, newValues);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Partial newPartial = new Partial; i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Partial newPartial = new Partial, newTypes, this.length - iValues);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Partial newPartial = new Partial >> iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Partial newPartial = new Partial, _creatorTypes, newValues);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Partial newPartial = new PartialPairs, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Partial newPartial = new Partial, newTypes, iValues;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValuesCount);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Partial newPartial = new Partial, _propsTypes, newValues);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Partial newPartial = new Partial, newTypes, this.length + 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Partial newPartial = new Partial, 0, iChronology.length);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Partial newPartial = new Partial scope, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1, newValues);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Partial newPartial = new Partial, _hashSeed, newValues);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Partial newPartial = new Partial, newTypes, _length + 1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Partial newPartial = new Partial, newTypes, suffix;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Partial newPartial = new Partial, newTypes, _instant);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Partial newPartial = new Partial, newTypes, _length - iValues.length);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Partial newPartial = new Partial(0, i, newTypes, newValues.length - iValues;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Partial newPartial = new Partial, _hashTypes, newValues);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Partial newPartial = new Partial, 0, iTypes.length);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Partial newPartial = new Partial, newTypes, this.length + 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Partial newPartial = new Partial, newTypes, day);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Partial newPartial = new Partial, newTypes, this.iChronology;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length + 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Partial newPartial = new Partial, newTypes, _length - iValues);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length % newValues;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Partial newPartial = new Partial, newTypes, _value);",
                "identical": false
            }
        ],
        "buggy_line": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
        "fixed_line": "Partial newPartial = new Partial(newTypes, newValues, iChronology);"
    },
    "Codec-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "25, = -1, 0, 4);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4f);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "25, = -1, 0, encodedData.length - 1, 4);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "25,VEN(0, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "25, = -1, 0, 5);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "25, = -1, 0, values.length - 1, 4);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "25, = -1, 0, encodedData.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "25, = -1, 0, encodedData.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "25, = -1, 0, values.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "25,Moments(0, 5, 0, 5);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "25,parameterTypes(3 = -1, 0,Divisor - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "25, = -1, 0, values.length - 1, 4, 4);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "25,parameterTypes(3 = -1, 1, 0, ArrayList.length - 4f;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "25, = -1, 0,Def.length - 4f;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "25,parameterTypes(3 = -1, 0, values.length - 4f;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "25, = -1, 0, values.length - 4, 4f;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "25, = -1, 0,Divisor - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "25,Moment = -1, 0, 0}, PeriodType.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "25, = -1, 0, values.length - 1, 9);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "25,Moments(0, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4f);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "25,VEN(0, 0, 0, 5);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "25,PropertyChange(0, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "25,Moment = -1, 0, 0}, PeriodType.length - 1, 4) % 2];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "25, = -1, 0, values.length - 3;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 2f);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "25,parameterTypes(3 = -1, 8;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "25,parameterTypes(3 = -1, 0, values.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "25, = -1, 0,Def.length - 1, 9);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "25, = -1, 0, values.length - 4 >= 4)f;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "25,ariants = -1, 0, values.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "25,Moments(0, 0, 0, 5);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "25, = -1, 0, encodedData.length - 1, 48, \"oved\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4) % 2];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "25,parameterTypes(1, -1, 0, encodedData.length - 1, 4);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4)];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "25, = -1, 0, values.length - 4f;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "25, = -1, 0, values.length);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1 ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "25,parameterTypes(1, -1, 0, encodedData.length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4)f);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "25, = -1, 0, encodedData.length - 1, 48, 2) + 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1Type;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "25,VEN(0, 0, 0, encodedData.length, 4);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "25, = -1, 0, values.length - 1, 4, 4f);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "25, = -1, 0, out.length - 4f;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "25, = -1, 0,Def.length - 4, 4f;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, \" zz\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4f;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "25,parameterTypes(3 = -1, 0, 4, 4fewerializers, -1, \"oved value\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "25,parameterTypes(3 = -1, 0, 4, 4fewerializers, -1, 9);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "25,VEN(0, 0, 0, encodedData.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "25, = -1, 0,Def.length - 4];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "25, = -1, 0, out.length - 1, 4);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "25,ariants = -1, 0, values.length - 4, 4f;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "25, = -1, 0,Def.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "25, = -1, 0,BASE64_VALUE_PADDING;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "25,parameterTypes(3 = -1, 9;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "25,ariants = -1, 0, values.length - 4 >= 4)f;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "25, = -1, 0, values.length - 4];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "25,ariants = -1, 0, values.length - 4f;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "25,ariants = -1, 0, values.length - 3;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 2];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "25, = -1, 0, values.length - 4);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2)f);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "25,parameterTypes(3 = -1, 0, 4, 4fewerializers, -1, out);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "25,ariants = -1, 0, out);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "25,ariants = -1, 0, values.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "25,ariants = -1, 0, values.length - 1, 4);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "25, = -1, 0,Def.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "25, = -1, 0,Def.length - 1, 4);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "25, = -1, 0, values.length - 4Desc;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4) % 2f);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1f;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "25,VEN(0, 0, 0, encodedType.length, 4);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "25, = -1, 0, encodedData.length - 1, 4, 4);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "25, = -1, 0,BASE64_VALUE_PLETS);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, \"oved\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "25, = -1, 0, encodedData.length - 1, 9);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "25, = -1, 0, values.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "25,VEN(0, 0, 0, -1, 4);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 20;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, getValuesf);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "25, = -1, 0, encodedData.length - 1, 4) + 1 ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "25, = -1, 0, encodedData.length - 1,Parent);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 20;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "25,VEN(0, 0, 0, encodedData.length * 4);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "25, = -1, 0, out.length - 1, 9);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "25,parameterTypes(3 = -1, 0, 4f;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "25,ariants = -1, 0, values.length - 4);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "25, = -1, 0,Def.length - 4 >= 4)f;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "25, = -1, 0, encodedData.length - 1, 4)];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4)nodeCount;",
                "identical": false
            }
        ],
        "buggy_line": "25, 26, 27, 28, 29, 30, 31, 32,",
        "fixed_line": "25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V"
    },
    "Cli-40": {
        "fixes": [
            {
                "k": 1,
                "patch": "return str;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return property;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this.maximumURL;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.maxURL;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return toURL;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return isURL;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return NO_TOTYPE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this.toURL;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.emptyURL;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return fromURL;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return EMPTY_TOTYPE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return defURL;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this.defaultURL;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return propertyURL;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this.null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return DEFAULT_TOTYPE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return this.rawURL;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return createURL;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return str; // returns original String when the default is to create object?",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return EMPTY_DOUBLE_ARRAY;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return str; // returns original String when possible",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return str; // returns original String when the",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returnstr;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return this. (\"URL;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return str; // didn't the null to create object.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return str; // returns to create object.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this.fnURL;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return from;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this.str;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return this.toolTipURL;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return this.instant;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return str; // returns original String when the bigger to create object?",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return str; // returns original String when the null to create object?",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return str; // returns original String null to create object.",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return str; // returns original String null to create object?",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return str; // returns original String when the bigger to create object.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return str; // didn't the amount to create object.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return str; // returns original String when the @ to create object?",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return str; // returns original String when the null to create object.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return this.Externs;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return str; // returns original the null to create object?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return str; // returns to create object the default is negative",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return preserveURL;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return this. lURL;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return str; // returns original String when the default is assigned to create object?",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return str; // returns to create object the default is 16, the",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.empty;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return str; // returns original String when the default is 16, the",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return str; // returns original the null to create object.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return str; // returns to create object the first '/",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return str; // to create object.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return str; // returns original String when the default is to 127 (from",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return str; // returns original String when the default is to create object.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return str; // returns to create object?",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return str; // returns original String when the current, to create object.",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return str; // returns original String when to create object?",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return str; // returns original the default is to create object?",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return str; // to create object the it't be from here",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this.firstURL;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return EMPTY_URL;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return str; // to create object the default is negative",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return str; // returns to create object the default is this right?",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return str; // returns original String when the default is to create object",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return str; // returns original String when the @ to create object.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return str; // returns original String when the default is this right?",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return str; // to create object the default is 16, the",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return str; // to create object the first '/",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return str; // returns original String when the default is negative",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this.newURL;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this.Declared;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this.fn;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return str; // returns original String when the default is this to create object?",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return str; // returns to create object the default is10_'t the",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return str; // returns original String when to create object.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return str; // didn't the null to create object?",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return str; // tolerance the null to create object?",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return str; // didn't the amount to create object?",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return str; // returns original String null to create object the default is negative",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return str; // returns original String when the first",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return str; // didn't need to create object.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return str; // to create object the default is this right?",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return str; // returns original String null to create object the default is this right?",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return str; // returns original String when the default is passed in del",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return str; // returns original String when the current, to create object?",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return str; // returns to create object the",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return str; // to create object the it's",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return str; // returns original String when the default is to v is negative",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return str; // returns original String when the default is to",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return str; // to create object the it's do to 127 (from",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return str; // returns original String when the default is assigned to 127 (from",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return str; // returns to create object the quote",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return this.desc;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return str; // didn't the default null to create object.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this.checkURL;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return str; // returns original String when the default is to v is this.",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return str; // returns to create object the pre-order",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return str; // returns original String when the default is this represents the",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return str; // returns original String null to create object the default is 16, the",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "throw new ParseException(\"Unable to handle the class: \" + clazz);"
    },
    "Codec-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (lineLength == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (lineLength > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (lineLength == 0) { // first spill over?",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (lineLength == 0) { // first spill over't really need to check",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (lineLength == 0) { // If we didn't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (lineLength == 0) { // note: can't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (lineLength == 0) { // first spill over't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (lineLength == 0) { // If we didn't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (lineLength == 0) { // first spill index",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (lineIndex == -1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (lineLength == 0) { // note: can't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (lineLength == 0) { // If we didn't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (lineLength == 0) { // no longer belongs to be skipped between triplets",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (lineLength == 0) { // If we didn't really need to check, just a sanity_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (lineLength == 0) { // no done with't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (lineLength == 0) { // no attributes,pos",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (lineLength == 0) { // class, let's do implicit re-parse",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (lineLength == 0) { // first spill overBuffer,pos",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (lineLength == 0) { // calendar't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (lineIndex == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (lineLength == 0) { // If we didn't append, 0, buf.length; col a sanity_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (lineLength == 0) { // first spill overdesc,pos",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (lineLength == 0) { // If we didn't really modify it's do a sanity check",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (lineLength == 0) { // note: can't really need to check",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (lineLength == 0) { // If we didn't really, 0, buf.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (lineLength == 0) { // first spill over't really call",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (lineLength == 0) { // If so, 0, buf.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (lineLength > 0) { // first spill over?",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (lineLength == 0) { // first spill over to be skipped between triplets",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (lineLength == 0) { // If we didn't really gets this class, 0, buf.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (lineLength == 0) { // first spill over't really need to be skipped?",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (lineLength == 0) { // If we didn't really need to be skipped properties,pos",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (lineLength == 0) { // If we didn't really need to check, just a sanity_TABLE_SIZE; in deliber...",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (lineLength == 0) { // If we didn't really need to check, just a sanity_TABLE_SIZE; in deliberately",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (lineLength == 0) { // no attributes, just a sanity check",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (lineLength == 0) { // nope",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (lineLength == 0) { // first spill over to be;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-314,pos",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (lineLength == 0) { // first spill over't really need to bufpos",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-314, let's do a sanity check",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (lineLength == 0) { // no done with't really need to be skipped properties, bufpos",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (lineLength == 0) { // class, let's do a sanity check",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (lineLength == 0) { // first spill over tok't really need to check",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (lineLength == 0) { // bufsize per [JACKSON-314,pos",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (lineLength == 0) { // If we didn't really need to check, just a sanity_TABLE_SIZE; in MB",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (lineLength == 0) { // If we didn't really modify it's 2^?",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (lineLength == 0) { // If so, 0, bufpos",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (lineLength == 0) { // If we didn't append,pos",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (lineLength == 0) { // first spill over's do implicit re-parse",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-314, let's do implicit re-parse",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (lineLength == 0) { // note: can't really need to be skipped?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (lineLength == 0) { // note: can't really gets this class, 0, buf.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (lineLength == 0) { // first spill over to check",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (lineLength == 0) { // If we didn't really need to check, just a sanity_TABLE_SIZE; in deliberS[pos",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (lineLength == 0) { // first spillDED_TABLE_SIZE; in practice it't really need to check",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (lineLength == 0) { // first spill over't really need to read",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (lineLength == 0) { // note: can't be enough room, 0, bufpos",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (lineLength == 0) { // first spill over't append,pos",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (lineLength == 0) { // first spill over tok't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (lineLength == 0) { // If we didn't really call?",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (lineLength == 0) { // first spill over't really modify",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (lineLength == 0) { // first spill overBuffer, 0, bufpos",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (lineLength == 0) { // first spill over += can't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (lineLength == 0) { // If we didn't really modify it's 2^",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (lineLength == 0) { // first spill over't really gets",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (lineLength == 0) { // If we didn't really gets this class, 0, bufpos",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (lineLength == 0) { // If we didn't append, 0, buf.length; col a sanity_TABLE_SIZE; in MB",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (lineLength == 0) { // first spill over't append, bufpos",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (lineLength == 0) { // If we didn't really need to check",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (lineLength == 0) { // first spillDED_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (lineLength == 0) { // first spill over't really need to check,pos",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (lineLength == 0) { // first spill over't really need to check, just a sanity check",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (lineLength == 0) { // first spill over't really need to be skipped properties, bufpos",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (lineLength == 0) { // first spillDED_TABLE_SIZE; in deliber...",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-314, just means 'raw'",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (lineLength == 0) { // first spill over't really need to check;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (lineLength == 0) { // first spill over't have at begin",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (lineLength == 0) { // If we didn't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (lineLength == 0) { // class, just a sanity check",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (lineLength == 0) { // If we didn't really need a sanity check",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (lineLength == 0) { // note: can't really need to buf, 0, buf.length;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-314, bufpos",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (lineLength == 0) { // first spill over't really call?",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-314, 0, bufpos",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (lineLength == 0) { // note: can't append, 0, buf.length; in practice_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (lineLength == 0) { // note: can't really need to check, just a sanity check",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-buf,pos",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (lineLength == 0) { // note: can't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (lineLength == 0) { // no longer belongs to be skipped properties, bufpos",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (lineLength == 0) { // If we didn't really need to check, just a sanity_TABLE_SIZE; in the first",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (lineLength == 0) { // first spill over's do a sanity check",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (lineLength == 0) { // no done with't really need to check",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (lineLength == 0) { // If we didn't append, 0, buf.length; col a sanity_TABLE_ARRAY",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (lineLength == 0) { // first spill over't really need to handle as per [JACKSON-314",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (lineLength == 0) { // first spill over't really need to be skipped;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (lineLength == 0) { // first spill over += can't really need to check",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, 0, bufpos",
                "identical": false
            }
        ],
        "buggy_line": "if (lineLength > 0) {",
        "fixed_line": "if (lineLength > 0 && pos > 0) {"
    },
    "Jsoup-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final String[] preserveWhitespaceTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla getClassName\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaintext\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla process\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" PROPERTY\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla at index\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaCONT\", \"integer\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" generator + \")\";",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaAndType\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaies\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaassign\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaAndType\", \"integer\";",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla process\", \"integer\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \"stub.\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla [0,\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" generator';",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla at index\", \"integer\";",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" getIndex\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \"integer\" );",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"plaintext\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String[] preserveWhitespaceTagsTagsCount = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaCompiler\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla at index\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"plaintext\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla getClassName\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" getIndex\", \"integer\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla process\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla FI\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final String[] preserveWhitespaceTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" PROPERTY\";",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla at index\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"plaCONT\", \"integer\";",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaUtf\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" PROPERTY\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla [0,\", \"integer\";",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla process\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \"integer\" );",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"plaAndType\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla at\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla at(\"<\", \"integer\";",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\";",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plapon\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla process\", \"integer\";",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \" PROPERTY\";",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String[] preserveWhitespaceTags = \"pla process\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla process\", \" PROPERTY\";",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaCONT\", \"mock.\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" getIndex\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla at index\", \"integer\";",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"plaCONT\", \"integer\";",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" generator + \")\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla process\", \" generator);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"plaAndType\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" getIndex\", \"integer\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla getClassName\", \"integer\";",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"plaassign\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \"integer\" );",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla at index\", \"integer\";",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla process\", \" generator;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"plaobox\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla [0,\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla process\", \"integer\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \" getIndex\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla at least\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"plaAndType\", \"integer\";",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" generator';",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \" getIndex\", \"integer\";",
                "identical": false
            }
        ],
        "buggy_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
        "fixed_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};"
    },
    "Math-30": {
        "fixes": [
            {
                "k": 1,
                "patch": "final int n1 = n2 / (n1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final int n1 = n2 / 2.0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final int n1 = n2 * (n1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final int n1 = n2 / (n2;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final int n1 = n2 / (n2; // the series",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final int n2 = n1 * (n1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final int n1 = n2 / (n1; // the series",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final int n1 = n2 / (n2; // out twos",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final int n1 = n2 / (n2; // 1",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final int n1 = n2 / (n2; // lower case",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-n",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final int n1 = n2 / (n1; // equator the n-empty",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final int n1 = n2 * (n2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final int n1 = n2 / (doubleCount; // n-th element in the series",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final int n1 = n2 / (n1; //00000000000000 the series",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final int n2 = n1 * (n0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final int n1 = n2 / getFieldValue2;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final int n1 = n2 / (n2; // equator the n",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final int n1 = n2 / (n1; // 1900)",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final int n1 = n2 / (n2; // series",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-previous",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final int n1 = n2 *prodn1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final int n1 = n2 / (n1; // equator the n-th element in del",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final int n1 = n2 / getFieldValue2; // equator",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final int n1 = n2 * (n2; // lower case",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final int n1 = n2 *prodn0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final int n1 = n2 / (n2; //00000000000000 the series",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final int n1 = n2 / (n2; // even",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final int n1 = n2 / (n1; // lower case",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final int n1 = n2 / (n1; // s",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-empty",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final int n1 = n2 / (n2; // equator the n-empty",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final int n1 = n2 / getFieldValue2; // out twos",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-th element in calculation",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final int n1 = n2 / (n1; // equator",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final int n1 = n2 / (double) n2;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final int n1 = n2 /prodn1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final int n2 = n1 * (n2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final int n1 = n2 / (n1; // out twos",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final int n1 = n2 / (n1; // equator the n-th element in calculation",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final int n1 = n2 * getFieldValue2; // equator",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final int n1 = n2 / (n2; // equator",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final int n2 = n1 * (n2; // lower case",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final int n1 = n2 * accum2; // equator",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final int n1 = n2 / (n2; // equator the n-th element in del",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final int n1 = n2 / (n2; // lo in the series",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final int n1 = n2 / (n1; // lo in the series",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final int n1 = n2 / getFieldValue2; // series",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final int n1 = n2 / (n2; // candidates in the series",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final int n1 = n2 * (n1; // equator",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final int n1 = n2 * (n2; // equator",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final int n1 = n2 /prodn2; // the series",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final int n1 = n2 * (n1; // lower case",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final int n1 = n2 / (n1; // out twos the series",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final int n1 = n2 / (n2; // 1900)",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final int n1 = n2 / (n2; // equator)",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final int n1 = n2 / (n1; // equator the n-th element",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final int n1 = n2 * 22; // equator",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final int n1 = n2 * 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-th element in deln",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final int n1 = n2 / (n1; // equator the n-th element in MB",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final int n1 = n2 / (n2; //this represents the series",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final int n1 = n2 / (n1; // equator the n",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final int n1 = n2 / (n2; // equator the n-previous",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final int n1 = n2 / (n2; // joined",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final int n1 = n2 / (n0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final int n1 = n2 / (n2; // the first",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final int n1 = n2 / (n2; // equator the n)",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final int n1 = n2 / (n1; //-6",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final int n1 = n2 / (n2; // equator the n-th element in calculation",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final int n1 = n2 / (n1; // equator the n-previous",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final int n1 = n2 / (n1; // correction the series",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final int n2 = n1 * (n1; // lower case",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final int n1 = n2 / (n1; //\">",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final int n1 = n2 / (n2; // joined in the series",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final int n1 = n2 / (n2; // == 1",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final int n1 = n2 * interface2;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final int n1 = n2 / getFieldValue2; // joined",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final int n1 = n2 * No2;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final int n1 = n2 / (n2; // REPLAY",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final int n1 = n2 / (n1; // equatorVarArgs",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final int n1 = n2 / (n2; // NoSuch the series",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-th element",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final int n1 = n2 *prodn1)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final int n1 = n2 / (n2; // == 0 translates in the series",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-th element in del",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final int n1 = n2 * getFieldValue2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final int n1 = n2 / (n1; // equator the n-th element in content",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n- initial",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final int n1 = n2 / (n2; // equator the n SET",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final int n1 = n2 / (n2; // key",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final int n1 = n2 / (n1; // lo -> J",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final int n1 = n2 / (n1; // equator the n-th element in might",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final int n1 = n2 * accum2; // lower case",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final int n2 = n1 * (n1; // equator",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final int n1 = n2 / (n2; // RESOLVED",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final int n1 = n2 * <= 0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final int n1 = n2 *Static2; // equator",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final int n1 = n2 * (n0;",
                "identical": false
            }
        ],
        "buggy_line": "final int n1n2prod = n1 * n2;",
        "fixed_line": "final double n1n2prod = n1 * n2;"
    },
    "Math-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final double DEFAULT_EPSILON = 10e;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final double DEFAULT_EPSILON = 9;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final double DEFAULT_EPSILON = 255;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final double DEFAULT_EPSILON = 32;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final double DEFAULT_EPSILON = 255e;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final double DEFAULT_EPSILON = 10eDesc;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final double DEFAULT_EPSILON = 8;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final double DEFAULT_EPSILON = File;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final double DEFAULT_EPSILON = 11;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final double DEFAULT_EPSILON = 10eiling;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final double DEFAULT_EPSILON = 10e1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final double DEFAULT_EPSILON = 1e;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final double DEFAULT_EPSILON = 1 << 10;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final double DEFAULT_EPSILON = 10e][0];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final double DEFAULT_EPSILON =-1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final double DEFAULT_EPSILON = cachede;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final double DEFAULT_EPSILON = 10e getKey;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final double DEFAULT_EPSILON = 6;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final double DEFAULT_EPSILON = 10eLINE_PAINT;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final double DEFAULT_EPSILON = 9GMENT_SIZE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final double DEFAULT_EPSILON = 8 * rval;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final double DEFAULT_EPSILON = ONE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final double DEFAULT_EPSILON = 10e cmp;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final double DEFAULT_EPSILON = 8 * propCount;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final double DEFAULT_EPSILON = 10e high;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final double DEFAULT_EPSILON = 9 mode;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final double DEFAULT_EPSILON = 9 greateste;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final double DEFAULT_EPSILON =:'e;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final double DEFAULT_EPSILON = 10e80;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final double DEFAULT_EPSILON = 9e;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final double DEFAULT_EPSILON = 9PER_ALPHA_SIZE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final double DEFAULT_EPSILON = 10eLINE_STROKE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final double DEFAULT_EPSILON = 10e[0];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final double DEFAULT_EPSILON = 10e\u2b05;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final double DEFAULT_EPSILON = 9InstanceCount;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final double DEFAULT_EPSILON = 10eEscape;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final double DEFAULT_EPSILON = 10e\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final double DEFAULT_EPSILON = 10ecaller;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final double DEFAULT_EPSILON = 9PER_CODE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final double DEFAULT_EPSILON =rout;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final double DEFAULT_EPSILON = 1 << power;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final double DEFAULT_EPSILON = 10ecomparator;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final double DEFAULT_EPSILON = 10e sort;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final double DEFAULT_EPSILON = 255eiling;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final double DEFAULT_EPSILON = 64;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final double DEFAULT_EPSILON = 1024;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final double DEFAULT_EPSILON = 1L;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final double DEFAULT_EPSILON = 10eits;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final double DEFAULT_EPSILON = 10e];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final double DEFAULT_EPSILON = 1 << 9;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final double DEFAULT_EPSILON = 9PER_DOMAIN_SIZE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final double DEFAULT_EPSILON = 10e saw;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final double DEFAULT_EPSILON = 7;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final double DEFAULT_EPSILON = 10e(3);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final double DEFAULT_EPSILON = 10eCss_EPSILON;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final double DEFAULT_EPSILON = cardinalitye;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final double DEFAULT_EPSILON = 90;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final double DEFAULT_EPSILON =pletCount;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final double DEFAULT_EPSILON = 10e Pair;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final double DEFAULT_EPSILON = 9 );",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final double DEFAULT_EPSILON =ates;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final double DEFAULT_EPSILON = 9 };",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final double DEFAULT_EPSILON = 10eminus;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final double DEFAULT_EPSILON = 10eand;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final double DEFAULT_EPSILON = 16;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final double DEFAULT_EPSILON = 10e't;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final double DEFAULT_EPSILON = collisions;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final double DEFAULT_EPSILON = 10e(5;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final double DEFAULT_EPSILON = 10e)).",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final double DEFAULT_EPSILON = 10e positions;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final double DEFAULT_EPSILON = 10eil;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final double DEFAULT_EPSILON = 9PER_EXTENDED;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final double DEFAULT_EPSILON = 10e BOOLEAN_EPSILON;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final double DEFAULT_EPSILON = 10eeno;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final double DEFAULT_EPSILON = 8 * prope;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final double DEFAULT_EPSILON = 10ematchedKind;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final double DEFAULT_EPSILON =escaped;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final double DEFAULT_EPSILON =arno;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final double DEFAULT_EPSILON = 10e3;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final double DEFAULT_EPSILON = 10evariant;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final double DEFAULT_EPSILON = 10e4;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final double DEFAULT_EPSILON =sup;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final double DEFAULT_EPSILON = 10e][0]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final double DEFAULT_EPSILON = 90, 8;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final double DEFAULT_EPSILON = 10earest;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final double DEFAULT_EPSILON = 10eArtifactId;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final double DEFAULT_EPSILON = 10efiles;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final double DEFAULT_EPSILON = 10efactory;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final double DEFAULT_EPSILON = 10e Route;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final double DEFAULT_EPSILON = getSeconde;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final double DEFAULT_EPSILON = 10e.1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final double DEFAULT_EPSILON = 10eCOUNT;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final double DEFAULT_EPSILON ='))e;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final double DEFAULT_EPSILON = 10eMIN_EPSILON;",
                "identical": false
            }
        ],
        "buggy_line": "private static final double DEFAULT_EPSILON = 10e-9;",
        "fixed_line": "private static final double DEFAULT_EPSILON = 10e-15;"
    },
    "Closure-92": {
        "fixes": [
            {
                "k": 1,
                "patch": "int indexOfDot = nameNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int indexOfDot = modules.indexOf('.');",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int indexOfDot = def.indexOf('.');",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int indexOfDot = name.indexOf('.');",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int indexOfDot = module.indexOf('.');",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int indexOfDot = ns.indexOf('.');",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int indexOfDot = getPosNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int indexOfDot = nameNode.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int indexOfDot = minimumNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int indexOfDot = next.indexOf('.');",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int indexOfDot = RuntimeNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int indexOfDot =HOUR.indexOf('.');",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int indexOfDot = getPos.indexOf('.');",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int indexOfDot = ordinal.indexOf('.');",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int indexOfDot = size.indexOf('.');",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int indexOfDot = i.indexOf('.');",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int indexOfDot = input.indexOf('.');",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int indexOfDot =Value.indexOf('.');",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int indexOfDot = modulesNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int indexOfDot = nameNode.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int indexOfDot =AsNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int indexOfDot = newIndexNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int indexOfDot = standardNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int indexOfDot = defNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int indexOfDot = secondNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int indexOfDot = argument.indexOf('.');",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int indexOfDot =Frames.indexOf('.');",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int indexOfDot = old.indexOf('.');",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int indexOfDot = name.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int indexOfDot = properties.indexOf('.');",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int indexOfDot = c.indexOf('.');",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int indexOfDot = link.indexOf('.');",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int indexOfDot =ARD.indexOf('.');",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int indexOfDot = 1000.indexOf('.');",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int indexOfDot = AtomicIntegerNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int indexOfDot = loadFactor.indexOf('.');",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int indexOfDot = minimum.indexOf('.');",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int indexOfDot = curr.indexOf('.');",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int indexOfDot =Wrap.indexOf('.');",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int indexOfDot = set.indexOf('.');",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int indexOfDot = Calendar.indexOf('.');",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int indexOfDot =lu.indexOf('.');",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int indexOfDot = getPosBefore.indexOf('.');",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int indexOfDot =Opt.indexOf('.');",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int indexOfDot = stage.indexOf('.');",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int indexOfDot = at.indexOf('.');",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int indexOfDot =LID.indexOf('.');",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int indexOfDot =es.indexOf('.');",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int indexOfDot =!.indexOf('.');",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int indexOfDot = oldChild.indexOf('.');",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int indexOfDot = prop.indexOf('.');",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int indexOfDot = maxNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int indexOfDot = coefficients.indexOf('.');",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int indexOfDot =ias.indexOf('.');",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int indexOfDot = minValue.indexOf('.');",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int indexOfDot = cannot.indexOf('.');",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int indexOfDot = name.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int indexOfDot = changes.indexOf('.');",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int indexOfDot = upper.indexOf('.');",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int indexOfDot =iasNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int indexOfDot = search.indexOf('.');",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int indexOfDot = modules.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int indexOfDot = 12.indexOf('.');",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int indexOfDot = parameter.indexOf('.');",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int indexOfDot = Global.indexOf('.');",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int indexOfDot = fv.indexOf('.');",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int indexOfDot =Str.indexOf('.');",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int indexOfDot = VariableNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int indexOfDot = predicates.indexOf('.');",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int indexOfDot = tr.indexOf('.');",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int indexOfDot = alias.indexOf('.');",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int indexOfDot = module.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int indexOfDot = modify.indexOf('.');",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int indexOfDot = target.indexOf('.');",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int indexOfDot = oldNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int indexOfDot =Continue.indexOf('.');",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int indexOfDot = 199.indexOf('.');",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int indexOfDot = aliass.indexOf('.');",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int indexOfDot = module.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int indexOfDot =MethodName.indexOf('.');",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int indexOfDot = ast.indexOf('.');",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int indexOfDot = replace.indexOf('.');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int indexOfDot = AtomicInteger.indexOf('.');",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int indexOfDot = maxValue.indexOf('.');",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int indexOfDot = tryNames.indexOf('.');",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int indexOfDot = Node.indexOf('.');",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int indexOfDot =AT.indexOf('.');",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int indexOfDot = entirely.indexOf('.');",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int indexOfDot = Raw.indexOf('.');",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int indexOfDot =Geom.indexOf('.');",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int indexOfDot =HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int indexOfDot =view.indexOf('.');",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int indexOfDot = spacing.indexOf('.');",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int indexOfDot = year.indexOf('.');",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int indexOfDot = gp.indexOf('.');",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int indexOfDot = min.indexOf('.');",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int indexOfDot =period.indexOf('.');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int indexOfDot = things.indexOf('.');",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int indexOfDot =Usage.indexOf('.');",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int indexOfDot = String.indexOf('.');",
                "identical": false
            }
        ],
        "buggy_line": "int indexOfDot = namespace.indexOf('.');",
        "fixed_line": "int indexOfDot = namespace.lastIndexOf('.');"
    },
    "Jsoup-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return html;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return parent.toString;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return html.toString;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return data.toString;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return text;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return getLength.toString;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return top;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return entry.toString;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "returnChar;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return Match.toString;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return blindScope;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return prefix;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return blindScope.toString;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return views.toString;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return parent.toString();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return constraint.toString;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return node.toString;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnscale.toString;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return nodeType;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return head.toString;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "returnround;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "returndelegate.toString;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return entry.value;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returnaccum.toString;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return arr.toString;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return Expand.toString;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return parent.value;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "returnstack.toString;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return html.toString();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return itemCount;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return nodes.toString;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return map.toString();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "returntok.toString;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return defaultValue;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "returnscale.toString();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return m.toString;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return current.toString;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return InputStream.toString;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "returnto.toString;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "returnacc.toString;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return views.toString();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return extent.toString;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "returntrans.toString;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "returnto.value;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return getLength;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return attributes.toString();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return right.toString;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return entry.to().trim;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return attributes.toString;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return getLength.toString();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return parent.toString()+\", inHtml;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return constraint.toString();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return parent.modCount;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return ret;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "returnscale.toString()+\", inHtml;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return parent.toString()+\";",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return triplet;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return entry;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return Control;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "returnch;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return parent.toString()+\", inExterns;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "returnto.intValue;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return data.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return entry.untrim;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return parent.toString() + 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "returnto.trim;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return parent.toString1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return last;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return entry.objectIdWriter;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "returnscale.toString()+\", inExterns;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "returntok.trim;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return entry.unmodifiable;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "returnFrom;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "returnacc;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return parent.numOccurrences;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "returnValues;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return head.trim;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "returnacc.toString();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return entry.grand;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "returnstack;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return name;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return parent.toString()+\", lastHtml;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return entry.trim;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return parent.toString()+).trim;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return right.toString();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return parent.toString()+\", html;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return namespace;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return data.toString();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "returnhtml;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return parent.i;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return entry.objectIdReader;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return blindScope.toString();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return base;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return html.toString()+\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return parent.toString()+\", in[0];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return Match.toString();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return parent.toString()+;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return run;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return entry.basisMapping;",
                "identical": false
            }
        ],
        "buggy_line": "return accum.toString().trim();",
        "fixed_line": "return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();"
    },
    "Lang-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (str.startsWith(\"0x\") || str;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (str.startsWith(\"0x\") || strLen;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"/\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (str.startsWith(\"/x0 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"[\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (str.startsWith(\"<x0 && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithFIRST\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithScope\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (str.startsWith(\"/x0 + str;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (str.startsWith(\"<x0eil P1_GT_PADDING || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (str.startsWith(\"<x0 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (str.startsWith(\"/x0e' && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (str.startsWith(\"/\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (str.startsWith(\"0x\") || str; // nope",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (str.startsWith(\"<x || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (str.startsWith(\"[x0e' && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (str.startsWith(\"/x0e\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (str.startsWithStringLiteralDfa || str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (str.startsWith(\"/x0 Color.startsWith(\"0x\") || strLen;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (str.startsWith(\".x0 = str || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (str.startsWith(\"[x0 && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (str.startsWith(\".x0 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (str.startsWith(\"<x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (str.startsWith Desx0e' && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (str.startsWith(\"<x0e' && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (str.startsWith MILLIS && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith AtomicBooleanx\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\",\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (str.startsWith(\"/x0eLong && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (str.startsWithWidth && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (str.startsWith(\"/x0eilim && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithlinkedx\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithStringLiteralDfa;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (str.startsWith(\"0x\") || str.length\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith('-\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith attacks\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (str.startsWith(\".x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (str.startsWith(\".x0eilim && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (str.startsWith(\"/x0e' && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (str.startsWithIgnored && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (str.startsWith(\"<x0 && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithWidth\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithANK;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithSetter\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (str.startsWith(\"<x0eLong && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith outer\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (str.startsWith(\"/x0 Color.startsWith(\"0x\") || str;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (str.startsWith(\"/x0;} && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (str.startsWith(\"<x0 && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (str.startsWithANK && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithU\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithANK) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith MILLIS;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (str.startsWithStringLiteralDfaPos && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (str.startsWith(\"/x0eilim && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (str.startsWith(\"<x' && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\".\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith odx\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith but\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (str.startsWith(\"<x0eilim && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith threshold;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (str.startsWith(\"<x0eilim && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (str.startsWith(\".x0eilim && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (str.startsWith(\"<x0e' && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"<!\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithnull\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithANK\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"<\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith Read\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith signatures\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (str.startsWithFLAGS && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (str.startsWith(\"0x\") || str.length != 2) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith Reference\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith push\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"< center\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith representation\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (str.startsWith(\"<x0eil P1_GT_PLETS && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithLen;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithFixed') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithFIRST;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (str.startsWith(\"/x0 || str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"\\\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithrename\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-\"))) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (str.startsWith(\"0x\") {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (str.startsWith(\"<x0eLong && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith rule\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"0;}\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithintern\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (str.startsWith(\"0x\") || str.length < 1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (str.startsWith(\".x0 && str.startsWith(\"0\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
        "fixed_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {"
    },
    "Lang-6": {
        "fixes": [
            {
                "k": 1,
                "patch": "pos += Character.charCount;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "pos += pt.charCount;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "pos += pt.charCount, pt);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "pos += f.charCount;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "pos +=RefPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "pos += Character.charCount( pt, pt);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "pos += Character.charCount, pt);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "pos += retain.codePoint(pt, pt);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "pos += Character.charCount(pt, pt);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "pos += m.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "pos += names.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "pos += pt.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "pos += ASPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "pos += BZipPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "pos +=CL.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "pos += adjust.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "pos += f.charCount( pt, pt);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "pos +=LOCALS_1_.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "pos += numPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "pos +=OfYear.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "pos +=Wall.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "pos +=Direction.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "pos += param.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "pos +=Target.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "pos += Character.charCount + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "pos += m.charCount;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "pos +=Config.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "pos +=RefPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "pos +=Rename.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "pos += Character.charCount; // if it't, we didn't really gets this.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "pos += emit.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "pos +=Final.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "pos += pt.charCount + 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "pos += numPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "pos += ASPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "pos += adjust.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "pos += m.codePointAt = Character.charCount;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "pos += Character.charCount; // if it't, need to do we didn't really gets this.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "pos +=regorian.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "pos += isVisible.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "pos += char.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "pos += m.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "pos += Character.charCount; // if it't, but do we didn't really gets this.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "pos +=title.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "pos += new Character.charCount;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "pos +=equals.charCount;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "pos += param.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "pos += BZipPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "pos += numPoint.codePoint(pt, pt);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "pos +=Rename.charCount;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "pos +=[]) pt.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "pos += names.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "pos +=Config.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "pos +=OfYear.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "pos +=RefPoint.codePointAt <= 127) ? Character.charCount;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "pos += f.charCount, pt);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "pos +=LOCALS_1_.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "pos += bucket.charCount;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "pos +=title.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "pos +=CL.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "pos += Character.charCount; // we didn't really gets this.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "pos += pt.charCount(ptPoint, pt);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "pos +=Rename.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "pos += pt.codePointAt;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "pos +=Target.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "pos += ASPoint.charCount;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "pos += m.codePointAt(pt, 12;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "pos +=RefPoint.charCount;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "pos += Character.charCount; // if we didn't really gets this.",
                "identical": false
            },
            {
                "k": 70,
                "patch": "pos += Character.charCount; // if negative",
                "identical": false
            },
            {
                "k": 71,
                "patch": "pos += higher.charCount;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "pos += Character.charCount; // if it't, need to do we didn't really now on",
                "identical": false
            },
            {
                "k": 73,
                "patch": "pos +=Wall.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "pos += retain.codePoint( pt, pt);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "pos +=(0.0, pt.codePointAt;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "pos += m.codePointAt(pt, bucket.inputPtr;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "pos += Character.charCount; // if it't be in current quad, pt the we didn't really gets this.",
                "identical": false
            },
            {
                "k": 78,
                "patch": "pos += m.codePointAt(ch, pt);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "pos += pt.charCount; // if it't really need to Character.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "pos += Character.charCount; // if it't really gets this.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "pos +=RefPoint.codePointAt(ch, pt);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "pos += m.codePointAt;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "pos += Bias + Character.charCount;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "pos += char.charCount;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "pos += emit.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "pos += (( pt.charCount, pt);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "pos +=Direction.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "pos +=Unused.charCount;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "pos += f.charCount(pt, pt);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "pos +=Direction.codePointAt;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "pos +=Final.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "pos +=/..charCount;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "pos += f.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "pos +=[]) pt.codePointAt;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "pos += Character.charCount(ptPoint, pt);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "pos += transformer.charCount;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "pos += pt.Bytes(ptPoint, pt);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "pos += 127).charCount;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "pos += ASPoint.codePointAt;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "pos += Character.charCount; // if it't really need to block or: can't, bucket.",
                "identical": false
            }
        ],
        "buggy_line": "pos += Character.charCount(Character.codePointAt(input, pos));",
        "fixed_line": "pos += Character.charCount(Character.codePointAt(input, pt));"
    },
    "Closure-52": {
        "fixes": [
            {
                "k": 1,
                "patch": "return len - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return c > 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this.index > 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new char[index - 1];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return offset > 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return start > 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return index % 2 == 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new charno > 0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return k + 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return s > 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return char > 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return c == 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return len > 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return charno > 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return num % 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return len == 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return k > 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnConcreteNumber > 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return end - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return amount > 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return len - str;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return EOF_CHAR % 2 == 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this.index - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return amount - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return i > 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new char[c - 1];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return num % 2 == 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return index % 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return lastNumber > 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return 10;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return index % 2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return limit > 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return len % 2 == 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return js > 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return buffer.length % len;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return i != 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return buffer.length % 2 == 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return final charno > 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return num % s;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this.len > 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return ch - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.len - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return current - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return VOID;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new char[c - '0')];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new charno % 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new char[len - 1];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return EOF_CHAR % 2 != 0;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return now - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return size > 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return i == 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return back > 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return c == 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return num == 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return buffer == 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new charno + 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return lastNumber >= 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return buffer.length > 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return buffer.length - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return len - '.';",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new char[128 - 1];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return instance > 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new char > 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return length > 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return types > 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return len % x == 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return prefix == 0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return paint == 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return final charno % c == 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return len % 2 != 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return num > 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "returnConcreteNumber >= 0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return start >= 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return values == 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return start == 0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return EOF_CHAR > 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return true;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return now == 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new charno < 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new char[index - '0')];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return EOF_CHAR <= 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new char[index + 1];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new char[value - 1];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return space > 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return EOF_CHAR + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return series > 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return len % x;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return buffer.length % 2 != 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return len - char;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return buffer.length % new charno;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return last - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new char[c >> 1];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return num - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return len - charLength;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return num % 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return final charno % c;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return len % x.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "returnView > 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return index % 4;",
                "identical": false
            }
        ],
        "buggy_line": "return len > 0;",
        "fixed_line": "return len > 0 && s.charAt(0) != '0';"
    },
    "Csv-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (current == '\\n') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (current == '\\n') { currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (current == '\\n') { currentChar; break;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (current == '\\n') { currentChar;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (current == '\\n') { currentChar; }",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (current == '\\n') { currentChar = lastChar; }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (current == '\\n') { currentChar; inParent = lastChar;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (current == '\\n') { currentChar; in 8 = lastChar;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (current == '\\n') { currentChar; lastChar] = lastChar;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (current == '\\n') { currentChar = lastChar; break;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (current == '\\n') { currentChar] = lastChar;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_STREAM; }",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (current == '\\n') { currentChar; : lastChar;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (current == '\\n') { currentChar; inbednode = lastChar;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (current == '\\n') { currentChar; in int = lastChar;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (current == '\\n') { currentChar; return lastChar;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (current == '\\n') { currentChar;Body = lastChar;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (current == '\\n') { currentChar; in JsonToken.VALUE_EOL = lastChar;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (current == '\\n') { currentChar; in atts",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (current == '\\n') { currentChar; in int -= lastChar;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (current == '\\n') { current = lastChar;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (current == '\\n') { currentChar; iterannotated = lastChar;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (current == '\\n') { currentChar; in event = lastChar;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (current == '\\n') { currentChar; in c = lastChar;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (current == '\\n') { currentChar; iterannotatedIndex = lastChar;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (current == '\\n') { currentChar; break L0 = lastChar;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (current == '\\n') { currentChar; size = lastChar;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (current == '\\n') { currentChar; must be = lastChar;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r' = lastChar;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (current == '\\n') { currentChar = i == '\\r't;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (current == '\\n') { currentChar; must lastChar;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (current == '\\n') { currentChar; set = lastChar;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (current == '\\n') { currentChar; inulated = lastChar;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (current == '\\n') { currentChar; inBuf = lastChar;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (current == '\\n') { currentChar = i == '\\r's;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (current == '\\n') { currentChar;expr = lastChar;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (current == '\\n') { currentChar; maybe = lastChar;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (current == '\\n') { currentChar; mustParent = lastChar;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (current == '\\n') { currentChar; in \"\") = lastChar;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (current == '\\n') { currentChar; must lastChar = lastChar;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (current == '\\n') { currentChar;LF = lastChar;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_STREAM; lastChar;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (current == '\\n') { currentChar; must shuffle4 = lastChar;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (current == '\\n') { currentChar; in special = lastChar;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (current == '\\n') { currentChar; in del = lastChar;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (current == '\\n') { currentChar;ed = lastChar;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r't = lastChar;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (current == '\\n') { currentChar;Incomplete = lastChar;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (current == '\\n') { currentChar; inbed check = lastChar;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar; in currentChar;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (current == '\\n') { currentChar = lastChar; in currentChar;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (current == '\\n') { lastChar;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (current == '\\n') { currentChar; in JsonToken.VALUE_NULL",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (current == '\\n') { currentChar; in JsonToken.VALUE_BITS = lastChar;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (current == '\\n') { currentChar; inbed = lastChar;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (current == '\\n') { currentChar; inEvaluator = lastChar;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (current == '\\n') { currentChar; in at = lastChar;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (current == '\\n') { currentChar; iterannotatedParent = lastChar;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_ alloc = lastChar;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (current == '\\n') { currentChar; EOF_CHAR = lastChar;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_STREAM;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (current == '\\n') { currentChar; in at charno't = lastChar;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (current == '\\n') { currentChar; incodeBug = lastChar;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar; break;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (current == '\\n') { currentChar; iteranns = lastChar;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (current == '\\n') { currentChar; in JsDocToken.VALUE_EOL = lastChar;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (current == '\\n') { currentChar = i == '\\r')) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (current == '\\n') { currentChar; in 8 = lastChar; }",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (current == '\\n') { currentChar; in at begin",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (current == '\\n') { currentChar; in per currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r't be = lastChar;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (current == '\\n') { currentChar; in JsDocToken = lastChar;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (current == '\\n') { currentChar; in't = lastChar;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (current == '\\n') { currentChar; in JsonToken.VALUE_CHAR = lastChar;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (current == '\\n') { currentChar; in JsDocToken't = lastChar;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (current == '\\n') { currentChar; in at begin + 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (current == '\\n') { currentChar; in at charno'll = lastChar;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r't really modify",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_STREAM; lastChar = lastChar;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (current == '\\n') { currentChar; break L0;}",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (current == '\\n') { currentChar; inExterns;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (current == '\\n'') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (current == '\\n') { currentChar; in JsDocToken.codeBug = lastChar;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r't find",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (current == '\\n') { currentChar; in JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_QU] = lastChar;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (current == '\\n') { currentChar; must bechar with lastChar;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (current == '\\n') { lastChar = lastChar;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (current == '\\n') { currentChar; in at begin + lastChar;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (current == '\\n') { currentChar; in MB",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (current == '\\n') { currentChar; in JsonToken.VALUE_STRING; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_STREAM; : lastChar;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (current == '\\n') { currentChar; inING_VALUE; }",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (current == '\\n') { currentChar; : lastChar; }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (current == '\\n') { currentChar; });",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (current == '\\n') { currentChar; in at charno'",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_STREAM; break;",
                "identical": false
            }
        ],
        "buggy_line": "if (current == '\\n') {",
        "fixed_line": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {"
    },
    "Mockito-29": {
        "fixes": [
            {
                "k": 1,
                "patch": "description.appendText = description;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "description.appendText;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "description.appendText = descriptionInfo.toString();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "description.appendText -= description;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "description.appendText = descriptionTo;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "description.appendText = description);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "description.appendText = descriptionToQu;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "description.appendText(wanted.toString());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "description.appendText(wanted.toString);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "description.appendText = descriptionToEvaluate;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "description.appendText = descriptionInfo.toString());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "description.appendText != description.toString());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "description.appendTextItems.toString());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "description.appendText(false);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "description.appendTextItems.toString();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "description.appendText = descriptionInfo.toString;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "description.appendTextElement = description.toString();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "description.appendText = description < description.toString();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "description.appendText = description_VALUE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "description.appendText(wanted.toStringID;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "description.appendTextnewText = description;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "description.appendTextElement(description);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "description.appendText = descriptionParent;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "description.appendText = descriptionIf;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "description.appendText).toString();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "description.appendText = description < description.toString());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "description.appendText = descriptionIfNull;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "description.appendText(description);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "description.appendText(wanted.toStringID_').);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "description.appendTextType(wanted.toString());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "description.appendTextAnchor = description;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "description.appendTextIsText = description;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "description.appendText = description, description);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "description.appendText(wanted.toStringID_Union);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "description.appendText(name);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "description.appendTextType(wanted.toString);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "description.appendText(wanted.toStringID_SEGMENT_description);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "description.appendText(wanted.toString_description);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "description.appendTextExterns = description;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "description.appendText(wanted.toStringID_ label);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "description.appendText < description.toString());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "description.appendText = descriptionToMILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "description.appendTextExterns.toString();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "description.appendText(wanted.toStringID_ermS);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "description.appendTextIsText = descriptionInfo.toString();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "description.appendText(wanted.toString().description);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "description.appendText = descriptionToQuDescription;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "description.appendText(wanted.toStringID_Deserializer);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "description.appendTextElement = description.toString());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "description.appendTextIfNull(description);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "description.appendTextbufferedEntryCount = description;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "description.appendTextextText = description;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "description.appendTextExterns -= description;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "description.appendText(wanted.toStringdeclaration);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "description.appendText = descriptionEndText;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "description.appendText)){",
                "identical": false
            },
            {
                "k": 57,
                "patch": "description.appendText(wanted.toStringID_FORMS);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "description.appendText(wanted.toStringID_Deserializer = description);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "description.appendTextLiteral(wanted.toString);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "description.appendText(wanted.toStringID_OPS);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "description.appendTextElement.toString());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "description.appendText(wanted.toStringID_Union;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "description.appendTextElement(wanted.toString());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "description.appendText(wanted.toStringID_VALUE);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "description.appendText(wanted.toStringID_').;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "description.appendText = descriptionToWrap;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "description.appendTextElement = description;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "description.appendText(wanted.toStringID_INTERIUM);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "description.appendTextgo = description;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "description.appendText: description.toString();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "description.appendText = descriptionList;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "description.appendTextbufferedEntryCount = descriptionInfo.toString();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "description.appendText = descriptionDescription;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "description.appendTextElement(wanted.toString);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "description.appendText = descriptionIf % this.wanted;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "description.appendText(wanted.toStringID_[1], description);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "description.appendText(wanted.toStringFloor);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "description.appendText).appendText;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "description.appendText( attr.toString());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "description.appendTextprefix = description;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "description.appendTextExterns.toString());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "description.appendText(wanted.toStringID_Type);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "description.appendTextType(wanted.toStringID_ label);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "description.appendTextDuration = description;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "description.appendText = description - description;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "description.appendTextElement(false);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "description.appendText(wanted.toStringID_ZERO;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "description.appendText(wanted.toStringID);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "description.appendText = descriptionToQuarter;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "description.appendTextType(wanted.toStringID_').);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "description.appendText(wanted.toString()+\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "description.appendText != description.toString;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "description.appendTextToEvaluate;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "description.appendText = descriptionToMILLIS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "description.appendText(wanted.toStringID_double description);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "description.appendText = descriptionToMock;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "description.appendText = descriptionToModifiers;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "description.appendText = descriptionRecycler;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "description.appendText = descriptionToLen;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "description.appendText(wanted.toStringID_Locale);",
                "identical": false
            }
        ],
        "buggy_line": "description.appendText(wanted.toString());",
        "fixed_line": "description.appendText(wanted == null ? \"null\" : wanted.toString());"
    },
    "Jsoup-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "accum.append(c);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "accum.append(c;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "accum.append('$');",
                "identical": false
            },
            {
                "k": 4,
                "patch": "accum.append('c;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "accum.append(in;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "accum.append(\",\":) break;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "accum.append(\",\").append(escape);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "accum.append(escape);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "accum.append(\",\").append(c;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "accum.append(cPath;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "accum.append(\",\").append(encapsulator;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "accum.append(\",\").append(encapsulator) break;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "accum.append(\"\\n;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "accum.append(\", 7,Externs;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "accum.append(c == '<') break;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "accum.append(\",Dom;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "accum.append(\",\").append(escapeMode;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "accum.append(\",\").append(in);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "accum.appendWeekc;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "accum.append('[').append(c;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "accum.append(\",\").append(opcode;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "accum.append(clazz;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "accum.append(\".c;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "accum.append(\",\").append(in;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "accum.append('0';",
                "identical": false
            },
            {
                "k": 26,
                "patch": "accum.append(\",md;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "accum.appendintern(c);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "accum.append(\",\":: \").append(c;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "accum.append(\",).append(in);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "accum.append(\", 7,: \").append(c;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "accum.append(\",\"::\").append(c;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "accum.append(\",).append(in;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "accum.append('0' <= 0) break;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "accum.append(\",ERROR;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "accum.append(c, '<;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "accum.append(\",\").append(inMode;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "accum.append(';",
                "identical": false
            },
            {
                "k": 38,
                "patch": "accum.append(\",\":: \").append(in;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "accum.append(c)) break;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "accum.append(\",\": \"+c;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "accum.append(cParameters);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "accum.append(\",\").append(empty;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "accum.appendmultiply(escape);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "accum.append(\",\":: \").append;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "accum.append i;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "accum.append(\", mu;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "accum.append(\",\").append(inExterns;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "accum.append('[';",
                "identical": false
            },
            {
                "k": 49,
                "patch": "accum.append('0'node;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "accum.append(' c;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "accum.append(\",\"::\").append(in;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "accum.append(\",).append(inMode;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "accum.append(\",\").append(c);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "accum.append(\",\").append(opcode);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "accum.append(\",\"::\").append(encapsulator;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "accum.append(\", 7,:\").append(c;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "accum.append(\", 7,: \").append(in;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "accum.append(\",\").append(encapsulator)) break;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "accum.append(' 55;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "accum.append('[').append(escape);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "accum.append(\",\"::\").append(escape);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "accum.append(\", varylt.basisAttribute;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "accum.append(\", 7,:\").append(escape);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "accum.append(\",).append(inExterns;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "accum.appendintern = isAttribute;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "accum.appendAlternate;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "accum.append('[').append(escapeMode;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "accum.append(\", varylt.in;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "accum.append;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "accum.append(\", 7,:\").append(encapsulator;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "accum.append stack;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "accum.append(\", 7,: \").append;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "accum.append('$') break;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "accum.append(\",\": \").append(in;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "accum.append(\",\").append(encapsulator_;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "accum.append(\",\":: \" + source;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "accum.append(c,annotated;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "accum.append(\",ADD;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "accum.append(\",\"::\").append(in);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "accum.append(cParent;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "accum.append(\",).append;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "accum.append(\",).append(c;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "accum.append(\", getItem;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "accum.append(c == '<;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "accum.append(\",\":: \";",
                "identical": false
            },
            {
                "k": 86,
                "patch": "accum.append('[').append(in;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "accum.append(\", 7,: \").append(initialMode;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "accum.append(\",iterator;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "accum.append(\",\"::\").append(opcode;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "accum.appendizer;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "accum.appendintern = entry;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "accum.append(\", lex;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "accum.append(cPath);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "accum.append(\",\").append(encapsulator ) break;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "accum.append(\",\":: \").append(encapsulator;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "accum.append(\", 7,ExternTypes;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "accum.append(\", 7,:\").append(escapeMode;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "accum.append(\",\").append(encapsIAL;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "accum.append(\", serial;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "accum.append(clocalsSize;",
                "identical": false
            }
        ],
        "buggy_line": "accum.append(c);",
        "fixed_line": "accum.append(\"&#xa0;\");"
    },
    "Chart-20": {
        "fixes": [
            {
                "k": 1,
                "patch": "super(paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "super(paint, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": true
            },
            {
                "k": 3,
                "patch": "super(paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "super(paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "super(paint, stroke, alpha, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "super(paint, stroke, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "super(paint, stroke, outlinePaint, paint, alpha);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "super(value, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "super(paint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "super(paint, stroke, paint, stroke, alpha;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "super(paint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "super(paint, stroke, outlinePaint, this.paint, alpha);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "super(paint, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "super(paint, stroke, outlinePaint, null);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "super(value, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "super(paint, stroke, outlinePaint, DEFAULT_PAINT);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "super(paint, stroke, alpha, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "super(paint, stroke, alpha, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, paint, alpha);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "super(alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "super(paint, stroke, outlinePaint,Stroke, alpha);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "super(paint, stroke, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "super(paint, stroke, outlinePaint, fillStroke, alpha);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "super(paint, stroke, outlinePaint, far, alpha);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "super(paint, stroke,Stroke, alpha);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "super(paint, stroke, outlinePaint, DEFAULT_PAINT;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "super(paint, stroke, paint, this.paint, alpha);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "super(paint, stroke, alpha, this.paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "super(paint, stroke, outlinePaint, outlineStroke, alpha;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "super(outline, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "super(paint, stroke, paint, stroke, fillStroke, alpha);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "super(paint, stroke, outlinePaint, debuggingStroke, alpha);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "super(stroke, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "super(paint, stroke, outlinePaint,HH, alpha);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "super(paint, stroke, outlinePaint, signature, alpha);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "super(paint, alpha, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "super(paint, stroke, paint, low, alpha);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "super(paint, stroke, paint, debuggingStroke, alpha);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "super(paint, stroke, alpha, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "super(value, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "super(paint, stroke, outlinePaint, range, alpha);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "super(paint, stroke, paint, stroke,value, alpha);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "super(paint, stroke, outlinePaint, invocation, alpha);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "super(paint, stroke, outlinePaint,Top, alpha);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "super(paint, stroke, paint, stroke, this.paint);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "super(paint, stroke, outlinePaint,2d, alpha);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "super(paint, stroke, alpha, stroke, paint);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "super(paint, stroke, outlinePaint,Can, alpha);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "super(paint, stroke, outlinePaint,primary, alpha);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "super(paint, stroke, alpha, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "super(paint, stroke, outlinePaint, instructions, alpha);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "super(paint, stroke, paint, stroke,Top, alpha);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "super(paint, stroke, paint, low, stroke, alpha);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "super(paint, stroke, paint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "super(paint, stroke, paint, axis, alpha);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "super(alpha, stroke, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "super(value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "super(paint, stroke, outlinePaint, this.paint, alpha;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "super(paint, stroke, paint, stroke, 1.0f);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "super(paint, stroke, paint, stroke, debuggingStroke, alpha);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "super(paint, stroke, outlinePaint,3;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "super(paint, stroke, outlinePaint,out, alpha);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "super(paint, stroke, outlinePaint,JO_PAINT);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "super(paint, stroke, paint, stroke, min, alpha);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "super(paint, stroke, outlinePaint, right);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "super(paint, stroke, outlinePaint, outlineRule, alpha);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "super(paint, stroke, outlinePaint,comparisonStroke, alpha);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "super(paint, stroke, paint, stroke, invocation, alpha);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "super(paint, stroke, outlinePaint, + alpha);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "super(v, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "super(paint, stroke,value, alpha);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "super(paint, stroke, outlinePaint, this.defaultPaint, alpha);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "super(paint, stroke, outlinePaint, value);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "super(paint, stroke,2, alpha);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "super(paint, stroke, font, stroke, alpha);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "super(paint, stroke, outlinePaint, outline paint, alpha);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "super(paint, stroke,primary, alpha);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "super(paint, stroke, alpha, outlinePaint, null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "super(paint, stroke, outlinePaint, alpha;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "super(paint, stroke, paint, stroke,atedItemsPaint, alpha);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "super(paint, stroke, paint, stroke, fillAssign, alpha);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "super(paint, stroke, paint, stroke,Stroke, alpha);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "super(0, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "super(paint, stroke, outlinePaint,JO_PAINT;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "super(paint, stroke, outlinePaint, is > stroke, alpha);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "super(paint, stroke, outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, DEFAULT_PAINT);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, this.paint);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "super(paint, stroke, paint, stroke,HH, alpha);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "super(paint, stroke, outlinePaint, 2d, alpha);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "super(outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "super(paint, stroke, paint, error;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "super(paint, stroke, paint,name, alpha);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "super(paint, stroke, paint, stroke, axis, alpha);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "super(paint, stroke, outlinePaint, 0, alpha);",
                "identical": false
            }
        ],
        "buggy_line": "super(paint, stroke, paint, stroke, alpha);",
        "fixed_line": "super(paint, stroke, outlinePaint, outlineStroke, alpha);"
    },
    "Math-75": {
        "fixes": [
            {
                "k": 1,
                "patch": "return getCumPct<?> vts;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return getCumPct<?> v;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return getCumPct;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return getCumPct && vts;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return getCumPct<?> v=2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return getCumPct && v.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return getCumPct && v instanceofdeprecated;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return getCumPct<?> v = v;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return getCumPct && v;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return getCumPct && vCOMMAND;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return getCumPct<?> vConcretePct",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return getCumPct<?> vJct;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return getCumPct<?> vTYPE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return getCumPct<?> vlipse2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return getCumPct<?> vdataset;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return getCumPct<?> vCOMMAND;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return getCumPct<?> vURI;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return getCumPct && vts instanceofdeprecated;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return getCumPct<?> vd;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return getCumPctTransform<?> vts;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return getCumPct<?> v[v];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return getCumPct",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return getCumPct<?> vgetterMinLevel;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return getCumPct<?> vPtr;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return getCumPct && vors;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return getCumPct<?> vverify;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return getCumPctID<?> vts;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return getCumPct mut<?> vts;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return getCumPct && v instanceof help<?>) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return getCumPct<?> v1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return getCumPct<?> vText;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return getCumPct<?> v._getPct",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return getCumPct && v instanceof 3.<?>) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return getCumPct<?> vverifyImpl(v);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return getCumPct<?> vlipse2Pct",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return getCumPct && vverify;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return getCumPct<?> vSet;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return getCumPct<?> vbreak;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return getCumPct<?> vappendPct",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return getCumPct<?> v';",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return getCumPctDeserializer<?> vts;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return getCumPct<?> vStream;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return getCumPct && vlipse2D;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return getCumPct<?> vlipse2D;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return getCumPct && v instanceofous<?>) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return getCumPct<?> v count;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return getCumPct && vchecker;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return getCumPct<?> vFiles<?> vts;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return getCumPct && vSafe;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return getCumPct && vFiles;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return getCumPct<?> vquote;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return getCumPct && v instanceof push;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return getCumPctutes<?> vts;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return getCumPct<?> v. percentage_VALUE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return getCumPct<?> vverifyImpl(_value);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return getCumPct);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return getCumPct<?> vEmpty;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return getCumPct<?> vbased;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return getCumPct>(v;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return getCumPct && v instanceof help;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return getCumPct diff<?> vts;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return getCumPct && v count;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return getCumPct && vbased;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return getCumPctTransform<?> v;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return getCumPct<?> v throwsPct",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return getCumPct if (v.length == 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return getCumPct<?> vidResolver;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return getCumPct<?> vBlock;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return getCumPct<?> vsuffix;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return getCumPct && vURI instanceofdeprecated;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return vct instanceof getCumPct<?>;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return getCumPct<?> v format;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return getCumPct<?> v];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return getCumPctequals(v);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return getCumPct && v != 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return getCumPct && vDown;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return getCumPct if (v.length == 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return getCumPct && v instanceof help<?>;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return getCumPctutes<?> v;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return getCumPct && vURI;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return getCumPct<?> vKey;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return getCumPct<?> v .5);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return getCumPctDesc<?> vts;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return getCumPct && v instanceofous<?>;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return getCumPct && v nope instanceofdeprecated;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return getCumPct>();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return getCumPct<?> v) { return 2;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return getCumPct && v instanceof 3.<?>;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return getCumPct<?> v += 2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return getCumPct<?> v._value;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return getCumPct<?> vverifyImpl.instance;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return getCumPct<?> vValue;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return getCumPctObject;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return getCumPct<?> vAdded;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return getCumPct(v);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return getCumPct && v instanceof help<?>);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return getCumPct<?> vIALPct",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return getCumPct<?> v nope;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return getCumPct mut<?> v;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return getCumPct<?> vtag;",
                "identical": false
            }
        ],
        "buggy_line": "return getCumPct((Comparable<?>) v);",
        "fixed_line": "return getPct((Comparable<?>) v);"
    },
    "Gson-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (value < 0 || negative != Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (offset == 0 && last == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (value == 0 && pattern == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (value == NUMBER_CHAR && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i == SHORT_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (value == 0 && fits == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (value == 0 && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (value == 0 && last == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (start == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || _value != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (last == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && try_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (offset == 0 && len == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && !value != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (value == 0 && value == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || dp == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (value < 0 || negative == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (n == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (value == NUMBER_Sibling || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i == 0 && peek_CHAR || i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (value == 0 &&<Long == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (pos == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (value == NUMBER_MILLIS || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (offset == 0 && value == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (last == -1 || negative.length == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (offset == 0 && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (value == NUMBER_DIG || negative != Long.MAX_VALUE && value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (pos == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || unit == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (last == -1 || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (value == NUMBER_INT || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (type == long.last && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (value == 0 &&hasLong == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || negative != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (value == NUMBER_CHAR || state.last < Long.MIN_VALUE || i > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (last == NUMBER_CHAR || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (value == NUMBER_ client || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (g == -1 || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (value == NUMBER_May || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (start == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (value == '_ || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (value == NUMBER_CHAR || i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (compute == -1 || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (last == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (value == VALUE_CHAR || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (modifiers == Long.MIN_VALUE || negative != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (value < 0 || negative.length == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (l >= Long.MIN_VALUE && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (value < 0 || negative.length == Long.MIN_VALUE || iancestor == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && !value != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (value == NUMBER_CHAR || state.last < Long.MIN_VALUE || value > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (value == NUMBER_CHAR || value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (last == -1 || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (value == NUMBER_TYPE || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && token == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (last == Long.MIN_VALUE || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && tokenLen == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i == SHORT_DIG || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && try_VALUE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (value == NUMBER_CHAR || needs == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || l_CHAR) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (start == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (l >= label && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (value == VALUE_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (value == NUMBER_OBJECT || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (type == long.last || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (value == NUMBER_IC || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && ivalue != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (l >= value && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (offset == 0 && last == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (value == NUMBER_CHAR || state.last < Long.MIN_VALUE || iCutover == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && ivalue != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (value == NUMBER_DIG || i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (value == NUMBER_May || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (value == NUMBER_CHAR || c == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (length == 0 && i == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (value == -1 || negative.length == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (value == 0 && size == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (value == 0 && fits == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && !value != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (value == NUMBER_ client || negative != Long.MIN_VALUE) {",
                "identical": false
            }
        ],
        "buggy_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {",
        "fixed_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {"
    },
    "Math-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (vSize == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (vSize) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (vSize == tree) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (vSize;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (numerator == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (vSize > MAX_INT_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (v>0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (vTree.getAttributeTotal) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (vSize > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (vTree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (vSize > MAX_INT_AS_DOUBLE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (vSize < 1) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (vSize > MAX_DOUBLE_SIZE) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (vSize > MAX_INT_AS_LONG) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_SIZE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (vSize > MAX_COLON) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (vTree.getAttributeExpression == tree) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (vTree.getAttribute Need;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (vSize > MAX_DOUBLE_ESCAPE_SIZE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (vTree.getAttributeValue) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (vSize > MAX_DOUBLE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (vTree.getAttributeWidth == tree) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (vSize == BZip2Constants.TOP) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (vTree.getAttribute) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (vTree.getAttribute;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (vSize > MAX_DOUBLE_EFFESCAPE_SIZE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (vSize == BZip2D.getAttribute;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (vSize == BZip2Constants.MIDDLE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (vSize > MAX_INT_AS_EFFECTS) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (vSize > MAX_INT_AS_LENGTH) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (numerator>0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (vTree.getAttribute Need <= 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (vSize > MAX_INT_SIZE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (vSize == BZip2Constants.getAttribute) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (vSize > MAX_DOUBLE_EFFEMBEDDED_SIZE) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (v>incMoment) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (vSize > MAX_INT_AS_NULL) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (vSize > MAX_INT_AS_FACTOR) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_ tree) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (vSize > BZip2Constants.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (LTreeBOTH) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (v>EntityTree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (v> >= tree.length) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (LSize == 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (vSize > MAX_DOUBLE_EFFEMBEDDED_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (L >= tree.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (vSize > 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (vTree.getAttributeWidth == 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_OBJECTS) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (vSize < 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (numBytes) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (vSize > MAX_DOUBLE_LENGTH) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (vSize == BZip2Constants.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_VALUES_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (numerator == tree.getAttributeING_VALUE) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (vSize > MAX_DOUBLE_ESCAPE_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (vSize > tree.length) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_LENGTH) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (vSize > BZip2Constants.getAttribute()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (vSize < tree) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (vSize > MAX_CHAIN_LENGTH) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (vSize > MAX_NULL) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (vSize == BZip2Constants.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (vTree.getAttribute Need) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (vSize == BZip2Constants.getAttribute()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (v> tree.getAttributeValue) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (v>AFTER_EFFECTS) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (vSize > MAX_INTERIOR_SIZE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (vSize == BZip2Constants.BOTH) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (L> tree.getAttributeValue) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (v>Expression == tree) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (num[0] == tree) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_whole) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (windowSize) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (vSize > tree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (vSize > MAX_INT_L) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (vSize > MAX_INT_AS_ 201) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (numerator == tree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (vCatchSize) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (vSize == 2) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (vSize == BZip2Constants.START_ tree) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (vCatch) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (vSize > MAX_BOUNDS) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_VALUES_SIZE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (v2.getAttribute()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_VALUES_AS_LENGTH) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (vSize < 2) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (vSize > MAX_DOUBLE_EFFEMBEDDED_OBJECTS) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_TreeBIGDECIMAL) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (40.getAttributeWidth == tree) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (vSize > MAX_INT_AS_BOUNDS) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (vTree.getAttributeInteger) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_TO_1970) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (vSize > MAX_INT_AS_EFFESCAPE_SIZE) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (vSize == BZip2DRAW) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (vSize > MAX_DOUBLE_EFFEMBEDDED_ tree) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (vSize > MAX_SPACE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (vTreeB.getAttribute()) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (L >= 10Size) {",
                "identical": false
            }
        ],
        "buggy_line": "if ((Boolean) tree.getAttribute()) {",
        "fixed_line": "if (tree.getCut() == null && (Boolean) tree.getAttribute()) {"
    },
    "Mockito-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (k instanceof CapturesArgumentss) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (k instanceof Captures) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (k instanceof CapturesArgumentss - k;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (k instanceof CapturesArgumentss - k) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (k instanceof CapturesArgumentss - k);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (k instanceof CapturesArgumentss(0, i);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (k instanceof CapturesArgumentss private - k;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (k instanceof CapturesArgumentssInstantiator) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (k instanceof CapturesArgumentss == 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (k instanceof CapturesArgumentss this) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (k instanceof CapturesArgumentssRemove) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (k instanceof CapturesArgumentss - i);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (k instanceof CapturesArgumentssMatcher) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (k instanceof CapturesArgumentss + k;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (k instanceof CapturesArgumentss == i) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (k instanceof CapturesArgumentssInstanti) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (k instanceof CapturesArgumentssPlot) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (k instanceof CapturesArgumentss || k != 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (k instanceof CapturesArgumentss[1];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (k instanceof CapturesArgumentss == m) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (k instanceof CapturesArgumentssLink) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (k instanceof CapturesArgumentss this.millisecond) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (k instanceof CapturesArgumentss[k];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (k instanceof CapturesArgumentss || k != 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (k instanceof CapturesArgumentssAccess) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (k instanceof CapturesArgumentss private - k) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (k instanceof CapturesArgumentss - k];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (k instanceof CapturesArgumentss - i;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (k instanceof CapturesArgumentssdelegateArgumentss - k;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (k instanceof CapturesArgumentssUndefined) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (k instanceof Captures(0, i) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (k instanceof CapturesArgumentss\", k);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (k instanceof CapturesArgumentssWrapper) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (k instanceof CapturesArgumentssCallback) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (k instanceof CapturesArgumentssIterator) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (k instanceof CapturesArgumentssClassDef) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (k instanceof CapturesArgumentssInvocations - k;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (k instanceof CapturesArgumentssProp) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (k instanceof CapturesArgumentss info) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (k instanceof Captures<?, k) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (k instanceof CapturesArgumentss(0, i - k;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (k instanceof CapturesArgumentsspl) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (k instanceof CapturesArgumentssFar_FROM_SIZE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (k instanceof CapturesAndArgumentss - k;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (k instanceof CapturesArgumentssRenderingOrder) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (k instanceof CapturesArgumentss || k;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (k instanceof CapturesArgumentssVarArgs) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (k instanceof CapturesArgumentss(0, i - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (k instanceof CapturesArgumentss[k - 1];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (k instanceof Captures - k) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (k - i instanceof Captures) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (k instanceof CapturesArgumentssAndNaN || k != 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (k instanceof\u2c60sArgumentss - k;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (k instanceof CapturesArgumentss(0, i) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (k instanceof CapturesArgumentss dataShadow) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (k instanceof CapturesArgumentss inner) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (k instanceof CapturesArgumentss)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (k instanceof\u3431sArgumentss - k;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (k instanceofDECsArgumentss - k;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (k instanceof CapturesArgumentss insert = i - k;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (k instanceof CapturesInstantiator) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (k instanceof CapturesArgumentss;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (k instanceof CapturesArgumentssIndenter) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (k instanceof CapturesArgumentssUndefined;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (k instanceofClosedsArgumentss) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (k instanceof CapturesArgumentss == k) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (k instanceof CapturesArgumentss args) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (k instanceof CapturesArgumentss);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (k instanceof CapturesArgumentssInvocations - i);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (k instanceof CapturesArgumentss - kbyte) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (k instanceof CapturesArgumentssAndNaN - k;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (k instanceof CapturesArgumentss + k);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (k instanceofClosedsArgumentss - k;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (k instanceof CapturesAccess) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (k instanceof CapturesArgumentssInvocations - k) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (k instanceof CapturesArgumentss break) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (k instanceof CapturesArgumentss private) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (k instanceof CapturesArgumentssAndNaN || k;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (k instanceof CapturesArgumentssSet) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (k instanceof CapturesArgumentssAndNaN || k != 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (k instanceofSuppsArgumentss) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (k instanceof CapturesArgumentss getID) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (k instanceof CapturesArgumentss nextIndex) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (k instanceof CapturesArgumentssbuffer) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (k instanceof CapturesArgumentss v) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (k instanceofQueryBuildersArgumentss - k;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (k - i instanceof CapturesArgumentss;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (k - i instanceof CapturesArgumentss) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (k instanceof CapturesArgumentssRanges - k) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (k instanceof CapturesArgumentsslong) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (k instanceof CapturesArgumentss<?, k + i;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (k instanceof CapturesArgumentssSET) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (k instanceof CapturesArgumentss 2) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (k instanceof CapturesArgumentssed) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (k instanceof CapturesArgumentss this.length - k;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (k instanceof CapturesArgumentssVarMatcher) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (k instanceof CapturesArgumentssdebug) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (k instanceof CapturesArgumentssandles - k;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (k instanceof CapturesArgumentss this.url;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (k instanceof CapturesArgumentss37) {",
                "identical": false
            }
        ],
        "buggy_line": "if (m instanceof CapturesArguments) {",
        "fixed_line": "if (m instanceof CapturesArguments && i.getArguments().length > k) {"
    },
    "JacksonDatabind-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "visitFloatFormat(typeHint, vts, _typeHint);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "visitFloatFormat(typeHint, _config, typeHint);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "visitFloatFormat(typeHint, vts, element);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "visitFloatFormat(typeHint, vts, elementType);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "visitFloatFormat(typeHint, vts, valueHint);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "visitFloatFormat(typeHint, vts, elementSerializer);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "visitFloatFormat(typeHint, vts,contentType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "visitFloatFormat(typeHint, vts, element;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "visitFloatFormat(typeHint, vts, exceptionsType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "visitFloatFormat(typeHint, vts, element.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "visitFloatFormat(typeHint, vts, replaceType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "visitFloatFormat(typeHint, vts, state.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "visitFloatFormat(typeHint, vts, floatType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "visitFloatFormat(typeHint, vts, float.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "visitFloatFormat(typeHint, _ && v2 instanceof JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "visitFloatFormat(typeHint, vts, _typeHint;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "visitFloatFormat(typeHint, vts, JSONType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "visitFloatFormat(typeHint, property, vts);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "visitFloatFormat(typeHint, vts,contentType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "visitFloatFormat(typeHint, vts, iNumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "visitFloatFormat(typeHint, vts, state.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "visitFloatFormat(typeHint, vts, i);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGERType);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "visitFloatFormat(typeHint, vts, element.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "visitFloatFormat(typeHint, vts, exceptionsType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "visitFloatFormat(typeHint, _ & JsonParser.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberType);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "visitFloatFormat(typeHint, vts,instType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "visitFloatFormat(typeHint, vts,eraType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "visitFloatFormat(typeHint, vts, _objectIdWriter.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "visitFloatFormat(typeHint, vts, JsonParserType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "visitFloatFormat(typeHint, TYPE_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIGINT);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "visitFloatFormat(typeHint, vts, propertyType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "visitFloatFormat(typeHint, vts, JsonParserType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "visitFloatFormat(typeHint, vts, ceType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "visitFloatFormat(typeHint, vts, elementParameterType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "visitFloatFormat(typeHint, vts, _(100Type.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "visitFloatFormat(typeHint, vts, elementSerializer.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "visitFloatFormat(typeHint, t, vts);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "visitFloatFormat(typeHint, vts, floatType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "visitFloatFormat(typeHint, vts, _objectIdWriter.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGERType);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "visitFloatFormat(typeHint, vts, float.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "visitFloatFormat(typeHint, vts, replaceType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "visitFloatFormat(typeHint, _isBIGFormatReadersType.BIGINT_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIGINT_INTEGER);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "visitFloatFormat(typeHint, vts, toType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "visitFloatFormat(typeHint, TYPE_INTEGER, vts);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "visitFloatFormat(typeHint, vts, linenoType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "visitFloatFormat(typeHint, _isBIGFormatR_INTEGER, v2Type.BIGINT);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "visitFloatFormat(typeHint, vts, _asParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "visitFloatFormat(typeHint, vts, removeNumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "visitFloatFormat(typeHint, vts, _objectIdReader.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "visitFloatFormat(typeHint, _visitor, vts);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "visitFloatFormat(typeHint, vts,JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "visitFloatFormat(typeHint, vts, i.BIGINT_INTEGER);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "visitFloatFormat(typeHint, vts, _objectIdType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "visitFloatFormat(typeHint, vts, elementParameterType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "visitFloatFormat(typeHint, vts, tokenBeginNumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "visitFloatFormat(typeHint, vts, JSONType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "visitFloatFormat(typeHint, vts, stringNumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "visitFloatFormat(typeHint, vts, property);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "visitFloatFormat(typeHint, vts, removeNumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "visitFloatFormat(typeHint, vts, iNumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "visitFloatFormat(typeHint, vts, _asParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "visitFloatFormat(typeHint, vts, info.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "visitFloatFormat(typeHint, vts, propertyType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "visitFloatFormat(typeHint, _cfgNumberFormat, v2Type.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIGINT_INTEGER);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "visitFloatFormat(typeHint, vts, _asParserType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "visitFloatFormat(typeHint, TYPE_INTEGER, v);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "visitFloatFormat(typeHint, vts, _objectIdWriter.BIG_INTEGERType);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "visitFloatFormat(typeHint, vts, tokenBeginNumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "visitFloatFormat(typeHint, TYPE_INTEGER, vDownType.BIGINT);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "visitFloatFormat(typeHint, vts, elementObjType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "visitFloatFormat(typeHint, vts, TYPE_INTEGER);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "visitFloatFormat(typeHint, vts, ceType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "visitFloatFormat(typeHint, vts, TextField);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "visitFloatFormat(typeHint, vts, _(100Type.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER, h);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "visitFloatFormat(typeHint, vDownType.BIG_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "visitFloatFormat(typeHint, vts, & JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "visitFloatFormat(typeHint, vts, _asParserType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberType.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "visitFloatFormat(typeHint, vts, visitor);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "visitFloatFormat(typeHint, _ & JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "visitFloatFormat(typeHint, vts,JsonParser.BIG_INTEGER;",
                "identical": false
            }
        ],
        "buggy_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
        "fixed_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);"
    },
    "Cli-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "nextLineTabStop = width - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "nextLineTabStop = pos - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "nextLineTabStop = width / pos;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "nextLineTabStop = width / pos + 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "nextLineTabStop = width - pos + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "nextLineTabStop = width / 2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "nextLineTabStop =spectTabStop - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "nextLineTabStop = maxLine - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "nextLineTabStop = s.substring(pos - 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "nextLineTabStop = width - column;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "nextLineTabStop = width - pos;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "nextLineTabStop = width / nextLineTabStop - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "nextLineTabStop = height - 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "nextLineTabStop = pos - width;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "nextLineTabStop = padding + width - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "nextLineTabStop = width / 4;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "nextLineTabStop = width / pos - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "nextLineTabStop = padding + width / 2;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "nextLineTabStop = width / 10;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "nextLineTabStop =cb.substring(pos - 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "nextLineTabStop = c - 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "nextLineTabStop = width / 2.0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "nextLineTabStop = s.substring(0, pos - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "nextLineTabStop = text - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "nextLineTabStop = width - str;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "nextLineTabStop = width / LOG_10_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "nextLineTabStop = casesTabStop - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "nextLineTabStop = lineGuess - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "nextLineTabStop = width / 100;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "nextLineTabStop =bits - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "nextLineTabStop =getBytes - pos + 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "nextLineTabStop =cb.length - 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "nextLineTabStop = local.length - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "nextLineTabStop = s.substring(pos - 1, width;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "nextLineTabStop = width / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "nextLineTabStop = width /condition;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "nextLineTabStop = width / 2, height - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "nextLineTabStop = buffer.length - 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "nextLineTabStop =angle - width;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "nextLineTabStop = width / LOG_10_COUNT;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "nextLineTabStop = width / LOG_10_Ce - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "nextLineTabStop = workNewLine - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "nextLineTabStop = d - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "nextLineTabStop = width / eol + 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "nextLineTabStop = width /cutNewLine;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "nextLineTabStop = space - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "nextLineTabStop = width / LOG_10_CUS - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "nextLineTabStop =cb.substring(pos - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "nextLineTabStop =cb.substring(0, pos - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "nextLineTabStop = width / s;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "nextLineTabStop = width + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "nextLineTabStop = width / getXNewLine;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "nextLineTabStop = string - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "nextLineTabStop = width / 3;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "nextLineTabStop = s.substring(pos - width;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "nextLineTabStop = lineStart - width;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "nextLineTabStop = width / lt + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "nextLineTabStop = width / nextLineTabStop;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "nextLineTabStop = width / columnCount - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "nextLineTabStop = 200 - width;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "nextLineTabStop = width / zzfieldNewLine;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "nextLineTabStop = width -PRESSION;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "nextLineTabStop = width /cut - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "nextLineTabStop = param + width / 2;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "nextLineTabStop = j - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "nextLineTabStop = width / ltCount - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "nextLineTabStop = width / nextLineTabStop + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "nextLineTabStop = base + width / 2;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "nextLineTabStop = width / LOG_10_CLASS;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "nextLineTabStop = d / width;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "nextLineTabStop =angle - width / 2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "nextLineTabStop = s.substring(pos - 1, height);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "nextLineTabStop = s.substring(pos - 1, width-1) + 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "nextLineTabStop = width / pos) - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "nextLineTabStop = width / LOG_10_VALUE - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "nextLineTabStop = width /angle + 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "nextLineTabStop = width / LOG_10_Ce;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "nextLineTabStop = width / 32;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "nextLineTabStop = zz - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "nextLineTabStop = s.substring(pos - width, space + 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "nextLineTabStop = param + width - 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "nextLineTabStop = width / LOG_10_CUTOVERTICAL;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "nextLineTabStop = s.substring(pos - 1, width + 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "nextLineTabStop = s.substring(pos - 1, height;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "nextLineTabStop =cb.substring(pos - width;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "nextLineTabStop = width / LOG_10_CUS + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "nextLineTabStop = width - lts;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "nextLineTabStop = width / ip_COUNT;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "nextLineTabStop = 200 - width, height + 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "nextLineTabStop = Deser - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "nextLineTabStop = width / LOG_10_Cutoff - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "nextLineTabStop = & width - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "nextLineTabStop = s.substring(0, pos - width;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "nextLineTabStop = width /zone;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "nextLineTabStop = width - cut;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "nextLineTabStop =cycleBound - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "nextLineTabStop =cb.substring(pos - 1, width;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "nextLineTabStop = width / LOG_10_IN_ONE_SIZE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "nextLineTabStop = width / bits;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "nextLineTabStop = first - 1;",
                "identical": false
            }
        ],
        "buggy_line": "nextLineTabStop = width - 1;",
        "fixed_line": "nextLineTabStop = 1;"
    },
    "Math-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "return iterator;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return iterator.iterator;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return iterator.iterator();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return chromos.iterator();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this. chromos.iterator;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return chromos.iterator;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "returnizesos.iterator();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return runningos.iterator();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this. chromos.iterator();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "returnizesos.iterator;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return ZipEntry.iterator;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "returnvoos.iterator();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return beforeos.iterator();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return\ud855\udf71os.iterator;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return friendsos.iterator();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "returnitingos.iterator;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "returnMINos.iterator();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnintroos.iterator;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return getConfigos.iterator;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return Navigableos.iterator();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return mPattern.iterator;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "returnPRECos.iterator;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return EVALos.iterator();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return bisos.iterator();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return\u8578os.iterator();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return\ud855\udf71os.iterator();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return friendsos.iterator;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return leavingos.iterator;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "returnWhos.iterator;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return<?.iterator;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return beforeos.iterator;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return mlos.iterator();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return EVALos.iterator;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return greatestos.iterator();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return Personos.iterator();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return center.iterator;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return\u9e21os.iterator();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "returnEaros.iterator();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return getArgos.iterator();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return\u0952os.iterator();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return iterator.iterator2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "returnpegos.iterator;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return deltaXos.iterator;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return\u03a6os.iterator;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return anywayos.iterator;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return015os.iterator();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "returnRECEos.iterator();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return unusedos.iterator();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return unusedos.iterator;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "returnEaros.iterator;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.imenos.iterator();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "returnitingos.iterator();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return getUnitos.iterator();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return this. Principalos.iterator;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return causesos.iterator;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this.imenos.iterator;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return estimatedos.iterator;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return getDriveros.iterator();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return runningos.iterator;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return getArgos.iterator;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return leavingos.iterator();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return this.\u745eos.iterator;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return 2013os.iterator;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this.\u2e4fos.iterator;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this.\uc591os.iterator;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "returnurbos.iterator();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this.\u2c66os.iterator();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return items.iterator;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return10)os.iterator;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "returnMINos.iterator;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "returnvoos.iterator;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return getCheckos.iterator();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this.ActionPerformedos.iterator;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return 39os.iterator;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this.\u5197os.iterator();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this. chromos;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return Day.iterator;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return10)os.iterator();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return mPattern.iterator();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "returnurbos.iterator;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this.\u2c66os.iterator;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "returnLIPos.iterator;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return this.ActionPerformedos.iterator();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return 39os.iterator();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return getCheckos.iterator;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return getDriveros.iterator;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "returnVariant.iterator;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return 2013os.iterator();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return anywayos.iterator();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.CharFieldos.iterator;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return this.\u8070os.iterator();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this.CharFieldos.iterator();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return causesos.iterator();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returnWhos.iterator();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return iterator2.iterator;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this.\u8070os.iterator;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return estimatedos.iterator();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return\u0952os.iterator;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return getUnitos.iterator;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return p.iterator;",
                "identical": false
            }
        ],
        "buggy_line": "return chromosomes.iterator();",
        "fixed_line": "return getChromosomes().iterator();"
    },
    "Closure-114": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (n.isDepScope) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (isDepScope) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (n.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (parent) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (n;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (lhs.recordDepScope) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (lhs.isDepScope) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (lhs.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (nNode;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (n == node){",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (parent.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (isExterns) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (nNode.isDepScope) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (rhsVar.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (n.S_PER_PROPERTY) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (lhs.inExterns) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (ns.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (n.isExterns) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (n.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (n == parent) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (n == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (lhs.recordDepScope == n) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (n.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (nEdge.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (ns.isDepScope) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (nNode) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (rhsVar.nameNode == n) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (parentType == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (lhs.recordDepScope == rhs) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (n.isDeclaration) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (lhs.parent) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (rhsVar.parent) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (inExterns) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (lhs.recordDepScope;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (lhs.inNode != rhs) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (nEdge.isDepScope) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (n.getType() == Token.GETELEM) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (n.isVar(lhs)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (n.getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (rhs > parent) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (lhs.n == rhs) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (n.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (lhs != rhs) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (rhsVar.nameNode == rhs) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (n.sideEffects) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (n == node) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (n.isDepScope(lhs)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (lhs.isExterns) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (lhs.isDepScope;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (rhsVarArgs) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (rhs > rhs) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (n.isFirstChild) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (lhs.inNode) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (n.isEquals) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (lhs > rhs) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (lhs.recordDepScope != rhs) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (n == node;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (n.nameNode == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (lhs.record != rhs) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (n.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (n.BACKGROUND) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else ifNode == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (rhsVar.nameNode == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (n.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (n.nameNode) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (lhs.nameNode != rhs) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (n.getType() == Token.CALL) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (lhs == rhs) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (lhs.inNode == n) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (n.S_PER_MINUTE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (lhs.numOccurrences == n) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (parent != Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (lhs.isDepScope == n) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (n.recordDepScope) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (n.parent) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (n.S_PER_EXPR_FUNCTION_NAME) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (lhs.inDepScope) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (n.nameNode;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (n.getFirstChild() != n) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (lhs.numOccurrences == rhs) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (n.getFirstChild() {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (lhs.isDepScope(n)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (lhs.nameNode) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (lhs.refersToEvaluate) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (n.getType() == Token.IF) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (rhs) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (n.assignsClassDef) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (n.S_PER_SECOND",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (n == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (lhs) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (n.S_PER_FUNCTION_NAME) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (lhs.numOccurrences) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (lhs.inNode;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (n.getType() == Token.VAR) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (lhs.intr != rhs) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (parent != child) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (rhsVar.nameNode == nameNode;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (lhs. DateTimeField) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (isDepScope;",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (!(parent.isCall() && parent.getFirstChild() == n)) {"
    },
    "JxPath-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return args[0].computeValue;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return compute[0].computeValue;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return context[0].computeValue;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return arguments[0].computeValue;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return args[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return args[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return compute == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return compute[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return args[0].computeValue(context, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return args[0].computeValue(context[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return args[0].computeValue(context, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return compute[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return compute[0].computeValue(context ? 1 : 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return compute[0].computeValue(context5, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return args[0].computeValue(context ? 1 : 2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return compute[0].computeValue(context[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return compute[0].computeValue(context, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return arg[0].computeValue;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return computeF[0].computeValue;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return args[0].computeValue(context ? 1 : 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return compute[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return compute[0].computeValue(context || args[0].computeValue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return context[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return args[0].computeValue(context) ? 1 : 2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return compute[0].computeValue(context, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return computeCfg[0].computeValue;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return compute[0].computeValue(context, args[0]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return args[0].computeValue(context[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return compute[0].computeValue(context[1].computeValue;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return computeCfg[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return args[0].computeValue(args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return args[0].computeValue() + 2;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return compute[0].computeValue(context, args[1].computeValue + \"computeValue\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return context[0].computeValue(args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return args[0].computeValue(context, args[1].computeValue + \"computeValue\";",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return args[0].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return args[0].computeValue(context[1].computeValue;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return args[0].computeValue(context) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return compute[0].computeValue(context ? 1 : 2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return args[0].computeValue(context == args[1].computeValue;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return context[0].computeValue(context[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return compute[0].computeValue(context == args[1].computeValue;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return arguments[0].computeValue(context == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return JsDocToken.args[0].computeValue;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return compute[1].computeValue(context == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return compute[0].computeValue(context, args[1].computeValue);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return args[0].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return args[0].computeValue(context || args[0].computeValue;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return compute[0].computeValue(context5, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return compute[0].computeValue(context[1].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return arguments[0].computeValue(context[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return context[0].computeValue(args[1].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return args[0].computeValue(context[1].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return compute[0].computeValue(context5, args[1].computeValue);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return arguments[0].computeValue(context, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return compute[0].computeValue(context ? 1 : args;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return arguments[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return compute[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return arguments[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return totalValue[0].computeValue;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return compute[0].computeValue(context[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return compute[0].computeValue(contextMethod[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return args[0].computeValue(context, args[0]);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return args[0].computeValue(contextpassesValue[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return compute255[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return computeCfg[0].computeValue(context, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return h[0].computeValue;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return compute[0].computeValue(context < args[0].computeValue;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return arguments[0].computeValue(context ? 1 : 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return compute[0].computeValue(context, args[1].computeValue + \"computeValue;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return computeCfg[0].computeValue(context, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return arguments[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return args[0].computeValue(context, args[1].computeValue) ? 1 : 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return compute[0].computeValue(context || args[1].computeValue;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return computeresult[0].computeValue;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return computeCfg[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return args[0].computeValue(context == args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return compute[0].computeValue(context) ? 1 : 2;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return compute[0].computeValue(context5, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return arguments[0].computeValue(context == args[1].computeValue;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return compute[0].computeValue(context, args[1].computeValue) ? 1 : 2;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return args[0].computeValue(contextStmt[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return compute[0].computeValue(context5, args[1].computeValue) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return arguments[0].computeValue(context, args[1].computeValue + \"computeValue\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return compute[0].computeValue(context ? args[0].computeValue : args;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return compute[0].computeValue(context5, args[1].computeValue) ? 1 : 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return computeF[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return args[0].computeValue(contextpassesValue[1].computeValue;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return args[0].computeValue(context == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return args[0].computeValue(context, args[1].computeValue);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return arguments[0].computeValue(context, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return arguments[0].computeValue(context5, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return computenumberOf(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return arguments[0].computeValue(context[1].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return context == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return computeFollow[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return compute[0].computeValue(context ? args[0].computeValue : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return args[0].computeValue(context == args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return compute[0].computeValue(context) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return arguments[0].computeValue(context) ? 1 : 0;",
                "identical": false
            }
        ],
        "buggy_line": "return compute(args[0].computeValue(context), args[1].computeValue(context))",
        "fixed_line": "return compute(args[0].compute(context), args[1].compute(context))"
    },
    "Mockito-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "catch (e.mocking = error;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "catch (e.mockito.verificationAreDifferent)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "catch (e.mockito.Parse = e;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "catch (e.mockingAndDifferentArguments = e;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "catch (e.mocking = oldMock;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "catch (e.mockito.verification[0] = e;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "catch (e.mockito. 1 = e;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "catch (e.mockito.verification = e;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "catch (e.mockito. after;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "catch (e.mockito.ParseDaysInBits;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "catch (proxy.mockingAndDifferentArguments = e;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "catch (e.mockito.verificationAreDifferent = e;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "catch ( String.mocking = oldMock;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "catch (e.mockito.())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "catch (e.mockito.Parse;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "catch (e.mockito.width;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "catch (e.mockito. Pig = e;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "catch (proxy.mockingAreDifferentArguments) e;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "catch (e.mockito.AndDifferentOffset = e;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "catch (e.mockingAndDifferentOffset = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "catch (e.mock) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "catch (e.mockito.PadAreDifferent = e;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "catch (e.mockito.str) e;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "catch (e.mockito. 1 = callback;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "catch (e.mockito.Parse = callback;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "catch (e.mockito.ParseException;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "catch (e.mockito.height;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "catch (e.mocking = 4.5;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "catch (e.mockito.verificationchanges;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "catch (e.mocking = superclass;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "catch (e.mockito.AndDifferentArguments = e;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "catch (e.mockito.color;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "catch (proxy.mockingAreDifferent > 3) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "catch (e.mockito.verificationInstant = e;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "catch (e.mockito.verificationInstant;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "catch (e.mockito.condition = e;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "catch (e.mockito.verificationAreDifferenting = e;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "catch (e.mockito.module = e;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "catch ( String.mocking = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "catch (e.mockito.Adj = e;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "catch (e.mockito. Exp_[0] = e;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "catch (e.mockito.saveMillis = e;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "catch (e.mockito.Parse = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "catch (e.mockito.plet = e;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "catch (e.mocking = 10.0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "catch (e.mockito.str = e;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "catch (e.mockito.save = e;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "catch (e.mockito.verification8601) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "catch (e.mockito.ParseDaysInDifferent > 3) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "catch (e.mockito.AndDifferentArguments(error);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "catch (e.mockito.getValueArguments = e;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "catch (e.mockito.Processing;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "catch (e.mockito.color = e;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "catch (e.mockito.Parse = EASTER;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "catch (e.mockito.width) e;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "catch (e.mockito.locale;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "catch (e.mockito.Adj;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "catch (e.mockito.Parse = e.value;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "catch (e.mockito.verification predicate = e;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "catch ( String.mockito.Parse = e.value;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "catch (e.mockito.method) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "catch (proxy.mocking = e;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "catch (e.mocking sep.width)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "catch (e.mockito.verificationAreDifferentArguments = e;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "catch (e.mocking =Locale;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "catch (e.mockito. 1 = error;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "catch ( String.mocking = e.value;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "catch (e.mocking = Choose;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "catch (e.mockito. X = e;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "catch (e.mockito.Parse = e.methodName;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "catch (e.mockito. period;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "catch (e.mockito.verificationAreDifferent duration;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "catch (e.mockito.verificationAreDifferent != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "catch (e.mockito.invokeArguments = e;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "catch (e.mockito. after = e;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "catch (e.mockito.Parse = e.after;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "catch (e.mockito.verificationInstantiatorAreDifferent = e;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "catch ( String.mockito.str) e;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "catch (e.mockito.height);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "catch (e.mockito.verificationParse = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "catch (e.mockito.verificationAreDifferent) e;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "catch (Index.mockingAreDifferent = e;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "catch (e.mockito.ParseDaysAreDifferent > 3) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "catch (e.mockito.verificationDescription = e;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "catch (e.mockito.method) error;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "catch (e.mockito.AndDifferentOffset;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "catch (e.mockingAndDifferentArguments) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "catch (e.mocking = e;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "catch (e.mockingAndDifferentOffset = e.maximum;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "catch (e.mockingAndDifferentOffset = e.method;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "catch (e.mockito.verificationMillis = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "catch (e.mocking sep.width) e;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "catch ( String.mockito.Parse = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "catch (e.mockito.verificationInstantiatorAreDifferentArguments = e;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "catch (e.mockito.';",
                "identical": false
            },
            {
                "k": 96,
                "patch": "catch (e.mockito.verificationAreDifferentK;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "catch (e.mockito.str;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "catch (e.mockito.Parse) e;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "catch (e.mocking = old;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "catch (proxy.mocking sep = e;",
                "identical": false
            }
        ],
        "buggy_line": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
        "fixed_line": "catch (AssertionError e) {"
    },
    "Chart-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (this.dataset != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (dataset != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (dataset == null) {",
                "identical": true
            },
            {
                "k": 4,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (this.dataset == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (renderer == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (this.dataset != null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (index == null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (this.dataset != nullTextdatasetIndex) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (existing != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (removed == null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (this.dataset != nullFieldType.datasetIndex) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (this.dataset != null) return 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (this.dataset != null) return index;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (this.dataset != nullRenderingOrder.START) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (this.dataset != nullinitializationCount) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (other.dataset != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (this.dataset != nullRenderingOrder.length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (this.dataset != nullRenderingOrder.ASCENDING) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (this.dataset != nullFieldType.seriesCount) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (ivaluesShift != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (this.dataset != null) { // dataset to handle up the series...",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (seriesCount != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (removed != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (index != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (this.dataset != nullOrder.START_AS_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (this.dataset != nullS.length) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (dataset != null) { // this.dataset, series...",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (this.dataset != nullbuilderDataset.length) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (this.dataset != null erOrder.START_AS_VALUE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (this.dataset != nullix.length) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (this.dataset != nullState.datasetIndex) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (this.dataset != null) { // dataset to axis the series...",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (categoryDataset != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (this.dataset != nullS.datasetIndex) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (this.dataset != nullrapping.length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (this.dataset != null erOrder.length) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (this.dataset != null erOrder.START_AS_Dataset) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (USE_Dataset != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (this.dataset != nullRenderingOrder.START_AS_Dataset) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (this.dataset != nulllibrary.length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (this.dataset != null erOrder.START_AS_MINUTE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (this.dataset != null) { // can this represents the series...",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (this.dataset != nullRenderingOrder.START_AS_VALUE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (this.dataset != nullOrder.length) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (this.dataset != null erOrder.START_AS_IS) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (this.dataset != nullOrder.START_AS_Dataset) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (this.dataset != null) { // no need to axis the series...",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (this.dataset != nullforOrder.START_AS_VALUE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (this.dataset != null) { // dataset to v is this represents the series",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (this.dataset != nullforOrder.ASCENDING) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (renderer != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (this.dataset != null) { // dataset to axis the series",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (this.dataset != null) { // dataset to handle up the series",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (this.dataset != null tokens.length) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (this.dataset != null) { // dataset to do this.renderers;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (this.dataset != nullrotationOrder.length) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (this.dataset != null super.datasetIndex) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (object == null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (this.dataset != nullOrder.START_AS_MINUTE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (this.dataset != null stringOrder.START_AS_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (this.dataset != nullTextdataset = seriesCount;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (this.dataset != null silentOrder.length) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (this.dataset != nullBoolean.length) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (this.dataset != null) { // dataset to",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (this.dataset != nullOrder.START_AS_ includes) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (this.dataset != nullRenderingOrder.START_AS_MINUTE_Dataset) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (this.dataset != null erOrder.START_AS_series) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (this.dataset != nullRenderingOrder.START;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (this.dataset != null) { // can this represents the dataset to",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (existing == null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (this.dataset != nullOrder.ASCENDING) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (this.dataset != nullFieldType.rendererIndex) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (this.dataset != null erOrder.START_AS_OLD_Dataset) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (this.dataset != null silentOrder.START_AS_VALUE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (this.dataset != nullTextdataset = index;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (this.dataset != null) { // add a dataset to",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (this.dataset != null) { // Recurse up the dataset to",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (isDataset == null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (this.dataset != null) { // dataset to this represents the series",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (clone.dataset != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (this.dataset != null) { // dataset to this.renderers; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (this.dataset != null erOrder.START_AS_ includes) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (this.dataset != nullRenderingOrder.START_AS_ includes) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (this.dataset != nullOrder.START_AS_series) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (this.dataset != null erOrder.START_AS_NAME) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (this.dataset != null) { // dataset to v is this.",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (this.dataset != nullTextdataset == null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (this.dataset != null) { // dataset to this.renderers;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (this.dataset != null) { // dataset to do this.renderer the series",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (this.dataset != null erOrder.ASCENDING) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (this.dataset != nullRenderingOrder.START_AS_OBJECT) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (this.dataset != null negOrder.length) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (this.dataset != null) { // index no need to axis the series...",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (this.dataset != nullforOrder.length) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (this.dataset != nullOrder.START_AS_IS) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (this.dataset != nullRenderingOrder.START_AS_series) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( !dataset == null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (this.dataset != null) { // dataset to do this.renderers; }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (this.dataset != nullInvocations) {",
                "identical": false
            }
        ],
        "buggy_line": "if (dataset != null) {",
        "fixed_line": "if (dataset == null) {"
    },
    "Closure-67": {
        "fixes": [
            {
                "k": 1,
                "patch": ") {",
                "identical": false
            },
            {
                "k": 2,
                "patch": ") assignPropertyedLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "knownedPropertyHandler.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Convention.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "knownedPropertyHandler.newVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": ") assignPropertyedVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "(assignedProperty) assignVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "while (assignLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "switch (n.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "VALUE_NAME = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": ") assignPropertyed = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ") assignPropertyedLhsVar = assign;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean assignPropertyed = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": ") assignPropertyedLhs.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "hookedVar = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": ") assignPropertyed = assignVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "switch (assignedLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": ") assignPropertyedLhs.isVar(assignContext)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": ") assignPropertyed = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (; assign.inExterns) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "&& assign.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean assignPropertyedVar = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": ") assignPropertyed = assign.inExterns;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ") assignPropertyedLhsVar = assign.inExterns;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "(assignedProperty) assignVar.inExterns;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "&& assign.inExterns) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "(assignedLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": ") assignPropertyed = assignVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "hookedVar = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": ") assignPropertyedVar = assign.inExterns;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Convention.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean assignPropertyed = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": ") assignPropertyedAbout.get(assignLhs)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "(assigned) assign.inExterns;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Convention.isPrototypeProperty(assignLhs)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean assignPropertyedVar = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "0.0Propertyed = assign.assignVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (n = assign; assign.isVar()) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "knownedPropertyHandler) assignVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "0.0PropertyAssign = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": ") assignPropertyedLhs.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ") assignPropertyedVar.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ") assignPropertyedVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ") assignPropertyedLhs.isVar(assign);",
                "identical": false
            },
            {
                "k": 47,
                "patch": ") assignPropertyedMethodName = assignVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "switch (n.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (n = assign; assign.isVar) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": ") assignedProperty).assignVar(assignLhs);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "(assignLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": ") assignPropertyedAbout.get(assignLhs);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ") assignPropertyedMethodName = assignVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": ") assignPropertyedVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "while (assignLhs.isVar) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": ") assignPropertyedLhsVar = assign.ineno;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ") assignPropertyed = assign.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 58,
                "patch": ") assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": ") assignPropertyed = assign.assignVar(assignLhs);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Convention.isPropertyAssign(assignLhs)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": ") assignPropertyedLhsVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ") assignPropertyedMethodName = assignVar.isChained(assignLhs;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Convention.isPrototypeProperty(assignLhs) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": ") assignPropertyedisVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": ") assign.inExterns(assignLhs);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ") assignPropertyedLhs.isVar(n)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (; assign.isVar()) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": ") assignPropertyedLhsVar = assign.getFirstChild;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ") assign.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ") assign.inExterns) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean assignPropertyed = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ") assignPropertyed = assignVar.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 74,
                "patch": ") assignPropertyedLhs.isVar(assign)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": ") assignPropertyedMethodName = assignVar.isChained(assignLhs)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": ") assignPropertyedLhsVar.isVar(assignContext)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": ") assignedProperty).assignVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean assignPropertyed = assign.isVar()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": ") assignPropertyedisVar(assignLhs);",
                "identical": false
            },
            {
                "k": 80,
                "patch": ") assignPropertyed = assign.assignVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": ") assignPropertyedVar = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": ") assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ") assignedProperty).assignVar(assignLhs;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ") assignPropertyedAbout.get(assignLhs;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ") assignPropertyedLhs.assignVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": ") assignPropertyedLhs.isVar(assignPECIFIED_PROPERTY)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean assignPropertyed = assign.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean assignPropertyed = assign.isVarArgs) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": ") assignPropertyedExpression(assignLhs);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean assignPropertyedVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "VALUE_NAME = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ") assignPropertyedLhs.get(assign);",
                "identical": false
            },
            {
                "k": 94,
                "patch": ") assignPropertyedExpression(assignLhs)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "&& assign.isVarArgs) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "while (assignLhs.isVarArgs) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean assignPropertyedVar = assign.isVar()) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "while (assignLhs.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": ") assignPropertyedLhs.assignVar(assignLhs);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "0.0Propertyed = assign.assignVar(assignLhs);",
                "identical": false
            }
        ],
        "buggy_line": ") {",
        "fixed_line": "&& assign.getParent().getType() == Token.EXPR_RESULT) {"
    },
    "JacksonDatabind-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "return previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return previous != null && previous.equals(_currentState);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return previous != null && previous.equals(_attributeCount;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return previous != null && previous.equals(_value;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return previous != null && previous.equals(_value);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return previous != null && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return previous != null && previous.equals(_methodName);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return previous != null && previous.equals(_currentSegment.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return previous != null && previous.equals(_attributeCount);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return previous != null && previous.equals(ann) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return previous != null && previous.equals(_type);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return previous != null && previous.equals(_value) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return previous != null && previous.equals(_string;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return previous != null && previous.equals(_attributeCount - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return previous != null && previous.equals(_names;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return previous != null && previous.equals(_timezone",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return previous != null && previous.equals(_expType);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return previous != null && previous.equals(_name;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return previous != null && previous.equals(_currentName);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return previous != null && previous.equals(_annotations;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return previous != null && previous.equals(_cfg;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return previous != null && previous.equals(_currentState;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return previous != null && previous.equals(_name);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return previous != null && previous.equals(_last;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return previous != null && previous.equals(_wrapperName);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return previous != null && previous.equals(_next;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return previous != null && previous.equals(_method) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return previous != null && previous.equals(_previous;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return previous != null && previous.equals(_FIRST);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return previous != null && previous.equals(_current);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return previous != null && previous.equals(_buckets.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return previous != null && previous.equals(_method);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return previous != null && previous.equals(_loop) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return previous != null && previous.equals(ann) >= 0;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return previous != null && previous.equals(_attributeCount == 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return previous != null && previous.equals(\"\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return previous != null && _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return previous != null && previous.equals(_attributeCount == 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return previous != null && previous.equals(_ label;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return previous != null && previous.equals(_cfgName);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return previous != null && previous.equals(_Sym;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return previous != null && previous.equals(_currentNode);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return previous != null && previous.equals(_exp);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return previous != null && previous.equals(_loop);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return previous != null && previous.equals(ann));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return previous != null && previous.equals(_grand;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return previous != null && previous.equals(_currentSegment);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "returnprevious != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return previous != null && previous.equals(_methodName;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return previous != null && previous.equals(_value);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return previous != null && previous.equals(_MatchersCount;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return previous != null && previous.equals(_currentKey;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return previous != null && previous.equals(_cfgName)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return previous != null && _previous.equals(ann);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return previous != null && previous.equals(_paramValue);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return previous != null && previous.equals(_cls;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return previous != null && previous.equals(_constructors;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return previous != null && previous.equals(_current;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return previous != null && previous.equals(_index;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return previous != null && previous.equals(_next) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return current != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return previous != null && previous.equals(_from) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return previous != null && previous.equals(_buffer;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return previous != null && previous.equals(_months;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return previous != null && previous.equals(_computeValue);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return previous != null && previous.equals(_hasType);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return previous != null && previous.equals(_name) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return previous != null && previous.equals(_compute);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return previous != null || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return previous != null && previous.equals(_construct.value) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return previous != null && previous.equals(_MatchersCount - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return previous != null && previous.equals(_buckets.header) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return previous != null && previous.equals(_cmp) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return previous != null && previous.equals(_wrapper;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return previous != null && previous.equals(_number);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return previous != null && previous.equals(_columnIndex);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return previous != null && previous.equals(_Matchers;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return previous != null && previous.equals(_nodes;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return previous != null && previous.equals(_ jsType);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return previous != null && previous.equals(_valueType);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return previous != null && previous.equals(_else) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return previous != null && previous.equals(_signature;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return previous != null && previous.equals(_Byte);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return previous != null && previous.equals(_annotations);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return previous != null && previous.equals(_A) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return previous != null && previous.equals(_expansion;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return previous != null && previous.equals(_node;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return previous != null && previous.equals(_additional;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return previous != null && previous.equals(_ Segment.type);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return previous != null && previous.equals(_msg);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return previous != null && previous.equals(_method;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return previous != null && previous.equals(_hasAnnotationIntrospector);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return previous != null && previous.equals(_remove;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return previous != null && previous.equals(_namespace);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return previous != null && previous.equals(_length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return previous != null && previous.equals(_ get.value) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return previous != null && previous.equals(_string);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return previous != null && previous.equals(_buckets.value);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return previous != null && previous.equals(_compute;",
                "identical": false
            }
        ],
        "buggy_line": "return (previous != null) && previous.equals(ann);",
        "fixed_line": "return (previous == null) || !previous.equals(ann);"
    },
    "Jsoup-47": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (in;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (inExterns) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (inExterns) in t;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (inAttribute) in html;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (inExterns) inBuf;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (inExterns) inExceptions;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c == EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (inExterns) in tokens;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c == 'Attribute') break;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (inExterns) \");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (inAttribute) attrib;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (inAttribute) bytes;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (inExterns) in 8;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (inLoop) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (inExterns) break;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c ==inAttribute) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (inAttribute) EOF_CHAR;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (inExterns) in stackSize;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (inExterns) in 2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (inAttribute) in 2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (inExterns)",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (inExterns) in due;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (inExterns) in DEP;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (inExterns) put;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (inExterns) in The;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (inAttribute) inExterns;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (inAttribute) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (inAttribute)c;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (inAttribute) c;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (inExterns) inDev;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c == 'Attribute') continue;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (inExterns) inlined;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (inExterns) in data;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (inExterns) inWord;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (inExterns) inparse;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (inExterns) in current;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (inExterns) look;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (inExterns) inns;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (inAttribute) condition;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (inAttribute) in 2*;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (inExterns) inLiteral;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (inExterns) int;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (inExterns) inch;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (inAttribute) break;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (inAttribute) inhtml;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (inExterns) inplot;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (inAttribute) in sdf;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (inExterns) inparse",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (inExterns) inparseSynthetic;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (inExterns) in normal;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (inExterns)charAt;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (inAttribute)Dev;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (inExterns) inBranch;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (inExterns) in visitor;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (inAttribute) buffer.in;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c ==inAttribute) break;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (inAttribute) in due;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (inExterns) inron;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (inExterns) ininject;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (inExterns) inwrite;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (inExterns) inparsing;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (inAttribute) indf;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (inExterns) invn;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (inExterns) inals;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (inExterns) in MB",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (inExterns) inTry;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (inExterns) indf;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (inIsAttribute) in html;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (inExterns) inwd;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (inTag.in;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (inExterns) inArrays;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (inExterns) in practice;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (inExterns) innewInstance;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (inExterns) inics;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (inAttribute)Deviation;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (inLoop) inExceptions;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (inExterns) inouble;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (inExterns) inComments;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (inExterns) inrot;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (inExterns) inulian;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (inAttribute) inparse;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (inExterns;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (inExterns) inmore;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (inExterns) in parameters;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (inExterns) in body;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (inAttribute) inLiteral;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (inExterns) in Chart;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (inExterns) defaultValue;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (inAttribute) val;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (inExterns) inocations;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (inExterns) in quality;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (inExterns) in serializer;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (inExterns) in progress;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (inExterns) innos;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (inExterns) inROUT;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (inExterns) in 2*;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (inAttribute) inhtml't;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c <= 127) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (inExterns) inprefix;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (inExterns) inulin;",
                "identical": false
            }
        ],
        "buggy_line": "if (!inAttribute)",
        "fixed_line": "if (!inAttribute || escapeMode == EscapeMode.xhtml)"
    },
    "Math-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (dialps > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (entry.compareTo(i, max, 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (entry.compareTo(i, 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (kdialps > 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (entry.compareTo(i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (entry.compareTo(loopEntry, i, 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (entry.compareTo(i, 0) == 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (this.dialps > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (entry.compareTo(9), this.d, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (entry.compareTo(i, max, 0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Offsets.compareTo(i, max, 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (entry.compareTo(loopEntry, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (entry.compareTo(i, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (entry.compareTo(sibling, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entry.compareTo(Pointialps, i > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( this.dialps > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (entry.compareTo( selectialps, 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (entry.compareTo(Pointialps, 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Offsets.compareTo(i, max, 0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (entry.compareTo(increment, 0) >= 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (entry.compareTo(loopEntry, i, maximalIterationCount > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (entry.compareTo(kd, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (entry.compareTo(Point, i > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (entry.compareTo(Point, i) > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (classesTodialps.compareTo(x, y) > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (entry.compareTo( language, i, 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry.compareTo(alps, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (entry.compareTo(bt, i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry.compareTo(loop, 0) > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Offsets.compareTo(i, 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (entry.compareTo(args, i >= 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry.compareTo(FIXialps, 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (entry.compareTo(Annotations, i, 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (entry.compareTo( Spreadsheet, i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (classesTodialps.compareTo(x, i) > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (entry.compareTo(x, 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (entry.compareTo(loopvar, i) > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (entry.compareTo(loopEntry, i, maxElements) > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (entry.compareTo(sibling, 0) > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (entry.compareTo(loopEntry, 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (entry.compareTo(Point, i >= 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (entry.compareTo(upCount, i >= 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (entry.compareTo(loopEntry, i, maxYear > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (entry.compareTo(Offsets, i, 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Offsets.compareTo(i, index) > 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (entry.compareTo(converted, i, maximalIterationCount > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (entry.compareTo(min, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (entry.compareTo(minialps, 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (entry.compareTo( Spreadsheet, i, 0) == 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (entry.compareTo(i, 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (entry.compareTo(G predicate, i > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (entry.compareTo(isd, i, maximalIterationCount > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (entry.compareTo(loop, i) > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (entry.compareTo( joinedialps, 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (entry.compareTo(defaultEntry, i, 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (entry.compareTo(9), entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (entry.compareTo(bt, i, 0) == 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (entry.compareTo(9), max, 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (entry.compareTo(offset, i > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (entry.compareTo(loopEntry, i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (entry.compareTo(in, 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (entry.compareTo(G predicate, i) > 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (entry.compareTo(Member, i, 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (entry.compareTo(dialps, 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (str.compareTo(x, y, i > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (entry.compareTo(WARNING, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (entry.compareTo(arrow, 0) > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry.compareTo(9), 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (entry.compareTo(i, 0) >= 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (entry.compareTo( this, d, 0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (entry.compareTo(mu, i >= 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (entry.compareTo(IF, i >= 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (kd > 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (entry.compareTo(IF, i > 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (entry.compareTo(Constructors, i >= 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (entry.compareTo(loopvar, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (entry.compareTo(sibling, 0) >= 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (str.compareTo(x, i >= 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (entry.compareTo(i, 0) <= 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (entry.compareTo(isd, i, maxElements) > 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (entry.compareTo(bsialps, 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (entry.compareTo( initializers, 0) == 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (entry.compareTo( mean, i, 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (entry.compareTo(9), max, 0);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (entry.compareTo(args, i == 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (entry.compareTo(defaultEntry, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (entry.compareTo(bt, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (entry.compareTo(kd, 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (classesTodialps.compareTo(x, 0d, 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (entry.compareTo(sibling, max, 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (entry.compareTo(i, 0);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (entry.compareTo( Spreadsheet, i, 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (entry.compareTo( initializers, 0) > 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (entry.compareTo( rh, 0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (entry.compareTo(loopEntry, i, max);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (entry.compareTo(ITialps, 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry.compareTo(bsialps, i > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (entry.compareTo(loopEntry, 0) > 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (classesTodialps > 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "fixed_line": "if (Precision.compareTo(entry, 0d, epsilon) > 0) {"
    },
    "JacksonDatabind-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (ext.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (_externallyPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (_externs.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (externs.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (_externallyProp = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_anyProp = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != _creatorProp);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (ext.handlePropertyValue(buffer, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (_contextClassReader.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (_externs = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_externallyProperty = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (_externPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, beanDesc);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (externallyProp.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_contextClass = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (_externs, ctxt, beanDesc);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (ext.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != JsonToken.END_OBJECT);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, bufferCount);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (_extern = creator.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (extern.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (_anyPropNames.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (_externallyReference.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (_contextType.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (_objectIdReader.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (_beanProperties.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (_externallyPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_externs.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (_anyProp != set.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (!externs.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if_ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer != JsonToken.END_OBJECT);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_externallyProp = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (_anyProp = creator.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_extern = creator.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_externBase.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (_anyProp = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (_injectables != buffer.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (_annotationIntrospector.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (_externallyProperty = creator.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != EOF_CHAR);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (_properties.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (_anyProp != buffer.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer != _creatorProp);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (_objectIdReader.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (_typePropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_contextClassReader.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_objectIdWriter.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer = creatorProps);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != 0);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != -1) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (ext.handlePropertyValue(buffer, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer != 0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (_injectables.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer != 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer == JsonToken.END_OBJECT);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (ext.handlePropertyValue(ctxt, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, buffer, propName, bean);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (_externallyProperty = creator.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, bufferIndex);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (_externs = creator.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (_contextClassReader.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (_anyProp.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (_externallyProp = creator.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (externs, ctxt, beanDesc);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (_contextClass = creator.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != _objectIdReader);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (_currentInfo.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, bufferCount);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (_externs = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (ext.handlePropertyValueCount(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_externallyProperty = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (_injectableValue.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != JsonToken.START_OBJECT);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (_anyPropNames.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, buffer, propName, bean);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (_objectIdReader.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (_contextClassReader.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ifcreatorProp.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer != EOF_CHAR) {",
                "identical": false
            }
        ],
        "buggy_line": "if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {",
        "fixed_line": "if (ext.handlePropertyValue(p, ctxt, propName, null)) {"
    },
    "JacksonCore-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "char c = input.charAt;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "char c = input_stream.charAt;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "char c = text.charAt(i++;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "char c = input;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "char c = str.charAt;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "char c = text.charAt(i++] - '0')];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "char c = text.charAt(i++);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "char c = input.charAt(0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "char c = value.charAt;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "char c = buf.charAt;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "char c = space.charAt;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "char c = text.charAt(i++];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "char c = text.charAt(i++] - '0';",
                "identical": false
            },
            {
                "k": 14,
                "patch": "char c = text.charAt(i++] - '0');",
                "identical": false
            },
            {
                "k": 15,
                "patch": "char c = input.charAt(0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "char c = inputLocals.charAt;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "char c = part.charAt;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "char c = LE.charAt;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "char c = text.charAt(i++] - '0') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "char c = input.charAt(i++;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "char c = text.charAt(i++] - '0') * 4;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "char c = text.charAt(i++count++];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "char c = value.charAt(i++;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "char c = text.charAt(i++];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "char c = input.charAt -= 2 * i;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "char c = part.charAt(i++;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "char c = str.charAt(i++;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "char c = text.charAt(i++count++];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "char c = str.charAt(0);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "char c = value.charAt(i++];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "char c = but.charAt;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "char c = text.charAt(i++] - '0') % 4;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "char c = buffer.charAt;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "char c = inputArray.charAt;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "char c = text.charAt(i++] - i;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "char c = input.charAtOUTOUT_OF_STREAM;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "char c = text.charAt(i++count++);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "char c = text.charAt(i++ < len;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "char c = text.charAt(i++] - '0') {}",
                "identical": false
            },
            {
                "k": 40,
                "patch": "char c = text.charAt(i++] - '0') % len;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "char c = buf.charAt(0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "char c = str.charAt(i++];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "char c = LE.charAt(i++;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "char c = search.charAt;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "char c =15.charAt(i++;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "char c = text.charAt(i++] - '0') break;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "char c = text.charAt(i++] - '0')",
                "identical": false
            },
            {
                "k": 48,
                "patch": "char c = text.charAt(i++] - '0') % i;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "char c = block.charAt;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "char c = input.charAt(i++);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "char c = text.charAt(i++] - '0');",
                "identical": false
            },
            {
                "k": 52,
                "patch": "char c = text.charAt(i++) - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "char c = inputPtr++i;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "char c = text.charAt(i++ + 1];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "char c = text.charAt(i++] - '0') * 10;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "char c = input.charAt -= 2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "char c = value.charAt(i++];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "char c = s.charAt(i++;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "char c = input.charAt(i++];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "char c = dt.charAt(i++;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "char c = text.charAt(i++count++;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "char c = _charBuffer.charAt;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "char c = text.charAt(i++ ? 1 : 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "char c = str.charAt(i++);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "char c = text.charAt(i++] - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "char c = text.charAt(i++]+1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "char c = text.charAt(i++] MASK_OF_BACKSLASH;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "char c = obj.charAt;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "char c = text.charAt(i++] - '0') < 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "char c = s.charAt;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "char c = text.charAt(i++] - '0') % 2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "char c = text.charAt(i++, i + 1];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "char c = text.charAt(i++count++] - '0');",
                "identical": false
            },
            {
                "k": 74,
                "patch": "char c = text.charAt(i++] - '0') * 2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "char c = text.charAt(i++ interfaces;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "char c = input.charAtOUTOUT_OF_STRING;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "char c = input.charAtOUTOUT_OF_MINUTE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "char c = text.charAt(i++] MASK_OF_STREAM;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "char c = pattern;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "char c = text.charAt(i++count++] - '0')];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "char c = str.charAt -= 2 * i;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "char c = input.charAt(2++];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "char c = text.charAt(i++] - '0') % 2];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "char c = text.charAt(i++pos++] - '0')];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "char c = text.charAt(i++] >> len;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "char c =right.charAt;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "char c = input.charAt(3);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "char c = text.charAt(i++] >> 4];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "char c = text.charAt(i++count++ < len;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "char c = text.charAt(i++pos++;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "char c = input_codes.charAt;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "char c = input.charAt(2++;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "char c = token.charAt;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "char c =Serializer.charAt;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "char c = text.charAt(i++] - '0') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "char c = text.charAt(i++ ? 1 : i;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "char c = text.charAt(i++(10, i;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "char c = text.charAt(i++count++] - '0';",
                "identical": false
            },
            {
                "k": 99,
                "patch": "char c = text.charAt(i++1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "char c = input.charAt scope;",
                "identical": false
            }
        ],
        "buggy_line": "char c = str.charAt(i++);",
        "fixed_line": "char c = str.charAt(i);"
    },
    "Codec-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "txt = txt.replaceAll(\"m2\");\",secondary);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "txt = txt.replaceAll(\"m2\");\", n);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "txt = txt.replaceAll(\"m2\");\", getScope);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "txt = txt.replaceAll\", \"m2\");Gap;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "txt = txt.replaceAll(\"m\"))\", el);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "txt = txt.replaceAll(\"m2\");\", from;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\"););",
                "identical": false
            },
            {
                "k": 11,
                "patch": "txt = txt.replaceAll(\"m\"))\", getScope);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "txt = txt.replaceAll(\"mlo\",2\"););",
                "identical": false
            },
            {
                "k": 13,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\"););",
                "identical": false
            },
            {
                "k": 14,
                "patch": "txt = txt.replaceAll\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "txt = txt.replaceAll(\"m2\");\", input);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "txt = txt.replaceAll\", \"m2\"); >= 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "txt = txt.replaceAll\", \"m2\"););",
                "identical": false
            },
            {
                "k": 20,
                "patch": "txt = txt.replaceAll(\"m2\");\", 1) );",
                "identical": false
            },
            {
                "k": 21,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "txt = txt.replaceAll(\"milliseconds\",2\"););",
                "identical": false
            },
            {
                "k": 23,
                "patch": "txt = txt.replaceAll(\"m2\");\",[0]));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "txt = txt.replaceAll(\"m2\");\", mu);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "txt = txt.replaceAll(\"m2\");\", 1));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");Go;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "txt = txt.replaceAll(\"m2\");\", scope);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "txt = txt.replaceAll(\"m2\");\",cent + 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "txt = txt.replaceAll(\"m2\");\", bbits);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "txt = txt.replaceAll(\"m2\");\", el);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "txt = txt.replaceAll(\"m\"))\",[0]));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");etics;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "txt = txt.replaceAll\", \"m2\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "txt = txt.replaceAll(\"m2\");\", charno);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");\";",
                "identical": false
            },
            {
                "k": 40,
                "patch": "txt = txt.replaceAll(\"m2\");\", output);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\");;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "txt = txt.replaceAll\", \"m2\");Go;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "txt = txt.replaceAll(\"m2\");\", \"m2\"););",
                "identical": false
            },
            {
                "k": 45,
                "patch": "txt = txt.replaceAll(\"m2\");\", comment);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "txt = txt.replaceAll(\"m {\"\",[0]));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "txt = txt.replaceAll\", \"m2\");\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "txt = txt.replaceAll(\"m2\");\",secondary;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "txt = txt.replaceAll(\"m2\");\", radius);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");PUTESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "txt = txt.replaceAll(\"mlo\",2\");;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "txt = txt.replaceAll(\"m\"))\", n);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\"); >= 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "txt = txt.replaceAll(\"m2\");\", output;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "txt = txt.replaceAll(\"m2\");\", fci;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "txt = txt.replaceAll(\"m2\");\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "txt = txt.replaceAll(\"m\"))\", 4;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "txt = txt.replaceAll(\"\\\\Hmb\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "txt = txt.replaceAll(\"m\"))\",[0]);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "txt = txt.replaceAll(\"m2\");\",Query);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"millisecond);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\"); >= 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "txt = txt.replaceAll(\"m2\");\", false);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "txt = txt.replaceAll(\"m2\");\", map);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "txt = txt.replaceAll(\"m2\");\", last);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\");Gap;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_THRESHOLD;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "txt = txt.replaceAll(\"m2\");\", \"+millisecond);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "txt = txt.replaceAll(\"millisecond\",2\"););",
                "identical": false
            },
            {
                "k": 71,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"+millisecond);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "txt = txt.replaceAll(\"\\\\Hmb\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\"););",
                "identical": false
            },
            {
                "k": 74,
                "patch": "txt = txt.replaceAll(\"\\\\Hmb\", \"m2\"););",
                "identical": false
            },
            {
                "k": 75,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");Gap;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "txt = txt.replaceAll(\"m2\");\", TOOTED);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "txt = txt.replaceAll(\"m2\");\", c);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "txt = txt.replaceAll(\"\\\\Hmb\", \"m2\");Gap;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "txt = txt.replaceAll(\"m2\");\", TO);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_BLOCK_SIZE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "txt = txt.replaceAll(\"m2\");\",cent);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "txt = txt.replaceAll\", \"m2\");ESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_SIZE);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "txt = txt.replaceAll(\"mtr\",2\"););",
                "identical": false
            },
            {
                "k": 85,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_EXTENDED;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "txt = txt.replaceAll(\"\\\\Args\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "txt = txt.replaceAll(\"m\u501fmb\", \": \" +Traversal.m2\"););",
                "identical": false
            },
            {
                "k": 88,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\"););",
                "identical": false
            },
            {
                "k": 89,
                "patch": "txt = txt.replaceAll(\"mant\", \": \"m2\"););",
                "identical": false
            },
            {
                "k": 90,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_SMALL;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "txt = txt.replaceAll(\"m)+\",2\");;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "txt = txt.replaceAll(\"\\\\Args\", \"m2\"););",
                "identical": false
            },
            {
                "k": 93,
                "patch": "txt = txt.replaceAll(\"m {\"\", getScope);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_FRAMES;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\");Go;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "txt = txt.replaceAll(\"mLPmb\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "txt = txt.replaceAll(\"m2\");\", from);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "txt = txt.replaceAll(\"m2\");\",COLON);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "txt = txt.replaceAll(\"m2\");\", changed);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\"); >= 0;",
                "identical": false
            }
        ],
        "buggy_line": "txt = txt.replaceAll(\"^mb\", \"m2\");",
        "fixed_line": "txt = txt.replaceAll(\"mb$\", \"m2\");"
    },
    "Jsoup-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "clone.classNames = clone;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "clone.classNames;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "clone.classNames != INDEX_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "clone.classNames != Long.class;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "clone.classNamesOffset = clone;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "clone.classNamesFor(this.class);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "clone.classNamesing = clone;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "clone.classNames != prev;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "clone.classNamesout = clone;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "clone.classNamesFor current = clone;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "clone.classNames != had.class;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "clone.classNames != parent.class;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "clone.classNamesForDayOfWeek(this.class);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "clone.classNames) this.classNames;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "clone.classNamesCollisionList = clone;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "clone.classNames != VALUE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "clone.classNames !=Parameters.class;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "clone.classNames != null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "clone.classNamesShared = clone;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "clone.classNames != v.class;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "clone.classNames6 = clone;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "clone.classNamesShared -= clone;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "clone.classNames[0] = clone;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "clone.classNamesForInit = clone;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "clone.classNames !=Delta;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "clone.classNames != pos;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "clone.classNames) current = clone;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "clone.classNames != gen.class;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "clone.classNames != VALUE_TYPE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "clone.classNamescurr = clone;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "clone.classNames != System.class;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "clone.classNames = classNames;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "clone.classNamesRight = clone;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "clone.classNamesPtr = clone;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "clone.classNamesFactor = clone;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "clone.classNames != d.class;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "clone.classNamesbreak = clone;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "clone.classNames != it;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "clone.classNamesForDayOfWeek(this.class;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "clone.classNames segment = clone;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "clone.classNamesQ = clone;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "clone.classNames != DOUBLE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "clone.classNames != current;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "clone.classNamesOffset -= clone;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "clone.classNames % clone;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "clone.classNames JsonNode = clone;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "clone.classNames != Reference_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "clone.classNames handler = clone;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "clone.classNames != h;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "clone.classNames != Long.class) return clone;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "clone.classNamesForDayOfWeek(clone.class);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "clone.classNames Scope = clone;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "clone.classNames !=()), clone;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "clone.classNamesFor(this.class;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "clone.classNames) clone = clone;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "clone.classNames != header;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "clone.classNames != mNames;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "clone.classNamesY = clone;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "clone.classNamesForDayOfWeekHeight = clone;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "clone.classNames : clone;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "clone.classNames != classNames;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "clone.classNamesQName = clone;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "clone.classNamesCollisionList;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "clone.classNames)) return clone;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "clone.classNames !=(\"classNames;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "clone.classNames != Long.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "clone.classNamesCollision = clone;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "clone.classNamesForDayOfWeek -= clone;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "clone.classNames5 = clone;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "clone.classNames != Timestamp;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "clone.classNames null = clone;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "clone.classNamesLimit = clone;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "clone.classNames != VAR;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "clone.classNamesbetween = clone;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "clone.classNamesForInit;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "clone.classNames != token;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "clone.classNames != VALUE_STRING;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "clone.classNames != INDEX_NOT_CONSTANT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "clone.classNames !=Maximum;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "clone.classNames != VALUE_UNQU;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "clone.classNamesForDayNames;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "clone.classNamesForDayOfWeek = clone;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "clone.classNames != path;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "clone.classNames != VALUE_UNQUOTED;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "clone.classNames != INDEX_NOT_Deserializer;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "clone.classNames != Long.class) ? 2 : 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "clone.classNames != superNames;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "clone.classNames != 64;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "clone.classNames !=Sets;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "clone.classNames) clone;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "clone.classNamesForDayOfWeek(this.class)];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "clone.classNames != VALUE_S;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "clone.classNames != Reference_ILS) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "clone.classNames !=Parameters.class) return clone;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "clone.classNames != clonedNames;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "clone.classNames != OFF;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "clone.classNames != INDEX_NOT_OLE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "clone.classNames != DEFAULT_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "clone.classNames != INDEX_NOT_ super;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "clone.classNames != ArrayNames;",
                "identical": false
            }
        ],
        "buggy_line": "clone.classNames();",
        "fixed_line": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames"
    },
    "Closure-73": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c > 0x1f && c < 0x7f) {",
                "identical": true
            },
            {
                "k": 2,
                "patch": "if (c < 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c > 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c < 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c < 0x1f && c > 0x7f) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c > 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c < 0x1f && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c > 0x1f && c < 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c <= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c >= 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c < 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c > 0x1F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c < 0x20 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c < 0x1f && c <= 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c >= 0x20 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c1 > 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c >= 0x07f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c >= 0x1f && c <= 0x7f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c >= 0x0f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c < 0x0f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c < 0x1f && c7f <= 0x7f) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (escape >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c > 0x1f && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c >= 0x BYTEf && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (escape >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ('x >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c < 0x1F && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c < 0x800 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c < 0x >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c < 0x1 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ('x >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c < 0x800f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (ch > 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (0x >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (0x >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c1 == 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c > 0x1f && c == 0x7f) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c < 0x BYTEf || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c > 0x1f && c < 0x7f) { // should never happen but...",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c > 0x1f && c < 0x7f) { // should never happen, just needs 2 byte",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c > 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c > 0x1f && c < 0x7f) { // needs quoting",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c < 0x800 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c > 0x1f || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c > 0x1f && c < 0x7f) { // gen, just needs 2 byte",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c > 0x1f && c < 0x7f) { //name, just needs 2 byte",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (cDuration >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c < 0x07f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c > 0x1f && c < 0x7f) { // If so, just needs 2 byte",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c >= 0x800f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c >= 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c > 0x1f minor || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c < 0x1F && c > 0x7f) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c > 0x1f && c < 0x7f) { // i and finishes at least",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c < 0x1f && c <= 0x7f) { // If so, just needs 2 byte",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c <= 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (0x80 <= 0x7f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c >= 0x07f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c < 0x1f && c <= 0x7f) { // needs quoting",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c < 0x1f minor || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c > 0x1f && c < 0x7f) { // gen, just needs 2 byte escape",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c > 0x1 f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c > 0x1f && c < 0x7f) { //writer, just needs 2 byte-x7f",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c > 0x1f && c < 0x7f) { //name, just needs 2 byte-x7f",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c < 0x1 f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c > 0x1f && c < 0x7f) { // x, just needs 2 byte",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c > 0x1f && c < 0x7f) { //writer, just needs 2 byte",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c1 == 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c > 0x1f && c < 0x7f) { // attributes, just needs 2 byte",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c >= 0x BYTEf || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c > 0x1f && c2 < 0x7f) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c > 0x1f && c - 0x7f) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c < 0x01) || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c > 0x1f && c < 0x7f) { // gen, escape",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c > 0x1f && c < 0x7f) { // i and fine, just needs 2 byte",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c > 0x1f && c < 0x7f) { // x, just needs 2 byte-x7f",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c > 0x1f && c < 0x7f) { // ret, just needs 2 byte escape",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c != 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c < 0x1f && c <= 0x7f) { //name, just needs 2 byte",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c > 0x1f && c < 0x7f) { // x so, just needs 2 byte",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c > 0x1f && c < 0x7f) { //name, escape",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (cdigits 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c > 0x1f && c < 0x7f) { // gen, just needs 2 byte-x7f",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c < 0x1Change && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c < 0x1 TIMEf && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c > 0x1f && c < 0x7f) { // If so, just needs 2 byte-x7f",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c > 0x1f && c < 0x7f) { //partial, just needs 2 byte",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c > 0x1f && c < 0x7f) { //Specification, just needs 2 byte",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c < 0x10000 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c < 0x1f && c <= 0x7f) { // gen, just needs 2 byte",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c < 0x 128f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c > 0x1f && c < 0x7f) { // ret, just needs 2 byte",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c > 0x1f && c < 0x7f) { // need to split into surrogates?",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c > 0x1f && c < 0x7f) { // gen, just needs 2 byte do a number",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c > 0x1f && c < 0x7f) { //partial, just needs 2 byte-x7f",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c < 0x1f && c there <= 0x7f) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c > 0x1f && c < 0x7f) { //writer, just needs 2 byte escape",
                "identical": false
            }
        ],
        "buggy_line": "if (c > 0x1f && c <= 0x7f) {",
        "fixed_line": "if (c > 0x1f && c < 0x7f) {"
    },
    "Math-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "ret = Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ret = Double.doubleToLongBits(rhs) - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ret = Double.doubleToLongBits(rhs) - rhsBits;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ret =rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue) rhsBits;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.POSITIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.class && rhsBits;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberOfRawLongBits;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ret = Double.doubleToLongBits(rhs) >> 2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ret = Double.doubleToLongBits(rhs) + 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ret = Double.doubleToLongBits(rhs) == Double.NEGATIVE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ret = Double.doubleToRawLongBits % 2 == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.POSITIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ret =rhs.doubleToRawLongBits(rhs.doubleValue);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits) rhsBits;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ret = Double.doubleToLongBits(rhs) % 2 == Double.NEGATIVE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue) + 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ret =rhs == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.class && rhsBits;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.POSITIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ret = Double.doubleToLongBits(rhs) == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ret = Double.doubleToRawLongBits % 2 == Double.NEGATIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ret = Double.doubleToRawLongBits % 2 == Double.NEGATIVE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.class);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ret = Double.doubleToRawLongBits / Double.doubleValue;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.ARRAY;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ret = i == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits, rhsBits;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.MIDDLE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_L;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ret = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_ request;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ret = Double.doubleToLongBits(rhs) - 1, rhsBits;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ret = Double.doubleToLongBits == Double.POSITIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.Break;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.superclass) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ret =rhs.doubleToLongBits(rhs) - rhsBits;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ret = Double.doubleToRawLongBits % 2 == Double.Break;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ret = Double.doubleToRawLongBits <= rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.POSITIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ret = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_ARRAY;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ret = Double.doubleToLongBits(rhs) -signature, rhsBits;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.COMLongBits;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ret =rhs.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.float) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.Break' || rhs;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.class || rhsBits;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.class && rhs;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ret = Double.doubleValue == Double.POSITIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ret = Double.doubleToLongBits == Double.POSITIVE_INFINITY && rhsBits;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.superclass && rhsBits;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue == Double.NEGATIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.STANDARD;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ret = Double.doubleToRawLongBits / Double.doubleCount;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ret = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhsBits;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.OK) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.number);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ret = Double.doubleToLongBits(rhs) % 2 == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.NEGATIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.MIDDLE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ret = Double.doubleToRawLongBits % 2 == Double.numberDouble.doubleValue;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.denominator;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ret = Double.doubleToRawLongBits(rhs.getImaginary;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_WIDTH && rhs;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ret = Double.doubleToLongBits(rhs) || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ret = Double.doubleToLongBits(rhs) == Double.NEGATIVE_RawLong;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ret =rhs == Double.NEGATIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ret = Double.doubleToRawLongBits % 2 == Double.POSITIVE_ANNOTATION;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ret =rhs == Double.NEGATIVE_RawLongBits;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue == Double.NEGATIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.ARRAY || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ret = Double.doubleToRawLongBits / Double.double_Raw;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ret = Double.doubleView == Double.POSITIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_INFINITY && lhs;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ret =rhs.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.class && rhsBits;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ret = Double.doubleToLongBits(rhs) -signature;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_ modifier;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberOfRawLongBits && rhsBits;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ret = Double.doubleToLongBits(rhs) + rhsBits;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_BlockingQueue;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_JSR) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ret = Double.doubleToLongBits(rhs) == Double.numberDouble;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ret = Double.doubleToLongBits == Double.NEGATIVE_RawLongBits;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberDouble.superclass) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.ts) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doublePosition) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ret = Double.doubleToLongBits(rhs) == Double.numberToRawLongBits;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ret = negative.doubleValue == Double.POSITIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_Boundary || rhs;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ret = Double.doubleToLongBits(rhs) / 2 - rhs;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue) rhs;",
                "identical": false
            }
        ],
        "buggy_line": "ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));",
        "fixed_line": "ret = (real == rhs.real) && (imaginary == rhs.imaginary);"
    },
    "Closure-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (options.closurePass && options.needsPass) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (options.closurePass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (options.closurePass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (options.closuresRoot || options.closurePass) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (options.closurePass && options.needsPass;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (options.closures && options.closurePass) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (options.closuresRoot && options.closurePass) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (options.closuresRoot || options.closurePass;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (options.closurePass && options.closurePass;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (options.removePass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (options.closurePass && options.referPass) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (options.closurePass && options.closuresRoot;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (options.closurees && options.needsPass) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (options.closurePass && options.closurePrimitives == options.needsPass) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (options.closurePass && options.closurees;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (options.aliasOptions && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (options.aliasOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (options.needsPass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (options.checkInputs && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (options.closuresRoot && options.closurePass;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (options.closurePass && options.closurePrimitives) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (options.parseOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (options.aliasOptions || options.needsPass) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (options.closures && options.needsPass) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (options.closures && options.closurePass;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (options.closurePass && options.closure == options.needsPass) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (options.closurePass && options.gridPass) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (options.closurePass && options.closurees) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (options.closurePass && options.loadPass) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (options.closurePass && options.throwPass) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (options.closurePass || options.needsPass) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (options.aliasOptions && options.needsPass;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (options.aliasOptions && options.needsPass) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (options.closurePass && options.closurePoint.needsPass) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (options.aliasOptions && options.closuresRoot;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (options.closurePass && options.closure) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (options.removePass || options.closurePass) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (options.closurePass && options.closureNames) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (options.closurePass && options.noPass) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (options.parseOptions && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (options.closurePass && options.scopePass) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (options.aliasOptions && options.closurePass;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (options.closurePass && options.closure ROUND) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (options.aliasOptions || options.closurePass) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (options.closurePass && options. UntPass) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (options.closurePass && options.Sets) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (options.closurePass && options.needsPass)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (options.closurees && options.needsPass;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (options.closurePass && options.templatePass) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (options.closurePass && options.cyPass) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (options.expectedPass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (options.closurePass && options.annotations) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (options.aliasOptions || options.needsPass;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (options.msg == options.needsPass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (options.closurePrimitives && options.closurePass) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (options.closurePass && options.predecessor == options.needsPass) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (options.msgPass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (options. TempPass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (options.closurePass && options.predsRoot) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (options.closurePass && options.predicates) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (options.closuresRoot || options.needsPass) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (options.closurePass && options.Aliased) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (options.closurePass && options.closure readPass) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (options.closurePass && options.closure basicPass) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (options.closurePass && options.closure namespaces) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (options.closurePass && options.predecessor) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (options.closurePass && options. resizedPass) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (options.closurePass && options.closureStrings) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (options.closurePass && options.closure STR) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (options.closurePass && options.DIRECTPass) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (options.DIRECTPass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (options.closurePass && options.passPass) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (options.closurePass && options.setPass) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (options.closurePass && options.separatorPass) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (options.closurePass && options. ToPass) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (options.closurePass && options. getAnnotationPass) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (options.closurePass && options.modulePass) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (options.closurePass && options.closurePrimitives;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (options.closurePass && options.closure\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (options.closurePass && options.closure spec) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (options.closurePass && options.closureated) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (options.closurePass && options.closureFactor) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (options.closurePass && options.closureminutes) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (options.closurePass && options.msg) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (options.referenced && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (options.referPass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (options.literalOptions && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (options.closurePass && options.closureParser) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (options.closurePass && options.needsPassName;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (options.checkInputs && options.closurePass) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (options.parseOptions && options.closuresRoot;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (options.closurePass && options.predecessorCount;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (options.implementedOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (options.closurePass && options.closureScope) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (options.closurePass && options.closureListener) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (options.closurePass && options.literalPass) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (options.closurePass && options. BufferedReaderPass) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (options.closuresRoot || options.closurePass)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (options.closurePass && options.closedPass) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (options.typePass && options.closurePass) {",
                "identical": false
            }
        ],
        "buggy_line": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
        "fixed_line": "if (options.dependencyOptions.needsManagement()) {"
    },
    "Closure-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "jsDocParameter.getJSType(), false;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "jsDocParameter.getJSType(), true;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "jsDocParameter.getJSType(), false);",
                "identical": true
            },
            {
                "k": 4,
                "patch": "jsDocParameter.getJSType mutParameterType(), false;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "jsDocParameter.getJSType(), falseParameters;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "jsDocParameter.getJSType != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "jsDocParameter.getJSTypeHandlerNode != jsDocParameter;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "jsDocParameter.getJSType(), true);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "jsDocParameter.getJSType != jsDocParameter;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "jsDocParameter.getJSType(), falseNode;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "jsDocParameter.getJSType\": != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "jsDocParameter.getJSTypelongDocParameterType(), false;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "jsDocParameter.getJSType\": != jsDocParameter;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "jsDocParameter.getJSTypeCONST != jsDocParameter;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "jsDocParameter.getJSType(2);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "jsDocParameter.getJSType mutParameter(jsDocParameter) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "jsDocParameter.getJSType mutParameter(astParameterName);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "jsDocParameter.getJSTypeParameters(), false;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "jsDocParameter.getJSTypeTOTYPE_PROPERTY != jsDocParameter;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "jsDocParameter.getJSTypeHandlerNode != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "jsDocParameter.getJSType() != jsDocParameter;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "jsDocParameter.getJSType(0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "jsDocParameter.getJSTypeArguments(), false;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "jsDocParameter.getJSTypeinaryType(), false;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "jsDocParameter.getJSType(0) = false;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "jsDocParameter.getJSTypeidxParameterType(), false;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "jsDocParameter.getJSTypeCONSTANT_TYPE = false;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "jsDocParameter.getJSType mutParameterType(), true;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "jsDocParameter.getJSTypeCONST != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "jsDocParameter.getJSTypeSerializer(), true;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "jsDocParameter.getJSType(), falseParameters = false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "jsDocParameter.getJSTypeCONSTANT_NAME = false;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "jsDocParameter.getJSType(), falseNode != jsDocParameter;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "jsDocParameter.getJSType diNode != jsDocParameter;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "jsDocParameter.getJSTypeParameters = false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "jsDocParameter.getJSTypeCONSTANT_Unknown = false;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "jsDocParameter.getJSType(\"/Node != jsDocParameter;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter_TYPE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "jsDocParameter.getJSType accessorer != jsDocParameter;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "jsDocParameter.getJSTypeParameters(), true;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter_TYPE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "jsDocParameter.getJSTypeTOTYPE_PROPERTY = false;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "jsDocParameter.getJSType mutParameterType(), false);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "jsDocParameter.getJSType(), false = false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "jsDocParameter.getJSTypehParameter(astParameter) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "jsDocParameter.getJSType(), falseExprNode;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "jsDocParameter.getJSType mutParameter(jsDocParameter);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "jsDocParameter.getJSType float != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "jsDocParameter.getJSTypeHierarchy != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "jsDocParameter.getJSType mutParameter(false);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "jsDocParameter.getJSType setSubParameter(astParameter) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "jsDocParameter.getJSType(), falseLineno;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "jsDocParameter.getJSTypeTOTYPE_PROPERTY != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "jsDocParameter.getJSTypeCONST(astParameter) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "jsDocParameter.getJSType aliasParameterType(), false;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "jsDocParameter.getJSType(), falseLinNode != jsDocParameter;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter_;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "jsDocParameter.getJSTypeHierarchy = false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "jsDocParameter.getJSType error != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "jsDocParameter.getJSType2.6 != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "jsDocParameter.getJSType('.DocParameter(astParameter) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "jsDocParameter.getJSType BOTTOM != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "jsDocParameter.getJSType AVParameterType(), false;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "jsDocParameter.getJSType(), false) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "jsDocParameter.getJSType setSubParameter(astParameter_TYPE != jsDocParameter;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "jsDocParameter.getJSTypeinaryType(), true;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "jsDocParameter.getJSType\": != jsDocParameter_TYPE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "jsDocParameter.getJSTypealphaParameterType(), false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "jsDocParameter.getJSType setSubParameter(astParameterNameNode) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "jsDocParameter.getJSTypeCONSTANTParameterType(), false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "jsDocParameter.getJSType();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "jsDocParameter.getJSType setSubParameter(astParameterNameNode);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "jsDocParameter.getJSType100 != jsDocParameter;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "jsDocParameter.getJSTypeSerializer(), false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter_ != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "jsDocParameter.getJSType100 != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "jsDocParameter.getJSType interfacesType(), false;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "jsDocParameter.getJSType accessorer != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "jsDocParameter.getJSType float != jsDocParameter;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "jsDocParameter.getJSType(0)Decl = false;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter_TYPE != jsDocParameter;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "jsDocParameter.getJSType mutParameter(jsDocParameterName);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "jsDocParameter.getJSType mutParameterType(), falseParameters;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "jsDocParameter.getJSTypeLiteral = false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter_TYPE);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter_ != jsDocParameter;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "jsDocParameter.getJSType error != jsDocParameter;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "jsDocParameter.getJSType(), falseNode) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "jsDocParameter.getJSType mutParameterTypeCONSTANT_Unknown = false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "jsDocParameter.getJSType(), falseLinExternParameter;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter_PROPERTY) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "jsDocParameter.getJSTypeParams(astParameter) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "jsDocParameter.getJSTypehParameter(falseNode) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "jsDocParameter.getJSType mutParameter(jsDocParameter;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter)) {",
                "identical": false
            }
        ],
        "buggy_line": "jsDocParameter.getJSType(), true);",
        "fixed_line": "jsDocParameter.getJSType(), false);"
    },
    "Math-105": {
        "fixes": [
            {
                "k": 1,
                "patch": "return sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return sumYY - sumXX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return sumYY - sumX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_DAY;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return sumYY - sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "returnsum / sumXX - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return sumXY - sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "returnsum / sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return sumXX - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return sumYY - sumXY * sumXY / (double) sumXX;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return sumYY -sum * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return sumYY - sum_1 + sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return sumYY - sumXY * sumXY / MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return sumYY -sumX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return sumYY - sumXY * sumY / sumXX;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "returnsum - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return sumYY - sum_1 * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "returnsumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_STR;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return sumYY -sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return sumYY - sumY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // normalize it't really",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_DAY;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // we didn't really",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_WEEK;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.START_PER_DAY;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "returnsum >= sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // normalize zero.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return sumYY - sumXY * sumXY /Externs;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.SECONDS_PER_DAY;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // it't really",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return sumXY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // the quote",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return sumYY - sumSystem * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "returnsum serializeNulls - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return sumYY - sumXY * sumXY / MILLIS_PER_LONG;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return sumYY - sumLookS * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return sumXX - sumYY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return sumYY - sumXY * sumXY / sumY;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return sumS - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return sumYY - sumXY * sumXY / MILLIS_PER_STR;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.DAYS_PER_WEEK;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return sumYY - sum cons * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_YEAR;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_LONG;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return sumYY - sumXY * sumXY / fnCount;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // theExterns + sum",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return sYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return sumYY - sumXY * sumXY / sumWeek;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return sumYY - sumXY * sumXY / 3;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return sumYY - sumXY * sumXY / sumXX; //in-thousands",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // the matrix is negative",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return sumYY - sumXY * sumXY / sumializers;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "returnsumSquaredErrors * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return sumYY -sum / sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return sumYY - sumXY * sumXY / MILLIS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // the pre 2*(n-thousands",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.DAYS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return sumYY - sumRight * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX)",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // enough room or: sumXX",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return sumYY - sumXY * sumXY / sum getGroupXX;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1 or: sum",
                "identical": false
            },
            {
                "k": 74,
                "patch": "returnsumY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return sumYY - sumXY * sumXY / MIN_S_PER_LONG_STR;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return sumYY - result * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return sumYY - methodsXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // the series",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_AS;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.DAYS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return sumYY - sumXY * sumXY / n;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return sumYY - sumXY * sumXY / MILLIS_PER_DAY;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return sumYY - sum * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return sumYY - sumXY * sumXY / 2;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return sumYY - sumXY * sumXY / sumXX; //)",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_WEEK;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_16;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return sumYY - sumXY * sumXY /lang;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return sumYY - sumStream * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return sumYY - sumXY * sumXY / 7;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return sumYY - sumXY * sumX / sumXX;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_SE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1 due to 127't really",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return sumYY - sumXY * sumX;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // safe",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return sumYY - sumXY * sumXY / MIN_S_PER_LONG_SIZE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return sumYY - sum mode * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return sumYY - sumXY * sumXY /HasS_PER_SEPARATOR;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX-thousands",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // we didn't really modify it.",
                "identical": false
            }
        ],
        "buggy_line": "return sumYY - sumXY * sumXY / sumXX;",
        "fixed_line": "return Math.max(0d, sumYY - sumXY * sumXY / sumXX);"
    },
    "Math-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "return a == b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return a == b ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return a == b ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return a == b ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return a == b ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return a == b ? Float.valueOf : b;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return a < b ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return a == b ? Float.isNaN(a + b : b) ? Float.NaN;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return a < b ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return a < b ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return a < b ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return b == 0 ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return a == b ? Float.MIN_VALUE : b;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return a == b ? Float.isNaN + b : b;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return a == b ? Float.isNaN(b : b;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return a == b ? Float.isNaN(b) : b;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return a == b ? Float.floatValue : b;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return b == 0 ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return a == b ? Float.Java : b;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "returna == b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return a == b ? Float.Exception : b;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return a == b ? Float.efficient : b;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return b == 0 ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return a < b ? Float.isNaN + b : b;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return a == b ? Float.Horizontal(a) : b;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return b == 0 ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return a == b ? Float.NaN(a + b : b;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return a == b ? Float. bbits : b;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return a == b ? Float.NEGAP + b : b;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return a == b ? Float.isNaN(a + b : b);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return a == b ? Float.NEGATIVE : b;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return a == b ? Float.isNaN : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "returna == b ? Float.isNaN(b : a + b;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "returna == b ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return a == b ? Float. state : b;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return a == b ? Float.Horizontal(b) : b;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return a == b ? Float.Extern : b;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return a == b ? Float. && b : b;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return a == b ? Float.valueOf(b) : b;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return a == b ? Float.class : b;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return a == b ? Float.FALSE : b;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return a == b ? Float.NaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return a == b ? Float.doubleValue : b;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return a == b ? Float.fa : b;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return a < b ? Float.isNaN(a + b : b) ? Float.NaN;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return a == b ? Float.isNaNSort : b;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return a == b ? Float.START : b;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return a == b ? Float.doubleValue() : b;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return a == b ? Float.isNaN(a) : b + 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return a == b ? Float.isNaN(a) : b +1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return a == b ? Float.Q : b;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return a == b ? Float.NONE : b;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return a == b ? Float.NEGAP : b;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return a == b ? Float.HorizontalValue : b;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return a == b ? Float.float) : b;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return b == 0 ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return a == b ? Float.Limit : b;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return a == b ? Float.isNaN(a + b : b) ? 1 : b;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return a == b ? Float.isNaN(a) : b + min;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return a == b ? Float. canNaN : b;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return a == b ? Float. tr : b;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return a == b ? Float.TRUE : b;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return a == b ? Float. 1, b : b;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return a == b ? Float.Click : b;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return a == b ? Float. est : b;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return a == b ? Float. instead : b;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return a == b ? Float.MAX_VALUE : b;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return a == b ? Float.valueOf(b : b;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return a == b ? Float.IMP : b;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return a == b ? Float.floatToInt : b;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return a == b ? Float.lower : b;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return a < b ? Float.isNaN : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return a == b ? Float.d : b;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "returna == b ? Float.isNaN(b : a;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "returna == b ? Float.isNaN(b) : b;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return a == b ? Float.keyword : b;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return a == b ? Float.Horizontal : b;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return a == b ? Float.NE : b;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return b == 0 ? Float.isNaN(a + b : b) ? Float.NaN;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return a == b ? Float.OfYear : b;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return a == b ? Float.SPACE : b;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return a == b ? Float. M : b;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return a == b ? Float.getHeight : b;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return a == b ? Float.base : b;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return a == b ? Float. , : b;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "returna == b ? Float.isNaN(b : b;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return a == b ? Float.isNaN(a) + b : b;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return a == b ? Float.ob : b;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return b == 0 ? Float.isNaN(a + b : a;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return a == b ? Float.NaN : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return a == b ? Float.isNaN(a + b : b)];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return a == b ? Float.TOP : b;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return a == b ? Float. deltaX : b;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return a == b ? Float.[5 : b;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return a == b ? Float.0000 : b;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return a == b ? Float. getDay : b;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return a == b ? Float.Dev : b;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return a == b ? Float.isNaN(b : b) ? Float.NaN;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return a == b ? Float.mean : b;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return a == b ? Float.INDEX : b;",
                "identical": false
            }
        ],
        "buggy_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);",
        "fixed_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);"
    },
    "JacksonDatabind-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = propName;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = propNameNode.getIgnored;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = node.getIgnored;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = dataShadow.getIgnored;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored =content.getIgnored;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = data;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = Array.getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = getProp != ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = names.getIgnored;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = referenceInfo.getIgnored;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = NO_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = props.getIgnored;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = parent.getIgnored;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = methodAfterName.getIgnored;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = propNameNode;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored =gridorals.getIgnored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = context.getIgnored;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = EmitUtils.getIgnored;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = methodBuffer.getIgnored;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored =gridorals.getIgnored();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = t.getIgnored;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = methodNames.getIgnored;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = recv.getIgnored;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = methodInfo.getIgnored;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = dest.getIgnored;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = compiler.getIgnored;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored =POL.getIgnored;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored =Element.getIgnored;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = getIgnoredReference.getIgnored;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = method.getIgnored;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = getIgnored;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = lazy.getIgnored;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = reference.getIgnored;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = rs.getIgnored;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored =Reference.getIgnored;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = f.getIgnored;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored =CTED.getIgnored;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = NO_PROTOTYPE.getIgnored;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = getIgnored 32,.getIgnored;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = i.getIgnored;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored =occ.getIgnored;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = data.getIgnored;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = getProp != ignorals;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = NO_REF.getIgnored;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = NO_VIESCAPE_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored =y.getIgnored;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = getIgnoredmitUtils.getIgnored;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = will.getIgnored;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = NO_EXPORTS_WITHOUT_TYPE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored =Issue.getIgnored;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = NO_A.getIgnored;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = propNameNode.getIgnored();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = getIgnoredProperties.getIgnored;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = serializers.getIgnored;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = predicate.getIgnored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = iNames.getIgnored;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = receiver.getIgnored;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = minus.getIgnored;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = explicit.getIgnored;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = propNameNodePointer.getIgnored;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored =INDENT_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored =ft.getIgnored;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = propNameNode.getIgnored nopeek();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = explicitName.getIgnored;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = NO_.getIgnored;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = getPropNames.getIgnored();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = getIgnoredZerosorals.getIgnored;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = getIgnoredorals.getIgnored();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = getIgnoredIgnorals;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = getIgnoredSetter.getIgnored;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = dataShadow.getIgnored",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = NO_MATCH;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = getPropNames.getIgnored;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored =ers.getIgnored;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = methodAfterName.getIgnored();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = propNameNode.getIgnoredmarkAnyProperty(propName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = allAny;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getIgnoredForStubbing;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = getIgnored20orals.getIgnored();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = getIgnored20orals;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = propNameNode.getIgnorednumberOf(propName);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnoredMockBuffer(propName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = NO_ON_or_.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored =INDENT_PROTOTYPE.getIgnored;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignorals.getIgnoredCharacterIndex(propName);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = iAny;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = methodAfter.getIgnored;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored =CTED.getIgnored();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.getIgnored(propName);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = NO_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = getIgnoredorals.getIgnored;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored =ers.getIgnored();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = getProp.getIgnored();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = propNameNode.getIgnorednumberOfValidorals;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getIgnoredURI(propName);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = getIgnored.getIgnored;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = propNameNode.getIgnored",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = NO_EXPORTS_or_WITHOUT_TYPE;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Math-63": {
        "fixes": [
            {
                "k": 1,
                "patch": "return x == 0 && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return x == 0 && Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return x == 0 && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return x == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.x == y && Double.isNaN;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return this.x == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return this.x == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return x == y || Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "returnx == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.x == y || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this.x == x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return x == 0 && Double.isNaN(y) || y == y;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return x == 0 && Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this.x || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return x == y || Double.isNaN(x) && y == y;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return x == 0 && Double.isNaN;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "returnx == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return this.x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return x == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return x == y || Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return x == 1 && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this.x == Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return x == 0 && Double.isNaN(x || y == y;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return x < 0 || x == Double.POSITIVE_INFINITY || x == y;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return x == Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "returnx.isNaN || y == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this.x == Double.class || x == y;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return x == 0 && Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this.x == y && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this.x == x || y == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return this.x == x || Double.isNaN;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return this.x == double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return this.x != 0 && x == y;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this.x != y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return this.x != y && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return x == this || Double.isNaN;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return x == this.x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this.x == x || y == Double.;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return this.x < x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return x == 0 && Double.isNaN(y - y) || x == y;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return x == y || Double.isNaN(x) || y == this;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.x == y && Double.isNaN(y) % x == y;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return x == 1 && Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return x == 0 && Double.isNaN(x - y) || x == y;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return x == 1 && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "returnx.isNaN || y == Double.;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return x.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.x == y && Double.isNaN(y) % x;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this.x == y && Double.isNaN(y) != y;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return x < this.x || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.x == x || y == Double.POSITIVE_VALUE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return x == double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return x == y || Double.isNaN(x) || y == h;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return this.x == y && Double.isNaN < x;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "returnx.isNaN || y == Double.class;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return x == 0 || x == y;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "returnx == y || Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return x == 0 && Double.isNaN(x) || y == h;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this.x == y && Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "returnx.isNaN || y == Double.POSITIVE_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return x == 2 && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "returnx.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this.x == y && x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return x == 0 && Double.isNaN(y;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this.x ==e || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return x == 0 && Double.isNaN(y + y;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return x == 0 && Double.isNaN(y - 1 || x == y;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return x < this.x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return x == attr || Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return x == this || Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this.x - x == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return x == 0 && Double.isNaN(x) % x == y;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return x == Double.MIN_VALUE || x == y;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return x == 0 && Double.isNaN(y - y;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return x == -1 || x == y;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return x == Rectangle || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this.x == Double.POSITIVE_INFINITY || x == y;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return x == 2 && Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "returnx.isNaN || y == this;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return x == 0 && Double.isNaN(y - this;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "returnx || y == Double.POSITIVE_INFINITY || x == y;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return x == 0 && y == Double.POSITIVE_INFINITY || x == y;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return x == Double.class || x == y;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this.x == 0 && x == y;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this.x == Unknown || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this.xDouble == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return x < 0 || x == Double.class;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return y == Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return x == 0 && Double.isNaN(y) % x == y;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.x == Double.NE || x == y;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return x == 0 && Double.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this.x || y == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "returnx < this.x || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this.x == x || y == Double.POSITIVE_isNaN;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "returnx == y || x == y;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this.x == x || y == Double.class;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.x != y && Double.isNaN;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return x == this.x || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return this.x == y || x == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return x == 0 && Double.isNaN(x - 1) || x == y;",
                "identical": false
            }
        ],
        "buggy_line": "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
        "fixed_line": "return equals(x, y, 1);"
    },
    "Jsoup-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this == o;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return this != o;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this.o == o;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this == o; // the default null if it's do a marker for output",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return this == o; // the default null if it's do!",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return this == o; // the default null if it's do not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return this == o; // the default null if it's do a marker for mock",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this == o; // the default null if it's do implicit re-empty",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this == o; // the default null if it's do this",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this == o; // the default null if it's do sanity check",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return this == o; // the default null if it's do zero",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return this == o; // the default null if it's do this is",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do zero",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this == o; // the default null if it's do implicit re2.equals(o",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this == o; // the default null if it's do zero.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re-empty",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do!",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do a marker for output",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this.null == o;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but be from",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this.superclass == o;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this.super != o;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do a marker for mock",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return this == o; // the default null if it's non-empty",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this == o; // the default null if it's do not.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this == o; // the default null if it's do a marker for next is",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this == o; // the default null if it's not store 'raw'",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this == o; // the default null if it's do a non-empty",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return this == o; // the default null if it's do implicit re",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return this.objectValue == o;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return this.equals(o == o;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but 0, element",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re2.equals(o",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return this == o; // the default null if it's do a read",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return this == o; // the default null if it's do aElement.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this == o; // the default null if it's 24",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return this.obj == o;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this == o; // the default null if it's not store 'raw' || this is 16,",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but raw",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this == o; // the default null if it'so",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this == o; // the first spill index",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re-space",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do we'",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do a non-empty'",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re-empty'",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.value == o;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls in del",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return this == o; // the default null if it's do implicit re-space",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re- 12",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return this == o; // the default null if it's do ? 1 : element",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return this == o; // the default null if it's not store 'raw' || this is negative",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do a marker for hash index",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return this == o; // the default null if it's do implicit re- 12",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls as per [JACKSON-314",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this == o; // the default null if it's do a marker for output?",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return this.className == o;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this == o; // the default null if it'sit.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return this == o; // the default null if it's do ? 1 : element.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return this == o; // the default null if it's do implicit re on",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this == o; // the default null if it's do a marker for content",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do we'll set on",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this == o; // the default null if it's do lineno",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but false",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this == o; // the default null if it's do targets: return true;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this == o; // the default null if it's do final class, can do aElement.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re-Edges",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but should never happen",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls in an",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this == o; // the default null if it's do implicit re2.equals(o)",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do a marker for next is",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this == o; // the default null if it's do implicit re-Edges",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do sanity check",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this == o; // the default null if it's do this tag",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but', o;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this == o; // the default null if it's do a marker for slot",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this == o; // the default null if it's do a tag",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do a marker for \"+o",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do ? 1 : element",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return this == o; // the default null if it'll set on",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re2.equals",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this == o; // the default null if it's do zero: return true;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this == o; // the default null if it's not.",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return this.equals == o;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return this == o; // the default null if it's do not store 'raw' nulls but be from",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re- int;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re-Element.",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return this == o; // the default null if it's not store 'raw' || this is",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this == o; // the default null if it's do implicit re elements",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re-and",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls in current",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this == o; // default null if it's do a marker for output",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this == o; // the default null if it's do a marker for k",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.defaultValue == o;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do implicit re 0) return true;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return this == o; // the default null if it's non-empty on",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return this == o; // the default null if it's not store 'raw' nulls but do lineno",
                "identical": false
            }
        ],
        "buggy_line": "return this == o;",
        "fixed_line": "return tag.equals(element.tag);"
    },
    "Jsoup-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static String nullString = name;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static String nullString = t;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static String nullString = name.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static String nullString = val;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static String nullString = Name.valueOf(tId);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static String nullString = impl.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static String nullString = Name.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static String nullString = name.valueOf(tId);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static String nullString = c.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static String nullString = instance.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static String nullString = Node.valueOf;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static String nullString = impl.valueOf(tId);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static String nullString = impl.valueOf(tTYPEFIELD_0000;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static String nullString = name.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static String nullString = c;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static String nullString = Name.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static String nullString = property;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static String nullString = name.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static String nullString = Name.valueOf(t == JsonToken.VALUE_0000;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static String nullString = sv.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static String nullString = instance.valueOf(tId);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static String nullString = Node.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static String nullString = COUNT_0000;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static String nullString = Name.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static String nullString = name.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static String nullString = Name.valueOf(tTYPEFIELD_0000;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static String nullString = Name.valueOf;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static String nullString = instance.valueOf;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static String nullString = name.valueOf(tTYPEFIELD_0000;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static String nullString = impl.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static String nullString = property.valueOf(tId);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static String nullString = Node.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static String nullString = Name.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static String nullString = Name.valueOf(towner);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static String nullString = instance.valueOf(tTYPEFIELD_0000;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static String nullString = property.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static String nullString = property.valueOf(tTYPEFIELD_0000;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static String nullString = impl.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static String nullString = fields.valueOf(type);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static String nullString = i.valueOf;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static String nullString = raw.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static String nullString = old.valueOf;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static String nullString = Name.valueOf(tLocalsx0000;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static String nullString = c.valueOf;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static String nullString = impl.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static String nullString = value;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static String nullString = Token.valueOf(tId);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static String nullString = DEFAULT_0000;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static String nullString = Name.valueOf(10x0000;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static String nullString = Name.valueOf(t == JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static String nullString = fields.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static String nullString = Node.valueOf(tId);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static String nullString = E0000;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static String nullString = strings.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static String nullString = fields.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static String nullString = fields.valueOf(tId);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static String nullString = DEFAULT_0000_VALUE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static String nullString = def.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static String nullString = name.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static String nullString = symbol.valueOf(tId);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static String nullString = raw.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static String nullString = impl.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static String nullString = c.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static String nullString = old.valueOf(type);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static String nullString = Name.valueOf(tclass);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static String nullString =tern.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static String nullString = raw.valueOf(tId);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static String nullString = Name.valueOf(tOperationx0000;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static String nullString = name.valueOf(towner);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static String nullString = Name.valueOf(t str;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static String nullString = p.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static String nullString = c.valueOf(10x0000;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static String nullString = Token.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static String nullString = valParent.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static String nullString = p.valueOf(tId);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static String nullString = def.valueOf(tId);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static String nullString = symbol.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static String nullString = 0x0000;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static String nullString = symbol.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static String nullString = impl.valueOf;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static String nullString = name.valueOf(t str;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static String nullString = Parameterized.valueOf(tId);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static String nullString = impl.valueOf(towner);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static String nullString = Token.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static String nullString = Name.valueOf(t !=0000;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static String nullString = fields.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static String nullString = sv.valueOf(tId);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static String nullString = impl.valueOf(t str;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static String nullString = curr.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static String nullString = fields.valueOf;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static String nullString = fields.valueOf(typeId);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static String nullString = instance.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static String nullString = val.valueOf(tId);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static String nullString = name.valueOf(typeId);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static String nullString = next;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static String nullString = name.valueOf(tx0000f;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static String nullString = Name.valueOf(t == JsonToken.NAME;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static String nullString = Name.valueOf(t[]0000);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static String nullString = property.valueOf(type);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static String nullString =tern;",
                "identical": false
            }
        ],
        "buggy_line": "private static String nullString = String.valueOf(0x0000);",
        "fixed_line": "private static String nullString = String.valueOf('\\u0000');"
    },
    "Math-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "int sum = 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int sum = 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int sum = 0; // let's do a sanity check",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2. 0, d.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int sum = 0; // let's do a value",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2. 0, d.length",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p)",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int sum = 0; // just a digit after the polygon for impls do a sanity check",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is even",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pNewLine]",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2.next)",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int sum = 0; // map, don't really modify",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2. 0, d.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int sum = 0; // let's do a start tag after the polygon for next one",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2. 0, d.length);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int sum = 0; // map, don't really need to a marker forcenter",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, psize in del 0, d.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p is even",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int sum = 0; // map, don't be a value",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p % x.length",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is no need to",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int sum = 0; // map, don't do a value",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p split out forcenter",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p is even",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon forcenter",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be in deliberately",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p % x.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int sum = 0; // map, don't really need to a value",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pOrientation.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p isABSOLUTE)",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int sum = 0; // map, don't really need to a digit after the p",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int sum = 0; // map, don't be a sanity check",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int sum = 0; // map, don't do a sanity check",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int sum = 0; // let's do a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pInitial",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be a digit after the p is even",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int sum = 0; // map, don't reallyvo",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int sum = 1; // Integer.MAX_VALUE can't really need to a digit after the p",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the polygon for impls do a sanity check",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int sum = 0; // required to a digit after the p is passed in deliberately",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int sum = 0; // map, don't really need to axis",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int sum = 0; // map, don't really need to",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p isABSOLUTE",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is disabled",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is nope",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int sum = 0; // required to a digit after the p is passed in filtered",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int sum = 0; // let's do a start lineno, x.",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int sum = 0; // map, don't really",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p 5, 0, d.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pComposite",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon for impl to",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p 5, 0, d.length",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p is",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p isABSOLUTE",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be a value",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is passed in deliberately",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be in del a value",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pindicate",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p 0",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pindScope;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be a sanity check",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int sum = 0; // let's do a digit after the polygon for impl to",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int sum = 0; // required to a digit after the p is even",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p is",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pNewLine",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int sum = 0; // map, don't really need to a marker for each.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int sum = 0; // map, don't really need to a marker for label",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pcenter",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int sum = 0; // Integer.MAX a digit after the p is even",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be a digit after the p isABSOLUTE",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int sum = 0; // map, don't really need to use a marker forcenter",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int sum = 0; // Integer.MAX a digit after the p is no need to",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int sum = 0; // just a digit after the p is",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is passed in del 0",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int sum = 0; // map, don't really need to a marker for calculation",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int sum = 0; // let's do a digit after the p is even",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int sum = 0; // let's do a start tag after the p is even",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is passed in 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, pq",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2.length",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be a value",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p)+",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is not",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is passed in filtered",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int sum = 0; // required to a digit after the p is",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int sum = 0; // map, don't really need a value",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be negated p no need to a value",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int sum = 0; // map, don't really mut a sanity check",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2. year",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2. 0, d.next)",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int sum = 0; // Integer.MAX_VALUE can be null or 2*(x, p2. 0, d. '0' x.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is",
                "identical": false
            }
        ],
        "buggy_line": "int sum = 0;",
        "fixed_line": "double sum = 0;"
    },
    "Closure-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (type != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (fnType == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (type == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (fnType != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (restrictByNotNull != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (restrictBy != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (objType != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = type;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (restrictByNotNullOrEnumType != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnName;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (fnType == null) { // [JACKSON-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnType = n;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of t isExterns;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnSlot;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnType = n;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns, fnNode;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType we didn't run type = fnType",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnName;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of currentSuperTypes;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnDoc type;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExternsPrintedType = fnType can't run type;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns slot = fnType can't run type;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling wrapping for type = fnType can't run type;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExternsPrintedType = fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling wrapping for type There isExterns non-public, fnType = n;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnDoc type;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnNode",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnDoc type;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns slot = fnType can't run type;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (type == null || type.inExterns) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnType = type;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns, fnName;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType we didn't run type = fnType",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnSlot;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = type;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns slot = fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of t isExterns;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of t isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling wrapping for type;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnNode;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of t isExterns, fnDoc type;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnType;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non- and need a = fnType",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (constructorType != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns, fnNode",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType we didn't run type = fnType;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnType = fnName;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns, fnDoc type;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnType = fnName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnType = fnSlot;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExternsPrintedType = fnType",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non- and need a = fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnNode",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType we didn't run type...",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of currentSuperTypes;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType = fnNode",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns slot;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns slot = fnType we didn't run type inference.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnName;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnNode",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns, fnType",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnName;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (isExtern || type != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnType = fnDoc type;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of t isExterns, fnName;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of type There isExterns non-public, fnType = fnName;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnType = n.",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExternsInfo;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (type == null || type.beforeType != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnDoc type...",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of t isExterns when we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (type != null) { // [JACKSON-314] skip entries with n = fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType we didn't run type inference.",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExternsInfo = fnType we didn't run type inference.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnNode",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of t isExterns when we didn't run type?",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n = fnType-407] -- allow disabling of t isExterns when we didn't run type inference.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns est = fnType can't run type;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns slot = fnType we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (type != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnType = fnSlot;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of type?",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExternsInfo = fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (fnType != null) { // [JACKSON-314] skip entries with n-407] -- allow disabling of t isExterns non-public, fnType we didn't run type;",
                "identical": false
            }
        ],
        "buggy_line": "if (fnType != null) {",
        "fixed_line": "if (fnType != null && fnType.hasInstanceType()) {"
    },
    "Codec-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0, false);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return CharSequenceUtils.regionMatches(Graph, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return CharSequenceUtils.regionMatches(true, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return CharSequenceUtils.regionMatches(XY1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return CharSequenceUtils.regionMatches(h1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return CharSequenceUtils.regionMatches(variable1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return CharSequenceUtils.regionMatches(value1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return CharSequenceUtils.regionMatches(Renderer1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return CharSequenceUtils.regionMatches(h, cs1.length, max;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, description2.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1.length, max;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return CharSequenceUtils.regionMatches(h1, cs1.length, max;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return CharSequenceUtils.regionMatches(Output1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return CharSequenceUtils.regionMatches(preds1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length,cs2.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return CharSequenceUtils.regionMatches(wrapped1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0, false;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return CharSequenceUtils.regionMatches(based1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return CharSequenceUtils.regionMatches( stack1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return CharSequenceUtils.regionMatches( holds, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return CharSequenceUtils.regionMatches(Margin1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, false);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return CharSequenceUtils.regionMatches(variable1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return CharSequenceUtils.regionMatches(quoted1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return CharSequenceUtils.regionMatches(h, cs1, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return CharSequenceUtils.regionMatches(g2, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, max);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return CharSequenceUtils.regionMatches(font1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return CharSequenceUtils.regionMatches(number1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return CharSequenceUtils.regionMatches(des1, month, 0, -1, false;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, -1, false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return CharSequenceUtils.regionMatches(des1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return CharSequenceUtils.regionMatches(fragments1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return CharSequenceUtils.regionMatches(true, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, false;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return CharSequenceUtils.regionMatches(des1, month, 0, false);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0,impl2.length, false);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, false);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0, do1.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, max2.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return CharSequenceUtils.regionMatches(iterator1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return CharSequenceUtils.regionMatches(h, cs1, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return CharSequenceUtils.regionMatches(chars1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return CharSequenceUtils.regionMatches( dv1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return CharSequenceUtils.regionMatches(prototype1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs2.length, max;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs1.length, max;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return CharSequenceUtils.regionMatches(Graph, 0, cs1.length, max2.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return CharSequenceUtils.regionMatches(O, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return CharSequenceUtils.regionMatches( hour1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return CharSequenceUtils.regionMatches(h1, month, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return CharSequenceUtils.regionMatches(des1, month, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, description2.length);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return CharSequenceUtils.regionMatches(tokens1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return CharSequenceUtils.regionMatches( mocking1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return CharSequenceUtils.regionMatches(true, 0, cs1.length, description2.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return CharSequenceUtils.regionMatches(Renderer1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, range1.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return CharSequenceUtils.regionMatches(iterator1, month, 0, false);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return CharSequenceUtils.regionMatches(Date, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, strings2.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return CharSequenceUtils.regionMatches(t1, month, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return CharSequenceUtils.regionMatches(Form1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return CharSequenceUtils.regionMatches(h, cs1.length, month2.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return CharSequenceUtils.regionMatches(q1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs2.length, false);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, range2.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return CharSequenceUtils.regionMatches(font1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return CharSequenceUtils.regionMatches(src, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return CharSequenceUtils.regionMatches( stack1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, length2);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return CharSequenceUtils.regionMatches(XY1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return CharSequenceUtils.regionMatches(>01, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return CharSequenceUtils.regionMatches(h1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, q2, 0, cs2.length;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1.length, max2.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return CharSequenceUtils.regionMatches(bag1, cs1.length, max;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return CharSequenceUtils.regionMatches(UM1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return CharSequenceUtils.regionMatches(variable1, 0, cs1.length, description2.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return CharSequenceUtils.regionMatches(variable1, 0, cs1.length, false);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0, -1, false;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return CharSequenceUtils.regionMatches(Graph, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return CharSequenceUtils.regionMatches(e1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return CharSequenceUtils.regionMatches(h1, month, 0, false);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return CharSequenceUtils.regionMatches(XY1, 0, cs1.length, max2.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return CharSequenceUtils.regionMatches(t1, month, 0, false);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return CharSequenceUtils.regionMatches(XY1, month, 0, false);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return CharSequenceUtils.regionMatches( df1, cs1.length, max;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, -1, false;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return CharSequenceUtils.regionMatches(t1, month, 0, false;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return CharSequenceUtils.regionMatches(false, cs1.length, max;",
                "identical": false
            }
        ],
        "buggy_line": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
        "fixed_line": "return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());"
    },
    "Math-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "return mStyle * getNumberOfMargin / n;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return n * mLocale.getSample() / 2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return n * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return mStyle * mean + nopcode;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.getSampleSize() * getNumberOfSuccesses +nopcode;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return count * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return population * N1 - nopcode;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return mStyle * getNumberOfes;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return mStyle * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return mStyle * getNumberOftypesSize / n;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return big * getNumberOfMillis / mLocale.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return 4;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return mStyle * 32 + nopcode;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return mStyle * getNumberOfattrsMargin / n;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return mStyle * EOF_CHARACTER) / 2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return mStyle * getNumberOf goodSize - nopcode;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return value / getNumberOf Object.doubleValue() * this.nopcode;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return x * getNumberOfMillis / mLocale.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return entry.getSampleSize() * N;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return n * localsSize -nopcode;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return n * mLocale.getSample() / 7;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return mStyle * getNumberOfURI;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return initial *UnitMillis / mLocale.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return mStyle * getNumberOf>nopcode + 7;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return value / getNumberOfParserCount;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return mStyle * getNumberOfParserSize +nopcode;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return mStyle * getNumberOftypes.length / n;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return n * getNumberOfParserSize +nopcode;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this.getSampleSize() * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return value / getNumberOf Object.doubleValue() * N;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return this.getSampleSize() * N;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return mStyle * getNumberOfconstCount - nopcode;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return value * getNumberOfes / n;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return mStyle * getNumberOfconstCount - n) / 2;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return mStyle * 31 + x.doubleValue();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return n * mLocale.getSample() / 4;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return n * coefficientsSize -nopcode;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this.getSampleSize() * getNumberOfobjectes +nopcode;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "returnpredicates.getSamplees(n * 32 / n;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return n *TimeSize +nopcode;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return mStyle * getNumberOftypes.length - n) / 2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return mStyle * 31 + nopcode;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this.getSampleSize() * getNumberOfes + nopcode;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return mStyle * getNumberOftypesSize / nCols;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return mStyle * getNumberOfMargin / nCols;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return mStyle * mean;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return mStyle * getNumberOfes + n;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return mStyle * getNumberOfa + n) / 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "returnpredicates.getSample() * N;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return n * mLocale.getSample() / 32;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return mStyle * mean + nCols / 2;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return mStyle * mean + nOffset;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "returnpredicates.getSample() * N +nopcode;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return big * getNumberOfes / n;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return mStyle * getNumberOfes / n;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return n * N +emptySize;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return mStyle * getNumberOfMillis / n;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return mStyle * getNumberOfxFSize - nopcode;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return initial *UnitMillis / mLocale.double)bitIndex;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "returnpredicates.getSamplees(n * N) / 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return mStyle * getNumberOfUnitMillis / getPopcode;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return mStyle * getNumberOfers;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return n * getNumberOfes / mLocale.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this.getSampleSize() * getNumberOfFactor;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "returnpredicates.getSamplees * N +nopcode;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return mStyle * getNumberOfconstCount;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return mStyle * getNumberOfAt + n;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return mStyle * getNumberOfUnitMillis / denominator;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return mStyle * getNumberOfxFSize - n) / 2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return mStyle * getNumberOfParserSize / n;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return entry.getSampleSize() / nopcode;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return mStyle * getNumberOfMillis / denominator;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return mStyle * getNumberOf>nopcode + expand;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return mStyle * getNumberOftypesSize - n) / 2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return initial *UnitMillis / mLocale.double) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return mStyle * accessiblees + nopcode;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "returnpredicates.getSamplees(n * N - 1) / 2;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this.getSampleSize() * getNumberOfMillis;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return mStyle * getNumberOfParserSize - nopcode;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return mStyle * getNumberOfParserSize / nCols;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return big * getNumberOfMillis / mLocale.double)bitIndex;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return n * populationSize;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return mStyle * getNumberOf goodSize / n;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return n * getNumberOfes / mLocale;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return mStyle * getNumberOftypesCount / n;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return mStyle * getNumberOfUnitMillis / getPWord;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return mStyle * getNumberOfParserSize +nopcode / 7;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return this.getSampleSize() * getNumberOfSuccesses +double) / n;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return n * mSize - 1) / 2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return n * getNumberOfes / getPWord;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return n * 32 + m;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return n * mLocale.getSample() / getPWord;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return mStyle * getNumberOfconstCount - 1) / 2;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this.getSampleSize() * getNumberOfers;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return n * mLocale.getSamplees +nopcode;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return mStyle * getNumberOfParserSize / nopcode;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return mStyle * mean / n;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return n * getNumberOfes +emptySize;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return big * getNumberOfMillis / mLocale.double) -nopcode;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return mStyle * getNumberOf goodSize - nCols;",
                "identical": false
            }
        ],
        "buggy_line": "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
        "fixed_line": "return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());"
    },
    "Math-85": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (fa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (b * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (a * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (initial * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (b > 0.0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (seconds * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (b0 * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (num * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( \"< * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (a / b24 >= 0.0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( usableSize * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (b2 < 0.0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (blare * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (b >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (Regular * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (b2 * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (days * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (top * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (viewfa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Container * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (load * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fa * fb == 0.0 ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( a * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( views0 * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( propertyName * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( ins * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (b1 * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (lowerBound >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (a / b instanceof 0.0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( formatter * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (TICAL * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (fa * fb != 0.0 ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (rfa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Child * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (nfa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (dx * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( direct * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (Double * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tip * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (bIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (fast * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (a >= 0.0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (a / b24 >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( children * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (upperBound >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (a * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (loader * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (fractIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (num * fb == 0.0 ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (Stop * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( match * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (a >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (a * fb == 0.0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (!-- * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (foundIterations > 0.0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (view * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Dot * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (a / minimum >= 0.0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (decl * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (bIterations >= 0.0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Chars * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Cost * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (minIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( exhausted % 2 == 0.0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (a / lowerBound >= 0.0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( they * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Horizontal * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (lowerBound >= 0.0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (a * fb == 0.0 ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (a % 2 == 0.0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( Diagnostic * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (f instanceof 0.0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (First * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( maps * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (Calendar * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( (' * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fa * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (type * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (attr * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Active * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (categories * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Byte * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (DIterations >= 0.0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (HorizontalIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (negated >= 0.0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (foundIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (a / b) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (bIterations > 0.0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( reportIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (foundIterations >= 0.0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (fa * fb > 0.0 ) {",
                "identical": true
            },
            {
                "k": 92,
                "patch": "if ( fbIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (a / minimum >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (upper > 0.0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( declIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( mant >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (fa * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (a / 0.0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( skip > 0.0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Chars > 0.0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fa * fb >= 0.0 ) {",
        "fixed_line": "if (fa * fb > 0.0 ) {"
    },
    "Mockito-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "primitiveValues.put(primitive.class, 0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "primitiveValues.put(primitive, 0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "primitiveValues.put(primitive_class, 0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "primitiveValues.put(primitive.class, am)[0];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "primitiveValues.put(primitive.class,STRING);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "primitiveValues.put(primitive.class, printer);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "primitiveValues.put(primitive_STATIC, 0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "primitiveValues.put(primitive.class, value);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "primitiveValues.put(primitive.class, hm, value);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "primitiveValues.put(primitive.class, ruleValues, iValues);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "primitiveValues.put(primitive.class, throwsValues, value);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "primitiveValues.put(primitive.class,LeastTypes, 0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "primitiveValues.put(primitive.class,OTEDValues);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "primitiveValues.put(primitive.class, map);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "primitiveValues.put(primitive.class, height)[0];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "primitiveValues.put(primitive.class,TreesValues, value);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "primitiveValues.put(primitive.class, Boolean.TYPEFIELD_VALUE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "primitiveValues.put(primitive.class, findValues, value);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "primitiveValues.put(primitive.class,STRING)[0];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_ON)",
                "identical": false
            },
            {
                "k": 21,
                "patch": "primitiveValues.put(primitive.class,BINARYValues);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "primitiveValues.put(primitive.class, Boolean.TYPEFIELD_NAME, primitiveValues);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "primitiveValues.put(primitive.class, QName.class, value);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "primitiveValues.put(primitive.class,ORYValues);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "primitiveValues.put(primitiveName, 0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "primitiveValues.put(primitive.class, APPROXValues, value);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_ON;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "primitiveValues.put(primitive.class, entryValues);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_PER_STRING;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "primitiveValues.put(primitive_class, am)[0];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "primitiveValues.put(primitive.class, coll);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "primitiveValues.put(primitive.class, denom)[0];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "primitiveValues.put(primitive.class,9Values, value);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "primitiveValues.put(primitive.class,toValues)[0];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "primitiveValues.put(primitive_SET, 0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "primitiveValues.put(primitive.class, childValues)[0];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "primitiveValues.put(primitive.class, printer;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "primitiveValues.put(primitive, throwsValues.class, value);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_PER_STRING);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "primitiveValues.put(class,primitive.class, 0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "primitiveValues.put(primitive.class, childValues);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "primitiveValues.put(primitive_ strs, 0);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "primitiveValues.put(primitive.class, invalidValues, value);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "primitiveValues.put(primitiveType, 0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "primitiveValues.put(primitive.class, append, primitiveValues);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "primitiveValues.put(primitive.class,free.class)[0];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "primitiveValues.put(primitive.class,getYValues, value);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "primitiveValues.put(primitive.class, NEW_TYPE, toValues);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_VALUE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "primitiveValues.put(primitive.class,[0];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "primitiveValues.put(type,primitive.class, 0);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "primitiveValues.put(primitive.class,LocalName);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "primitiveValues.put(primitive.class, throwsValues, map);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "primitiveValues.put(primitive.class, QName.class, toValues);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "primitiveValues.put(primitive.class,llValues)[0];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "primitiveValues.put(primitive.class, printer)[0];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "primitiveValues.put(primitive.class, throwsValues, 0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "primitiveValues.put(primitive.class,toValues);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "primitiveValues.put(primitive.class, allValues)[0];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "primitiveValues.put(primitive.class, AttributeValues, value);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "primitiveValues.put(primitive.class, Boolean.TYPEFIELD_NAME, primitiveValues;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "primitiveValues.put(primitive.class,5);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "primitiveValues.put(primitive.class, whiteValues, 0);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "primitiveValues.put(primitive.class, keyTypeValues);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "primitiveValues.put(primitive.class, entryValues)[0];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "primitiveValues.put(primitive, throwsValues.class, toValues);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "primitiveValues.put(primitive_class, NEW_TYPE);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "primitiveValues.put(primitive.class, hm, 0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_VALUE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "primitiveValues.put(primitive.class, lpValues, value);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "primitiveValues.put(primitive.class, positiveValues, 0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "primitiveValues.put(primitive.class, &=Values)[0];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "primitiveValues.put(primitive.class, getNodeValues, value);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "primitiveValues.put(primitive_WIDTH, 0);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "primitiveValues.put(primitive.class, bitIndex);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "primitiveValues.put(primitive.class,BINARYValues)[0];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "primitiveValues.put(primitive.class, &=Values;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "primitiveValues.put(primitive_PROTOTYPE, 0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "primitiveValues.put(primitive.class,9Values, coll);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "primitiveValues.put(primitive.class, ArrayList.class)[0];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_TYPE);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "primitiveValues.put(primitive.class,type, 0);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "primitiveValues.put(primitive.class,llValues);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "primitiveValues.put(primitive.class, bottomValues);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "primitiveValues.put(primitive.class, throwsValues, entryValues);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "primitiveValues.put(primitive.class,OTEDValues)",
                "identical": false
            },
            {
                "k": 87,
                "patch": "primitiveValues.put(primitive.class, Boolean.TYPE)[0];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "primitiveValues.put(primitive_TYPE, 0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "primitiveValues.put(primitive_class, allValues);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "primitiveValues.put(primitive.class, throwsValues);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "primitiveValues.put(primitive.class,in, value);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "primitiveValues.put(primitive.class, &=Values);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "primitiveValues.put(primitive.class,Deleted);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "primitiveValues.put(primitive.class, Boolean.TYPEFIELD_VALUE);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "primitiveValues.put(primitive.class, Constants.TYPE_STRING);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "primitiveValues.put(primitive.class,9Values, 0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "primitiveValues.put(primitive.class, invalidValues, map);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "primitiveValues.put(primitive.class, whiteValues, value);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "primitiveValues.put(primitive.class, AnValues, 0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "primitiveValues.put(primitive.class,OTEDValues)[0];",
                "identical": false
            }
        ],
        "buggy_line": "primitiveValues.put(double.class, 0);",
        "fixed_line": "primitiveValues.put(double.class, 0D);"
    },
    "Mockito-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return BasicValue.UNINITIALIZED_VALUE;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return BasicValue.REFERENCE_VALUE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return JsonToken.VALUE_EMBEDDED_MATCH;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return BasicValue.S_PER_SECOND;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_ARRAY;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return BasicValue.UNINITPES_VALUE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return BasicValue.UNINITIALIZED_OF_EXTENDED;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return BasicValue.UNINITIALIZED_OF_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return 2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return EMPTY_BYTE_ARRAY;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_MATCH;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, other;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return JsonToken.VALUE_EMBEDDED_ANNOTATION;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return BasicValue.UNINITIALIZED;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return JsonToken.VALUE_ESCAPE_ARRAY;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return 0; //desc, but do a marker for next one not happen",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return 0; //desc, but do a non-emptyArray.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return 0; //desc, but do a marker for each.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BasicValue.UNINITIALIZED_FLAG;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return 0; //desc, but do a marker for previous",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return 0; // throw on the current, but do a non-emptyArray",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return JsonToken.VALUE_ESCAPE_OBJECTS;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return 0; // throw away the string not, but do a marker for method",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return 0; // throw away the string not comparable, but do a marker for method",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return JsonToken.VALUE_EMBEDDED_SIZE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return BasicValue.UNINITIALIZED_SIGNATURES;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTSUNINITIALIZED;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_FALSE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_NAMES;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return 0; //desc, but do a marker for handler is this right?",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return BasicValue.EMPTY_ZERO_TYPE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return BasicValue.DAYS_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return 0; // throw away the current, but do a marker for method",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return 0; //desc, but do a non-empty collection",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return 0; //desc, but do a marker for triplets",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return BasicValue.UNINITIALIZED_OF_EXPR_ARRAY;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return 0; //desc, but do a marker for next is this right?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return BasicValue.ALIAS_UNINIT_VALUE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return 0; //desc, but do a marker for year is this right?",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return 0; //desc, but do a marker for next one_1",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return 0; //desc, but do a marker for each array",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return BasicValue.UNINITIALIZED_Mtf;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return 0; // throw on the current, but do a non-emptyputByte (returnType);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return 0; //desc, but do a marker for next one",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, other);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return 0; //desc, but do a marker for method",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return 0; // throw away the string not comparable, but do a marker for next is this right?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_PLETS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTLIT;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return 0; // throw on the current, but do a non-emptyArray.",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return JsonToken.VALUE_EMBEDDED_TYPE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return 0; // throw away the string not comparable, but do a marker for next",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return 0; // property '+''s do a marker for method",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return 0; // throw on the current, but do a non-emptyputByte (returnCount",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return BasicValue.DAYS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return 0; // throw on the current, but do a non-empty collection",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return 0; // throw away the string not, but do a marker for next",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return INDEX_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return 0; //desc, but do a marker for startIndex is this right?",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, temp;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return 0; // throw away the current, but do a marker for each array",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return JsonToken.VALUE_EMBEDDED_UNINITIALIZED;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_PLET;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return 0; //desc, but do a marker for next one element",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return 0; //desc, but do a marker for El value",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return BasicValue.EMPTY_ZERO_COMPARATOR;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_SIZE;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return BasicValue.DOUBLE_VALUE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return 0; //desc, but do a marker for next one right?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return BasicValue.UNINITIALIZED_OF_MONTH;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return 0; // throw away the string not comparable, but do a marker for each.",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return 0; // throw away the current, but do a marker for each.",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return 0; // throw away the current, but do a marker for next",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return BasicValue.UNINITIALIZED_SIGNATURE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, otherLengthEstimate;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, otherLength;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return 0; // throw away the string not comparable, but do a marker for each array",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_).length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return 0; // throw on the current, but do a marker for next one_1 to an object?",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_OBJECT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return 0; // throw away the current, but do a marker for next one_1 to an object?",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return BasicValue.DAYS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return 0; // handler, but do a marker for next one not happen",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_PS;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT_1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return BasicValue.EMPTY_CACHE_ARRAY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return 0; //desc, but do a marker for next",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return 0; //desc, but do a marker for next one_1 to an object?",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return BasicValue.S_PER_MONTH;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return BasicValue.EMPTY_COMPARATOR;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return JsonToken.VALUE_EMBEDDED_DEFAULT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return 0; // throw away the current, but do a marker for previous",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return 0; // let's do a marker for next one not happen",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return BasicValue.DAYS_PER_WEEK;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return 0; // throw away the string not, but do a marker for each array",
                "identical": false
            }
        ],
        "buggy_line": "return 1;",
        "fixed_line": "return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;"
    },
    "Closure-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type?",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type?",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (resultType == null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we't run type?",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never happen but...",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type inference.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we't run type;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (result == null) { // just a result nulls as per [JACKSON-314] skip entries with null if we't run type?",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we didn't run type?",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should never happen but...",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if weNative't run type?",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (result == null) { // [JACKSON-407] -- allow disabling of result = that't run type;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we didn't run type;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSerializers.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (result == null) { // just a result nulls as per [JACKSON-314] skip entries with null if we't run type;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we't run type inference.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if weNative't run type;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (result == null) { // [JACKSON-407] -- allow disabling wrapping for from input the result = that't run type;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (result == null) { // just a result nulls as per [JACKSON-314] skip entries with null if we didn't run type?",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (result == null) { // [JACKSON-407] -- allow disabling wrapping for result = that't run type;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be skipped_TYPE",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never happen but nodes",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never occur...",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we-407] -- allow disabling of result = that't run type;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never occur?",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type provided;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSer from input_TYPE",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (result == null) { // just a result nulls as per [JACKSON-314] skip entries with null if we't run type inference.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (resultAlternate != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerializers.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (result == null) { // [JACKSON-407] -- allow disabling wrapping for from result = that't run type;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never occur;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if any but a result and that't run type;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should work",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should never happen but nodes",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type provided;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (result == null) { // just a result nulls as per [JACKSON-314] skip entries with null if we didn't run type;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should never occur?",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type back on nulls but nodes",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (result == null) { // [JACKSON-407] -- allow disabling wrapping forializedType result = that't run type;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should never be skipped_TYPE",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be from input_TYPE",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should never occur...",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (result == null) { // [JACKSON-407] -- allow disabling of result and that't run type;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we-407] -- allow disabling of result and that't run type;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeSer from input_TYPE",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (result == null) { // just a result nulls as per [JACKSON-314] skip entries with null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null values?",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if any but a result and that't run type?",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type back on this even...",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (result == null) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't from input_TYPE",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if weNative't run type?",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we't run typeSerializers.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type back on nulls but nodes",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never happen but a result",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSer after all;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if weNative't run type inference.",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if weNative't run type;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we-407] -- allow disabling of result and that't run type?",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null and that't run type;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be skipped_TYPE",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be negated.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type back on maxAlternate",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should work",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't from input_TYPE",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type back on this even...",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (result == null) { // [JACKSON-407] -- allow disabling wrapping for from here = that't run type;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should never occur;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we't run type provided;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type : that.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should never be from input_TYPE",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (result == null) { // just a result nulls as per [JACKSON-314] skip entries with null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never occur on nulls but nodes",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if result and that't run type;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we't run type back on nulls but nodes",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type back on from input_TYPE",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSer call?",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if weNative't run typeSer!",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we-407] -- allow disabling wrapping for from input_TYPE",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be result",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (result == null) { // as per [JACKSON-314] skip entries with null if we didn't run typeSerializers.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeDesercing should never happen but a result",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result nulls but nodes",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we-407] -- allow disabling of result = that't run type?",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeSer after all;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type back on output",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type",
                "identical": false
            }
        ],
        "buggy_line": "if (result != null) {",
        "fixed_line": "if (!result.isNoType()) {"
    },
    "JacksonDatabind-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new SimpleType(_class, _genericType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new SimpleType(_class, _genericType, _valueHandler, h, _superClass, _asStatic);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new SimpleType(_class, _member, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new SimpleType(_class, _bindings, _valueType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new SimpleType(_class, _superClass, _baseType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new SimpleType(_class, _keyType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _super",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _super",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new SimpleType(_class, _prettyPrinter, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _super",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _super",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _super",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new SimpleType(_class, _elementType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _super",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new SimpleType(_superClass, _genericType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _superClass, _super",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _superClass, _super",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new SimpleType(_subclass, _baseType, _valueClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new SimpleType(_class, _bindings, _valueType, _valueHandler, h, _superClass, _asStatic);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _superClass, _super",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _superClass, _super",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _superClass, _super",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _super",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new SimpleType(_config, _bindings, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _superClass, _super",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superObject, _super",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _generic",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _genericInterfaces, _superClass, _superClass, _super",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new SimpleType, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _generic",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new SimpleType(_config, _bindings, _type, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superObject, _super",
                "identical": false
            }
        ],
        "buggy_line": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
        "fixed_line": "return new SimpleType(subclass, _bindings, this, _superInterfaces,"
    },
    "Csv-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.class);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new LinkedHashMap<String, Integer>(Integer.MIN_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new LinkedHashMap<String, Integer>(OUT_MIN_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap[this.headerMap;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap[this.headerMap);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new LinkedHashMap<String, Integer>(a.headerMap);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new LinkedHashMap<String, Integer>(MIN_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerName, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerName, Integer.class);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new LinkedHashMap<String, Integer>(map, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.By);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new LinkedHashMap<String, Integer>(groupMap.this.headerMap);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.DATE_VALUE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new LinkedHashMap<String, Integer>(map, Integer.class);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new LinkedHashMap<String, Integer>( this.headerMap;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new LinkedHashMap<String, Integer>(cloneMap.headerMap);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new LinkedHashMap<String, Integer>( Integer.MIN_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new LinkedHashMap<String, Integer>(iterator.headerMap);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new LinkedHashMap<String, Integer>(kMap.this.headerMap);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new LinkedHashMap<String, Integer>(MAX_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerField, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.itemCount);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new LinkedHashMap<String, Integer>( this.headerMap);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new LinkedHashMap<String, Integer>(timeMap.class);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.DATE);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new LinkedHashMap<String, Integer>( .util.header) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.TYPE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new LinkedHashMap<String, Integer>(this.header);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new LinkedHashMap<String, Integer>(blockMap.this.headerMap);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap0, Integer.class);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerField, Integer.class);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.START_VALUE);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new LinkedHashMap<String, Integer>([] { this.headerMap;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerKey, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.DATE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new LinkedHashMap<String, Integer>(normalMap.this.headerMap);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new LinkedHashMap<String, Integer>(g.headerMap);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerDateTime, Integer.class);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new LinkedHashMap<String, Integer>(oi\" + this.headerMap;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new LinkedHashMap<String, Integer>(pMap.this.headerMap);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap[0];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new LinkedHashMap<String, Integer>(totalMap.headerName, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new LinkedHashMap<String, Integer>(in.headerName, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap+1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new LinkedHashMap<String, Integer>( == Integer.class);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new LinkedHashMap<String, Integer>(in.headerName, Integer.class);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerKey, Integer.class);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new LinkedHashMap<String, Integer>(ttMap.this.headerMap);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new LinkedHashMap<String, Integer>( % this.headerMap;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new LinkedHashMap<String, Integer>(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new LinkedHashMap<String, Integer>(methodMap.headerMap);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new LinkedHashMap<String, Integer>( remainderMap.class);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new LinkedHashMap<String, Integer>(in.header);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap * total);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.DD_VALUE);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap){",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.su_VALUE);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerDateTime, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.NEGATIVE_VALUE);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new LinkedHashMap<String, Integer>( tMap.headerMap);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.INFO_VALUE);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.class;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap * 2 + 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new LinkedHashMap<String, Integer>( Integer.class);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new LinkedHashMap<String, Integer>(ParseExceptionMap.headerName, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new LinkedHashMap<String, Integer>( .this.headerMap;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.NAME_VALUE);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new LinkedHashMap<String>(this.header, Integer.class);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new LinkedHashMap<String, Integer>(this.header != Integer.class);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new LinkedHashMap<String, Integer>(this.firstMap);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap[\" + this.headerMap;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new LinkedHashMap<String, Integer>(ParseExceptionMap.class);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.DATE_VALUE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap * total;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new LinkedHashMap<String, Integer>(normalMap.headerName, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new LinkedHashMap<String, Integer>( .util.header);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.UTC);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new LinkedHashMap<String, Integer>( ts.headerMap);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.OBJECT_VALUE);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.RANGE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.Tree);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap * 2];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap * 2);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.START_TYPE);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap );",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new LinkedHashMap<String, Integer>( * this.header);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new LinkedHashMap<String, Integer>( clazz.headerMap);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.FORMAT_VALUE);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new LinkedHashMap<String, Integer>(this.header_VALUE);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.DATE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer. contains_VALUE);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new LinkedHashMap<String, Integer>( .util.header_VALUE);",
                "identical": false
            }
        ],
        "buggy_line": "return new LinkedHashMap<String, Integer>(this.headerMap);",
        "fixed_line": "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);"
    },
    "Math-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "return solve;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return solve.0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return solveArgs, max;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return solveFunctionType.min, max);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return solveFunction, max;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return solveSuperInstance(min, max);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return solveArgs, max);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return solveType.min, max);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return solve(min, max);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return solveSuper.min, max);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return solveradix(min, max);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return solveUtil.min, max);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return solve { return min, max;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return solveSuper.min(min, max);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return solveArgs = max, f;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return solveExterns, max;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return solveTo(min, max);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return solvemultiply(min, max, f);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return solveExterns, max);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return solveVar.min, max);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return solve() { return min; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return solve { return min, max; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return solveSuper.min, max;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return solve Node(min, max);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return solveFunctionType.min, initial;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return solve.0, max;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return solve.0, max);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return solveSuper, max;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return solveSuper(min, max);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return solvemultiply(min, max);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return solveFunctionType.min, max;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return solveterns, max;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return solveReferenceTo(min, max);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return solve { return max, f; }",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return solveFunction(min, max);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return solveFunctionType.min(min, max);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return solveArgs.min, max;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return solveFunction, max);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return solveTransient(min, max);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return solveSuperClassOrEnum(min, max);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return solveUtil.min, max;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return solveVar.min, max;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return solveStyle, max;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return solveSuperClassOrEnum, max);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return solveArgs.min, max);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return solve parseFunction(min, max);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return solveSuperInstance(min, max;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return solveradix(min, initial) { return min; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return solve1(min, max);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return solve { return max, f;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return solveClassmin, max);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return solveWall.min, max;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return solveWall.min, max);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return solve.0_min, max;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return solve().min, max);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return solveterns, max);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return solve.0, maximalIterationCount;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return solveSuper, max);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return solvedefineStyle, max);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return solvemultiply(min, max, f) { return min; }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return solveSuperClassmin, max);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return solve.0_min, max);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return solve { return min, max);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return solveStyle, max);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return solve { return max, f; inExterns + max;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return solveWall, max;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return solve Y, max;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return solve() { return min, max; }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return solveFunction;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return solve.0; max, fci { return min; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return solveType.min, initial;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return solvemultiply(min, max, f;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return solveSuperClassOrEnum, max;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return solve().min, max;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return solve, max;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return solveFunction, min;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return solve { return max, f; inExterns);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return solve; //r't the first range",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return solve; // literal the first of s's, max.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return solve() { return min, max;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return solve; //namespace's, max.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return solve; //namespace's, maxCharno",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return solveradix(min, initial) { return max; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return solveUTE, max;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return solve; //namespace's do implicit re-40 the first range",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return solveType.min, max;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return solve { return min, max; inExterns);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return solve { return max, f; inExterns = max;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return solvetern, max;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return solveResolved, max;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return solve; //namespace's do a sanity check",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return solve { return max, f; break;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return solveNulls, max;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return solveNulls, max);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return solve { return max, min; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return solvemitFunction, min;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return solve; // literal the first of s's do implicit re",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return solve; // literal the first of s's, max",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return solve(1, max;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return solve; //r't doFunction, max is valid for(min",
                "identical": false
            }
        ],
        "buggy_line": "return solve(min, max);",
        "fixed_line": "return solve(f, min, max);"
    },
    "Codec-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(DEFAULT_MAXS);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(true);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this(DEFAULT_TABLE_SIZE);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this(DEFAULT_IMAGINARY_SIZE);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(encoding);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, encoding;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this(DEFAULT_MAXS) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this(DEFAULT_IMATE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this(DEFAULT_IMAGINARY_SIZE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(flags);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this(DEFAULT_IMAGINARY_NODES);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this(DEFAULT_IMAGINARY_CHAR);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 4);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(DEFAULT_MAXIMUM_SEGMENT_SIZE);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this(DEFAULT_IMATE);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this(DEFAULT_IMAGINARY_CAPACITY;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this(b64variant);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this(DEFAULT_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this(DEFAULT_IMAGINSETS;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this(DEFAULT_IMAGINARY_ARRAY;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, fraction;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this(canonicalize);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this(DEFAULT_USE_OBJECTS);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this(DEFAULT_IMAGINSETS);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this(DEFAULT_ON_MAXS);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this(DEFAULT_IMAGINARY_OBJECTS);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(DEFAULT_IMAGINUCTION_NODES);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(DEFAULT_IMAGINARY_;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(field);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this(DEFAULT_GMENT_ESCAPE_OBJECTS);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this(state);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this(base64ToAsciiC;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this(Dynamic);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTERS);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER,encoding;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this(DEFAULT_MAXIMUM_SIZE);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this(DEFAULT_IMAGINARY_CACHE_SIZE);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this(DEFAULT_TABLES);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 3;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this(mean);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this(DEFAULT_ShowS);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, mode;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this(DEFAULT_IMAGINUARY_CHARACTER);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this(DEFAULT_IMAGINHER);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER,encoding);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this(DEFAULT_IMAGINARY_TABLE_SIZE);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this(DEFAULT_Expr);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this(DEFAULT_IMAGINVOKESCAPE_OBJECTS);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this(DEFAULT_MAXSUS);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this(DEFAULT_IMAGINARY_SIZE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this(DEFAULT_ strsS);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this(DEFAULT_PREFIX);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this(DEFAULT_IMAGINARY_inline_CHARACTER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this(DEFAULT_IMAGINARY_MAXS);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this(DEFAULT_BUCKETS);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, missing;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this(DEFAULT_IMAGINARY_CAPACITY, encoding;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, hm;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, codec;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, supported;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 3;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this(DEFAULT_IMATE_OBJECTS);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this(DEFAULT_MAXIMUM_CAPACITY, encoding;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this(DEFAULT_OF_BACKSLASH;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, fraction);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER,gle;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this(DEFAULT_MAXIMUM_GMENT_SIZE);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this(DEFAULT_IMAGINDENT_CHARACTER);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this(DEFAULT_IMAGINARY_CACHE_SIZE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this(DEFAULT_IMAGINARY_CAPACITY, 4);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this(DEFAULT_IMAGINUARY_CHARACTER, encoding;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this(DEFAULT_IMAGINARY_BACKSLASH;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this(DEFAULT_IMAGINARY_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this(DEFAULT_IMAGINUARY_SIZE);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this(DEFAULT_MAXIMUM_VALUE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 4;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this(DEFAULT_SIZE);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this(DEFAULT_IMAGINARY_BACKS);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, expansionFactor;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, clone;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 4, 8;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this(DEFAULT_IMAGINARY_ detectedS);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this(DEFAULT_IMAGINVOKESCAPE_OBJECTS;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this(DEFAULT_GMENT_SIZE);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(DEFAULT_IMAGINDENT_CHARACTER, encoding;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this(DEFAULT_IMAGINARY_FOUND;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this(DEFAULT_MAXIMUM_VALUE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this(DEFAULT_IMAGINARY_CHAR) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this(DEFAULT_IMAGINARY_TRIPS);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 4, 4);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this(DEFAULT_IMAGINARY_STROKE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(DEFAULT_MAXSUSPENDED;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this(Maximum);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER,class);",
                "identical": false
            }
        ],
        "buggy_line": "this(false);",
        "fixed_line": "this(0);"
    },
    "Jsoup-43": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (element.equals(element)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (element.equals(i)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (element.equals(STR)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (element == elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (element.equals( element)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (element == elements.pi) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (element == elements.id) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (elements.equals( element) == elements;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (element == elements.TYPE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (element.equals( elements)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (element == elements.i) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (element == elements.ARRAY) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (element == elements.\".equals(element)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (element == elements.UN over) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (element == elements.number) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (elements == elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (element == elements.LONG) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (element == elements.STRING) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (element == i) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (element == elements.FUNCTION) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (element.equals(ll)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (element == elements.value) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (element == elements.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (element.equals(value)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (element == elements.isNull) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (element != elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (elements.equals(element) == elements;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (element == elements.UNINITIALIZED_VALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (elements.equals( element)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (element == elements.UNINITIALIZED_VALUE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (element.equals( denominator)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (element.equals( element) == elements;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (element == elements.instance) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (element == elements.v) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (element.equals( ByteBuffer)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (element == elements.ia_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (element.equals(pieces, i)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (element == elements.CIRCLE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (element == elements.USE_DEFAULT) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (elements.equals(i)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (element == elements.NAME) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (element == elements.Arc) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (element.equals( numberOfNull)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (element == elements.before) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (element == elements.NONE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (elements.equals( element) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (elements.equals(element) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (element.equals(className)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (element.equals( wrapping)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (element == elements.CIRC) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (element.equals(obj)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (element == elements) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (element == elements.Constants.MILLIS) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (elements.equals(i) == elements;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (element == elements.numOccurrences) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (element == elements.SHORT_ESCAPE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (element.equals( denominator) == elements;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (element == elements. pool) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (element.equals(S)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (element == elements.EMPTY) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (element == elements.numerator) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (element == elements.length) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (element.value == elements) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (elements.equals(element)) return 0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (element == elements.wanted) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (element == elements.FUNCTIONS_EXPRESSION) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (not.equals(element)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (element == elements.OK) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (element.equals(UTC)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (element == elements. cn) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (STR.equals(element)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (element.equals(element)) return 0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (elements.equals(STR)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (element == elements.Chain) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (element.equals( denominator) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (element.equals(OG)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (element == elements.SHORT_EFF) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (escape.equals(element)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (element.equals( local)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (element.equals(element) == elements;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (element == elements.CIRCLE_VALUE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (element == elements.IS) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (element == elements.scan) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (element.equals(pieces)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (element == elements.SHORT_ESCAPE);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (element == elements.NO) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (element.equals(id)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (element == elements. comment) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (element == elements.UNINITIALIZED_THIS) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (element == elements.OTH) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (element == elements.version) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (element == elements.Exception) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (elements.equals(ll)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (element == elements.URL) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (element == elements. Set) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (element == elements.FUNCTIONS_VALUE) {",
                "identical": false
            }
        ],
        "buggy_line": "if (element.equals(search))",
        "fixed_line": "if (element == search)"
    },
    "Mockito-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (typeParameterTypeParameters.ENUM) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (typeParameterTypeParameters.TYPE) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (typeParameterTypeArgument) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (typeParameterTypeParameters.MI) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (typeParameterTypeParameters.refParameter) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (typeParameterTypeParameters.scope) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (typeParameterTypeParameters.ALL) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (typeParameterTypeParameters.SIGNATURES) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (typeParameterTypeParameters. /= 2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (typeParameterTypeParameters.FUNCTION) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (typeParameterTypeParameters.MODE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (typeParameterTypeParameters.aints) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (typeParameterType(0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (typeParameterTypeParameters. remainder != type) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (typeParameterTypeParameters.Border) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (typeParameterTypeParameters.instanceTypeParameters) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (typeParameterTypeParameters.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (typeParameterTypeParameters.bytes) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (typeParameterTypeParameters. wait) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (typeParameterTypeParameters.able) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (typeParameterTypeParameters.tooltips) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (typeParameterTypeParameters.MI_ENUM) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (typeParameterTypeParameters.NONE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (typeParameterTypeParameters.STRING) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (typeParameterTypeParameters.iParameter",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (typeParameterTypeParameters.iParameter) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (typeParameterTypeParameters.TransformTypeParameters) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (typeParameterTypeParameters.pi) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (typeParameterTypeParameters.NO_TYPE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (typeParameterTypeParameters.ALL_TYPE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (typeParameterTypeParameters.LEN) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (typeParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (typeParameterTypeParameters.ENUM = type) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (typeParameterTypeParameters.before != type) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (typeParameterTypeParameters.functionTypeParameters) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (typeParameterTypeParameters.iParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (typeParameterTypeParameters.Horizontal {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (typeParameterTypeParameters.LONG_TYPE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (typeParameterTypeParameters.FLOAT_TYPE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (typeParameterTypeParameters.UNINITIALIZED_TYPE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (typeParameterTypeParameters.EN) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (typeParameterTypeParameters != 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (typeParameterTypeParameters. partialParameter) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (typeParameterTypeParameters.ERROR) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (typeParameterTypeParameters.UNREAD_TYPE) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (typeParameterTypeParameters.FALSE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (typeParameterTypeParameters. fallback) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (typeParameterTypeParameters.value) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (typeParameters) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (typeParameterTypeParameters. year) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (typeParameterTypeParameters.serializer) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (typeParameterTypeParameters.95) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (typeParameterTypeArguments) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (typeParameterTypeParameters.\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (typeParameterTypeParameters.bytes != type) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (typeParameterTypeParameters.ps) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (typeParameterTypeParameters.checkParameter) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (typeParameterTypeParameters.innerTypeParameters) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (typeParameterTypeParameters != type) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (typeParameterTypeParameters.CIRC) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (typeParameterTypeParameters.OTHER) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (typeParameterTypeParameters. cell) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (typeParameterTypeParameters.Alpha) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (typeParameterTypeParameters.LABEL) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (typeParameterTypeParameters.Horizontal) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (typeParameterTypeParameters. values != type) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (typeParameterTypeParameters.forceTypeParameters) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (typeParameterTypeParameters.MI_TYPE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (typeParameterTypeParameters.accessorMethod) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (typeParameterTypeParameters.iParameterType(0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (typeParameterTypeParameters.REF_TYPE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (typeParameterTypeParameters.only) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (typeParameterTypeParameters.ALL_NAME) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (typeParameterTypeParameters. ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (typeParameterTypeParameters. EvalParameter) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (typeParameterTypeParameters. values) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (typeParameterTypeParameters.next) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (typeParameterTypeParameters.length) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (typeParameterTypeParameters.IMPLEMENTS) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (typeParameterTypeParameters.ENUMShared) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (typeParameters != 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (typeParameterTypeParameters.NOT_TYPE) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (typeParameterTypeParameters.UNREAD_ENUM) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (typeParameterTypeParameters.UNSCAPE_ENUM) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (typeParameterTypeParameters.forceType(0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (typeParameterTypeParameters.FLOAT_TYPEDEF != type) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (typeParameterTypeParameters.accessorMethod != type) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (typeParameterTypeParameters.FLOAT_ENUM) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (typeParameterTypeParameters._1_) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (typeToEvaluate instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (typeParameterTypeParameters. '.') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (typeParameterTypeParameters. predicates) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (typeParameterTypeParameters.])) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (typeParameterTypeParameters.IMPLEMENTS_TYPE) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (typeParameterTypeParameters. rest) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (typeParameterTypeParameters. rest {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (typeParameterTypeParameters.ENUM = type;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (typeParameterTypeParameters.accessorCount) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (typeParameterTypeParameters.[] {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (typeParameterTypeParameters.UNSCAPE_ENUM = type;",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (typeParameter != actualTypeArgument) {"
    },
    "Lang-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return cAvailableLocaleSet.contains(locale;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return cAvailableLocaleSet.contains(locale)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return cAvailableLocaleSet.contains(locale) );",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return cAvailableLocaleSet.contains(locale) > 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return cAvailableLocaleSet.contains(locale, locale);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return cAvailableLocaleSet.contains(locale) >= 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return cAvailableLocaleSet.contains(locale) || cAvailableLocale;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return cAvailableLocaleSet.contains(locale) < locale;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return cAvailableLocaleSet.contains(locale) locale;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return cAvailableLocaleSet.contains(locale) != 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return cAvailableLocaleSet.contains(locale)CHARS;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return cAvailableLocaleSet.contains(locale) != locale;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return cAvailableLocaleSet.contains(locale)[0];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return cAvailableLocaleSet.contains(locale) };",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return cAvailableLocaleSet.contains(locale)}",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return cAvailableLocaleSet.contains(locale) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_VALUE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return cAvailableLocaleSet.contains(locale)Method;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return cAvailableLocaleSet.contains(locale).locale;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return cAvailableLocaleSet.contains(locale)];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return cAvailableLocaleSet.contains(locale != locale;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return cAvailableLocaleSet.contains(locale );",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return cAvailableLocaleSet.contains(locale) ? 1 : locale;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return cAvailableLocaleSet.contains(locale)e;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return cAvailableLocaleSet.contains(locale) available;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return cAvailableLocaleSet.containsKey(locale);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return cAvailableLocaleSet.contains(locale * iLocale;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return cAvailableLocaleSet.contains(locale)List;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return cAvailableLocaleSet.contains(locale)-1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return cAvailableLocaleSet.contains(locale)Analyzer;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return cAvailableLocaleSet.contains(locale) 8;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return cAvailableLocaleSet.contains(locale) break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return cAvailableLocaleSet.contains(locale)sb;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return cAvailableLocaleSet.contains(locale) directLocale;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return cAvailableLocaleSet.contains(locale)0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return cAvailableLocaleSet.contains(localePartial_VALUE;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return cAvailableLocaleSet.contains(locale)IGN;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return cAvailableLocaleSet.contains(locale)+';",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return cAvailableLocaleSet.contains(locale3);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return cAvailableLocaleSet.contains(locale)ZERO_VALUE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return cAvailableLocaleSet.contains(locale)ATURE",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return cAvailableLocaleSet.contains(locale)Handle;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return cAvailableLocaleSet.containsAll(locale);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return cAvailableLocaleSet.contains(locale) == locale;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return cAvailableLocaleSet.contains(locale)parent;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return cAvailableLocaleSet.contains(locale) {}",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return cAvailableLocaleSet.contains(locale)",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return cAvailableLocaleSet.contains(locale));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return cAvailableLocaleSet.contains(locale_VALUE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return cAvailableLocaleSet.contains(locale)Actions;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return cAvailableLocaleSet.containsPrintLocaleSet;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return cAvailableLocaleSet.contains(locale) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return cAvailableLocaleSet ? locale.contains(locale);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_ else if (locale;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return cAvailableLocaleSet.contains(locale) roomLocale;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return cAvailableLocaleSet.contains(locale)Wrapped",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return cAvailableLocaleSet.contains(locale)IGN_VALUE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return cAvailableLocaleSet.contains(locale, locale;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return cAvailableLocaleSet.contains(locale) || cAvailableLocaleSymbols;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return cAvailableLocaleSet.contains(locale)Name;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_UNINIT_VALUE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return cAvailableLocaleSet.contains(localeURR2_FIRST);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return cAvailableLocaleSet.contains(localeGregorianCalendar);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return cAvailableLocaleSet.contains(locale) root;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return cAvailableLocaleSet.contains(locale)ForText;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return cAvailableLocaleSet.contains(localeLastLocaleSet);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return cAvailableLocaleSet.contains(locale * locale;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return cAvailableLocaleSet.contains(locale) precedence;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return cAvailableLocaleSet.contains(locale) unary;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return cAvailableLocaleSet.contains(localeName);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return cAvailableLocaleSet.contains(localeout);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return cAvailableLocaleSet.contains(locale) make;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return cAvailableLocaleSet.contains(localemean);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return cAvailableLocaleSet.contains(locale)Method",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return cAvailableLocaleSet.contains(locale)fonts;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return cAvailableLocaleSet.contains(locale)]",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return cAvailableLocaleSet.contains(locale)-1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return cAvailableLocaleSet.contains(locale) hot;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return cAvailableLocaleSet.contains(locale) main;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return cAvailableLocaleSet.contains(locale)PRESSION;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return cAvailableLocaleSet.contains(locale)().length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return cAvailableLocaleSet.contains(localeURR2_ParseDaysInFirstWeek);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_TIME_VALUE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return cAvailableLocaleSet.contains(locale) < 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_COMPARATOR;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return cAvailableLocaleSet.contains(locale)');",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet > locale;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return cAvailableLocaleSet.contains(locale)oboxLocale;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_NextXLocale;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return cAvailableLocaleSet ? locale.contains(locale) : 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return cAvailableLocaleSet.contains(locale)verse;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return cAvailableLocaleSet.contains(localeKey);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return cAvailableLocaleSet.contains(locale) ? locale : 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return cAvailableLocaleSet.contains(locale)Def;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_UNserialize;",
                "identical": false
            }
        ],
        "buggy_line": "return cAvailableLocaleSet.contains(locale);",
        "fixed_line": "return availableLocaleList().contains(locale);"
    },
    "JacksonXml-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "_rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "_rootNameLookup = rootNameLookup;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "_rootNameLookup = root._rootNameLookup;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "_rootNameLookup = link._rootNameLookup;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_rootNameLookup = ? src._rootNameLookup : src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "_rootNameLookup = rootNames;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "_rootNameLookup = name;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 9,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 10,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 11,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_rootNameLookup = src._rootNameLookup; // intersect as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 13,
                "patch": "_rootNameLookup = config;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "_rootNameLookup = src._rootNameLookup; // intersect as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "_rootNameLookup = REPLAY_START_DUP;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "_rootNameLookup = src._rootNameLookup; // will also check for ns;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t is disabled",
                "identical": false
            },
            {
                "k": 19,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of t isActive't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of t isActive't really modify it't do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 21,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-74 < src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of t isActive't really modify it't do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of t isActive't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 24,
                "patch": "_rootNameLookup = look._rootNameLookup;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t is negative",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 27,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling wrapping for ns;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really gets this right?",
                "identical": false
            },
            {
                "k": 29,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen from here",
                "identical": false
            },
            {
                "k": 30,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-40 len;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t isExternTypes(1, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 33,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current typeSerializers;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 35,
                "patch": "_rootNameLookup = n._rootNameLookup;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to vg.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t isExterns do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to axisNameLookup",
                "identical": false
            },
            {
                "k": 39,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t isExtern). src._rootNameLookup",
                "identical": false
            },
            {
                "k": 40,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to t isExterns do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 41,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to an InsnList",
                "identical": false
            },
            {
                "k": 42,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-empty't really modify it't do implicit renamercing should never happen but...",
                "identical": false
            },
            {
                "k": 43,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen from now | src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to useSerializers;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need to do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 46,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-empty enables",
                "identical": false
            },
            {
                "k": 47,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-empty't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 48,
                "patch": "_rootNameLookup = !_for._rootNameLookup;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to t is disabled",
                "identical": false
            },
            {
                "k": 50,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to use forSerializers should never happen but...",
                "identical": false
            },
            {
                "k": 51,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen from '_nextAfterNameLookup",
                "identical": false
            },
            {
                "k": 52,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really gets this right?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify from '_nextAfterNameLookup",
                "identical": false
            },
            {
                "k": 54,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never gets here",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen from here",
                "identical": false
            },
            {
                "k": 56,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 57,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really gets this may be parametri!",
                "identical": false
            },
            {
                "k": 58,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to t is negative",
                "identical": false
            },
            {
                "k": 59,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamerializers;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t isExterns do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 61,
                "patch": "_rootNameLookup = src._rootNameLookup; // intersect as per [JACKSON-407] -- allow disabling wrapping for ns;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to force parsing",
                "identical": false
            },
            {
                "k": 63,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of typeSerializers;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t is even..",
                "identical": false
            },
            {
                "k": 65,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to t isExterns do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 66,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen from now | src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of t isActive't really modify it't do implicit renamercing should never happen from here",
                "identical": false
            },
            {
                "k": 68,
                "patch": "_rootNameLookup = src._rootNameLookup; // intersect as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen from here",
                "identical": false
            },
            {
                "k": 69,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should check",
                "identical": false
            },
            {
                "k": 70,
                "patch": "_rootNameLookup = src._rootNameLookup; // intersect as per [JACKSON-407] -- allow disabling of current if it't really need to t is disabled",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to use forSerializers should never happen?",
                "identical": false
            },
            {
                "k": 72,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of t isActive't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t isg.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen from '_nextAfterNameLookup",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamer",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t is even...",
                "identical": false
            },
            {
                "k": 77,
                "patch": "_rootNameLookup = src._rootNameLookup; // intersect as per [JACKSON-407] -- allow disabling of current if it't really need to t is negative",
                "identical": false
            },
            {
                "k": 78,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never gets here",
                "identical": false
            },
            {
                "k": 79,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-40 len;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling\")",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to vg.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen here",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen but period",
                "identical": false
            },
            {
                "k": 84,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to use for ns;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling wrapping forSerializers should never happen but...",
                "identical": false
            },
            {
                "k": 86,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never happen!",
                "identical": false
            },
            {
                "k": 87,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to axisNameLookup",
                "identical": false
            },
            {
                "k": 88,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to t is lower case",
                "identical": false
            },
            {
                "k": 89,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should check for ns;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "_rootNameLookup = src._rootNameLookup; //). src._rootNameLookup",
                "identical": false
            },
            {
                "k": 91,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need to do implicit renamercing should never gets here",
                "identical": false
            },
            {
                "k": 92,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling wrapping for ns;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "_rootNameLookup = src._rootNameLookup; // intersect as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never gets here",
                "identical": false
            },
            {
                "k": 95,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to useSerializers;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "_rootNameLookup = src._rootNameLookup; // intersect as per [JACKSON-407] -- allow disabling of current if it't really gets this right?",
                "identical": false
            },
            {
                "k": 97,
                "patch": "_rootNameLookup = src._rootNameLookup; // got as per [JACKSON-407] -- allow disabling of current if it't really need to do implicit renamercing should never gets this right?",
                "identical": false
            },
            {
                "k": 98,
                "patch": "_rootNameLookup = src._rootNameLookup; // need to invalidate if it't really gets this right?",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't do implicit renamercing should never happen from here",
                "identical": false
            },
            {
                "k": 100,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really need toSerializers;",
                "identical": false
            }
        ],
        "buggy_line": "_rootNameLookup = src._rootNameLookup;",
        "fixed_line": "_rootNameLookup = new XmlRootNameLookup();"
    },
    "Chart-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dataset = series;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dataset = dataset;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dataset = n;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dataset = DEFAULT_DOMAIN_PAINT;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dataset = DialShape;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dataset = DEFAULT_START_ANGLE;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dataset = DEFAULT_START_PAINT;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dataset = pie;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dataset =pieChart;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dataset = r;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dataset = label;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dataset = key;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dataset = itemCount;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dataset = item;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dataset = DEFAULT_OUTLINE_PAINT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dataset =Dataset;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dataset = DEFAULT_WALL_PAINT;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dataset = items;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dataset = DEFAULT_START_RADIUS;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dataset = blindScope;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dataset = seriesName;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dataset = clone;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dataset = last;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dataset = DEFAULT_PAINT;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dataset = category;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dataset = column;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dataset = axis;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dataset = DEFAULT_BASE_RADIUS;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dataset = series1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dataset = DEFAULT_FILE_PAINT;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dataset = originalPlot;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dataset =throwable;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dataset = DEFAULT_BASE_PAINT;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dataset = series; // add: we'll set on the dataset with 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dataset = DEFAULT_ITEM_PAINT;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dataset = DEFAULT_START_BASE_PAINT;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dataset = auto;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dataset =ataset;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dataset = firstPlot;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dataset = fill;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dataset = top;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dataset = DEFAULT_DOMAIN_RADIUS;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dataset = DEFAULT_'._PAINT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dataset = section;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dataset = DEFAULT_ian_PAINT;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dataset = series; // add the dataset with 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dataset = series; // add: we't the dataset with 0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dataset = DEFAULT_AUTO_PAINT;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dataset = DEFAULT_START_TO_PAINT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dataset = series; // add: we'll set flag",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dataset = DialWidth;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dataset = DEFAULT_START_OFFSET;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dataset = series; // the dataset with 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dataset = DEFAULT_RADIUS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dataset = 4, 4;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dataset = TimePeriod;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dataset =24;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dataset = s;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dataset = series; // may be negative",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dataset = DEFAULT_START_ epsilon;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dataset = DEFAULT_START_RADIOR;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dataset = DEFAULT_START_STROKE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dataset = DEFAULT_DIR_PAINT;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dataset = series; // reset: we't the dataset with 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dataset = series; // add the dataset with no mapping is passed in deliberately",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dataset = series; // s is negative",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dataset =getItemCount;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dataset =ately;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dataset = series; // reset: we't really gets this.dataset",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dataset = series; // add the dataset with no mapping is assigned to",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dataset = series; // reset: we't the dataset",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dataset =3;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dataset = series; // add: we't really gets this.dataset",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dataset = series; // add: we'll set on the dataset already calculated",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dataset = series; // add the dataset with: we'll set",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dataset = series; // reset: we'll set flag",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dataset = series; // s is valid for label",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dataset = series; // reset: we'll set",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dataset = src;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dataset = DEFAULT_BASE_RADIOR;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dataset = series; // the dataset with no mapping is passed in deliberately",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dataset = series; // permutation the dataset with 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dataset = series; // add the dataset with no mapping is negative",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dataset = DEFAULT_INSETS;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dataset = List;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dataset = value;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dataset = series; // the dataset with no mapping is assigned to",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dataset = series; // add the dataset with: we'll set flag",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dataset = series; // reset: we'll set on the dataset with 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dataset = series; // permutation the dataset with no mapping is assigned to",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dataset = series; // permutation the dataset with no mapping is passed in deliberately",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dataset = getFunction;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dataset = prefix;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dataset = series; // permutation the dataset to",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dataset =Histogram;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dataset = series; // add: we'll set on the dataset with 0",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dataset = series; // add: we't the dataset",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dataset = DEFAULT_START_SIZE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dataset = symbol;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dataset = formatter;",
                "identical": false
            }
        ],
        "buggy_line": "this.dataset = dataset;",
        "fixed_line": "setDataset(dataset);"
    },
    "Codec-3": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (index == 0 && contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (index == 0 && charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (index == 0 && !contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (index == value.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\")) {",
                "identical": true
            },
            {
                "k": 7,
                "patch": "} else if (index == 0 && index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (index == 0 && local.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (index == 0 &&contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // tool 'I' || contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (index == 0 &&START_contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (index == WHOLE_COLLECTION, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (index == 1 && contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // Michael",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (index == value.length() - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (index == source.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (index == 0 && position + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // 0 means 'I' || contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (index == 0 && name.charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (index == 0 && acc.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (index == 0 &&sign(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (index == 0 && interf(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (index == 0 && chunk.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index % 2 == 'I' || contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (index == 0 && getNext(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else ifBranch.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (index == 0 && getCount(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (index == 0 && chunk, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do not store 'I' || contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // MJACKSON-number, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (index == 0 &&Reference(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (Feature.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room for checks, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // very confusing, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (index == 0 &&>(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (contains(value, index + 1, 4, \"I\", \"IER\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else ifcontains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do we have room for checks, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do aJACKSON-number, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (index == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // MJACKSON enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // correction, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (result.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if hashCode = contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (entry.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (s.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (index == 0 &&Reference, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (index == value.lengthencapsulator || index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (index == 0 && \"IER\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (index == value.length, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (index == 0 && contains(value, 0, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else ifFalse = contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (index == WHOLE_COLLECTION, 0, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // very sub not be enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (index == 0 && key, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (index == 0 && contains(value, index + 1, 4, \"IER\")) { // Michael",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if getCount(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // tool 'I' || contains(value, index + 1, 4, \"ET\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (index == value.lengthLocal, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // M marker to be enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (index == 0 &&\" + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (index == value.length bytes, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can't be enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, 0, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (!contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (index == 0 && charAt(value, index + 1) != 'I') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (index == 0 && start + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if source.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // M OBJ \"IER\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // 0 means 'I' || contains(value, index + 1, 4, \"ET\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (index == 0 && contains(value, index + 1, 4, \"IER\")) { // M marker to be enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else ifCom || contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (contains(value, index + 1, 5, \"IER\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // very label not be enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // M OBJ \"VAN \", \"IER\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (index == 0 && Q, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index % 2 != 0 ? index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // tool 'I' || contains(value, index + 1, 2, \"ET\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // MJACKSON-314] \", \"IER\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (index == value.length + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // 0 means 'I",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (index == source.length - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (index == 0 && contains(value, index + 1, 5, \"IER\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // MJACKSON-314] 0, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if closurecontains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 2;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // 0 means 'I' || contains(value, index + 1, 2, \"ET\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can thisfor \"IER\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do we have name, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // tool 'I' || contains(value, index + 1, 4, \"AG\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (contains(value, index + 1, 4, \"IER\")) {",
        "fixed_line": "} else if (contains(value, index + 1, 3, \"IER\")) {"
    },
    "JacksonDatabind-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "sb.append(';",
                "identical": false
            },
            {
                "k": 2,
                "patch": "sb.append('; // if it's do sanity check",
                "identical": false
            },
            {
                "k": 3,
                "patch": "sb.append('; // sanity check",
                "identical": false
            },
            {
                "k": 4,
                "patch": "sb.append('_');",
                "identical": false
            },
            {
                "k": 5,
                "patch": "sb.append('; // @ true if it's do sanity check",
                "identical": false
            },
            {
                "k": 6,
                "patch": "sb.append('[';",
                "identical": false
            },
            {
                "k": 7,
                "patch": "sb.append('; // to read it's do sanity check",
                "identical": false
            },
            {
                "k": 8,
                "patch": "sb.append('$');",
                "identical": false
            },
            {
                "k": 9,
                "patch": "sb.append(' ? 1 : _class;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "sb.append('; // false if it's do sanity check",
                "identical": false
            },
            {
                "k": 11,
                "patch": "sb.append('; // property/ nulls as per it's do sanity check",
                "identical": false
            },
            {
                "k": 12,
                "patch": "sb.append('; // new: \"+sb, _class",
                "identical": false
            },
            {
                "k": 13,
                "patch": "sb.append('; // it's do sanity check",
                "identical": false
            },
            {
                "k": 14,
                "patch": "sb.append('; // 0 means should never occur: \"+sb, _class",
                "identical": false
            },
            {
                "k": 15,
                "patch": "sb.append('; // wrapper: \"+sb, _class",
                "identical": false
            },
            {
                "k": 16,
                "patch": "sb.append('_TYPE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "sb.append('; // 0 means 'raw'",
                "identical": false
            },
            {
                "k": 18,
                "patch": "sb.append('; //: \"+sb, _class",
                "identical": false
            },
            {
                "k": 19,
                "patch": "sb.append('; // if it's do implicit re-class",
                "identical": false
            },
            {
                "k": 20,
                "patch": "sb.append('$',');",
                "identical": false
            },
            {
                "k": 21,
                "patch": "sb.append('; // @ true if it's do implicit re-empty or: \"+sb, _class",
                "identical": false
            },
            {
                "k": 22,
                "patch": "sb.append('; // to be negative",
                "identical": false
            },
            {
                "k": 23,
                "patch": "sb.append('; // avail: \"+sb, _class",
                "identical": false
            },
            {
                "k": 24,
                "patch": "sb.append('; // to read it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 25,
                "patch": "sb.append('; //ANT: \"+sb, _class",
                "identical": false
            },
            {
                "k": 26,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re-public, sb",
                "identical": false
            },
            {
                "k": 27,
                "patch": "sb.append('; // @ true if it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 28,
                "patch": "sb.append('; // 0 means should never happen but...",
                "identical": false
            },
            {
                "k": 29,
                "patch": "sb.append('; // @ true if it's do implicit re-class",
                "identical": false
            },
            {
                "k": 30,
                "patch": "sb.append('; // if it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 31,
                "patch": "sb.append(_class;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "sb.append('; // @ true if it's do implicit re-sb, _class",
                "identical": false
            },
            {
                "k": 33,
                "patch": "sb.append('; // @ true if it's do implicit re-public: \"+sb, _class)",
                "identical": false
            },
            {
                "k": 34,
                "patch": "sb.append('8;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "sb.append('; // @ true if it's do implicit re-public: \"+sb, _class",
                "identical": false
            },
            {
                "k": 36,
                "patch": "sb.append('; // @ true if it's do implicit re-empty._class",
                "identical": false
            },
            {
                "k": 37,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 38,
                "patch": "sb.append(']');",
                "identical": false
            },
            {
                "k": 39,
                "patch": "sb.append('; // @ true if it's do implicit re-sb, _class)",
                "identical": false
            },
            {
                "k": 40,
                "patch": "sb.append('; // 0 means should never occur/after, sb",
                "identical": false
            },
            {
                "k": 41,
                "patch": "sb.append('; // no type: \"+sb do it's do sanity check",
                "identical": false
            },
            {
                "k": 42,
                "patch": "sb.append('; // @ true if it's do implicit re-empty or: \"+sb, _class)",
                "identical": false
            },
            {
                "k": 43,
                "patch": "sb.append('; // property/ nulls in, sb",
                "identical": false
            },
            {
                "k": 44,
                "patch": "sb.append('; // 0 means: \"+sb, _class",
                "identical": false
            },
            {
                "k": 45,
                "patch": "sb.append('; // unread: \"+sb, _class",
                "identical": false
            },
            {
                "k": 46,
                "patch": "sb.append('; // property on negative",
                "identical": false
            },
            {
                "k": 47,
                "patch": "sb.append('; // can't run type?",
                "identical": false
            },
            {
                "k": 48,
                "patch": "sb.append('; // to read it's do implicit re-sb, sb",
                "identical": false
            },
            {
                "k": 49,
                "patch": "sb.append('; // property/ nulls as per spec",
                "identical": false
            },
            {
                "k": 50,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re- ERROR",
                "identical": false
            },
            {
                "k": 51,
                "patch": "sb.append('; // property/ nulls as per [JACKSON-40 from now on class \"+_class",
                "identical": false
            },
            {
                "k": 52,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re-class",
                "identical": false
            },
            {
                "k": 53,
                "patch": "sb.append('; // if it.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "sb.append('; // @ true if it's do implicit re-empty at \"+sb, _class",
                "identical": false
            },
            {
                "k": 55,
                "patch": "sb.append('; // property/ nulls as per it's do _class",
                "identical": false
            },
            {
                "k": 56,
                "patch": "sb.append('; // should never happen but...",
                "identical": false
            },
            {
                "k": 57,
                "patch": "sb.append('; // if it's do implicit re-public, sb",
                "identical": false
            },
            {
                "k": 58,
                "patch": "sb.append('; // can't run type: \"+sb, _class",
                "identical": false
            },
            {
                "k": 59,
                "patch": "sb.append('; // property/ nulls as per [JACKSON-SIGNATURE, sb",
                "identical": false
            },
            {
                "k": 60,
                "patch": "sb.append('; // 0 means 'raw's do sanity check",
                "identical": false
            },
            {
                "k": 61,
                "patch": "sb.append('; // if it's do implicit re-meter: \"+sb, _class",
                "identical": false
            },
            {
                "k": 62,
                "patch": "sb.append('; // property: \"+_class.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re-empty._class",
                "identical": false
            },
            {
                "k": 64,
                "patch": "sb.append('; // property on the _class",
                "identical": false
            },
            {
                "k": 65,
                "patch": "sb.append('; // @ true if it's do _class",
                "identical": false
            },
            {
                "k": 66,
                "patch": "sb.append('; // no type: \"+sb do it's do implicit re-class",
                "identical": false
            },
            {
                "k": 67,
                "patch": "sb.append('; // if it's do implicit re-empty._class",
                "identical": false
            },
            {
                "k": 68,
                "patch": "sb.append('; // to read it's do label",
                "identical": false
            },
            {
                "k": 69,
                "patch": "sb.append('; // to read it's do implicit re- ERROR",
                "identical": false
            },
            {
                "k": 70,
                "patch": "sb.append('; // 0 means '\"+sb, sb",
                "identical": false
            },
            {
                "k": 71,
                "patch": "sb.append('; // if it's do label",
                "identical": false
            },
            {
                "k": 72,
                "patch": "sb.append('; // @ true if it's do implicit re-public, _class",
                "identical": false
            },
            {
                "k": 73,
                "patch": "sb.append('; // wrapper: \"+_class.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "sb.append('; // property on the current value",
                "identical": false
            },
            {
                "k": 75,
                "patch": "sb.append('; // property 'raw' nulls in, sb",
                "identical": false
            },
            {
                "k": 76,
                "patch": "sb.append('; // property/ nulls as per [JACKSON-40, sb",
                "identical": false
            },
            {
                "k": 77,
                "patch": "sb.append('; // @ true if it's do implicit re-empty?",
                "identical": false
            },
            {
                "k": 78,
                "patch": "sb.append('; // to read it's do implicit re-class",
                "identical": false
            },
            {
                "k": 79,
                "patch": "sb.append('; // to read it's do implicit re-empty._class",
                "identical": false
            },
            {
                "k": 80,
                "patch": "sb.append('; // property/ nulls as per [JACKSON-314] skip entries",
                "identical": false
            },
            {
                "k": 81,
                "patch": "sb.append('; // can't run type: we's do sanity check",
                "identical": false
            },
            {
                "k": 82,
                "patch": "sb.append('; // property/ nulls as per [JACKSON-emptySignature, sb",
                "identical": false
            },
            {
                "k": 83,
                "patch": "sb.append('****************');",
                "identical": false
            },
            {
                "k": 84,
                "patch": "sb.append('; // if it's do implicit re-empty or: \"+sb, _class",
                "identical": false
            },
            {
                "k": 85,
                "patch": "sb.append('; //: \"+_class.",
                "identical": false
            },
            {
                "k": 86,
                "patch": "sb.append(' ? 1 : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "sb.append('; // property/ nulls as per [JACKSON-40 from now on",
                "identical": false
            },
            {
                "k": 88,
                "patch": "sb.append('; // 0 means should never occur: _class",
                "identical": false
            },
            {
                "k": 89,
                "patch": "sb.append('; // if it's do implicit re-public: \"+sb, _class",
                "identical": false
            },
            {
                "k": 90,
                "patch": "sb.append('; // no type: \"+sb do it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 91,
                "patch": "sb.append('; // to read it's do implicit re-public, sb",
                "identical": false
            },
            {
                "k": 92,
                "patch": "sb.append('; // @ true if it's do implicit re-empty",
                "identical": false
            },
            {
                "k": 93,
                "patch": "sb.append('; // can't run typeSer or: \"+sb, _class",
                "identical": false
            },
            {
                "k": 94,
                "patch": "sb.append('; // if it's do _class",
                "identical": false
            },
            {
                "k": 95,
                "patch": "sb.append('; // @Externs do implicit re-parse",
                "identical": false
            },
            {
                "k": 96,
                "patch": "sb.append('; // to read it's do implicit re-empty?",
                "identical": false
            },
            {
                "k": 97,
                "patch": "sb.append('; //IO to do sanity check",
                "identical": false
            },
            {
                "k": 98,
                "patch": "sb.append('; // to read it's do _class",
                "identical": false
            },
            {
                "k": 99,
                "patch": "sb.append('; // @ true if it's do implicit re-empty at \"+sb, _class)",
                "identical": false
            },
            {
                "k": 100,
                "patch": "sb.append('_');",
                "identical": false
            }
        ],
        "buggy_line": "sb.append(';');",
        "fixed_line": "sb.append(\">;\");"
    },
    "Chart-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultStrings);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.time, RegularTimePeriod.DEFAULT_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultLocale);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.time = RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.timeZone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.time = RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultID_ZONE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultinternal;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch_ZONE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.time = time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(zone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.time = time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultIter",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCode;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultVEN);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultLocale;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCode);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.timeZone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultlier);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.time, RegularTimePeriod.DEFAULT_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault';",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch_ZONE);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSymbols;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultString;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.time, RegularTimePeriod.DEFAULT_PER_DAY, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, instant;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultByte;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultos);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultToken);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultPLETS_PER_DAY);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDefault;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultToken;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDeserializer);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultWAYS;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultlt;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.time, RegularTimePeriod_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault space);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultQualified;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() / 2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultID_ZONE);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultNEW_ZONE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultFILE);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultIter);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultAdapter;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault break;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDESC);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this(zone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultUSE_ZONE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultHOUS);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultpc);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultlazz;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultIter;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultNEW_ZONE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultFalse;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultRoot);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault magic;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDelta;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultWAYS);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault (8;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultters);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault7,",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault stack);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault CONST_ZONE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultRed;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultStrings;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.time, RegularTimePeriod.DEFAULT_VALUE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultAdapter);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultARY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault positive exponent);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault minute;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDir;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDateTimeConstants.getDefault());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault safe);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.timeZone, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultstring;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultBYTES;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault CONST_ZONE);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultARY_ZONE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.timeZone = RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDateTimeConstants.getDefault;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultlt);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultvp;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault safe;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultClosing;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultlier;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.time, RegularTimePeriod.class, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(pt, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.timeZone, Locale.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault buffer;",
                "identical": false
            }
        ],
        "buggy_line": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "fixed_line": "this(time, zone, Locale.getDefault());"
    },
    "Jsoup-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (variable != \"b\", 0,gs) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (arg.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (variable != \"b\", Variable, \"link\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (zone.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (osname\", \"command\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (childCount == 2) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (config.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (key.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (osname\", \"command\", Token.baseShapes, \"link\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (variable != \"b\", 327.length\", \"title\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if ( decl.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (stackMap(\"b\", \"Z\") {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (variable !=(\"b\", Variable, \"link\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (osname\", \"command\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (variable != \"b\", h\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (variable !=(\"b\", 0,gs) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (osname\", \"CI\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if ( Locale.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (stack.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (variableName\", \"CI\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (variable(\"b\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (arg.base\", \"Z\") {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (variable || \"base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (variable != \"b\", 327.length\", \"link\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (variable != \"b\", EOF_CHAR\", \"title\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (variableName\", \"command\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (variable(\"b\", \"Z\") {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (variable || \"base\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (variable != \"b\", Variable, \"BOOLEAN\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (variable !=(\"b\", \"Z\") {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if ( tag.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (stackMap !=(\"b\", \"Z\") {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (type\", \"CI\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (osname\", \"command\", ret, \"g\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (variable != \"b\", Variable, \"Z\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (osname\", \"b\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (variable != \"b\", text, \"link\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (variable !=(\"base\", name\", \"Z\") {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (variable != \"b\", 327.length\", \"D\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (variable !=(\"b\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (variable != \"b\", 327.length\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (List.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if ( NodeUtil.base\", \"Z\") {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if ( zone != 'basefont\", \"link\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (stack.base(\"b\", \" + h\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (Collection(\"b\", \"Z\") {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (Deserializer.base(\"b\", \" + h\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (osname\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if ( zone != 'basefont\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (arg.base(\"b\", \" + h\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (key.base\", \"Z\") {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (zone.base\", \"Z\") {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (Deserializer.base(\"b\", \" + text\", \"]\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (Collection(\"b\", \" + fileLevel\", in);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (variable !=(\"base\", \"Z\",style\", in);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (stackMap(\"b\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (variable != \"b\", 327.length\", \"X\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (variable != \"b\", EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (osname\", \"command\", ret, \"Z\")\";",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (variable(\"base\", \"Z\",style\", in);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (variable !=(\" arr.base\", \"Z\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (osname\", \"command\",\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (osname\", \"command\", ret, \"Four\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (stack.base(\"b\", \" + fileLevel\", in);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (osname\", \"command\", strLen) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (variable !=(\" arr.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (variable !=(\" arr.base\", \"Z\",style\", in);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (osname\", \"command\", ret, \"Object\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (variable != \"b\", 327.length\", \"D) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (variable != \"b\", 327.length\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (variable !=(\"b\", \"Z\",style\", in);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (osname\", \"command\", ret, \"title\", chain\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (js(\"b\", \" + file\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (variable !=(\" arr.base\", \"Z\", ret, \"z\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if ( zone !=(\"base\", \"Z\",style\", in);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (arg != 1) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (variable != \"b\", 327.base\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (variable !=(\"base\", \"Z\",style\",bias {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (Deserializer.base(\"b\", \" + text\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (osname\", \"command\", ret, \"input\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (variableName\", \"CI\", ret, \"title\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (variable !=(\" arr.base\", \"Z\",style\",List) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (variable(\"base\", \"Z\",style\",bias {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (osname\", \"command\", Token.baseY\", \"y\", \"undefined\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (stackMap !=(\"base\", \"Z\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (osname\", \"command\", Token.baseY\", \"link\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (variable !=(\" arr.base\", \"Z\",style\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (variable(\"base\", \"Z\",style\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (variable(\"base\", \"Z\",style\", ret, \" + cond.ON\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (osname\", \"command\", Token.baseY\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (variable !=(\" arr.base\", name\", \"Z\") {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (js(\"b\", \" + fileLevel\", in);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (variable != \"b\", 327.length\", \"Cannot\";",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (variable !=(\" arr.base\", \"Z\",style\",bias {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (variable !=(\" arr.base\", \"Z\", ret, \"g\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (osname\", \"command\", ret, \" 14\", \"title\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (variable != \"b\", 327.base\", \"Z\") {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (osname\", \"command\", ret, \"Object\", \"title\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (Deserializer.base(\"b\", \" + text\", \"link\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (osname\", \"command\", ret, \"title\", Token.base\", \"Z\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {",
        "fixed_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
    },
    "JacksonDatabind-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "return ctxt;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return t;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return defaultType;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return deser;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return actualType;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return .deser;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return NOT_A_CONSTRUCTOR;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return VALUE_TYPE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _defaultValue;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return NOT_A_NUMBER;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return ser;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of s",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return NOT_A_NAME;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _deser;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametrized, can't do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t is negative",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return DEFAULT_ROOT_VALUE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of s",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value set on",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return result;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value first char",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of B",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_DOCUMENT+\")",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_MISSING",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_VALUE",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current type",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current instruction",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametrized, can't do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_ATTRIBUTE_VALUE",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value was copied from here",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value was copied from now",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't run but do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t is - _valueType",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of64_VALUE_NUMBER_FLOAT",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return ctxt; // can't really modify it's do implicit re-desercing should never happen?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return NONE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t is u",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value set on theDeserializer?",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of \"+ctxt",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value set on negative",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t is this right?",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return NO_VALUE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_DOCUMENT to be parametri!",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of \"+ctxt, can't be parametri!",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return ret;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of triplets",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of MAX_VALUE_NUMBER_FLOAT",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current if it't really need to force parsing",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return NOT_A_ITEM_ARRAY;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current if it't really modify from here",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value with 0",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _valueType;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of char",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value set on the default?",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return NOT_A_ URL_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-parse",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t?",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value set on the default name to force parsing",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t on the default?",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return NOT_A_TYPE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current value be parametri?",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of64_VALUE_COMMA, NOT",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_TABLE_SIZE",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value set",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current value set on theDeserializer.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current instruction",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of t",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current value set on the pre, can't be parametri?",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t is data at begin/allowed but...",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value set on the t is negative",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current if it't be parametri?",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current if it't really modify",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t isd",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametrized, can't run but do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current typeSerializers",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of \"+ctxt, can't be parametri?",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return NO_EMBEDDED_TYPE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_TABLE_DOCUMENT+\")",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t is fraction",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_DOCUMENT to be parametri?",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_parsingContext",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current value set on theDeserializer't really modify from here",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value set on the default",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of \"+ctxt, must be parametri!",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current value set on the pre, NOT",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of current at begin/allowed but...",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t on theDeserializer?",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of t on the pre, NOT",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re- elim as per [JACKSON-407] -- allow disabling of current right?",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return ctxt; // can't really modify it's do implicit re-deser as per [JACKSON-407] -- allow disabling of \"+_COMMA, NOT",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "return NullifyingDeserializer.instance;"
    },
    "Math-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "return FastMath.pow * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return FastMath.pow * HOUR.PI / FOURR2_LAST;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return FastMath.pow(2 * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim / 7;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return FastMath.pow * HOUR.PI / r * 1000;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return FastMath.pow * HOUR.PI / 3.0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 3.0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 7;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return FastMath.pow(2 * HOUR.PI, - ll * 2) / 7;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 31 * dim / 7;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return FastMath.pow * HOUR.PI /HasSideEffects * 1000;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return FastMath.pow(10, -(2 * dim +Altern * 2) / 7;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 7 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return FastMath.pow(10, - language * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return FastMath.pow * HOUR.PI, - r * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return FastMath.pow(2 * HOUR.PI, -oo * 2) / 7;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * 2) / 7;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return FastMath.pow(2 * HOUR.PI, -oo * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return FastMath.pow(2 *tem.PI / 7;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim / 3.0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return FastMath.pow(2 * lowest, - 60 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * 2) / 7;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return FastMath.pow(10, -(2 * fraction.PI / 7;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * 2) / 7;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r / 2) * 1000;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 31 * dim / 3.0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return FastMath.pow(2 * HOUR.PI, - whole * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return FastMath.pow(2 * keyType, - 60 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return FastMath.pow(2 * HOUR.PI, -mk / 2) * dim;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return FastMath.pow(10, -(2 * dim +Altern * 2) * 1000;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Gap * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return FastMath.pow(2 * HOUR.PI, -y * 2) / 7;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return FastMath.pow * HOUR.PI, -oo * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * dim / 7;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return FastMath.pow(2 * level / 7;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return FastMath.pow(10, -log10 * s) / 7;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 31 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return FastMath.pow(2 * fraction.length, 2) / 7;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return FastMath.pow * HOUR.PI / FOURR_PER_DAY;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return FastMath.pow(2 * HOUR.PI, - m * 2) / 7;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim + 2) * 1000;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return FastMath.pow(2 * lowest, - 60 * dim / 3.0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r / 2) * dim;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return FastMath.pow(2 * HOUR.PI, -mk / 2) * dim + 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Gap * 2) / 7;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return FastMath.pow(2 *tem.PI / 3.0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return FastMath.pow * HOUR.PI / hp;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return FastMath.pow(2 * HOUR.PI, - Calendar.PI / 7;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return FastMath.pow(2 * HOUR.PI, - language * dim / 7;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return FastMath.pow(2 * HOUR.PI, - language * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return FastMath.pow(10, -(2 * s) / 7;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 1) / 7;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return FastMath.pow * HOUR.PI / FOURR_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim / s;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return FastMath.pow * HOUR.PI / 180 * 1000;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) *ERROR;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return FastMath.pow(2 * HOUR.PI, -oo * dim / 7;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return FastMath.pow(2 * HOUR.PI, -trah / 7;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return FastMath.pow * HOUR.PI, -Assignments * 2) / 7;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return FastMath.pow(10, -(2 * dim + 1) / s;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 7;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * 1000;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return FastMath.pow(2 * HOUR.PI, -idx * dim + 2) / 7;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 8) * dim;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 7 * dim / 3.0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return FastMath.pow(10, -(2 * dim +Altern * 2) / s;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * 4;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return FastMath.pow * HOUR.PI, -Assignments * dim / 7;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return FastMath.pow(2 * HOUR.PI / 3.0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return FastMath.pow(2 * HOUR.PI, -oo * dim / 3.0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return FastMath.pow * HOUR.PI / denominator;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return FastMath.pow * level / 7;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return FastMath.pow * HOUR.PI / FOURR_PER_SECOND;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return FastMath.pow(2 * HOUR.PI, -rounding / 7;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return FastMath.pow(2 * fraction.PI / 7;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return FastMath.pow(2 * lowest, - 60 * dim / 7;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return FastMath.pow(2 * HOUR.PI, - invoke / 7;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return FastMath.pow * HOUR.PI, -oo * dim + 2) / 2;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return FastMath.pow(2 * HOUR.PI, - INVALID * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * s;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return FastMath.pow * lowest, - Integer.MAX_VALUE / 7;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return FastMath.pow(2 * maxWidth / 7;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return FastMath.pow(10, -(2 * dim +Altern * 2) / 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return FastMath.pow(2 * HOUR.PI, - whole * dim / 7;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return FastMath.pow(2 * HOUR.PI, - Calendar.PI / 3.0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return FastMath.pow(2 * HOUR.PI, - INVALID * dim / 3.0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return FastMath.pow(2 * HOUR.PI, - sw * dim / 7;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return FastMath.pow(2 * HOUR.PI, -oo * 2) / 2;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return FastMath.pow *corre.PI / 7;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 2) * s;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 3.0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return FastMath.pow * HOUR.PI, -oo * dim / 7;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return FastMath.pow * HOUR.PI /HasSideEffects * hours;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return FastMath.pow * HOUR.PI, -oo * dim / 3.0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return FastMath.pow * HOUR.PI / sxx, - 2) * 1000;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return FastMath.pow(2 * HOUR.PI /HasSideEffects * 1000;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return FastMath.pow(2 * HOUR.PI, -)),dim) / 2) * dim + 1;",
                "identical": false
            }
        ],
        "buggy_line": "return FastMath.pow(2 * FastMath.PI, -dim / 2) *",
        "fixed_line": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *"
    },
    "Time-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "instantLocal = chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "instantLocal = chrono, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "instantLocal, chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "instantLocal = chrono, zone, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "instantLocal, chrono, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "instantLocal, chrono, position);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "instantLocal = chrono, position, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "instantLocal, chrono,Offset, saveMillis);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "instantLocal, chrono, bucket, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "instantLocal = chrono, zone, iPivotYear);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "instantLocal = chrono, ctxt, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "instantLocal = chrono, next, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "instantLocal, chrono,Start, iPivotYear);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "instantLocal, chrono,Offset, parsedChrono);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "instantLocal = chrono, ctxt, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "instantLocal = chrono, elements, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "instantLocal = chrono,MarkerYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "instantLocal = chrono,[1], iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "instantLocal = chrono, zone, iLocale, locale);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "instantLocal, chrono, zone, iLocale);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "instantLocal = chrono,OTE, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "instantLocal, chrono, bucket, iLocale);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "instantLocal = chrono, da, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "instantLocal = chrono, 0.5, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "instantLocal, chrono, bucket = chrono;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "instantLocal, chrono,Offset, parsedZone);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "instantLocal = chrono,[4], iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "instantLocal = chrono, type, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "instantLocal = chrono,Offset, saveMillis);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "instantLocal = chrono, zone, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "instantLocal, chrono, dayOfMonth, iLocale);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "instantLocal = chrono, zone, iLocale;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "instantLocal = chrono,ck, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "instantLocal, chrono, displayOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "instantLocal = chrono, parsedLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "instantLocal = chrono, position, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "instantLocal = chrono, 0.5, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "instantLocal = chrono, standardOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "instantLocal, chrono, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "instantLocal = chrono, bucket, iLocale, locale);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "instantLocal = chrono, getMillis, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "instantLocal = chrono,Order, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "instantLocal, chrono, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "instantLocal, chrono, bucket, iOffset, parsedChrono);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "instantLocal = chrono, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "instantLocal = chrono,Offset, parsedChrono);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "instantLocal, chrono, dayOfMonth, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "instantLocal, chrono, bucket, iPivotYear);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "instantLocal = chrono,Start, iPivotYear);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "instantLocal = chrono, zone, iLocale, 0);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "instantLocal, chrono, bucket, iOffset, parsedZone);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "instantLocal, chrono, zone);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "instantLocal, chrono,JLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "instantLocal = chrono, position, iPivotYear);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "instantLocal, chrono, dayOfMonth, iLocale;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "instantLocal = chrono, position, iOffset, 20;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "instantLocal, chrono, iLocale, locale);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "instantLocal = chrono, position, iStandardOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "instantLocal, chrono, parsedOffset, iPivotYear);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "instantLocal = chrono, 0.0Year, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "instantLocal = chrono,MarkerYear, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "instantLocal, chrono, bucket, iLocale, locale);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "instantLocal = chrono, zone, iLocale, dayOfWeek);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "instantLocal = chrono,Fixing, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "instantLocal, chrono, bucket, iOffset, parsedMixLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "instantLocal = chrono, position, iOffset);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "instantLocal, chrono, zone, iLocale;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "instantLocal, chrono,[1] = chrono;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "instantLocal = chrono, iLocale, locale);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "instantLocal, chrono, bucket, iOffset, parsedDateTimeZone);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "instantLocal = chrono, bucket, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "instantLocal = chrono,Offset, parsedZone;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "instantLocal = chrono, millis, bucket, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "instantLocal, chrono, iOffset, parsedChrono);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "instantLocal = chrono, getMillis, iPivotYear);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "instantLocal = chrono, 0.0Year, iLocale);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "instantLocal = chrono, bucket, iPivotYear, iLocale);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "instantLocal = chrono, ctxt, chrono, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "instantLocal, chrono, zone, iPivotYear);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "instantLocal, chrono, iOffset, parsedZone);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "instantLocal = chrono, zone, iLocale);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "instantLocal = chrono, position, iLocale;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "instantLocal = chrono, millis, bucket, iLocale);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "instantLocal, chrono, 0.5);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "instantLocal = chrono, position, iOffset, parsedChrono);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "instantLocal, chrono,Offset, 20;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "instantLocal = chrono, zone, iLocale, linenoOffset);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "instantLocal = chrono, bucket, iPivotYear, iLocale;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "instantLocal = chrono, bucket, iLocale, dayOfMonth);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "instantLocal = chrono, qOffset, parsedChrono);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "instantLocal, chrono, millis, bucket = chrono);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "instantLocal, chrono, bucket = chrono);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "instantLocal, chrono, bucket, iLocale;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "instantLocal = chrono, ctxt, chrono, iLocale);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "instantLocal = chrono, position, iLocale);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "instantLocal, chrono,Offset, parsedZone;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "instantLocal, chrono, zone;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "instantLocal = chrono, zone, iOffset, 20;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "instantLocal = chrono, startMillis, iOffset);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "instantLocal, chrono, bucket, iMaxYear);",
                "identical": false
            }
        ],
        "buggy_line": "instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);",
        "fixed_line": "instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));"
    },
    "Collections-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "private Object readResolve() {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private Object readResolveS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private Object readResolveSing {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private Object readResolveS = _hashSeed;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private Object readResolveJsDoc = _hashSeed;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private Object readResolveS_hours;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private Object readResolveS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private Object readResolveSing { // no longer belongs to an InsnList",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private Object readResolveS = this.keys;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private Object readResolveloader;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private Object readResolveS = 31;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private Object readResolveS_FORMAT_EFF;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private Object readResolveS = 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private Object readResolveJsDoc;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private Object readResolveSESTIMATE_MATCH;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private Object readResolveS_WITHOUT_CONSTRUCTOR;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private Object readResolveS_IMATE_MATCH;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private Object readResolveS = _bufferedEnd;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private Object readResolveS_1) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private Object readResolveS = systemHashCode;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private Object readResolve() { keys.length; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private Object readResolveS = 6;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private Object readResolveS = systemMoments;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private Object readResolve() {return contents.length; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private Object readResolveS_1) { // no longer belongs to an InsnList",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private Object readResolveS_IMATE_EMBEDDED;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private Object readResolvePE() {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private Object readResolveS = dst;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private Object readResolveloader = _hashSeed;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private Object readResolveSavings;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private Object readResolveTOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private Object readResolve() { return _currBlock; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private Object readResolveSESTIMATE_EFFECTS;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private Object readResolveS = _beanProperties;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private Object readResolveS_CONSTRUCTOR;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private Object readResolveS_STACK_SIZE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private Object readResolve() { this.keys; }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private Object readResolveS = 17;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private Object readResolveTOTYPE_AND_EFF;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private Object readResolveSESTIMATE_MATCHEFFECTS;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private Object readResolveJsDoc = 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private Object readResolve() { return _currBlock;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private Object readResolveSESTIMATE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private Object readResolveS;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private Object readResolveView {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private Object readResolveSESTIMATE_MATCHEFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private Object readResolveS_BUCKET;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private Object readResolveSESTIMATE_EMBEDDED;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private Object readResolve.keys;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private Object readResolve**;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private Object readResolveS_IMATE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private Object readResolveSESTIMATE_MATCHEFFECTS_ARRAY;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private Object readResolveS = total;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private Object readResolve() { this.count; }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private Object readResolveS = system;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private Object readResolveS_STATIC;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private Object readResolveS_1) { // no longer belongs to an Insn",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private Object readResolveS_PER_STRACT_EFFECTS;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private Object readResolveS_FORMAT_EMBEDDED;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private Object readResolveSize {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private Object readResolveSESTIMATE_MATCHER;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private Object readResolveS = _bufferedEntryCount;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_MATCH;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private Object readResolveS = _bufferedStart;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private Object readResolveSESTIMATE_MATCHEFFECTS) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private Object readResolveTOTYPE_ESCAPE_OBJECT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private Object readResolveS_FORMAT_ESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private Object readResolveS_CheckBox;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private Object readResolveJsDoc = systemMoments;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private Object readResolve() { keys; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private Object readResolveSing { // no longer belongs to an Inates?",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private Object readResolveJsDoc = system;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private Object readResolveS_QUOTE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private Object readResolveSUNDAY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private Object readResolveS_IMATE_EFFECTS;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_ARRAY;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private Object readResolveS = _bufferedEnd-3;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private Object readResolve() { return this. systemcalculated; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private Object readResolveS = _currBlock;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private Object readResolve > 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private Object readResolveS = 9;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private Object readResolveS_FORMAT_ARRAY;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private Object readResolveS_PER_STRACT_EFFECTS) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private Object readResolveS = systemEnd-3;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private Object readResolveretval = _hashSeed;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private Object readResolveS = systemEnd;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private Object readResolve() { return _hashSeed;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_PER_SIZE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private Object readResolveSESTIMATE_EFFECTS.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private Object readResolveTOTYPE_AND_ESCAPE_CHARACTER;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private Object readResolveJsDoc = systemHashCode;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private Object readResolveTOTYPE_ESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private Object readResolveSESTIMATE_MATCHEFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private Object readResolveS_WITHOUT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private Object readResolveStep = _hashSeed;",
                "identical": false
            }
        ],
        "buggy_line": "private Object readResolve() {",
        "fixed_line": "protected Object readResolve() {"
    },
    "JacksonCore-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (_currentSegment == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (_currentSegment != null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (_currentSegment;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (_currentSegment != N) return _currentSegment;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (_currentSegment != NR_BIGDECIMAL) return _currentSegment;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (_currentSegment != N) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (_currentSegment != NR_LONG) return _currentSegment;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (_currentSegment == NR_BIGDECIMAL) return _currentSegment;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (_currentSegment != _currentSegment.length) return _currentSegment;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (_currentSegment == NR_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_currentSegment.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (_currentSegment != null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (_currentSegment != NR_DOUBLE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_currentSegment != NR_BIGINT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (_currentSegment == NR_LONG) return _currentSegment;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_currentSegment == NR_UNKNOWN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (_currentSegment != NR_UNKNOWN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (_currentSegment != NR_K) return _currentSegment;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (_inputStart >= 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (_currentSegment != XML_END_ELEMENT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (_currentSegment == NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_currentSegment != _currentSegment.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_currentSegment != NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (_currentSegment == N) return _currentSegment;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (_currentSegment != N+1) return _currentSegment;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (_currentSegment == NR_NUMBER_FLOAT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_currentSegment = _currentSegment;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (_currentSegment == NR_STRING) return _currentSegment;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_currentSegment == NR_DOUBLE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (_currentSegment != NR_count) return _currentSegment;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (_currentSegment == NR_MONTH) return _currentSegment;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (_currentSegment != NR_NUMBER_FLOAT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (_currentSegment != NR_STRING) return _currentSegment;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_currentSegment != NR_SE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_currentSegment == NR_K) return _currentSegment;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (_currentSegment == NR_ segment) return _currentSegment;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (_currentSegment != NR_MONTH) return _currentSegment;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (_currentSegment == NR_BIGINT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (_currentSegment != NLen) return _currentSegment;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (_currentSegment != N -= _currentSegment.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (_currentSegment != NR_T) return _currentSegment;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_currentSegment != NR_ELEMENT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (_currentSegment == NR_hasDigits) return _currentSegment;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (_currentSegment == null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (_currentSegment != NLen) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (_currentSegment != NR_ base) return _currentSegment;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (_currentSegment == NR_NUMBER_INT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_inputStart >= 0) return _currentSegment;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (_currentSegment != NR_serial) return _currentSegment;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (_currentSegment == NR_MAX_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_currentSegment != NR_ segment) return _currentSegment;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (_currentSegment != NR_BIGDECIMAL) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_currentSegment == NR_HOUR) return _currentSegment;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (_currentSegment != NR_segmentSize) return _currentSegment;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (_currentSegment == NR_END) return _currentSegment;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (_currentSegment != N currentIndex) return _currentSegment;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (_currentSegment == NR_OTTOM) return _currentSegment;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (_currentSegment == NR_SEGMENT_LEN) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (_currentSegment != NR_map) return _currentSegment;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) { // yup, _currentSegment; can't be enough...",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (_currentSegment == NR_elems) return _currentSegment;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (_currentSegment != NR_NUMBER_INT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_currentSegment != NR_elems) return _currentSegment;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (_currentSegment != NR_..) return _currentSegment;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_currentSegment != NR_HOUR) return _currentSegment;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_currentSegment != NR_INT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_currentSegment == NR_BIGDECIMAL) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (_currentSegment != NR_OTTOM) return _currentSegment;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_currentSegment == NR_ contexts) return _currentSegment;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (_currentSegment == _currentSegment.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (_currentSegment != TYPE_ROOT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (_currentSegment != NR_BIGINT;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_currentSegment != NR_FLOAT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) { // yup, _currentSegment;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (_currentSegment != NR_LONG) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (_currentSegment != NR_Source) return _currentSegment;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) { // yup, _currentSegment; can't be enough space",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (_currentSegment == tokenLen) return _currentSegment;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (_currentSegment == NR_T) return _currentSegment;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (_currentSegment == NR_SE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (_currentSegment != NR_MAX_VALUE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (_currentSegment == value) return _currentSegment;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (_currentSegment != N) return _currentSegment.value;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (_currentSegment != NExpression) return _currentSegment;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (_currentSegment != NR_count) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) { // yup, _currentSegment; }",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) { // yup, can't be enough...",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (_currentSegment == NR_BIGDECIMAL) { // yup, _currentSegment.length; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_currentSegment != NR_ATTRIBUTE_VALUE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (_currentSegment != NR_ATTRIBUTE_NAME) return _currentSegment;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (_currentSegment ==negative) return _currentSegment;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (_currentSegment == NR_segmentSize) return _currentSegment;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (_currentSegment != N+1) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (_currentSegment != NR_BIGINT) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (_segmentPtr >= _currentSegment.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) { // yup, _currentSegment; return resultArray.length; }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) { // yup, _currentSegment.length; }",
                "identical": false
            }
        ],
        "buggy_line": "if (!_hasSegments)  return _currentSegment;",
        "fixed_line": "if (!_hasSegments && _currentSegment != null)  return _currentSegment;"
    },
    "Chart-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "PathIterator iterator2 = p1.getPathIterator;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null);",
                "identical": true
            },
            {
                "k": 4,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null2);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null)];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "PathIterator iterator2 = p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null){",
                "identical": false
            },
            {
                "k": 10,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.value);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.parent);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.oldName);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.parent)];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.n);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "PathIterator iterator2 = p1.getPathIterator();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, d2);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.map);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.show);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "PathIterator iterator2 = p2.getPathIterator(nullSafe);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null)];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.os);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullDone);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "PathIterator iterator2 = p1.getPathIteratorIfNull;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "PathIterator iterator2 = p1.getPathIterator it2.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullText);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.name);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.uri);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PathIterator iterator2 = p1.getPathIterator m2.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nulls2);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null) + 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON_WITHOUT_TYPE);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullhex2);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.is);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.map;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.SECOND);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.relativePosition);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PathIterator iterator2 = p1.getPathIterator.null;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.KEY);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "PathIterator iterator2 = p1.getPathIteratorIf];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2. occupied);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON_FLAG;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null){",
                "identical": false
            },
            {
                "k": 48,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON_Winding);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.externs);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null2);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.Properties);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.parent;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.field);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.IN);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullH;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PathIterator iterator2 = p1.getPathIteratorIndex;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.m2);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.Boolean);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.relativePosition;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.newName);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.deps;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.IN;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.superName);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2. children);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.IN)];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.prop);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.'.);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullX1, p2);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null2, d2);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.])",
                "identical": false
            },
            {
                "k": 74,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.drawOutlier);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.timeZone);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null + 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.Variable2);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullDone;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.Increment);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON_Wanted);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON_WCHECK);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSer);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.Block);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null, p1.getPath);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.sig);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.Alpha);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.deps);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.inator);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.instant);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.able);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2. isVisible);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null, p2);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.field;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null != p2.map;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON_FLAG];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.rt);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.S);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2. year);",
                "identical": false
            }
        ],
        "buggy_line": "PathIterator iterator2 = p1.getPathIterator(null);",
        "fixed_line": "PathIterator iterator2 = p2.getPathIterator(null);"
    },
    "Math-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (lhs > rhs, 0, 1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (lhs > rhs, 0, epsilon) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (lhs > rhs, 0, epsilon = 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (MathUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (lhs.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (nextUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (lhs > rhs, 1, i) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (this.MathUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (lhs, 1, rhs.length - 1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (nextUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (lhs > rhs, 1, rhs.length) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (MathUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (lhs > rhs, 0, epsilon = table.length) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (lhs > rhs.length) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (lhs.compareTo(ar, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (m.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (lhs.compareTo(rhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (lhs.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (MathUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (BagUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (this.MathUtils.compareTo(min, 1, subinterval) > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (MathUtils.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) % 2 == 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (nextUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (MathUtils.compareTo(lhs, 1, rhs) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (fixed.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (frame.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) % 2 == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (lhs > rhs, 1, subinterval) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (this.MathUtils.compareTo(v, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (this.MathUtils.compareTo(max, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (this.MathUtils.compareTo(ar, 0, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (m.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) % max;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (lhs.compareTo(rhs, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (m.compareTo(lhs, 0, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (lhs.compareTo(loop, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (lhs > rhs, 0, epsilon = table.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (lhs.compareTo(ar, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (++i < min) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (this.MathUtils.compareTo(difference, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (this.MathUtils.compareTo(max, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (this.MathUtils.compareTo(g, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (this.MathUtils.compareTo(df, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (this.MathUtils.compareTo(min, 1, tz) > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (this.MathUtils.compareTo(min, 1, tr) > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (this.MathUtils.compareTo(min, 1, runningOrder) > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (lhs > rhs, 1, runningOrder.length) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (fixed.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (this.MathUtils.compareTo(min, 1, i) == 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (fixed.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (lhs > rhs, 1, table.length) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (this.MathUtils.compareTo(i, 1, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (lhs > rhs) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( this.MathUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (nextUtils.compareTo(min, 1, i) == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - min;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (lhs > rhs, 0, i) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (lhs > rhs, 0, epsilon.length) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (this.MathUtils.compareTo(min, 0, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (MathUtils.compareTo(min, 1, rhs) % 2 == 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) % 100;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (this.MathUtils.compareTo(lhs, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (lhs > rhs, 1, tr.length) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (lhs.compareTo(S, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (lhs > rhs, 1, e.i) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (lu == entry.Math.min(lhs, rhs) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (this.MathUtils.compareTo(min, 1, amount - 1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (lhs.compareTo(rhs, 0, rhs.length - 1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (CollectionUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (this.MathUtils.compareTo(min, 1, linePos) > 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (lhs.compareTo(S, 0, rhs.length - 1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (lhs > rhs, 0, fraction.length) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (classes.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (this.MathUtils.compareTo(min, 1, subroutines) == 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (MathUtils.compareTo(min, 1, i) == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) % max;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (BagUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (this.MathUtils.compareTo(S, 0, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (MathUtils.compareTo(min, 1, rhs) != 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (this.MathUtils.compareTo(min, 1, >= 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (lhs > rhs, 1, tz.length) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) % 100;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( Double.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (this.MathUtils.compareTo(min, 1, subinterval) == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (lhs.compareTo(ar, 0, rhs.length) == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (lhs > rhs, 1, fraction.length) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (m.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( fraction.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (this.MathUtils.compareTo(min, 1, amount) > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (formatter.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (lhs > rhs, 1, current.length) {",
                "identical": false
            }
        ],
        "buggy_line": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
        "fixed_line": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {"
    },
    "JacksonCore-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i <= maxCode) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i < maxCode) {",
                "identical": true
            },
            {
                "k": 3,
                "patch": "if (i <= maxCode) { // yes, but do we have room for output",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (i <= maxCode) break;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (i <= maxCode) { // yes, but do we have room for output?",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i <= maxCode) { // yes, match!",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i <= maxCode) { // yes, but do implicit re-parse",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i <= maxCode) { // yes, but do a number",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i <= maxCode) { // yes, let's do implicit re-parse",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i <= maxCode && i < maxCode) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i <= maxCode) { // yes, but do we have room for now",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i <= maxCode) { // yes, match",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i == maxCode) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i <= maxCode) { // yes, but do we't really need 6",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i <= maxCode && i != 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i <= maxCode) { // yes, but do we't really need the end?",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i <= maxCode) { // yes, but do we have room forint i; i",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer[i];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer; i",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputPtr",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i <= maxCode) { // yes, but do we didn't really need 6",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i <= maxCode) { // reached the end, fair and square?",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next; i",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (i <= maxCode) { // yes, but do we have room for impls; i",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i <= maxCode) { // yes, match...",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i <= maxCode) { // yes, but do a non-parse",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i <= maxCode) { // yes, but do we have room for full triplets",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i <= maxCode) { // yes, but do a non-input",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i <= maxCode) { // yes, fraction",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i <= maxCode) { // yes, match or need to do implicit re-parse",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i <= maxCode) { // yes, but do we have room the end?",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i <= maxCode) { // yes, but do we't really need 6 bytes",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i < maxCode) { // identifier, and not a number",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i <= maxCode) { // yes, but do we't really need a number",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i <= maxCode) { // yes, but do not a number",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i <= maxCode) { // yes, but do we have room for n-int i; i",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i <= maxCode) { // yes,buffer[_inputPtr++]",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i <= maxCode) { // yes, but do we have room for 'raw't really modify; i",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i <= maxCode) { // yes, but do we have room for full",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i <= maxCode) { // yes,buffer[_inputPtr",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i <= maxCode) { // yes, but do implicit re- StringBuffer",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next one zero",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i <= maxCode) { // yes, but do we have room forNewLine; i",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i <= maxCode) { // yes, but do we have room for buffer",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer[i]",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i <= maxCode) { // yes, but do we have room for 'raw't really need 6",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i <= maxCode) { // yes, but do implicit re-input",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i <= maxCode) { // yes, but do we have room forUTE; i",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (i <= maxCode) { // yes,ANNOT_QUOTE; i",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next one too",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i <= maxCode) { // yes, but do we have room't really need 6",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i <= maxCode) { // yes, but do we have room for entity",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i <= maxCode) { // yes, catch but do we have room for output?",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i <= maxCode) { // yes, but do we have room for n-parse",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i <= maxCode) { // yes, but do we't really need 6; i",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i <= maxCode) { // yes, but do we have room for true; i",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i <= maxCode) { // yes, but do we't really need to buffer",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i <= maxCode) { // reached the end, fair and 4",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i <= maxCode) { // yes, but do we have room forNew; i",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i <= maxCode) { // yes, but do a tight inner loop for output",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i <= maxCode) { // yes, but do we have room for full; i",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i <= maxCode) { // yes, but do a non- ends in",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i <= maxCode) { // yes, match EIGHT",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i <= maxCode) { // yes, catch but do we have room for output",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i <= maxCode) { // yes, but do we are done",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i <= maxCode) { // yes, but do offline",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i <= maxCode) { // reached the end, but do implicit re-parse",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i <= maxCode) { // yes, match v to do implicit re-parse",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i <= maxCode) { // yes, but do we't really need 6;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i <= maxCode) { // yes, looks like a number",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i <= maxCode) { // yes, but do implicit re-char case or broken",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i <= maxCode) { // yes, but do we have room for updated; i",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i <= maxCode) { // yes, let's do a number",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i < maxCode) { // end-of-input",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i <= maxCode && i < maxCode;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i <= maxCode) { // gwt need to read the end?",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i <= maxCode) { // yes, but do a tight inner loop for now",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i <= maxCode) { // yes, let's do implicit re-char case or broken",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i <= maxCode) { // yes, but do we have room for triplets",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i <= maxCode) { // yes, but do we have room[i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next one space",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (i <= maxCode) { // yes, but do we't really need the end-parse",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i <= maxCode) { // yes, but do we have room for str; i",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i <= maxCode;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i <= maxCode) { // yes, catch but do implicit re-parse",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i <= maxCode) { // yes, but do we't really need to b64Alphabet[i];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i <= maxCode) { // [JACKSON-314] be enough room, match",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i <= maxCode) { // yes, but do we didn't really need the end?",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i <= maxCode) { // yes,buffer[_inputPtr++];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (i <= maxCode) { // yes, match v are both even...",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i <= maxCode) { // yes, but do others too",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i <= maxCode) { // yes, but do we have room for n-char case it's; i",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i <= maxCode) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer[i-1",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i <= maxCode) { // yes, but do we have room for store 'raw't really modify; i",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i <= maxCode) { // yes, but do a non-check;",
                "identical": false
            }
        ],
        "buggy_line": "if (i <= maxCode) {",
        "fixed_line": "if (i < maxCode) {"
    },
    "Lang-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Calendar c = date;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Calendar c = format;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Calendar c = new GregorianCalendar;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Calendar c = this.mTimeZone;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Calendar c = new GregorianCalendar(200;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) + 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Calendar c = new GregorianCalendar: date;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Calendar c = new GregorianCalendarLength;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone)];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Calendar c = _mTimeZone;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_MONTH;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_DAY;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Calendar c = new GregorianCalendar precedenceTime;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNewDate;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MILLIS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_DAYS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.mTimeZone;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Calendar c = new GregorianCalendar().mTimeZone;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Calendar c = new GregorianCalendarPosition;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNew;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Calendar c = new GregorianCalendar(_mTimeZone;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Calendar c = new GregorianCalendar (0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Calendar c = new GregorianCalendars;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.millis;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Calendar c = new GregorianCalendar",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.millisecond);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForDaylightS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Calendar c = new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForYear) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Calendar c = new GregorianCalendar(dateStyle);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate, this.millisecond);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.millisecond;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNew);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.m_PER_MONTH;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.millis;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Calendar c = new GregorianCalendar JsonToken.MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % LONG_OF_MONTH;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Calendar c = date.mTimeZone;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_YEAR;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimateS_OF_MONTH);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % iUnitMillis;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneFor withMaxLengthEstimate_OF_MONTH);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate_OF_MONTH);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Calendar c = new GregorianCalendar(date, c) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) >> 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Calendar c = new GregorianCalendar precedence;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Calendar c = new GregorianCalendar(dateTimeZone);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate_OF_MONTH);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Calendar c = new GregorianCalendar(dateMaxLengthEstimate_OF_MONTH);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Calendar c = new GregorianCalendarDeep;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Calendar c = new GregorianCalendar(dateLengthEstimate_OF_MONTH);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Calendar c = new GregorianCalendar(dateLengthEstimate_OF_DAYS_PER_MONTH);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Calendar c = new GregorianCalendar JsonToken.START_OF_MONTH;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimateS_OF_MONTH);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForDaylightS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Calendar c = new GregorianCalendar(dateTimeZone;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Calendar c = new GregorianCalendar JsonToken.START_OF_DAYS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Calendar c = new GregorianCalendarST;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Calendar c = new GregorianCalendar_OF_MONTH;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Calendar c = new GregorianCalendar(dateLengthEstimate_OF_DAYS_MONTH);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate_OF_DAYS_MONTH);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.mLocale;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLength;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_PER_DAY;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForDaylightS_PER_MONTH);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) - date;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Calendar c = new GregorianCalendarLengthEstimate_OFFSET;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Calendar c = new GregorianCalendar(dateMaxLengthEstimate, this.mTimeZone) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_PER_MONTH;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Calendar c = new GregorianCalendar(dateStyle;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate_OF_DAYS_PER_MONTH);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Calendar c = new GregorianCalendar(dateLengthEstimate_OFFSET;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone)});",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Calendar c = new GregorianCalendar(dateLengthEstimate, this.mTimeZone;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.millis);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Calendar c = new GregorianCalendar() - 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % LONG_OF_DAY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.m_PER_DAY;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Calendar c = new GregorianCalendar(dateMaxLengthEstimate_OF_DAYS_MONTH);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone)[0];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Calendar c = new GregorianCalendarLengthEstimateS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate, this.millis;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneFor withMaxLength;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Calendar c = new GregorianCalendar(dateMaxLengthEstimate_OF_DAYS_PER_MONTH);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Calendar c = new GregorianCalendarLengthEstimate;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % iStandardOffset;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Calendar c = new GregorianCalendar(dateLengthEstimate, this.mTimeZone) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Calendar c = new GregorianCalendar(dateMaxLengthEstimate_OFFSET;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) );",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneFor withMaxLengthEstimate_OF_DAY;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Calendar c = new GregorianCalendar(mMaxLengthEstimate, this.mTimeZone) - 1;",
                "identical": false
            }
        ],
        "buggy_line": "Calendar c = new GregorianCalendar(mTimeZone);",
        "fixed_line": "Calendar c = new GregorianCalendar(mTimeZone, mLocale);"
    },
    "Closure-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cfaNode.createEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cfa.createEdge(parent, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cfa.createEdge(last, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cfa.createEdge(cfgNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cfa.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cfa.createEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cfaNode.createEdge(parent, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cfaNode.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cfaNode.createEdge(last, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cfaNode.createEdge(cfgNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cfaNode.createEdge( finally, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode != cfaNode);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cfa.createEdge( finally, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cfaMap.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cfa.createEdge(Left, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cfa.createEdge = finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, computeCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cfaNode.createEdge = finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cfa.createEdge(parent, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cfa.createEdge(Cache, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cfaNode.createEdge(Left, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cfaNode.createEdge(next, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cfa.createEdge(fromNode, parent, finallyNode);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cfa.createEdge(next, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cfaNode.createEdge(parent, handler, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cfa.createEdge(testNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, computeCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cfa.createEdge RangeNode(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cfaNode.createEdge(Cache, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode != cfaNode);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cfa.createEdge(plain, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cfa.createEdge(max, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cfaNode.createEdge(fromNode, parent, finallyNode);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cfaBean.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode = finallyNode);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cfaNode.createEdge(parent, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cfa.createEdge(Frames, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cfa.createEdge(PathsNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, next);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cfaNode.createEdge(plain, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cfa.createEdge( finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cfa.createEdge(0, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cfa.createEdge(from, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, nsNode);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cfa.createEdge(NTNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cfa.createEdge(pos, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, tryBlock);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, i);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cfaNode.createEdge(Frames, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cfa.createEdge(currentNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cfaNode.createEdge(max, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,Space);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cfaNode.createEdge(Token.UNCOND, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cfa.createEdge(ancestor, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cfa.createEdge(replacement, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cfa.createEdge(lu, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cfaNode.createEdge(from, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cfa.createEdge( oldName, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cfa.createUnary(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cfa.createEdge( tt, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cfaNode.createEdge( tt, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cfaNode.createEdge(pos, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cfa.createEdge( LayerNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cfa.createEdge(fromIndex, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cfa.createEdge(seNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cfaNode.createEdge(replacement, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode = finallyNode);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cfaNode.createEdge(0, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cfa.createEdge(joinNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cfa.createEdge( retain, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cfa.createEdge(lo, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, equivalentNode);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode != cfa);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, next);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND,currentNode);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cfa.createEdge(parent, finallyNode, Branch.UNCOND, finallyNode;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cfa.createEdge( subtype, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cfa.createEdge( which, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cfa.createEdge(notify, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cfa.createEdge(out, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cfa.createEdge(time, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cfa.createEdge(Token.UNCOND, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cfaNode.createEdge(parent, finallyNode, parent, cfa);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, tryBlock);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode != cfa);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cfa.createEdge(Least, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND,Space);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cfa.createEdge(limit, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cfa.createEdge(nam, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cfa.createEdge(left, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cfa.createEdge(dest, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cfa.createEdge(name, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, allSizes);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cfa.createEdge(Nulls, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cfa.createEdge(zz, Branch.UNCOND, finallyNode);",
                "identical": false
            }
        ],
        "buggy_line": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
        "fixed_line": "cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);"
    },
    "Closure-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (x < 0 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (x < 0x10000 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (x < 0 && prev == '-') { //debug is negative",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (x < 0x07 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (x < 0x10000 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (x < 0 && prev == '-') { // \".",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (x < 0 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (x < 0 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (x < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (x < 0x10000 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (x < 0 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (x < 0x10000 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (x < 0x10000 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (x < 0 && prev == '-') { //debug",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (x < 0 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (x < 0 && prev == '-') { // UTF-8",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407]",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (x < 0x10000 && prev == '-') { // x is disabled",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (x < 0 && prev == '-') { // fields",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (x < 0x800 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (x < 0x07 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (x < 0x10000 && prev == '-') { // x is.\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (x < 0 && prev == '-') { // x is entirely",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (x < 0 && prev == '-') { // x is ObjectId",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (x < 0 && prev == '-') { // and make",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (x < 0 && prev == '-') { // x is.\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (x < 0 && prev == '-') { //debug isbase",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (x < 0x10000 && prev == '-') { //debug",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (x < 0 && prev == '-') { // x is disabled",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (x < 0 && prev == '-') { // negative",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (x < 0x07 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling of group",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (x < 0 && prev == '-') { // x is nope",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (x < 0 && prev == '-') { //COL",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (x < 0x10000 && prev == '-') { // x is entirely",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (x < 0x10000 && prev == '-') { // x is ObjectId",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (x < 0x10000 && prev == '-') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (x < 0 && prev == '-') { //debug is.\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (x < 0 && prev == '-') { // negative values?",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (x < 0 && prev == '-') { // x is taken",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (x < 0x10000 && prev == '-') { // x is0",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (x < 0x07 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling of range",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (x < 0 && prev == '-') { //debug is ObjectId",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling wrapping for unchecked is negative",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (x < 0 && prev == '-') { //debug is nope",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling sign",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (x < 0 && prev == '-') { // system?",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (x < 0 && prev == '-') { //o is negative",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (x < 0 && prev == '-') { // x is aliases",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (x < 0 && prev == '-') { // \".000",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (x < 0x10000 && prev == '-') { // x is nope",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (x < 0 && prev == '-') { // test",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling of s",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (x < 0 && prev == '-') { //(0). is negative",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (x < 0 && prev == '-') { // end-x00",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (x < 0 && prev == '-') { // period is negative",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-314] is negative",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (x < 0x20 || x == '-') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (x < 0 && prev == '-') { //Bounds is negative",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (x < 0x07 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (x < 0x10000 && prev == '-') { // x is status",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (x < 0x10000 && prev == '-') { // x is Hash",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow:",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (x < 0x07 && prev == '-') { // x is.\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (x < 0x10000 && prev == '-') { // x isSTR",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (x < 0x10000 && prev == '-') { // x is aliases",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (x < 0 && prev == '-') { //Stream",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (x < 0x10000 && prev == '-') { // x is taken",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (x < 0x >= 0 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (x < 0x10000 && prev == '-') { // x is first",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling wrapping for output",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (x < 0 && prev == '-') { // and square?",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (x < 0x07 && prev == '-') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (x < 0x10000 && prev == '-') { // x is maybe",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (x < 0 && prev == '-') { // avail",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] is negative",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling wrapping for unchecked is",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disablingdouble[] x is negative",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (x < 0 && prev == '-') { // nope",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (x < 0x10000 && prev == '-') { // x is more",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling wrapping for negative",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (x < 0x07 && prev == '-') { // x is ObjectId",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (x < 0x10000 && prev == '-') { // x is localName",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (x < 0 && prev == '-') { // predicate't really need 6",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (x < 0 && prev == '-') { // x isOutlier radius",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (x < 0x10000 && prev == x) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407] -- allow disabling of 4-",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (x < 0x10000 && prev == '-') { // \".",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (x < 0 && prev == '-') { //Mut is negative",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (x < 0 && prev == '-') { // x is Hash",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (x < 0x07 && prev == '-') { // x is nope",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (x < 0 && prev == '-') { // x is loader",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (x < 0 && prev == '-') { // sequence is negative",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (x < 0 && prev == '-') { //debug is",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (x < 0 && prev == '-') { //Chart",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-empty",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (x < 0 && prev == '-') { //deep x is negative",
                "identical": false
            }
        ],
        "buggy_line": "if (x < 0 && prev == '-') {",
        "fixed_line": "if ((x < 0 || negativeZero) && prev == '-') {"
    },
    "Time-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (diff >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (nextLocal != nextAdjusted) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (nextLocal != 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (nextLocal != offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (nextLocal != plotAdjusted) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (instantLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (diff > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (nextLocal != instantLocal) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (diff < 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (nextLocal != end) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (nextLocal != paddingAdjusted) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (diff == 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (nextLocal != e.instantLocal) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (nextLocal == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (nextLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (nextLocal != cAdjusted) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (i <= 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (nextLocal != diff {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (nextLocal != asAdjusted) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (nextLocal !=(instantLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (nextLocal !=entry.instantLocal) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (nextLocal != setAdjusted) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (nextLocal != lastLocal) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (nextLocal > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (nextLocal != fillAdjusted) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (diff >= nextAdjusted) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (diff >= pointLocal) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (diff >=instantLocal) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (nextLocal != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (nextLocal != expAdjusted) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (nextLocal != localAdjusted) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (nextLocal != GAdjusted) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (nextLocal != Long.LONG_VALUE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (nextLocal != prevAdjusted) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (nextLocal != iAdjusted) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (nextLocal !=(instantLocal) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (diff != 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (nextLocal != endAdjusted) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (i <= maxLocal) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (diff >= args.length) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (nextLocal !=instantLocal) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (diff >= size) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (diff >=index;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (nextLocal != currentIndex) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (nextLocal == instantLocal) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if ( offsetAdjusted == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (diff >= offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (nextLocal !=OfYear) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (nextLocal != era) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (i >= 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (nextLocal != prev) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (nextLocal < 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (diff >= dataset.length) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (nextLocal != functionNameAdjusted) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (nextLocal != e) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (diff >= added;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (diff >= rhsValue) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (nextLocal != nextAdjusted && offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (diff >= endAdjusted) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (nextLocal !=previousAdjusted) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (nextLocal !=(4, 5Adjusted) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (nextLocal != nextAdjusted && instantLocal;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (nextLocal != -1) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (diff >= endLocal) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (nextLocal != 5 && nextAdjusted) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (nextLocal !=(4, 5]) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (nextLocal !=(4, 5 && nextAdjusted) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (nextLocal !=Char) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if ( diff > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (diff >= minimalLocal) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (nextLocal != expectedAdjusted) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (nextLocal !=genLocal) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (nextLocal !=reportAdjusted) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (diff >=accepted) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (instantLocal > 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (nextLocal != cAdjusted && offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (diff >= putLocal) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (diff > maxLocal) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (nextLocal !=CharAdjusted) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (diff >=Servleted) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (nextLocal != 5]) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (instantLocal - offsetAdjusted;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (nextLocal !=ClassName) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (nextLocal != 5 && instantLocal;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (instantLocal < 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (nextLocal != e.instantLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (nextLocal != location) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (nextLocal != iCutover) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (nextLocal != 5Adjusted) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (nextLocal != ird) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (nextLocal != paddingChar) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if ( asAdjusted == 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (nextLocal != here) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (nextLocal != G_instantLocal) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (diff >= instantLocal) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (nextLocal !=uniqueLocal) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (lineNumber > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (nextLocal != eraAdjusted) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (nextLocal != StringLen) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (nextLocal != instantLocal;",
                "identical": false
            }
        ],
        "buggy_line": "} else if (offsetLocal > 0) {",
        "fixed_line": "} else if (offsetLocal >= 0) {"
    },
    "Jsoup-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final Map unescapePattern = Pattern;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final Map unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final NavigablePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final PatternMustPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static finalObjectPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static finaled unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final allowPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final Patternprops = Pattern.compile;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final Pattern makePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 4];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final char unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static finaled unescapePattern = Pattern;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final Map unescapePattern = Patterna-AsciiC[a >> 4];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final Map unescapePattern = Patterna-pds[a >> 4];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final int unescapePattern = Patterna-AsciiC[a >> 4];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final Map unescapePattern = Patterna-ASCII[a >> 4];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final Serialization unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final PatternrulePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final Pattern&Pattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final Id unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a >> 4];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 32][0];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final Map unescapePattern = Patterna-Chunk[a >> 4];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static finalSCRIPTOR unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final Pattern unescape = this.compile;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final VALUE unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static finaled unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 4];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final PatternservePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final Pattern#Pattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final Map unescapePattern = Pattern.compile[a-2);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-Chunk[a >> 4];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final Map unescapePattern = Patterna-Character[a >> 4];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 4]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final Map unescapePattern = Patterna-path;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final int unescapePattern = Patterna-pds[a >> 4];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static finalEOF unescapePattern = Pattern;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final Pattern ofPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final Map unescapePattern = Patterna >> 32;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final PatternwindowPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final int unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final PatternNEWLINE = Pattern.compile;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final Map unescapePattern = Pattern.compile[a-F]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 16;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final Map unescapePattern = Pattern_)?;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static finalRecPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final Map unescapePattern = Patterna-ASCII[a >> 4]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final volatilePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final int unescapePattern = Patterna-AsciiC[a >> 4]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final Map unescapePattern = Patterna-pds[a >> 16;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 1];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final Map unescapePattern = Patterna-Dimension;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final Map unescapePattern = Patternf;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static finalEOF unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final PatternmarkerPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final int unescapePattern = Patterna-classA.compile;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final int unescapePattern = Patterna-AsciiC[a >> 32];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final Pattern substringsPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-order;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final int unescapePattern = Patterna-ASCII[a >> 4];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final int unescapePattern = Patterna-path;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final Map unescapePattern = Patterna-\\a >> 32;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static finaled unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 32][0];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 32;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final Map unescapePattern = Pattern.compile-1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final Map unescapePattern = Patterna-Character;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final Map unescapePattern = Patterna-AsciiC[a >> 4]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final Map unescapePattern = Patterna-AsciiC[a >> 32];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final Map unescapePattern = Patterna-pds[a >> 4]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 18];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-F]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-zoom;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final Map unescapePattern = PatternReference.compile;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final int unescapePattern = Patterna-AsciiC[a >> 32][0];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final PatternDEF = Pattern.compile;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final Map unescapePattern = Patterni&;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final Map unescapePattern = Patterna-pds[a >> 1];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final Pattern pkga = this.compile;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final Map unescapePattern = Patterna-ly;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static finaled unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 16;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a >> 4]);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final Map unescapePattern = Patterna-AsciiC[a >> 32][0];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 24 * 360;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final char unescapePattern = Pattern;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final Map unescapePattern = Pattern.compile-1; // never happen?",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final volatilePattern = Pattern;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static finaled unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >> 1];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-Copies >> 4];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final Map unescapePattern = Patterna-ASCII[a >> 1];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-Chunk[a >> 4]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa-1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final Map unescapePattern = Patterna-Character[a >> 4]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final int unescapePattern = Patterna- blockSize100k;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final Map unescapePattern = Patterna- blockSize100k;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final Map unescapePattern = Patterna-Chunk[a >> 4]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final Patterni& = this.compile;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final Map unescapePattern = Pattern.compile[a-ASCIIa'-1]).trim();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-40;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static finaled unescapePattern = Pattern_OPTIONAL_classS[a >> 4];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final Pattern printer = +&;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final Map unescapePattern = Pattern_OPTIONAL_classS[a-ASCIIa >>CLASS;",
                "identical": false
            }
        ],
        "buggy_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");",
        "fixed_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");"
    },
    "JacksonDatabind-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "paramName = param.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paramName = param.findImplicitName(0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paramName = param.findImplicitProperty(paramName);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paramName = param.findImplicitParam(paramName);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paramName = ctor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paramName = param.findImplicitParamBy(paramName);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paramName = _properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paramName = param.findImplicitParamKeys(paramName);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paramName = param.findImplicitParamTypes(0);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paramName = properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paramName = param.findImplicitParamTypes(paramName);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paramName = param.findImplicitParamCreatorProperty(paramName);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paramName = param.findImplicitINDENT_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paramName = param.findImplicitProperty(paramName, beanDesc);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paramName = candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paramName = param.findImplicitParam(0);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paramName = param.findImplicitParamINDENT_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paramName = param.findImplicitParamByProperty(paramName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paramName = param.findImplicitParamAtName(0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paramName = param.findImplicitParamLimit(paramName);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paramName = provider.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paramName = param.findImplicitParamAnnotation(paramName);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paramName = param.findImplicitINParam(0);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paramName = param.findImplicitGenerator(paramName);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paramName = param.findImplicitParamUSE_PROTOTYPE_MEMBER_DEFINEName(0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paramName = param.findImplicitname(paramName);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paramName = param.findImplicitINDENT_UnknownProperty(paramName);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paramName = param.findImplicitParamInterfaces(paramName);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paramName = param.findImplicitParamINDENT_UnknownProperty(paramName);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paramName = instant.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paramName = param.findImplicitINDENT_PROPERTY;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paramName = candidateParam.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paramName = param.findImplicit oldName(paramName);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paramName = param.findImplicitParamINDENT_PROPERTY;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paramName = param.findImplicitParam++][1];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paramName = param.findImplicitClearParam(0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paramName = param.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paramName = param.findImplicitIdName(0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paramName = param.findImplicitIN(paramName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paramName = param.findImplicit sigName(0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paramName = param.findImplicitParamNameTransformer(paramName);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paramName = param.findImplicitPropertyHandler(paramName);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paramName = param.findImplicitParamFieldName(0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paramName = param.findImplicitParam parserName(0);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paramName = .5.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paramName = param.findImplicitConstants(paramName);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paramName = param.findImplicitParamINDENT_ZERO_PROPERTY;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paramName = name.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paramName = param.findImplicitISParam(0);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paramName = param.findImplicitINDENT_ requiredProperty(paramName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paramName = param.findImplicitParamUSE_PROTOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paramName = param.findImplicitParamINDENT_UnknownPropertyHandlerClassHasProperty(paramName);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paramName = param.findImplicitProperty(paramName, ctxt);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paramName = param.findImplicitINDENT_EXPR_UnknownProperty(paramName);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paramName = insnParam.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paramName = param.findImplicitParamUSE_PROTOTYPE_MEMBER_DELitName(0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paramName = param.findImplicitParam(10Param(0);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paramName = param.findImplicitParamDefines(paramName);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paramName = param.findImplicitParamUSE_PROTOTYPE_MEMBER_DELTA;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paramName = param.findImplicitParamNameNode(0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paramName = param.findImplicitINDENT_ByProperty(paramName);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paramName = param.findImplicitINDENT_EXTENDED;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paramName = param.findImplicitParamNewName(0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paramName = param.findImplicitParamTypes(1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paramName = param.findImplicitParamMarkerName(0);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paramName = _candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paramName = param.findImplicitParam;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paramName = param.findImplicit",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paramName = param.findImplicitProperty(paramName, properties);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paramName = param.findImplicitParam EIGHTProperty(paramName);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paramName = param.findImplicitParamINDENT_EXPR_UnknownProperty(paramName);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paramName = param.findImplicitGINName(0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paramName = param.findImplicitParamCreatorProperty(paramName, beanDesc);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paramName = param.findImplicitParamINDENT_FOR_PROPERTY;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paramName = param.findImplicitINDENT_STATIC;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParamTypes);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paramName = param.findImplicit addParam(0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paramName = param.findImplicitProperty(paramName, lineNumber);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paramName = param.findImplicitParam outlineName(0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paramName = param.findImplicitINDENT_CAUSE_PROVIDEPRECATED;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paramName = param.findImplicitParamUSE_PROVIDEPRECATED;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paramName = param.findImplicitParamNameCanonicalParam(0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paramName = param.findImplicitProperty(paramName, valueType);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paramName = param.findImplicitParamKeys;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paramName = param.findImplicitIN(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paramName = param.findImplicit nodeTypeName(0);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paramName = param.findImplicitParamName(param);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paramName = param.findImplicitParamUSE_PROVIDEFINEName(0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paramName = candidateMethod.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paramName = param.findImplicitParamTypesToPropName(0);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paramName = param.findImplicitActionsFromName(0);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paramName = param.findImplicitProperty(paramName, dp);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paramName = candidateProperty.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paramName = param.findImplicitParamDEDName(0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paramName = param.findImplicitVariableParam(0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paramName = param.findImplicitINDENT_UnknownProperty(paramName, param param);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paramName = param.findImplicit fbParamName(0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paramName = oldName.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paramName = param.findImplicitOfMonthName(0);",
                "identical": false
            }
        ],
        "buggy_line": "paramName = candidate.findImplicitParamName(0);",
        "fixed_line": "paramName = candidate.paramName(0);"
    },
    "Chart-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "new Range[2] = constraint.getWidth2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "new Range[2] = c4 - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "new Range[2] - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "new Range[2] = this.rightBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "new Range[2] = constraint.getWidth;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "new Range[2] = this.rightBlock - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "new Range[2] = c4 - w[2];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "new Range.0, c4 - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "new Range[2] = size.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "new Range(0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "new Range[2] = size.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[3];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "new Range.0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "new Range[2] = this.leftBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "new Range[2] = c4 - w[3];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "new Range.getWidth2 = constraint.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "new Range[2] - w[3] = size.getWidth();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "new Range.getWidth2 = size.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "new Range[2] = constraint.getWidthString - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "new Range[2] = constraint.getWidth() - h[3] - w[2];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "new Range.0, c4 - w[2];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "new Range[2] = constraint.getWidth();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "new Range[w.0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "new Range[2] = this.rightBlock - w[2];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "new Range[2] = constraint.getWidthName - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "new Range[2] = c4 - h[1] * this.right;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "new Range[2] = this.leftBlock - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "new Range.0, c4 - w[2] = this.rightBlock;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[2];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "new Range[2] = constraint.getWidth() - h[2];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "new Range[2] = this.rightBlock - w[3];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "new Range.0, c4 - w[2] = this.right;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "new Range[2] = j2 - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "new Range.0, c4 - w[2] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "new Range[4.0, c4 - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "new Range[2] = this.rightBlock - w[3]), h[2];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - h[2];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "new Range[2] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "new Range[2] = constraint.getWidthvv - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "new Range[1] = this.rightBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "new Range[w.0, c4 - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "new Range[2] = c4 - w[1][w[3] - h[2];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "new Range.0, constraint[2] - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "new Range width.0, c4 - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "new Range[w.0, c4 - w[2] = h[2];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "new Range[2] = constraint.getWidth2 - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "new Range[2] = constraint.getWidth() - h[1] + w[3] - w[2];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "new Range[1] = constraint.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "new Range.0, c4 - w[2] = h[2];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "new Range[2] = this.rightBlock[s.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "new Range.0, c4 - w[2] = constraint.getWidth2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "new Range[2] = c4 - w[1] * h[2];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "new Range.getWidth2 = constraint.getWidth() - w[2] + w[3] - h[2];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "new Range[2] - w[3] = size.getWidth() - h[2];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "new Range.0, c4 - w[2] + w[3] = size.right;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "new Range[2] = this.rightBlock - w[1][w1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "new Range[2] = this.rightBlock - w[1] + w[3] - w[2];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "new Range[2] = this.rightBlock[s.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "new Range[2] = constraint.getWidthString - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "new Range[2] = this.rightBlock[w - h[1]];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - h[1] - w[2];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "new Range[4.0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "new Range[2] = c4 - w[3] + h[2];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "new Range.0, constraint.getWidth() - w[3] = size.width;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "new Range.getWidth2 = constraint.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "new Range[2] = this.leftBlock[w - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "new Range.getWidth2 = this.rightBlock - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "new Range.getWidth2 = size.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "new Range[2] = constraint.getWidth() - w[2];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "new Range(0, c4 - w[2];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "new Range.getWidth2 = this.rightBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "new Range.getWidth2 = size.getWidth() - w[2] + w[3] - h[2];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - w[3];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "new Range.getWidth2 = this.rightBlock - w[2] + w[3] - h[2];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "new Range[2] = this.rightBlock[w - w[3]];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "new Range.0, c4 - w[2] = constraint.getWidth;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "new Range(0, constraint.0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "new Range[1] = this.rightBlock - w[2];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "new Range.0, constraint.getWidth() - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "new Range[w.0, c4 - w[2] = constraint.right;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "new Range[2] = this.rightBlock - w[1][w[3] - h[2];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "new Range(0, c4 - w[3] = size.width;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - h[3] - w[2];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "new Range[2] = this.leftBlock - w[3];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "new Range[2] = jgen.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "new Range(0, c4 - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "new Range[2] = this.rightBlock - w[1][w[2], h[3]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "new Range[2] = constraint.getWidth oldDelta - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "new Range[w.0, c[2] - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "new Range[2] = constraint.getWidthvl - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "new Range[2] = j.0, c4 - w[3];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "new Range.0, c4 - w[2] + w[3] = h[2];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "new Range[2] = this.leftBlock[w - w[3]), h[2];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "new Range[2] = c4 - w[1] * h[4];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "new Range.getWidth2 = this.rightBlock - w[2];",
                "identical": false
            }
        ],
        "buggy_line": "new Range(0.0, constraint.getWidth() - w[2]),",
        "fixed_line": "new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),"
    },
    "Math-80": {
        "fixes": [
            {
                "k": 1,
                "patch": "int j = k * 4;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int j = weight * 4;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int j = k * 3;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int j = 1 - n;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int j = array.length - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int j = k * 2 - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int j = weight[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int j = k - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int j = weight[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int j = weight[n - 1 + i - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int j = bbSize - k * 4;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int j = 1 - n * 4;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int j = k / 4;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int j = k * n - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int j = n / 4;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int j = weight[n - 1];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int j = (k * 4 - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int j = weight[n - 1 + 1] * n);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int j = n / 3;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int j = bbits * n - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int j = weight[n - 1 + 2 * n;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int j =args[n - 1];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int j =args[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int j = weight[n - 1][j] * n;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int j =end - start + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int j = weight / 4;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int j = bbits * i - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int j = k >> 4;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int j =args[n - 1 + i - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int j = bbSize - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int j =args[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int j = weight[n - 1 + k * n);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int j = bbits.length - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int j = k * 4 - 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int j = weight[n - 1 + 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int j = weight[n - 1 + k * n -1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int j = weight[n - 1 + 1] * v;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int j =keys[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int j = weight[n - 1 + k * nDev;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int j = bbits[n - 1];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int j =keys[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int j = weight[n - 1 + 1] * nDev;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int j = bbStart - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int j = weight[n - 1 + k * n ss_SIZE] - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int j = weight[n - 1 +>(k * n - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int j = 0, k - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int j = bbits * 2 - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int j = bbStart - k * 4;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int j = weight[n - 1 + d * n;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int j =compare[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int j =args[n - 1 + 2 * n;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int j =compare[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int j = weight * 32 - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int j =args[n - 1][j] * n;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int j = weight[n - 1 + 1] * nData.length - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int j = lo * 4;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int j = weight[n - 1 + len - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int j = weight[n - 1 + k * n / 3;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int j = weight[n - 1 + 2] * n;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int j = weight[n - 1 +k * n - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int j = bbits * 4;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int j = weight[n - 1 + 1] * nCols;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int j = bbits[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int j =int)(n - k * 2 - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int j = k * safely[n - 1];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int j =keys[n - 1 + i - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int j = bbits * tmp - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int j = (k * n - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int j = 1 - n + 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int j = k * interfaceCount - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int j = 1 - n * k;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int j = bbits * 32 - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int j = bbits[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int j = k * n / 3;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int j = x.length - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int j =keys[n - 1];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int j = bbitsCount - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int j =illd * n - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int j = end - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int j = weight[n - 1 + k * nCols;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int j =keys[n - 1][j] * n;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int j = weight[n - 1 + months / 4;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int j = weight[n - 1 + 1] * n += k - 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int j = bbSize - k * 2 - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int j = weight[n - 1 + 1] * n -1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int j = weight[n - 1 + k * n1 + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int j =args[n - k * 2];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int j = weight[n - i - 1];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int j =compare[n - 1 + i - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int j = weight[n - 1 + k * n100k - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int j =args[n - 1 + d * n;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int j = weight[n - 1][j] * n);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int j = weight[n - 1 + last;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int j = n / 100;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int j = bbits[n - i - 1];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int j = 0d * n - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int j = weight[n - 1 + 1] / 2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int j = weight[n - 1 + 3] - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int j = k * 32 - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int j = weight[n - 1 + k * n el - 1;",
                "identical": false
            }
        ],
        "buggy_line": "int j = 4 * n - 1;",
        "fixed_line": "int j = 4 * (n - 1);"
    },
    "Math-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "for (i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "for (i = 0; i < weights.length; i += 2) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (i = 0; i < text.length; i++) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "for (i = 0; i < text.length; i += 2) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "for (i = 0; i < indexes.length; i += 2) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (i = 0; i < intr.length; i++) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (i = 0; i < slope.length; i++) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (i = 0; i < indexes.length; i++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "for (i = 0; i <Room.length; i++) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (i = 0; i < slope.length; i += 2) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (i = 0; i < weights.length; i += 1) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (i = 0; i < intr.length; i += 2) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (i = 0; i < qlen; i += 2) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "for (i = 0; i < 3.0.length; i++) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "for (i = 0; i < buf.length; i++) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (i = 0; i < weights.length; i += 8;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (i = 0; i < weights.length; i += 8; i++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (i = 0; i < 3.0.length; i += 2) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (i = 0; i <Beta.length; i++) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (i = 0; i < qlen; i++) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (i = 0; i < x.length; i++) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (i = 0; i <Beta.length; i += 2) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "for (i = 0; i < coefficients.length; i++) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (i = 0; i < polynomialW; i += 2) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (i = 0; i < weights.length; i += 4) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (i = 0; i < parameterTypes.length; i++) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (i = 0; i < buf.length; i += 2) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (i = 0; i <Room.length; i += 2) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (i = 0; i <a.length; i++) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (i = 0; i <eps.length; i += 2) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (i = 0; i < encoding; i += 2) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "for (i = 0; i < 3.0W.length; i += 2) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (i = 0; i < scope.length; i++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "for (i = 0; i < weights.length; i += 7;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (i = 0; i < 3.0W.length; i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (i = 0; i < arc.length; i++) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (i = 0; i < hashCode.length; i += 2) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (i = 0; i < values.length; i++) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (i = 0; i <DECB; i += 2) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (i = 0; i <hit.length; i++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (i = 0; i < iterationCount; i += 2) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (i = 0; i <Text.length; i++) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (i = 0; i < Del.length; i++) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (i = 0; i < options.length; i++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (i = 0; i < initial.length; i++) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "for (i = 0; i < rotate.length; i++) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (i = 0; i <\u6697.length; i++) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (i = 0; i < options.length; i += 2) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (i = 0; i <ARGS.length; i++) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (i = 0; i < coefficients.length; i += 2) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (i = 0; i < x.length; i += 2) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (i = 0; i <DECers.length; i++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (i = 0; i <irected.length; i++) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (i = 0; i < nex.length; i++) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (i = 0; i <variable.length; i++) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (i = 0; i < divider.length; i++) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (i = 0; i <eps.length; i++) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (i = 0; i <LIST; i += 2) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (i = 0; i < weights.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (i = 0; i < hashCode.length; i++) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (i = 0; i < SIGNAL.length; i++) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (i = 0; i < performance.length; i++) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (i = 0; i <ARGS.length; i += 2) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (i = 0; i <ray.length; i++) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "for (i = 0; i <letterW.length; i++) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (i = 0; i <cv.length; i++) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (i = 0; i <letterW.length; i += 2) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (i = 0; i < arc.length; i += 2) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (i = 0; i <Mobile.length; i++) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (i = 0; i < iterationCount; i++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "for (i = 0; i < chars.length; i++) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (i = 0; i < q2; i += 2) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (i = 0; i < 6,X.length; i++) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (i = 0; i <a.length; i += 2) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (i = 0; i <hasOwnProperty.length; i++) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (i = 0; i < pseudo.length; i++) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (i = 0; i < 6,X.length; i += 2) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (i = 0; i <\u6688.length; i++) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (i = 0; i < ao.length; i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (i = 0; i < schema.length; i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (i = 0; i <delete.length; i++) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (i = 0; i <Accept.length; i++) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (i = 0; i <placeholder.length; i++) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (i = 0; i <Loc.length; i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (i = 0; i < row; i += 2) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (i = 0; i <CR.length; i++) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (i = 0; i <imize.length; i++) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (i = 0; i <icult.length; i++) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "for (i = 0; i <PreferredSize.length; i++) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (i = 0; i <FilterChain.length; i++) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (i = 0; i < inst.length; i++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (i = 0; i <wordpress.length; i++) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (i = 0; i < alphaSize; i += 2) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (i = 0; i <Ignore.length; i++) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (i = 0; i < names.length; i++) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (i = 0; i < MASK.length; i++) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (i = 0; i < JavaPsi.length; i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (i = 0; i <\u221e.length; i++) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (i = 0; i < weights.length; i += 15) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (i = 0; i < weights.length; i += 2 - 1; i++) {",
                "identical": false
            }
        ],
        "buggy_line": "for (int i = 0; i < weights.length; i++) {",
        "fixed_line": "for (int i = begin; i < begin + length; i++) {"
    },
    "Codec-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringUtils.newStringUtf8Data, false;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringUtils.newStringUtf8Data, true;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringUtils.newString(TokenData, false;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringUtils.newString(TokenData, true;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringUtils.newStringUtf8Data(Token.encodeBase64Data, false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringUtils.newStringUtf8Data(this.binaryData, false;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringUtils.newString(\"-Data, false;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringUtils.newString(TokenData, false * binaryData;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringUtils.newStringUtf8Data(Token.encodeBase64Data, true;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, true;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringUtils.newStringUtf8Base64(binaryData, false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_EMBEDDED_OBJECT, false;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringUtils.newString(binaryData, false;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_EMBEDDED_OBJECT, false;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringUtils.newStringUtf8Data(this.base64Data, false;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringUtils.newString(\"-\" + binaryData, false;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringUtils.newString(\"-\" + binaryData;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringUtils.newStringUtf8Base64Data, false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringUtils.newString(TokenData, false);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return StringUtils.newString(TokenData, false * binaryData.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringUtils.newStringUtf8Data, false * binaryData;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringUtils.newStringUtf8Data(Token.STRING, false);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringUtils.newStringUtf8Base64(TokenData, false;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return StringUtils.newString(b64variant, false);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringUtils.newString(TokenData, false * binaryData);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringUtils.newStringUtf8Data(Constants.binaryData, false;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_NULL, false);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringUtils.newStringUtf8Data(data, false;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringUtils.newStringUtf8(_binaryData, false;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return StringUtils.newStringUtf8Base64Data, true;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_NULL, false;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringUtils.newStringUtf8Data(this.binaryData, true;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringUtils.newStringUtf8Data, false * EIGHTBIT;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringUtils.newStringUtf8Data(b64variant, false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringUtils.newStringUtf8Base64(binaryData, false);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_ binaryData, false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return StringUtils.newString(TokenData, false * null);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringUtils.newStringUtf8Data(Token.NULL, false);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_ binaryData, false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringUtils.newStringUtf8Data, false);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringUtils.newString(\"-\" + binaryData, false);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringUtils.newString(currData, false;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringUtils.newStringUtf8Data(Token.STRING, true);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_EMBEDDED_NAME, false;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, true));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, true);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_PADDING, false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringUtils.newStringUtf8Data(Token.STRING, false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringUtils.newStringUtf8Base64(binaryData, true;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_NULL, false;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringUtils.newStringUtf8Base64Data(binaryData, false;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringUtils.newStringUtf8Data(data, false);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringUtils.newStringUtf8Data(Token.encodeBase64Data, false);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_EMBEDDED_OBJECT, true;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringUtils.newStringUtf8Data(this.base64Data, true;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_NULL, false);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false * binaryData;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringUtils.newStringUtf8Data(b64variant, false;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringUtils.newString(binaryData, true;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringUtils.newString(_binaryData, false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringUtils.newStringUtf8Data, false * null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringUtils.newStringUtf8Data(rawBase64Data, false;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_EMBEDDED_OBJECT, true;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_NAME, false;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringUtils.newStringUtf8Data(Token.NULL, false;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_ATTRIBUTE_NAME, false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return StringUtils.newStringUtf8Base64(this.binaryData, false;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_STRING, false);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringUtils.newStringUtf8Data(Token.binary_EMBEDDED_NAME, false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringUtils.newString(this, binaryData, false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringUtils.newStringUtf8Data(Token.STRING, true;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false * null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringUtils.newStringUtf8Data(Token.STRING, false * binaryData);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_STRING, false;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringUtils.newStringUtf8Data(Token.STRING, false * binaryData;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringUtils.newStringUtf8Data(this.binaryData, false * binaryData;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringUtils.newString(\"-\" +this.binaryData, false;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringUtils.newStringUtf8Base64(TokenData, true;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_EMBEDDED_MATCH, false;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringUtils.newString(TokenData, true);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringUtils.newStringUtf8Data( binaryData, true;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringUtils.newStringUtf8Data(Token.encodeBase64Data, true);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false * binaryData);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringUtils.newStringUtf8Data( binaryData, false);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringUtils.newStringUtf8Data(currData, false;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringUtilsData.newStringUtf8Base64(binaryData, false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringUtils.newStringUtf8Data(this.binaryData, false * EIGHTBIT;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false * EIGHTBIT;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringUtils.newString(this, binaryData, false);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringUtils.newString(TokenData, true) == false;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringUtils.newStringUtf8Data(Constants.binaryData, false);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringUtils.newStringUtf8Data(data, false * binaryData;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringUtils.newStringUtf8Data(Constants.binaryData, true;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringUtils.newStringUtf8Data(this.binaryData, false * EIGHTBIT)];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringUtils.newString(\"-\" + this.binaryData, false;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, true)];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringUtils.newString(b64variant, false;",
                "identical": false
            }
        ],
        "buggy_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
        "fixed_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));"
    },
    "Closure-130": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (name.globalSets == 0 && name.localSets > 0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (name.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (name.globalSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (ref.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (name.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (ref.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (name.globalSets == 0 && name.declarationSets > 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (name.globalSets == 0 && name.newSets == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (ref.globalSets == 0 && i.localSets == 0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (name.globalSets == 0 && name.localSets == 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (name.globalSets == 0 && name.newSets > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (name.globalSets == 1 && name.declarationSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (name.globalSets == 0 && name.getSets > 0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (name.globalSets == 0 && name.localSets == 1 && localSets > 0);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (declaration != 0 && name.globalSets == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (name.globalSets == 0 && name.getSets > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (name.globalSets == 0 && tailSets > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (name.globalSets == 0 && localSets != 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (ref.globalSets == 0 && localSets == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (name.type == 1 || name.localSets != 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (name.globalSets == 1 && name.newSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (ref.globalSets == 0 && localSets == 0);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (name.globalSets == 0 && i.localSets == 0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (ref.globalSets == 0 && name.localSets == 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (name.globalSets == 1 && localSets != 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (name.globalSets == 0 && desc.localSets == 0);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (name.globalSets == 0 && name.declarationSets > 0);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (class != 0 && name.globalSets == 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (declaration != 0 && name.globalSets == 0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (name.type == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (name.globalSets == 1 && localSets != 0 && name.localSets > 0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (name.type == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (ref.globalSets == 0 && name.localSets == 1 && localSets > 0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (ref.globalSets == 0 && i.localSets == 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (name.globalSets == 0 && name.localSets == 0, 0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && localSets > 0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (ref.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (name.globalSets == 0 && name.newSets == 0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (name.globalSets == 0 && name.localSets == null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (declaration != 2 && name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (name.globalSets == 0 && name.localSets == h) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (name.globalSets == 0 && name.localSets == canSets || localSets != 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (name.globalSets == 0 && name.type == ref.localSets || localSets != 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.ETCount - 1) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (name.globalSets == 0 && name. 20 <= 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (name.globalSets == 0 && name.scope == 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.NO' || localSets != 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (name.globalSets == 0 && name.type == i.localSets || localSets != 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.ALIAS' || localSets != 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.ETICLOCKWISE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (name.globalSets == 0 && name.superSets == 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (global.type == 1 || name.localSets != 0 && localSets == 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (ref.globalSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (global.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (name.type == 1 || name.localSets != 0 && localSets == 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (name.globalSets == 0 && name.localSets == type) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (name.globalSets == 0 && name.localSets == wanted) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (name.globalSets == 1 && localSets != 0 && name.declarationSets > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (name.globalSets == 0 && name.localSets == ianns.NO' || localSets != 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (declaration != 2 && name.globalSets == 0 && localSets > 0);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (name.globalSets == 0 && name.externallyDefined == ref.localSets != 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (name.globalSets == 0 && name.localSets == -1) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (global.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (class == 0 && name.globalSets == 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (name.globalSets == 0 && name.declarationSets == 0);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (name.globalSets == 0 && name.shortSets == 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (name.globalSets == 0 && name.declarationSets == 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (name.globalSets == 1 && name.declarationSets == 0 && localSets > 0);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (global.type == 1 || name.localSets != 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (name.globalSets == 0 && name.scope == h) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (name.globalSets == 0 && name.localSets == canSets || localSets > 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (name.globalSets == 0 && name.type == i.localSets > 0);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (name.globalSets == 0 && name.localSets == localSets {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (name.globalSets == 1 && localSets != 0 && name.newSets > 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (name.globalSets == 0 && name.scope == ref.localSets - 1) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (name.globalSets == 0 && name.newSets > 0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (declaration != 0 && name.globalSets == 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (name.globalSets == 0 && name.type == i.localSets - 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (name.globalSets == 0 && field.localSets == 0);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (ref.globalSets == 0 && desc.localSets == 0);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (name.globalSets == 0 && name.localSets != 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (name.globalSets == 0 && ref.localSets == 0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (name.globalSets == 0 && name.localSets > 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (name.globalSets == 0 && name.localSets ==Transition) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (global.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (named && name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (name.globalSets == 0 && name.externallyDefined == ref.localSets - 1 || localSets != 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (name.globalSets == 0 && localSets > 0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (name.globalSets == 0 && name.DecodeSets == 0);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (name.globalSets == 0 && name.scope == ref.localSets - 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (name.globalSets == 0 && i.localSets == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (name.globalSets == 0 && name.DecodeSets == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (Major.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (ref.globalSets == 0 && name.localSets == ref.NO' || localSets != 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (name.globalSets == 0 && name.scope == null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (ref.globalSets == 0 && name.localSets == 0, 0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (name.globalSets == 0 && name.scope == type) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (n.globalSets == 0 && name.localSets == 0);",
                "identical": false
            }
        ],
        "buggy_line": "if (name.globalSets == 1 && name.localSets == 0 &&",
        "fixed_line": "if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&"
    },
    "Mockito-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "return arg.toString;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return m.toString;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringDescription.toString;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return arg.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return arg.equals(m;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return m.toString != arg;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return arg.equals(argName).toString;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return arg;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return arg.toString != m;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return currentInfo.toString;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return current.toString;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return m.toStringft.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return arg.equals(argName);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this.m.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return arg.equals(m) == 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return arg.equals(m).toString;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return m.toString).equals(argName;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return arg != m.toString;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.m.equals(argName);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return m;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return argCount.equals(m;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return m.toStringft.equals(argName);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return m.toString).equals(argName);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return arg.equals(argRenderingOrder.toString;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return arg.equals(m)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return m.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return arg.equals(argRenderingOrder.toString()+\";",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return arg.equals(argName).m;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return m.toString()+\";",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return arg.equals(argName;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return m.toStringMin.equals(argName);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return m.toStringft.equals(argName;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return m.toStringft.equals(argName, arg;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return arg.equals(argName, m)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return arg.equals(arg);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringDescription.toString).equals(argName;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return m.toStringMin.equals(argName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return m.toString).equals(arg);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return m.toStringft.equals(argName, arg);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return arg.equals(arg2d;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return arg == m.toString;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return argCount.equals(m) == 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return m.toString % arg;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return arg.equals(argName).toString();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return arg.equals(m) == m;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return mStyle.toString;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return arg.equals(argName).value;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return m.toStringft.equals(arg).m;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return m.toStringft.equals(arg).value;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return argCount.equals(m).toString;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return arg.equals(arg2d.toString;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return arg.equals(m)arg).equals(argName;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return argCount.equals(argName).toString;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return arg.equals(arg).toString != m;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return arg.equals(argName, m;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return arg.equals(argValue) == 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringDescription.toString()+\";",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return arg.toString == m;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return argList.toString;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return m.toStringft.equals(arg, arg)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return arg.equals(arg, m)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return arg.equals(argValue;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return m.toStringMin.equals(arg).value;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return arg.equals(argName).toString != m;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return arg.equals(argElement.toString;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return argCount.equals(m)arg).equals(argName;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return m.toStringvisitor.equals(argName);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return m.toStringft.equals(argName, arg)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return arg.equals(arg).toString == m;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return m.toStringft.equals(argName)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return arg.equals(argName).toString()+\";",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return arg.equals(arg) == m;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return arg.equals(argName). in.toString;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return arg.equals(arg) == 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return argCount.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return arg.equals(argRenderingOrder.toString, m;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return m.toStringft.equals(arg);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return arg.equals(argCharacter.toString;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return arg.equals(mthat.toString;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringDescription.toString).equals(argName);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return arg.equals(argName, m.toString;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return arg.equals(arg).value;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return m.toStringequals(argName);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return arg.equals(m) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return m.toStringft.equals(argName).m;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return m.toStringft.equals(argValue) == 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return arg.equals(argName, m);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return arg.equals(m).value;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringDescription.toString != m;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return m.toStringft.equals(arg).length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return m.toStringMin.equals(arg);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return arg.equals(state.m;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return arg.equals(m);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return m != arg.toString;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return m.toStringMin.equals(arg).length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return m.toStringMin.equals(arg).m;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return m.toString % tab.toString;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return arg.equals(argName).toString == m;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return arg.equals(argName) == m;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return m.toStringequals(arg).m;",
                "identical": false
            }
        ],
        "buggy_line": "return StringDescription.toString(m).equals(arg.toString());",
        "fixed_line": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());"
    },
    "Csv-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c >= '0' && c <= '9') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c < '0' || c > '9') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c <= '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c > '9' || c < 'A' || c > '9') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c <= 'A' || c > '9') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c <= 'Z' || c > '9') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c >= 'A' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c <= 'A' && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c <= 'Z' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c <= '0' && c <= '9') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c <= '0' && c <= '9') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c > '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c > '9' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c <= '0' && c <= 'A' || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c <= '9' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c >= '0' && c <= '9') continue;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c < '0' || c > '9' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c <= 'A' || c >= 'Z') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c <= 'Z && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c >= '0' && c <= '9') || c < 'a' || c;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c <= '9' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c <= 'z') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c <= '9' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c <= 'B && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c <= 'x' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c <= 'L && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= 'z';",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c >= '0' && c <= '9') || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c < '0' || c > '9') && c <= 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= 'z';",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c <= 'B && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= 'z');",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c < '0' || c > '9' || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c <=D && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c >= 'A' && c <= '9') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c <= 'Record' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= 'z');",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c >= '0' && c <= '9') || c > 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c > '9' || c < '0') && c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c <= ' *= && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c <= 'x && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c <= ' newRecord && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c >D && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c >= 0 && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c <= 'Record' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c <= 'B' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c <= 2 && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c <= 'Record' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c > '0' && c < 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c >= '0' && c <= '9' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c > '0' && c <= '9') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c >= '0' && c <= 'A' || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c <= 'A' && c >= 'Z') || c <= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c >= 'A' && c <= 'Z') || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c >= '0' && c <= '9') || c < '8') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c > '9' || c < 'A' || c > '9') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c <= ' || c > '9' && c <= 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c <= 'B' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c >= '0' && c <= '9') || c < 'a' || c++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c > 0 && c < 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c <= 'x' || c >= 'A' && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c <= '0') && c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c > '9' && c < 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c >= '0' && c <= '9') || c == 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c <= 'Z' && c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c >= '0' && c <= '9') || c < chars.length - 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c >= '0' && c <= '9') || c < 'a' || c > '9');",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c >= 'A' && c <= 'Z') || c >= 'a' && c <= 'z';",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c <= 'A' && c >= 'Z') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'Z') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c <= 'Z' && c >= 'A' && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c < '0' || c > '9') && c <= 'a' || c - numZ') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c <= '0' && c <= '9') || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c < '0' || c > '9') && c <= 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c <= '0' || c > '9') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c > '9' || c < '0' || c > '9') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= COL') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= 'z';",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c >= '0' && c <= '9') || c < 'a' || c -= 'z') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c <= 'A' || c >= '0' && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c < '0' || c > '9' || c <= 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c <= ' || c > '9' && c <= 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c > '0' && c <= 'A' || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c >= 'A' && c <= 'Z') || c >= 'a' && c <= 'z');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c <= 'B' || c >= 'A' && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c <= 'A' || c > '9' || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c <= 'x' || c > '9') {",
                "identical": false
            }
        ],
        "buggy_line": "if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {",
        "fixed_line": "if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {"
    },
    "Lang-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return foundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is negative",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return foundDigit && !hasExp; // we need a digit after the E",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return foundDigit && !hasExp; // need to '+' because v is negative",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return foundDigit && !hasExp; // need a '+' because' && found",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a sanity check",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return foundDigit && !hasExp; // we didn't really need a digit after the E",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return foundDigit && !hasExp; // so '+' because' && found",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return foundDigit && !hasExp; // need to '+' because may be valid for' && found",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return foundDigit && !hasExp; // functionName '+' because' && found",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return foundDigit && !hasExp; //At or '+' because' && found",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return foundDigit && !hasExp; // we need a digit after the end from '+'",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return foundDigit && !hasExp; // we need a digit after the end from 'l' && found",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return foundDigit && !hasExp; // need to '+' || found",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return foundDigit && !hasExp; // need to '+' because the character",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return foundDigit && !hasExp; //a't really need to do a digit after the E",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a sanity check",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for't do a[i]",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return foundDigit && !hasExp; // need to '+' because' && found",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return foundDigit && !allowSigns && foundDigit;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return foundDigit && !hasExp; // we didn't really need to do a digit after the E",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return foundDigit && !hasExp; // need a '+' because v is negative",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return foundDigit && !hasExp; // need to '+' chars[i]",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return foundDigit && !hasExp; // we need a '+' because v is negative",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for't do a/allowed chars[i]",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for' && found",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return foundDigit && !hasExp; // need to 'w't do a sanity check",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a[i]",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return foundDigit && !hasExp; // we't really need a digit after the E",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return foundDigit && !hasExp; // need to '+' because in the matrix is",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return foundDigit && !hasExp; //a't really need to do a[i]",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return foundDigit && !hasExp; // need to 's't do a sanity check",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return foundDigit && !hasExp; // need to '+' s't do a sanity check",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return foundDigit && !hasExp; // need to '+' because the point",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return foundDigit && !hasExp; // we need a '+' because' && found",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return foundDigit && !hasExp; // need to '+' because theb",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return foundDigit && !hasExp; // we need a digit after the end from 'l' || found",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return foundDigit && !hasExp; // need to '+' because the E",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return foundDigit && !hasExp; // we need a digit after the matrix is negative",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a[i]",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is ignored't do a[i]",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a digit after the E",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for't do a sanity check",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because v is negative",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return foundDigit && !hasExp; // need to 'default't do a sanity check",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return foundDigit && !hasExp; // need to '+' because may be valid for't do a[i]",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return foundDigit && !hasExp; // or '+' because' && found",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return foundDigit && !hasExp; // need a '+'u' && found",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a digit after the E",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return foundDigit && !hasExp; //a't really need to do a digit",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a digit after the matrix is negative",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return foundDigit && !hasExp; // we need a digit after the end from 'w' && found",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return foundDigit && !hasExp; // need to do a digit after the E",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return foundDigit && !hasExp; // we need a '+'u' && found",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a')",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return foundDigit && !hasExp; // need to '+' because the s't do a sanity check",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return foundDigit && !hasExp; // need to '+' because the s'",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return foundDigit && !hasExp; // need to '+' because may be valid for't do a sanity check",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return foundDigit && !hasExp; // need to '+' because the s't do a[i]",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return foundDigit && !hasExp; // need to 's' || found",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return foundDigit && !hasExp; // need to 'Y't do a sanity check",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+'",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return foundDigit && !hasExp; // need to '+' or:",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return foundDigit && !hasExp; // need to '+' because the end from here",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return foundDigit && !hasExp; //a't really need to do a sanity check",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return foundDigit && !hasExp; // need to '+' because.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return foundDigit && !hasExp; // need to '+' because the end from",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for't do a[i]';",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return foundDigit && !hasExp; // need a '+' because't do a sanity check",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return foundDigit && !hasExp; // need to '+' x' && found",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return foundDigit && !hasExp; // need to '+'TYPES't do a sanity check",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return foundDigit && !hasExp; // need a '+' || found",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' or:",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return foundDigit && !hasExp; //a't really need to '+' because the matrix is negative",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return foundDigit && !hasExp; // need to '+' is negative",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a')",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' || found",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for't do a[i]')",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return foundDigit && !hasExp; // need to '+' because the end",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for't do a digit",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return foundDigit && !hasExp; // need to '+' chars[i]')",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return foundDigit && !hasExp; // need to '+' s't do a digit after the E",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return foundDigit && !hasExp; // we need a '+' || found",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return foundDigit && !hasExp; // need to do a digit after the matrix is negative",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return foundDigit && !hasExp; // need to '+' because the s't do a digit",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return foundDigit && !hasExp; // so '+' because the matrix is negative",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for' || found",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return foundDigit && !hasExp; // we didn't really need a 'end' && found",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return foundDigit && !hasExp; // need to '+'u' nulls in the matrix is",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is ignored't do a sanity check",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a digit after the matrix is negative",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return foundDigit && !hasExp; // we need a '+' because't do a digit after the E",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return foundDigit && !hasExp; // need a '+'u't do a sanity check",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return foundDigit && !hasExp; // need to '+' because' || found",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is ignored't do a')",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid (foundDigit",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is assigned or:",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return foundDigit && !hasExp; // need to '+' because v is valid for't do a sanity check",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return foundDigit && !hasExp; // we need a digit after the character",
                "identical": false
            }
        ],
        "buggy_line": "return foundDigit && !hasExp;",
        "fixed_line": "return foundDigit && !hasExp && !hasDecPoint;"
    },
    "Closure-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return NO_STRING;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return propertyResultsLimit;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return propertyResultsLimit, n) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return newResultsMatch;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return allResultsMatch;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return newResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return propertyResultsLimit(allIndexes, n) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return REPLAY_STRING;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return propertyResultsLimit, n;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return NO_MATCH;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return propertyResultsLimit, n == MAY;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "returnControlFlowExterns, n) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return NO_ANNOTATION_STRING;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return allResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return NO_UNREAD_STRING;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return newResultsMatch(recNode, n) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return propertyResultsLimit, nConstants.ACC_SYNTHETIC) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return FieldUtils.ResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return NO_Constants.ACC_PUBLIC, n);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return propertyResultsLimit, n == NO_STRING;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return propertyResultsLimit, n);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return allResultsMatch(allIndexes, n) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return NO_Constants.ACC_SYNTHETIC;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return newResultsMatch(recType, n) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return propertyResultsVE_STRING;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return propertyResultsLimit(allIndexes, n);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return newResultsMatch(allIndexes, n) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return propertyResultsLimit, ncontaining_STRING;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return newResultsMatch(recBlock, recurse) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return propertyResultsVE_STRING, recurse;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return propertyResultsLimit(allURI, n) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return NO_Constants.ACC_PUBLIC, n) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return propertyResultsLimit, nGroups;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return allResultsMatch(n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return newResultsMatch(n, toHashCode_STRING;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return NO_EXTENDS_NAME, recurse;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return newResultsMatch(rec, n) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return REPLAY_STRING, recurse;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return newResultsMatch(recBlock,ESCAPE_BE_STRING) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return newResultsMatch(recType, recurse) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return propertyResultsLimit, n == 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return newResultsMatch(recNode, recurse) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return newResultsMatch(recBlock, n) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return NO_EXTENDS_NAME, recurse) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return NO_Constants.ACC_PUBLIC, n) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return NO_EXTENDS_WITHOUT_TYPE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "returnControlFlowMatch;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return propertyResultsLimit(allURI, n);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return newResultsMatch(recBlock,ESCAPE_BE_STRING;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return REPLAY_STRING, nGroups;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return NO_EXTENDS_WITHOUT_TYPE, recurse) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return FieldUtils.ResultsMatch(recNode, recurse_STRING);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return propertyResultsLimit, nConstants.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return propertyResultsLimit, nConstants.ACC_SYNTHETIC;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return allResultsMatch(n, to)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return newResultsMatch(n, attrCount);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "returnControlFlowExterns, n;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return REPLAY_STRING, nBeHIDDEN);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return newResultsMatch(n, recurse_STRING;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return propertyResultsLimit(allInstant, n) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return propertyResultsLimit(all avail, n) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return newResultsMatch(n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return REPLAY_STRING, nBeHALF_AS_STRING);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return NO_WRAPPER_STRING;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return newResultsMatch(recNode, recurse_STRING;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return newResultsMatch(recBlock,ESCAPE_STRING;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return NO_CHARS;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return newResultsMatch(n, attr) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return FieldUtils.ResultsMatch(recNode, recurse_STRING) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return propertyResultsLimit, n) TOKENS_PER_STRING;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return allResultsLook;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return FieldUtils.ResultsMatch(recNode, n) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return FieldUtils.ResultsMatch(recBlock, recurse_STRING);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return newResultsMatch(n, recurse_STRING) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return newResultsMatch(n, to)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NO_EXTENDS_WITHOUT_TYPE, recurse;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return propertyResultsLimit(allIndexes, n) ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return newResultsMatch(recNode, recurse_STRING) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return propertyResultsing;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return newResultsMatch(n, toHashCode_STRING);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return REPLAY_STRING, uclip;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return propertyResultsLimit, nConstants.ACC_PROVIDEPRECATED;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return NO_Constants.ACC_PUBLIC, n;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return propertyResultsMatch_BE_STRING, recurse;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return FieldUtils.ResultsMatch(n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return NO_EXTENDS_WITHOUT_TYPE, recurse);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return newResultsQUOTE_STRING;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return newResultsMatch(recNode, recurse_STRING);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return REPLAY_STRING, nBeHALF_AS_STRING;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return propertyResultsLimit(allIndexes, nGroups, recurse);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return FieldUtils.ResultsMatch(recBlock, recurse) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return propertyResultsLimit, nRenderingMatch;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return propertyResultsLimit, n == digit;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return NO_MATCHESCAPE_STRING;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return allResultsC_STRING, n) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return propertyResultsLimit, nConstants.ACC_PROTECTED);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return propertyResultsLimit, nConstants.ACC_USE_WRAPPER_STRING;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return NO_OCCURMatch_STRING;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return NO_Constants.ACC_PUBLIC, n) || recurse;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return NO_OCCURMatch_STRING, recurse;",
                "identical": false
            }
        ],
        "buggy_line": "return allResultsMatch(n, MAY_BE_STRING_PREDICATE);",
        "fixed_line": "return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);"
    },
    "Lang-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "str.getChars(0, strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "str.getChars(0, strLen, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "str.getChars(0, strLen, buffer, size;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "str.getChars(0, strLen, buffer, size + padLen);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "str.getChars(0, strLen, buffer, size - width;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "str.getChars(0, strLen, buffer, size - padLen;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "str.getChars(0, strLen, buffer, size + width;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "str.getChars(0, strLen, buffer, size = padLen;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "str.getChars(0, strLen, buffer, size];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "str.getChars(0, strLen, buffer, size] = padChar;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "str.getChars(0, strLen, buffer, size > padLen;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "str.getChars(0, strLen, buffer, size > width;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "str.getChars(0, strLen, buffer, size1 + padLen;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "str.getChars(0, width, buffer, size);",
                "identical": true
            },
            {
                "k": 15,
                "patch": "str.getChars(0, strLen, buffer, size += width;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "str.getChars(0, strLen, buffer, size : padLen;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "str.getChars(0, strLen, buffer, size + i);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "str.getChars(0, strLen, buffer, sizeChar);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "str.getChars(0, strLen, buffer, size % padLen;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "str.getChars(0, strLen, buffer, size-1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "str.getChars(0, strLen, buffer, size makeLen;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "str.getChars(0, strLen, buffer[size - 1];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "str.getChars(0, strLen, buffer, size % width;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "str.getChars(0, strLen, buffer, size -= padLen;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "str.getChars(0, strLen, buffer, size+1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "str.getChars(0, strLen, buffer, size + padLen] = padChar;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "str.getChars(0, strLen, buffer, size--) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "str.getChars(0, strLen, buffer, sizeVarsLen;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "str.getChars(0, strLen, buffer, size\", padLen;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "str.getChars(0, strLen, buffer, size + replaceLen;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "str.getChars(0, strLen, buffer, size+1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "str.getChars(0, strLen, buffer, size });",
                "identical": false
            },
            {
                "k": 33,
                "patch": "str.getChars(0, strLen, buffer, size) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "str.getChars(0, strLen, buffer, sizeEOF;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "str.getChars(0, strLen, buffer, size / padLen;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "str.getChars(0, strLen, buffer, size + i;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "str.getChars(0, strLen;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "str.getChars(0, width, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "str.getChars(0, strLen, buffer, startIndex);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "str.getChars(0, strLen, buffer, sizequoteLen;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "str.getChars(0, strLen, buffer, sizeEmitterLen;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "str.getChars(0, strLen, buffer, size SegmentLen;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "str.getChars(0, padLen, buffer, size);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "str.getChars(0, strLen, buffer, sizepopupLen;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "str.getChars(0, strLen, buffer, sizeMathLen;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "str.getChars(0, strLen, buffer, size + padLen = padLen;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "str.getChars(0, strLen, buffer, sizemutator;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "str.getChars(0, strLen, buffer, size+ padLen;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "width = str.getChars(0, strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "str.getChars(0, strLen, buffer, padLen);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "str.getChars(0, strLen, buffer, sizeDoubleLen;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "str.getChars(0, strLen, buffer, size CompilerLen;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "str.getChars(0, strLen, buffer, size + padLen -= width;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "str.getChars(0, strLen, buffer, sizeltLen;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "str.getChars(0, strLen, buffer, size lowLen;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "str.getChars(0, strLen, buffer, sizeHexStringLen;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "str.getChars(0, strLen, buffer, sizeqlLen;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "str.getChars(0, strLen, buffer, size[][] padLen;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "str.getChars(0, strLen, buffer, sizeServletContextLen;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "width.getChars(0, strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "str.getChars(0, strLen, buffer, sizeargLen;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "str.getChars(0, strLen, buffer, size rhsLen;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "str.getChars(0, strLen, buffer, size -= width;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "str.getChars(0, strLen, buffer, size('-Len;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "str.getChars(0, strLen, buffer, size1 - width;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "str.getChars(0, strLen, buffer, size fileLen;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "str.getChars(0, strLen, buffer, size + replaceLen);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "str.getChars(0, strLen, buffer, size1 + padLen);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "str.getChars(0, strLen, buffer, size');",
                "identical": false
            },
            {
                "k": 70,
                "patch": "str.getChars(0, strLen, buffer, size]) >= width;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "str.getChars(0, strLen, buffer, sizeoughLen;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "str.getChars(0, strLen, buffer, sizeCONSTANT;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "str.getChars(0, strLen, buffer, size / 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "str.getChars(0, strLen, buffer, sizeableLen;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "str.getChars(0, strLen, buffer, sizeChar;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "str.getChars(0, strLen, buffer, size[size];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "str.getChars(0, strLen, buffer, size .utilLen;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "str.getChars(0, strLen, buffer, size-1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "str.getChars(0, strLen, buffer, size minuteLen;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "str.getChars(0, strLen, buffer, size / width;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "str.getChars(0, strLen, buffer, sizeinateLen;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "str.getChars(0, strLen, buffer, sizeMarkerLen;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "str.getChars(0, strLen, buffer, size iteratorsLen;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "str.getChars(0, strLen, buffer, sizeDescLen;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "str.getChars(0, strLen, buffer, size])) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "str.getChars(0, strLen, buffer, size + padLen - width;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "str.getChars(0, strLen, buffer, sizeChartLen;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "str.getChars(0, strLen, buffer, padLen;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "str.getChars(0, strLen, buffer, size]) >= padLen;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "str.getChars(0, strLen, buffer, size - width);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "str.getChars(0, strLen, buffer, size) % padLen;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "str.getChars(0, strLen, buffer, sizebody);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "str.getChars(0, strLen, buffer, size) % width;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "str.getChars(0, strLen, buffer, size + MAX_SEGMENT_LEN;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "str.getChars(0, strLen, buffer, size1)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "str.getChars(0, strLen, buffer, size nextLen;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "str.getChars(0, strLen, buffer, sizeCALL);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "str.getChars(0, strLen, buffer, sizethat;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "str.getChars(0, strLen, buffer, sizefieldNameLen;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "str.getChars(0, strLen, buffer, size + MAX_Len;",
                "identical": false
            }
        ],
        "buggy_line": "str.getChars(0, strLen, buffer, size);",
        "fixed_line": "str.getChars(0, width, buffer, size);"
    },
    "Closure-113": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (provided == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (provided != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( 5; != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (angle != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (process != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (union != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (str != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (classOnly == null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (Jprovided == null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (utes != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (canonical != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (startsWith != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (firstCode == null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( \".\" != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( tt != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (Converters != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( getParameter == null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (safe != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( getParameter != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (child != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (must.provided != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (classOnly != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (graph != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (classCode != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( jsRoot != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( requiresParent == null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (id != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (CONTEXT != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (bestValidParent == null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( types != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (\u65c2 != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( scaled != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (percent != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (intern != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Outline != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (indexed != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tz != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (DIR != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (instruction != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (pass == null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( sigma != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (Row != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (col != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (hour != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (AssertionCode != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (ob != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (rotate != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (fromCode != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( getF != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (field != null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (second != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( start != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( reader != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (finally != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (right != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( dh != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (issa != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( med != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( reader == null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Outer != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( high != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (general != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (canonicalize == null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (Tick != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( confusing != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (xpath != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (\u2add != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (canonicalize != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (firstCode != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( Modules != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (ref != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (joined != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (str == null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (class != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (flag != null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (0.00 != null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (off != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( js != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( 2), != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( power != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (BigDecimal != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (unit != null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (bits != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Extended != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (ctxt != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( Required != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (prev != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (context != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( the != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (cf != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Visited == null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tom != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (getItem != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (ctxt == null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( partial != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (detach != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( parent != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (ning != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (instruction == null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Converters == null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (provided != null) {",
        "fixed_line": "if (provided != null || requiresLevel.isOn()) {"
    },
    "Lang-61": {
        "fixes": [
            {
                "k": 1,
                "patch": "int len = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int len = str.length - strLen;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int len = size - strLen;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int len = strLen - thisBuf.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int len = this.str.length - strLen;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int len = str.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int len = buffer.length - strLen;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int len = strLen - 1 + thisBuf.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int len = this.length - strLen;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int len = strLen - strLen;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int len = str.length - startIndex;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int len = strLen - startIndex;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int len = strLen - this.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int len = str.length - 1 + thisBuf.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int len = str.length - 2 * thisBuf.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int len = strLen - '0');",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int len = str.length - size;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int len =Stream.length - strLen;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int len = strLen - this.str.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int len = strLen - buffer.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int len = strLen - 2 * thisBuf.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int len = strLen - '0';",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int len = str.length - buffer.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int len = strBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int len = sourceBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int len = fullBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int len = buf.length - strLen;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int len = isBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int len = strLen - FIELDS_STORE_SIZE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int len = strLen - '0Buf.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int len = searchBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int len = strLen - start.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int len = str.length - start;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int len = minimum.length - strLen;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int len = strLen - removeBuf.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int len = this.str.length - startIndex;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int len =ByDefault.length - strLen;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int len = strLen -isBuf.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int len = fullChunk.length - strLen;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int len = '0Buf.length - strLen;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int len = str.length -isBuf.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int len = searchLen - strLen;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int len = str.length - removeLen;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int len = strLen - size;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int len = chars.length - strLen;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int len = str.length - MIN_HASH_SIZE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int len = strLen -Stream.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int len = strLen -State.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int len = strLen - fBuf.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int len = str.length - '0');",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int len = fullblocks.length - strLen;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int len = str.length -3;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int len = strLen - 0, j;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int len = j - strLen;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int len = max - strLen;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int len = strLen - MIN_HASH_SIZE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int len = strLen - optBuf.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int len = strLen - defBuf.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int len = strLen - range.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int len = strLen - outer.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int len = size - str.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int len =);//.length - strLen;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int len = strLen - fieldType.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int len = strLen - start;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int len = text.length - strLen;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int len = name.length - strLen;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int len = strLen - '0');",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int len = strLen - MIN_SIGNATURE.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int len = this.len - strLen;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int len = str.length - MIN_SIGNATURE.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int len = strLen -3;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int len = str.length -isLen;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int len = strLen - Bulk.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int len = str.length - 0, j;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int len =fieldName.length - strLen;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int len = strLen - 1 + this.strLen;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int len = hi.length - strLen;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int len = strLen - elb.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int len = strLen - MIN_ESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int len = x.length - strLen;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int len = encoded.length - strLen;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int len = endIndex - strLen;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int len = str.length - MIN_HASH_ESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int len = str.length - MIN_ESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int len = strLen - this.historyBuf.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int len = str.length -ITEM_WENT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int len = str.length - '0';",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int len = str.length - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int len = size - strLen + 1;",
                "identical": true
            },
            {
                "k": 90,
                "patch": "int len = str.length - MIN_VALUE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int len = newSize - strLen;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int len = this.str.length - buffer.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int len = strLen - MIN_LENGTH.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int len = thisBuf.length - buffer.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int len = thisBuf.length - size;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int len = fullLen - strLen;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int len =startIndex - strLen;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int len = str.length -MAR;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int len = padLen - strLen;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int len = length - strLen;",
                "identical": false
            }
        ],
        "buggy_line": "int len = thisBuf.length - strLen;",
        "fixed_line": "int len = size - strLen + 1;"
    },
    "JacksonDatabind-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _bindAndReadValues.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _bindAndReadValues.createParser(src, offset);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders, offset);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _bindAndReadValues;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0 || _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != DISABLED;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders[0];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _bindAndReadValues.createParser(_dataFormatReaders;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return _bindAndReadValues.createParsers(_dataFormatReaders;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _bindAndReadValues.createParser(src), _value);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _bindAndReadValues.createParser(src), _valueReaders;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _bindAndReadValues.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders, offset;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != i;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return _bindAndReadValues.createParser(src, offset;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != src._length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _bindAndReadValues.createParser(_parser, offset;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _bindAndReadValues.createParsers(_parser, offset;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._dataFormatReaders;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _bindAndReadValues.createParser(src;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != -1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _bindAndReadValues.createParsers(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != DISABLED;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _bindAndReadValues.createParser(_dataFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != i;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders[0];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != 0 || _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _bindAndReadValues.createParser(src), _value != 0 || _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormat.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != NULL;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _bindAndReadValues.createParser(src), _value;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _bindAndReadValues.createParsers(_dataFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _bindAndReadValues.createParser(src), _length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _bindAndReadValues.createParser(src);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != DISABLED;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != offset;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _bindAndReadValues.createParser(src), _primary != 0 || _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _bindAndReadValues.createParser(_dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _bindAndReadValues.createParsers(_jsonFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._bind;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _bindAndReadValues.createParsers(_dataFormatReaders != null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _bindAndReadValues.createParser(src), _valueType);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormat;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _bindAndReadValues.createParser(src), _valueInstantiator;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != i);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0 || length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders !=i);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != null);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _bindAndReadValues.createParser(_parser, offset);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return _bindAndReadValues.createParsers(_dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _bindAndReadValues.createParser(_dataFormatReaders != null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != qlen;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _bindAndReadValues.createParser(src), _nodeFactory);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _bindAndReadValues.createParser(src), _inputReaders;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _bindAndReadValues.createParser(src), _standardFormatReaders;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders !=i;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonEncoding.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _bindAndReadValues.createParser(src), _valueHandler;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders[0];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueFormatReaders != src._length;",
                "identical": false
            }
        ],
        "buggy_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),",
        "fixed_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),"
    },
    "Closure-168": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (n == 2) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (n.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parent.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (first.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (cost.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (n == parent.getScopeDepth) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (cost.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parent != 2) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (first.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (first.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (t != 2) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (n.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (cost.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parent.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (n != 2) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (n.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (cost.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parent.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parent.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (cost.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (n.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (t == 2) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (n != parent.getScopeDepth) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (first.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parent.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (right.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( that.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parent.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (n == parent.getScope) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (lhs.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (synt && first.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (t != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (syntacticDepth != 2) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (t != JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (n != parent.getScope) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (t != JsonToken.VALUE_TRUE) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (cost.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (t != JsonToken.Depth) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (first.getScope() != 3) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (t != JsonToken.START_ARRAY) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (n.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (n.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (t != n.getScope) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (first.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parent != thisScope.getScopeDepth) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (partial.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parts.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (n.getScopeDepth() != 4) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (child.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (cur.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (first.getScope() != n) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (bytes.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (t != JsonToken.TRUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( that.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (first.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parameters.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (root.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (doc.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (n == args.getScopeDepth) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( finally.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (n.getScope() != 3) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( that.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parts.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( that.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (n == parent.getScopeFALSE) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (child.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (cur.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (n.getScopeDepth() != 1) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (cur.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (cost.getScopeDepth == 2) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (doc.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parent != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Utils.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (inExterns == 2) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( Locale.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (option.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (t != input.getScope) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (cost.getScope() != 3) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (docInfo.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (next.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (synt && first.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( Locale.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (lhs.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (n == args.getScope) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (bytes.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (partial.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (doc.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parts.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (ref.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( merged.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (t != JsonToken.LC) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (t != args.getScope) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (first.getScope == 2) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (t != JsonToken.NULL) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (doc.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (provided.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (provided == fn.getScope) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (t != that.getScope) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (ialized.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (synt && n == 2) {",
                "identical": false
            }
        ],
        "buggy_line": "if (t.getScopeDepth() <= 2) {",
        "fixed_line": "if (t.getScopeDepth() <= 1) {"
    },
    "JacksonDatabind-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "found = name;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "found = name.equals(key);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "found = name.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "found = prop.equals(name);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "found = name.equals(prop.getName;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "found = name.equals(name);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "found = name.getName;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "found = prop.getName;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "found = name.equals(other.getName;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "found = properties.equals(name);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "found = name.equals(prop.getName_STRING;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "found = name.equals(key;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "found = name.equals(prop.name;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "found = name.equals(lang.getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "found = prop.equals(key;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "found = name.equals(prop.getName_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "found = properties.equals(key);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "found = name.equals(prop.getName_calculated;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "found = name.equals(this.getName;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "found = name.equals(prop.getName_TYPE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "found = name.equals(prop.getName_hi;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "found = name.equals(prop.getName_oldLen;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "found = name.equals(prop.getName_EXTENDED;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "found = name.equals(lang.getName;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "found = name.equals(prop.getName_CONSTANT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "found = name.equals(prop.getName_oldName;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "found = name.equals(prop.getName_GAP_PROP;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "found = name.equals(prop.getName_ a;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "found = name.equals(name;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "found = name.equals(prop.getName_FOR_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "found = name.equals(keyNode;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "found = name.equals(prop.getName_oldestAt;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "found = name.equals(prop.getName_FOR_STRING;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "found = root.equals(key);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "found = name.equals(prop.getName_SPECIAL;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "found = name.equals(prop.getName_break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "found = name.equals(found_TYPE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "found = name.equals(prop.getName_JacksonUSE_PROTOTYPE_DEFINE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "found = name.equals(prop.getName_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "found = name.equals(prop.getName_PLETS[key];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "found = name.equals(keyRenderingOrder.getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "found = name.equals(prop.getName_CONSTANT_NAME;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "found = name.equals(other.getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "found = name.equals(other.name;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "found = name.equals(prop.name);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "found = name.equals(prop.getName_JacksonUSE_PROTOTYPE_AND_VAR;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "found = name.equals(prop.getName_FOR_TYPE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "found = name.equals(prop.getName_JacksonUSE_PROTOTYPE_DELTA;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "found = name.equals(prop.getName_oldOffset;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "found = name.equals(prop.getName_ hours;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "found = name.equals(prop.getName_FOR_PROPERTY;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "found = name.equals(found_PREFIX;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "found = name.equals(prop.getName_INDEX;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "found = name.equals(prop.getName_GAP_FOR_PROPERTY;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "found = name.equals(dataset.getName());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "found = name.equals(this.name;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "found = name.equals(prop.getName_ character;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "found = name.equals(prop.getName_negated;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "found = Zoom.equals(name);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "found = name.equals(prop.getName_FOR_EXTENDED;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "found = name.equals(prop.getName_ a);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "found = name.equals(prop.getName_Prune;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "found = name.equals(prop.getName_ digit;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "found = root.equals(name);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "found = name.equals(prop.getName_PLETS[key;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "found = name.equals(prop.getName_PLETS[hash-order;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "found = name.equals(pn.getName;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "found = name.equals(prop.getName_PROP;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "found = newName.equals(name);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "found = prop.equals(name;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "found = name.equals(prop.getName_JacksonUSE_PROTOTYPE_FOR_DEFINE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "found = name.equals(prop.getName_JacksonUSE_PROTOTYPE_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "found = name.equals(prop.getName_FOR_PREFIX;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "found = name.equals(type);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "found = name.equals(prop.getName_2(found;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "found = name.equals(prop.getName_FOR_ITEM_SIZE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "found = name.equals(prop.getName_Serializer;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "found = name.equals(prop.getName_FOR_EMPTY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "found = name.equals(lang.getName_TYPE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "found = name.equals(prop.getName_GNU;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "found = name.equals(value;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "found = name.equals(prop.getName_ lower;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "found = name.equals(this.key;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "found = name.equals(Callback.getName());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "found = name.equals(key)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "found = name.equals(prop.getName_ branch;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "found = name.equals(ITEM_CONSTANT_NAME;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "found = name.equals(prop.getName_type);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "found = name.equals(prop.getName_GAP_FOR_CHAR;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "found = name.equals(dataset.getName;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "found = name.equals(lang.getName_STRING;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "found = name.equals(prop.getName_JacksonUSE_PROTOTYPE_AND_DEFINE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "found = name.equals(prop.getName_PLETS_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "found = name.equals(prop.getName_Keys)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "found = name.equals(nameNode.getName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "found = name.equals(key, property);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "found = name.equals(key);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "found = name.equals(prop.getName_ info;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "found = name.equals(prop.getName_FOR_ modules;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "found = name.equals(prop.getName_ addS[key];",
                "identical": false
            }
        ],
        "buggy_line": "found = key.equals(prop.getName());",
        "fixed_line": "found = key.equals(_hashArea[i-1]);"
    },
    "Chart-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (endIndex < 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (endIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (itemIndex < 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (lastIndex == -1) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (lastIndex == -1) { // first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (endIndex < 0) { // first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (endIndex < 0) { // end and last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (endIndex < 0) { // end period has last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (endIndex < 0) { // end and new item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (endIndex < 0) { // and last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (max - 1 < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (this.endIndex < 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (endIndex < 0 ) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (maxIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (max -endIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (max - firstIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (itemIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end and v is not in original series",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (periodIndex < 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (endIndex < 0) { // end period is -> R item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (max - startIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (max - 1, item.endIndex < 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (endIndex < 0) { // end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (itemIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (endIndex == -1) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (max -endIndex < 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (endIndex < 0) { // end period is last item and v is not in original series",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (endIndex < 0) { // end period is not in original last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (isIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (endIndex < 0) { // empty String is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (endIndex == -1) { // first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (endIndex < 0) { // end period is not in last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (endIndex < 0) { // end period is not in original item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (max -timeIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (endIndex < 0) { // end and v is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (periodIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (max - firstIndex < 0) { // end period is last item AFTER end period",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (endIndex < 0) { // end is not in original series",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (endIndex < 0) { // end is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period to and v is not in original series",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (max - 1 < 0) { // end period is last item AFTER end period",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (lastIndex == -1) { // end period is first item AFTER end period",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (maxIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period rotate to and v is not in original series",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (endIndex < 0) { // end period to and v is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (max -endIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (lastIndex == -1) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (max -timeIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (endIndex < 0) { // end period is -> last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (endIndex < 0) { // end period is first item after last item AFTER end period",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (max - 1 < 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (endIndex < 0) { // end period is first item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (max - 1 < 0) { // end period is last item BEFORE end and v is not in original series",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( lastIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (lastIndex == 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (bufferedIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (endIndex < 0) { // end and v is not in original series",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period to v is not in original series",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (endIndex < 0 || itemIndex > end) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (endIndex < 0) { // end period is last item nx to and v is not in original series",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (startIndex < 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (seriesIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (endIndex < 0) { // end period is not in original String is first item AFTER end period",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (lastIndex == -1) { // end period is last item AFTER end period",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period isatorIndex next is not in original series",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end and v is first item AFTER end period",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end and not in original series",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (endIndex < 0) { // end period to and v is not in original series",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (max - 1 < 0) { // end is not in original series",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period?",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (endIndex < 0) { // end period is valid last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (endIndex < 0) { // end period is last item and v is first item AFTER end period",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (max - 1 < end) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (max -endIndex < 0) { // end period is last item AFTER end period",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (lastIndex == -1) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (max - firstIndex < 0) { // end period is last item BEFORE end and v is not in original series",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( iiIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (endIndex < 0) { // end period is not in original String is not in original series",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period isatorIndex to and v is not in original series",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (skipIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (endIndex < 0) { // end period is not in original item AFTER end period",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (endIndex < 0) { // end period is not in original last item AFTER end period",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (endIndex < 0) { // end period is not in original item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (endIndex < 0) { // end period is -> 8 chars: this is last item AFTER end period",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (endIndex < 0) { // end period is not in original String is first item after last item AFTER end period",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( messageIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (endIndex < 0) { // end period to and v is last item AFTER end period",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (max - firstIndex < 0) { // end is not in original series",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (max - startIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (max -endIndex < 0) { // end is not in original series",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (endIndex < 0) { // end and next is not in original series",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (endIndex < 0) { // end period is last item nx to AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is -= endIndex and v is not in original series",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (lastIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( surroundingIndex < 0) { // end period is not in original series",
                "identical": false
            }
        ],
        "buggy_line": "if (endIndex < 0) {",
        "fixed_line": "if ((endIndex < 0)  || (endIndex < startIndex)) {"
    },
    "Csv-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "public static final CSVFormat EXCEL = 360;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final CSVFormat EXCEL = format;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final CSVFormat EXCEL = classNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final CSVFormat EXCEL = access;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public static final CSVFormat EXCEL =printNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public static final CSVFormat EXCEL =Cache.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public static final CSVFormat EXCEL =Cache.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyNames;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public static final CSVFormat EXCEL = this.DurationFormat;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public static final CSVFormat EXCEL = daFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public static final CSVFormat EXCEL = 255.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyExpr(true);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final CSVFormat EXCEL =ActiveEmpty.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final CSVFormat EXCEL =Object.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public static final CSVFormat EXCEL = 31.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final CSVFormat EXCEL =Object.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public static final CSVFormat EXCEL = parent.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public static final CSVFormat EXCEL =ActiveEmptyNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyTypes(true);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public static final CSVFormat EXCEL =UTEFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public static final CSVFormat EXCEL = year.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyBorder;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyLines) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyNames;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public static final CSVFormat EXCEL =dep.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final CSVFormat EXCEL = param;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public static final CSVFormat EXCEL = parent.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final CSVFormat EXCEL =Cache.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmptyNames;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public static final CSVFormat EXCEL =ActiveEmptyTypes.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public static final CSVFormat EXCEL = 360.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty hashCode;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public static final CSVFormat EXCEL =Active;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final CSVFormat EXCEL = formatter.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final CSVFormat EXCEL =i.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public static final CSVFormat EXCEL = parent.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public static final CSVFormat EXCEL =Active.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmptyBorder;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public static final CSVFormat EXCEL =ActiveEmpty;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public static final CSVFormat EXCEL = parent.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final CSVFormat EXCEL = obj.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final CSVFormat EXCEL = obj.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final CSVFormat EXCEL = AxisFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty(true);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final CSVFormat EXCEL =rogates.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final CSVFormat EXCEL = depth.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final CSVFormat EXCEL = year;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyVar(true);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public static final CSVFormat EXCEL =dirs.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final CSVFormat EXCEL =out.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public static final CSVFormat EXCEL =ActiveEmpty.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final CSVFormat EXCEL = ge;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty(true);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public static final CSVFormat EXCEL =Object.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public static final CSVFormat EXCEL = daFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final CSVFormat EXCEL = matching;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnorebar;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public static final CSVFormat EXCEL = getRight.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public static final CSVFormat EXCEL = custom.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public static final CSVFormat EXCEL =printNames.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final CSVFormat EXCEL =ActiveEmpty.withIgnoreEmptyNames;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty0(true);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final CSVFormat EXCEL = startY.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public static final CSVFormat EXCEL = lhs.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public static final CSVFormat EXCEL = p.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public static final CSVFormat EXCEL = formatter.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public static final CSVFormat EXCEL = 31.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmptyLines) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreONLY;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public static final CSVFormat EXCEL =Object.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public static final CSVFormat EXCEL = zz.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmptyTypes(true);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public static final CSVFormat EXCEL =ActiveEmpty.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final CSVFormat EXCEL = matchingEmptyTypes.withIgnoreEmpty;",
                "identical": false
            }
        ],
        "buggy_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
        "fixed_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames(true);"
    },
    "Jsoup-45": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (name instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (name instanceof \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (name instanceoftd\".equals(name)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (name.equals(\"parent\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (name.equals(\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (name.equals(\"td\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (name !=(\"td\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (name !=(\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (name.equals(\"parent\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (name !=(\"td\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !last\".equals(name;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (name.equals(node instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (name !=(\"td\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"in\".equals(name);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (name.equals(\"td\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"undefined\".equals(name);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (name instanceof \"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (name.equals(\"td\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (\"td\".equals(name) || \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (name.equals(nodeType instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"in\".equals(name);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"undefined\".equals(name);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (name.equals(\"parent\".equals(name) && \"undefined\".equals(name);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (name.equals(\"parent\".equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (\"td\".equals(name) || \"parent\".equals(name;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"in\".equals(name;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !last\".equals(name);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (\"td\".equals(name) || \"in\".equals(name);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !name;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"w\".equals(name);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (\"td\".equals(name) || \"in\".equals(name;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"w\".equals(name);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (name.equals(node) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (name instanceoftd\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (name.equals(node) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (name !=(\"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent of\".equals(name);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (name.equals(\"parent\".equals(name) && \"in\".equals(name);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (name.equals(\"Reject\") || !last\".equals(name)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (name.equals(\"parent\".equals(name) || \"in\".equals(name);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (name.equals(\"parent\".equals(name) && \"w\".equals(name);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (name.equals(methodName) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (name.equals(methodName) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (name.equals(\"parent\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"bitIndex + !last\".equals(name);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (\"td\".equals(name) || \"undefined\".equals(name);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (name instanceof \"td\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"html\".equals(name);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"Invalid\".equals(name);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (name.equals(nodeType) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"Invalid\".equals(name);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (name.equals(\"td\".equals(name) || \" begin\".equals(name);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (name.equals(\"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"bit !last\".equals(name;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (name.equals(\"td\".equals(name) && \" begin\".equals(name);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent !last\".equals(name);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (\"td\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (name.equals(nodeType) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (name.equals(\"parent\") || !last\".equals(name)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent !last\".equals(name;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent !name;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"predicates\".equals(name);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"bitIndex + !last\".equals(name;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"child\".equals(name);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"w\".equals(name;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (name.equals(node instanceoftd\".equals(name)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (\"parent\".equals(name) || \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"\"));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (name.equals(desc) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (name.equals(\"parent\".equals(name) || \"in\".equals(name;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (\"-td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (name.equals(\"UTC\".equals(name) && \"parent;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent != -1) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (name.equals(\"td\".equals(name) || !last\".equals(name)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (name.equals(\"UTC\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (name.equals(\"in\".equals(name) || \"parent !last\".equals(name;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent of\".equals(name;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (name !=(\"td\".equals(name) && \"parent;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (name !=(\"td\".equals(name) || !last\".equals(name)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else ifDECL\".equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (name.equals(node instanceof \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"undefined\".equals(name;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if count ==(\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent != !last\".equals(name);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"\"));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (name !=(\"parent\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (\"parent\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (\"td\".equals(name) || \" begin\".equals(name);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (parent !=(\"td\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (name.equals(nodeType instanceof \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (\"td\".equals(name) || \"Invalid\".equals(name);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (\"td\".equals(name) || \"undefined\".equals(name;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (_last\".equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (name.equals(\"Order\") || !last\".equals(name)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (name.equals(nodeType instanceoftd\".equals(name)) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {",
        "fixed_line": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {"
    },
    "Lang-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal)];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calculated);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calDeclared);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal );",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_PER_HOUR;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calm);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calculated);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calculated;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal)[0];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal2);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal instanceof cal) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.get;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calIndex);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal neg);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(caln);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal Reflect);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_ expr;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calreferenced);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal\";",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal getSecond);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1)];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) - cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1)[0];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal between);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_IN_DAY;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) || cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal diff);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calcursor);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calates);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) != cal2.get);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal g2);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cal1.getCalendar.HOUR_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calITED);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calDecom);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_PER_HOUR;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calRoot);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_ARRAY;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal8);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_LENGTH;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_ js;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) != cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.get);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calfs);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) - cal2.get(cal];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal break;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.get m;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal sb);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal LAST_HOUR_IN_DAY);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) || cal2.get(cal;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal THREE);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal (cal1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calci);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) == cal2.HOUR_PER_HOUR;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_TYPE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal getBoolean);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && cal2.get(cal1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal minY);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) || cal2.get(cal];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calClass);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calOLE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getSize;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getMillis;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_S;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal LAST_HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calNoSideEffects);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1, cal2);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calci;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal flags);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calsig);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(caleter);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal)1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_VALUE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calDeserializer);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal Reset);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal) + cal1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calInteger);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calObject);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calBoundary);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal getSecond) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_PER_HOUR;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calDeclared)];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) {",
                "identical": false
            }
        ],
        "buggy_line": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&",
        "fixed_line": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&"
    },
    "Closure-62": {
        "fixes": [
            {
                "k": 1,
                "patch": "&& charno < 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "&& 0 <= charno && c >= 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& 0 <= charno && c < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "&& 0 <= charno && c < endExcerBytes.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& 0 <= charno && c < end;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "&& 0 <= charno && c >= 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "&& 0 <= charno && c < endNode.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "&& 0 <= charno && c < endLiteral.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "&& 0 <= charno && c = sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "&& 0 <= charno && c < endExcerpt.length + 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "&& 0 <= charno && c < endHandler.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "&& 0 <= charno && c < endBuf.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "&& 0 <= charno && c < endExcera.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "&& 0 <= charno && c < endExcer = sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "&& 0 <= charno && c < endEscapes.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "&& 0 <= charno && c < end other.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "&& 0 <= charno && c < endDoc.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "&& charno < endExcer && i.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "&& 0 <= charno && c < endValue.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "&& 0 <= charno && c < end periodExcerpt.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "&& 0 <= charno && c == sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "&& 0 <= charno && c >= endExcerpt.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "&& 0 <= charno && c < endExcerdepends.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "&& 0 <= charno && c < endName.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "&& 0 <= charno && c < endExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "&& charno < endExcer && i;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "&& 0 <= charno && c < endExcerMarks.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "&& 0 <= charno && c < endSigned.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "&& 0 <= charno && c < endExcer ca;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "&& 0 <= charno && c < endShort.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "&& 0 <= charno && c < endExcerpt.length angle;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "&& 0 <= charno && sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "&& 0 <= charno && c < endExcerpt.length++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "&& 0 <= charno && c < endExcerit.length + 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "&& 0 <= charno && c < endExcer firstChild.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "&& 0 <= charno && c < endExcer = sourceExterns.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "&& 0 <= charno && c < endLen;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "&& 0 <= charno && c < endDeserializer.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "&& 0 <= charno && c < end period.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "&& 0 <= charno && c < end) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "&& 0 <= charno && c < endNames.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "&& 0 <= charno && c < endExcerdataset.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "&& 0 <= charno && c != 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "&& 0 <= charno && c < endExcerstr.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "&& 0 <= charno && c < endExcerBefore.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "&& 0 <= charno && c < endText.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "&& 0 <= charno && c < endAxis.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "&& 0 <= charno && c < endHierarchy.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "&& 0 <= charno && firstExcerpt.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "&& 0 <= charno && c < endExcer angle;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "&& 0 <= charno && c < endDescriptors.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "&& 0 <= charno && c = sourceExcerpt.length - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "&& 0 <= charno && c < endExcerit.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "&& 0 <= charno && c < end bottom.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "&& 0 <= charno && c >= endExcerpt.length) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "&& 0 <= charno && c < endExcer s.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "&& 0 <= charno && c < endExcera.length + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "&& 0 <= charno && c < endExcerrotate.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "&& 0 <= charno && c < endExterns.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "&& 0 <= charno && c < endExcer Properties.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "&& 0 <= charno && c < endExcerpt.length - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "&& 0 <= charno && c < endExcer = 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "&& 0 <= charno && c < endExcerGATIVE_SIZE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "&& 0 <= charno && c < endPtr;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "&& 0 <= charno && firstExterns.length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "&& 0 <= charno && c < endExcerDeserializer.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "&& 0 <= charno && c < endExcert.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "&& 0 <= charno && c < endExcer {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "&& 0 <= charno && c < endExcer Attributes.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "&& 0 <= charno && c < endExcerpt.lengthText;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "&& 0 <= charno && c < endPosition;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "&& 0 <= charno && c < endExcer -= Array.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "&& 0 <= charno && c < endLiteral.length + 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "&& 0 <= charno && c < endExcerLiteral.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "&& 0 <= charno && c < end property.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "&& 0 <= charno && c < endExcerBytes.length()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "&& 0 <= charno || charno < end;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "&& 0 <= charno && c = sourceExcerpt.length < end;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "&& 0 <= charno && c < endExcer = s.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "&& 0 <= charno && c < endExcerJSDoc.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "&& 0 <= charno && c < endpattern.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "&& 0 <= charno && lineno.length < endExcerBytes.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "&& 0 <= charno && c < endExcertime.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "&& 0 <= charno && c < endExcer : 1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "&& 0 <= charno && c < endExcerpt.lengthindex;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "&& 0 <= charno && c < endPosition.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "&& 0 <= charno && c < endExcer namespaces.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "&& 0 <= charno && c < 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "&& 0 <= charno && lineno.length < end;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "&& pn <= charno && charno < end;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "&& 0 <= charno && c < endLiteral.length - 1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "&& 0 <= charno && c < endeclared.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "&& 0 <= charno && c = s.length < end;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "&& 0 <= charno && c < endExcerpercent;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "&& 0 <= charno && c < endY.length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "&& 0 <= charno && c < endMode.length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "&& 0 <= charno && c < end Properties.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "&& 0 <= charno && c < endExcerBytes.length + 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "&& 0 <= charno && charno < end;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "&& sourceExcerpt + charno < end;",
                "identical": false
            }
        ],
        "buggy_line": "&& 0 <= charno && charno < sourceExcerpt.length()) {",
        "fixed_line": "&& 0 <= charno && charno <= sourceExcerpt.length()) {"
    },
    "JacksonDatabind-97": {
        "fixes": [
            {
                "k": 1,
                "patch": "gen.writeObject(_value);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "gen.writeObject(_value;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "gen.writeObject(_valueType);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "gen.writeObject(_valueInstantiator;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "gen.writeObject(_value != _value;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "gen.writeObject(_valueType != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "gen.writeObject(_valueType != _value;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "gen.writeObject(_value != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "gen.writeObject(_valueInstantiator, _value;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "gen.writeObject(_valueType != JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "gen.writeObject(_value != JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "gen.writeObject(_valueName);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "gen.writeObject(_valueInstantiator, _value);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "gen.writeObject(_valueToEvaluate);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "gen.writeObject(_valueHandler != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "gen.writeObject(_valueInstantiator);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "gen.writeObject(_valueToSkip);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s",
                "identical": false
            },
            {
                "k": 28,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw'",
                "identical": false
            },
            {
                "k": 29,
                "patch": "gen.writeObject(_valueSerializers;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "gen.writeObject(_value != JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 32,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 33,
                "patch": "gen.writeObject(_value, type);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do implicit re-parse",
                "identical": false
            },
            {
                "k": 35,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_OBJECT;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "gen.writeObject(_value, cc;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 38,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls do not store 'raw'",
                "identical": false
            },
            {
                "k": 39,
                "patch": "gen.writeObject(_valueType != JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "gen.writeObject(_value != _valueType);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "gen.writeObject(_value != JsonEncoding.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "gen.writeObject(_valueHandler != _value;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "gen.writeObject(_valueName;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NAME;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls not store 'raw'",
                "identical": false
            },
            {
                "k": 47,
                "patch": "gen.writeObject(_valueBuffer);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for '_'s do not store 'raw'",
                "identical": false
            },
            {
                "k": 49,
                "patch": "gen.writeObject(_valueToWrap);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "gen.writeObject(_valueType != JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 52,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw' bytes",
                "identical": false
            },
            {
                "k": 53,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disablingDigits not store 'raw's do implicit re-parse",
                "identical": false
            },
            {
                "k": 54,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for entity at begin/end",
                "identical": false
            },
            {
                "k": 56,
                "patch": "gen.writeObject(_value ? ctxt) : _value;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "gen.writeObject(_valueTypeRef;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls do implicit re-parse",
                "identical": false
            },
            {
                "k": 59,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disablingDigits not store 'raw'",
                "identical": false
            },
            {
                "k": 61,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's not store 'raw'",
                "identical": false
            },
            {
                "k": 62,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw't here",
                "identical": false
            },
            {
                "k": 63,
                "patch": "gen.writeObject(_valueINITIALIZED_VALUE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "gen.writeObject(_value)) { // can NOT suppress entries in tabular output",
                "identical": false
            },
            {
                "k": 65,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of \"+_FOR",
                "identical": false
            },
            {
                "k": 66,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for '_'s do implicit re-parse",
                "identical": false
            },
            {
                "k": 67,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls do not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 68,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of64_VALUE_NUMBER_FLOAT",
                "identical": false
            },
            {
                "k": 69,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disablingDigits not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 70,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of \"+_NUMBER_FLOAT",
                "identical": false
            },
            {
                "k": 71,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of \"+_Jackson_VALUE can's do implicit re-parse",
                "identical": false
            },
            {
                "k": 72,
                "patch": "gen.writeObject(_valueToEvaluate;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of zone as per RFC 4627",
                "identical": false
            },
            {
                "k": 74,
                "patch": "gen.writeObject(_valueElement);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of \"+_DEPRECATED",
                "identical": false
            },
            {
                "k": 76,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 77,
                "patch": "gen.writeObject(_value) { // can NOT suppress entries in tabular output",
                "identical": false
            },
            {
                "k": 78,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's not store 'raw' bytes",
                "identical": false
            },
            {
                "k": 79,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for store 'raw's do implicit re-parse",
                "identical": false
            },
            {
                "k": 80,
                "patch": "gen.writeObject(_value, context);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw' nulls as per RFC 4627",
                "identical": false
            },
            {
                "k": 82,
                "patch": "gen.writeObject(_valueType != JsonToken.NULL;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do sanity check",
                "identical": false
            },
            {
                "k": 84,
                "patch": "gen.writeObject(_valueOrder != _value;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for entity at begin/after's do not store 'raw'",
                "identical": false
            },
            {
                "k": 86,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of \"+_VALUE can's do implicit re-parse",
                "identical": false
            },
            {
                "k": 87,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disablingDigits not store 'raw' bytes",
                "identical": false
            },
            {
                "k": 88,
                "patch": "gen.writeObject(_value, _value;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls not store 'raw' bytes",
                "identical": false
            },
            {
                "k": 90,
                "patch": "gen.writeObject(_value)){",
                "identical": false
            },
            {
                "k": 91,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls do sanity check",
                "identical": false
            },
            {
                "k": 92,
                "patch": "gen.writeObject(_valueType;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s't really need to force parsing",
                "identical": false
            },
            {
                "k": 94,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of sor exponent then",
                "identical": false
            },
            {
                "k": 95,
                "patch": "gen.writeObject(_value) { // [JACKSON-407]Native's do not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 96,
                "patch": "gen.writeObject(_valueInstantiator, context);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "gen.writeObject(_valueInstantiator != JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of \"+_VALUE can's do not store 'raw'",
                "identical": false
            },
            {
                "k": 99,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for entity at begin; can't really need to force parsing",
                "identical": false
            },
            {
                "k": 100,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of \"+_parsingContext",
                "identical": false
            }
        ],
        "buggy_line": "gen.writeObject(_value);",
        "fixed_line": "ctxt.defaultSerializeValue(_value, gen);"
    },
    "Codec-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "long len = getEncodeLengthEstimate, binaryData.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "long len = getEncodeLength(data, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "long len = getEncodeLengthEstimate, binaryData.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "long len = getEncodeLengthEstimate, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "long len = getEncodeLength(ptr, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "long len = getEncodeLengthData, binaryData.length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "long len = getEncodeLengthData, binaryData.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "long len = getEncodeLength(KEY, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "long len = getEncodeLength(buffer, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "long len = getEncodeBOTTOM_CHUNK_SIZE, binaryData.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "long len = getEncodeLength( caller, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "long len = getEncodeBOTTOM_CHUNK_SIZE, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "long len = getEncodeLengthEstimate, hashIndex, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "long len = getEncodeLength(relativeData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "long len = getEncodeLength( header, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "long len = getEncodeLength(OTTOM_CHUNK_SIZE, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "long len = getEncodeLength(ptrData, binaryData.length);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "long len = getEncodeBOTTOM_CHUNK_SIZE, binaryData.length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "long len = getEncodeLength(Segment, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "long len = getEncodeLengthData, hashIndex, CHUNK_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxStackSize);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "long len = getEncodeLength(Keys, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "long len = getEncodeedLengthEstimate, binaryData.length);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "long len = getEncodeLength(NEWData, binaryData.length);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "long len = getEncodeLength(relativeData, binaryData.length);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "long len = getEncodeMAX_CHUNK_SIZE, binaryData.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "long len = getEncodeLengthEstimate, hashIndex, CHUNK_SEPARATOR.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "long len = getEncodeLength(CHUNK_SIZE, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "long len = getEncodeBOTH_CHUNK_SIZE, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "long len = getEncodeMAX_CHUNK_SIZE, binaryData.length);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "long len = getEncodeedLength(ptr, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "long len = getEncodeLengthEstimateData, binaryData.length);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "long len = getEncodeLength(implData, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "long len = getEncode(startData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "long len = getEncode(startData, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxLen);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "long len = getEncodeLengthData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "long len = getEncodeLength(OTTOM_CHUNK_SIZE, binaryData.length);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "long len = getEncodeBOTH_CHUNK_SIZE, binaryData.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "long len = getEncode(ptr, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "long len = getEncodeLength(data, binaryData.length, maxLocals);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "long len = getEncodeLength(maxData, binaryData.length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "long len = getEncodeLengthEstimate, hashIndex, CHUNK_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "long len = getEncodeLength(Uri, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "long len = getEncodeLength(CHUNK_SIZE, binaryData.length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "long len = getEncodeLength(lastData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "long len = getEncodeLength(buffer, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "long len = getEncodeValue(seriesData, binaryData.length);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "long len = getEncodeLength(BitData, binaryData.length);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "long len = getEncodeLengthData, hashIndex, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "long len = getEncodeLength(inData, binaryData.length, maxLocals);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "long len = getEncodeLength(buffer, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "long len = getEncodeLengthEstimate, CHUNK_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "long len = getEncodeLengthData, hash, binaryData.length);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "long len = getEncodeBOTH_SIZE, binaryData.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "long len = getEncodeLengthEstimateData, binaryData.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "long len = getEncodeedLength(ptr, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "long len = getEncodeLength(Data, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "long len = getEncodeLength(implData, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "long len = getEncodeLength(Data, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxHandler);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "long len = getEncodeLength(lastData, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxW_SEPARATOR);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "long len = getEncodeAndData( header, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "long len = getEncodeLengthEstimate, 0, encodedData.length);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "long len = getEncodeLength(factory, binaryData.length, maxLocals);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "long len = getEncodeedLengthEstimate, binaryData.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "long len = getEncodeLength(outData, binaryData.length);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxNode.length);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxStackSize;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxIterations);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "long len = getEncodeLength(lastData, binaryData.length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "long len = getEncodeLength( myData, binaryData.length);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "long len = getEncodeLengthData, hashIndex, CHUNK_SEPARATOR.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "long len = getEncode(ptr, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxNode);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "long len = getEncodeLength()Flag, binaryData.length);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "long len = getEncodeLength(implData, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "long len = getEncodeLength(startData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxDigits);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "long len = getEncodeLength( header, binaryData, 0, 0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "long len = getEncodeLength(ptr, binaryData, max);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "long len = getEncodeLength(implData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxInputSize);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "long len = getEncodeLength(inData, binaryData.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "long len = getEncodeLength(lastData, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "long len = getEncodeLength(maxSize, binaryData.length);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "long len = getEncodeBOTH_CHUNK_SIZE, binaryData.length);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "long len = getEncodeLength(ptr, binaryData, maximalIteration_SEPARATOR;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "long len = getEncodeValue(ptr, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "long len = getEncode(maxData, binaryData.length);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "long len = getEncodeLength(fromData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "long len = getEncodeLength(lastData, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "long len = getEncodeLength(text, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "long len = getEncodeLength(ptrData, binaryData.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "long len = getEncodeData( header, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "long len = getEncodeLength(startData, binaryData, maxCode);",
                "identical": false
            }
        ],
        "buggy_line": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "fixed_line": "long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);"
    },
    "Math-94": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (u * v == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (u * v == 0 && ianns.abs(u + 1) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahend) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (u * v == 0 && ianns.abs(v - 31) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (u * v == 0 && ianns.abs(v - subroutine.denominator) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahairCount) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (u * v == 0 && ianns.abs(v - u) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (u * v == 0 && ianns.abs(v - 32) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (u * v == 0 && ianns.abs(v - 1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (u * v == 0 && ianns.abs(u + 11;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (u * v == 0 && ianns.abs(v - olds) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (u * v == 0 && ianns.abs(v - 354) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (u * v == 0 && ianns.abs(u + 31) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (u * v == 0 && ianns.abs(u + 13) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (u * v == 0 && ianns.abs(v - positive) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (u * v == 0 && ianns.abs(u + 32) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (u * v == 0 && ianns.abs(v - 7) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (u * v == 0 && ianns.abs(v - offset;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (u * v == 0 && ianns.abs(v - j) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (u * v == 0 && ianns.abs(v - 31) { // while u and v are both even...",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahoriz;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (u * v == 0 && ianns.abs(v - _currentSize) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (u * v == 0 && ianns.abs(u - subtrahend) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (u * v == 0 && ianns.abs(v -nots) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (u * v == 0 && ianns.abs(v -d) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (u * v == 0 && ianns.abs(v -actual) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrah;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (u * v == 0 && ianns.abs(u + 11) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (u * v == 0 && ianns.abs(v - 20) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (u * v == 0 && ianns.abs(v - relativePosition) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (u * v == 0 && ianns.abs(v - gcd) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (u * v == 0 && ianns.abs(v - subroutine.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (u * v == 0 && ianns.abs(u - subtrahairCount) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (u * v == 0 && ianns.abs(v - delimiter) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (u * v == 0 && ianns.abs(v -escape) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (u * v == 0 && ianns.abs(v - 6;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (u * v == 0 && ianns.abs(v - subroutine.denominator, 31) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (u * v == 0 && ianns.abs(v - ann) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (u * v == 0 && ianns.abs(v - offset) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (u * v == 0 && ianns.abs(u + 20) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (u * v == 0 && ianns.abs(u + 11 {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (u * v == 0 && ianns.abs(v - 37, 4 > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (u * v == 0 && ianns.abs(v - 31) { // while u and v are both in current quad",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (u * v == 0 && ianns.abs(v - 31) { // make u and v are both even...",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (u * v == 0 && ianns.abs(v - column) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (u * v == 0 && ianns.abs(v - _value) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (u * v == 0 && ianns.abs(u>0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (u * v == 0 && ianns.abs(v -Domain) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (u * v == 0 ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (u * v == 0 && ianns.abs(v - forceP) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (u * v == 0 && ianns.abs(uSize) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (u * v == 0 && ianns.abs(v - oldLen) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (u * v == 0 && ianns.abs(v - expand) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (u * v == 0 && ianns.abs(v - 37,;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (u * v == 0 && ianns.abs(v - subroutine.base) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (u * v == 0 && ianns.abs(v -empty) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (u * v == 0 && ianns.abs(v - n) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (u * v == 0 && ianns.abs(v - charno) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (u * v == 0 && ianns.abs(u -d) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (u * v == 0 && ianns.abs(v - getSuperCount) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (u * v == 0 && ianns.abs(v - otherCount) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahcss) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (u * v == 0 && ian;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (u * v == 0 && ianns.abs(v - a) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (u * v == 0 && ianns.abs(v -Year) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (u * v == 0 && ianns.abs(v - size) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (u * v == 0 && ianns.abs(v - ->) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (u * v == 0 && ianns.abs(u + u) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (u * v == 0 && ianns.abs(v - 32) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (u * v == 0 && ianns.abs(v - 31) { // make u and v are both in current quad",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahErrorCount) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (u * v == 0 && ianns.abs(v - negative) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (u * v == 0 && ianns.abs(v -Parent) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (u * v == 0 && ianns.abs(v -37) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (u * v == 0 && ianns.abs(u) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (u * v == 0 && ianns.abs(u - u) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (u * v == 0 && ianns.abs(v - k) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (u * v == 0 && ianns.abs(v - property) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahoriz) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (u * v == 0 && ianns.abs(v - l) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrah < 32) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (u * v == 0 && ianns.abs(v -num) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (u * v == 0 && ianns.abs(v + 31) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahTagsCount) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (u * v == 0 && ianns.abs(v - 31) { // while u and v are both even",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrah < 31) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (u * v == 0 && ianns.abs(v + 11;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (u * v == 0 && ianns.abs(v - ignored) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (u * v == 0 && ianns.abs(v -Code) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (u * v == 0 && ianns.abs(v -Symbols) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (u * v == 0 && ianns.abs(v - subroutine. check) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (u * v == 0 && ianns.abs(v - 32) { // make u and v are both in current quad",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (u * v == 0 && ianns.abs(v - result) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrah < 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (u * v == 0 && ianns.abs(v - subinterval) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (u * v == 0 && ianns.abs(u + _value) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (u * v == 0 && ianns.abs(v -Node) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (u * v == 0 && ianns.abs(v - 31 {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (u * v == 0 && ianns.abs(v - 32) { // make u and v are both even...",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (u * v == 0 && ianns.abs(v -number) {",
                "identical": false
            }
        ],
        "buggy_line": "if (u * v == 0) {",
        "fixed_line": "if ((u == 0) || (v == 0)) {"
    },
    "Lang-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "classes[i] = iTypes[i].getClass();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "classes[i] = EMPTY_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "classes[i] = array[i].getClass;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "classes[i] = INDEX_NOT_FOUND[i].getClass();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "classes[i] = i;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "classes[i] = EMPTY_BOOLEAN_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "classes[i] = EMPTY_LONG_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "classes[i] = desc[i].getClass();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "classes[i] = array[i - 1].getClass();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "classes[i] = array[i].getClass().getClass();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "classes[i] = INDEX_NOT_FOUND[i].getClass;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "classes[i] = kv[i].getClass();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "classes[i] = array[i].length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "classes[i] =ceed_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "classes[i] = INDEX_NOT_CLASS[i].getClass();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "classes[i] = INDEX_NOT_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "classes[i] = element[i].getClass();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "classes[i] = 1999_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "classes[i] = array[i].getClass() - 1];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "classes[i] = i == array[i].getClass();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "classes[i] = tmp_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "classes[i] =value[i].getClass();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "classes[i] = INDEX_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "classes[i] = iTransitions[i].getClass();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "classes[i] = Runtime_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "classes[i] = iIndices[i].getClass();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "classes[i] = ordinal[i].getClass();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "classes[i] =Current[i].getClass();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "classes[i] = into_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "classes[i] = parsers[i].getClass();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "classes[i] = array[i].getClass()];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "classes[i] = array[i].getClass() - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "classes[i] = load[i].getClass();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "classes[i] = currentNode_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "classes[i] = values[i].getClass();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "classes[i] = header[i].getClass();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "classes[i] =paint[i].getClass();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "classes[i] = override_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "classes[i] =CAPACITY[i].getClass();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "classes[i] =hi[i].getClass();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "classes[i] =dep[i].getClass();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "classes[i] =ITS[i].getClass();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "classes[i] = iTypes[i].getClass;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "classes[i] = elements[i].getClass();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "classes[i] = FIELD_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "classes[i] = EMPTY_CHAR[i].getClass();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "classes[i] = name[i].getClass();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "classes[i] = array[i >> 1].getClass();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "classes[i] = x[i].getClass();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "classes[i] = listener[i].getClass();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "classes[i] =+1[i].getClass();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "classes[i] = array[i].getClass() - 1].getClass();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "classes[i] = parameters[i].getClass();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "classes[i] =LINES[i].getClass();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "classes[i] =Find[i].getClass();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "classes[i] = UN[i].getClass();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "classes[i] = lu[i].getClass();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "classes[i] =parseInt[i].getClass();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "classes[i] =Root[i].getClass();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "classes[i] =In[i].getClass();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "classes[i] = array[i].getClass];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "classes[i] = array[i].length - 1];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "classes[i] = td[i].getClass();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "classes[i] =None[i].getClass();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "classes[i] = milliseconds[i].getClass();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "classes[i] =Zeros[i].getClass();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "classes[i] = temp[i].getClass();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "classes[i] = array[i].getClassY();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "classes[i] = array[i].getClass().length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "classes[i] =Sequence[i].getClass();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "classes[i] =gson[i].getClass();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "classes[i] =Lookup[i].getClass();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "classes[i] = data[i].getClass();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "classes[i] = translated[i].getClass();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "classes[i] = i >> 1].getClass();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "classes[i] = closure[i].getClass();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "classes[i] = array[i].getClass().getClass;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "classes[i] = array[i].getClassSer;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "classes[i] = array[i >> 1];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "classes[i] =ets[i].getClass();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "classes[i] = negative[i].getClass();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "classes[i] = parts[i].getClass();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "classes[i] = longest[i].getClass();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "classes[i] = array[i].getClass()Array[i].getClass();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "classes[i] =fill[i].getClass();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "classes[i] =Axis[i].getClass();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "classes[i] = getHeight[i].getClass();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "classes[i] =.1.[i].getClass();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "classes[i] = array[i].length - 1].getClass();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "classes[i] = array[i].getClassY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "classes[i] =CORE[i].getClass();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "classes[i] =files[i].getClass();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "classes[i] = COMMA[i].getClass();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "classes[i] = cap[i].getClass();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "classes[i] = count[i].getClass();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "classes[i] = newArray[i].getClass();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "classes[i] =WE[i].getClass();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "classes[i] =listeners[i].getClass();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "classes[i] = Time[i].getClass();",
                "identical": false
            }
        ],
        "buggy_line": "classes[i] = array[i].getClass();",
        "fixed_line": "classes[i] = array[i] == null ? null : array[i].getClass();"
    },
    "Math-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "return multiply.doubleValue();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return multiply;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this. percentageValue.doubleValue();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this.un(100Value;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.percent(100Value;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "returnAnnotations.doubleValue();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return multiply(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return multiply percentageValue.doubleValue();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this. percentageValue;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return delegate.doubleValue();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return multiplyMinValue.doubleValue();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return multiplyStatValue.doubleValue();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return this.un(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return multiplyYValue.doubleValue();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return multiplyNamespace.doubleValue();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return multiplymarginValue.doubleValue();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return multiplyIterableValue.doubleValue();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return multiplyCollection.doubleValue();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return multiply resultsValue.doubleValue();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return encaps(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return multiplyUtil.doubleValue();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this.YYValue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this.unmodifiableValue;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this.anchorValue;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return multiply onValue.doubleValue();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return multiplyEnd.doubleValue();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this. 2001Value;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this.fractionValue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return multiply_ percentage_RValue.doubleValue();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this.ModulesValue;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return this.c(100Value;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return multiply(100Value;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return multiply an percentageValue.doubleValue();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this.percentAtValue;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return multiply_ percentage_ZOOM_RValue.doubleValue();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "returnASValue.doubleValue();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return multiplyROW.doubleValue();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this. percentageValueBuffer.doubleValue();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do a sanity check",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return multiply.doubleValue() * this percentage_VALUE;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return multiply_ percentage_VALUE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.i(100Value;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this.endValue;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return multiply_ percentage_ZOCCURRENValue.doubleValue();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return this.pieValue;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this.insValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return this. percentageValue();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.unmodifiableValue.doubleValue();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this.ModulesValue.doubleValue();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return this.visitorValue;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.updatedValue;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return multiply.doubleValue(); // we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return this.RuleValue;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return multiply_ percentage_ZOOM_VALUE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return this.xFFValue;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this.verboseValue;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re-empty at the first",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return multiply.doubleValue;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return ON.doubleValue();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit renamer as per a sanity check",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return this.insn;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re- and finishes at the first",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this. ISOValue;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do a sanity-empty at the first",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re as per a sanity check",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this.roundValue;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this.unckValue;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this.negativeValue;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this.getClassValue;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re as-empty at the first",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do a sanity-empty collection",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re as- and finishes at the first",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this.percentFormat;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this.'>Value;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re-empty at the sign",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return multiply().doubleValue();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do a/end",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return.*.doubleValue();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return multiply_ percentage_ZOOM_IN_VALUE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return multiply.doubleValue(); // we didn't else if it's do a sanity check",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's non-empty at the first",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re-empty collection",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's non-empty or:",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do a valid already",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re as-empty collection",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this.basValue;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit renamer the first",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do a on the case",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return multiply_ percentage_ZOOM_RValue;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.standardValue;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return multiply.doubleValue(); // if it's do implicit re- and finishes at the first",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this.ptypeValue;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return this. percentageValue - a.doubleValue();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returnfraction.doubleValue();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's already",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this.loValue;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.gnValue;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's may be one",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return multiply.doubleValue(); // we didn't really modify it's do implicit re- and finishes at all",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return this. nodeNameValue;",
                "identical": false
            }
        ],
        "buggy_line": "return multiply(100).doubleValue();",
        "fixed_line": "return 100 * doubleValue();"
    },
    "JacksonDatabind-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "|| TreeNode.class.isAssignableFrom(list.getRawClass()));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) {}",
                "identical": false
            },
            {
                "k": 7,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) break;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "|| TreeNode.class.isAssignableFrom(parentType.getRawClass()));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)-3;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "|| TreeNode.class.isAssignableFrom(rhs.getRawClass()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[0];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.getRawClass()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) {}",
                "identical": false
            },
            {
                "k": 15,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.OBJECTLIT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "|| TreeNode.class.isAssignableFrom( halfType.getRawClass()));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) break;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "|| TreeNode.class.isAssignableFrom(superClass;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "|| TreeNode.class.isAssignableFrom(superClass, t.getRawClass()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[t.getRawClass()));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "|| TreeNode.class.isAssignableFrom(callNode.getRawClass()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "|| TreeNode.class.isAssignableFrom(enumClass);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "|| TreeNode.class.isAssignableFrom(doc.getRawClass()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) sb;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.ARRAY;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "|| TreeNode.class.isAssignableFrom(type.getRawClass()));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "|| TreeNode.class.isAssignableFrom(positionType.getRawClass()));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.getRawClass()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "|| TreeNode.class.isAssignableFrom(enumClass, t.getRawClass()));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "|| TreeNode.class.isAssignableFrom(superClassRenderingt.getRawClass()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.OBJECT;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.NAME;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) hClass;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) != parent.getRawClass;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[t.getRawClassHasSideEffects];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class)-3;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.getRawClass;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "|| TreeNode.class.isAssignableFrom( loopType.getRawClass()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "|| TreeNode.class.isAssignableFrom(superClass);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) != JsonToken.getRawClass;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)endar",
                "identical": false
            },
            {
                "k": 50,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[t.getRawClass();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.BY_NAME;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.GENERt;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) == JsonToken.OBJECTLIT;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "|| TreeNode.class.isAssignableFrom(n.getRawClass()));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "|| TreeNode.class.isAssignableFrom(expType.getRawClass()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) != t.class;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class)[0];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) == JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "|| TreeNode.class.isAssignableFrom(MAX_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "|| TreeNode.class.isAssignableFrom(superClass()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassHasSideEffects;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "|| TreeNode.class.isAssignableFrom( wallType.getRawClass()));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[t.getRawClass;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)ITEM_CONSTRUCTOR;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "|| parent.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) == JsonToken.OBJECT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "|| TreeNode.class.isAssignableFrom(targetType.getRawClass()));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "|| TreeNode.class.isAssignableFrom(fnType.getRawClass()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "|| TreeNode.class.isAssignableFrom(long.class;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)Undefined;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "|| TreeNode.class.isAssignableFrom(enumClass;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) adj",
                "identical": false
            },
            {
                "k": 75,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassHasSideEffects)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.END_NAME;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)",
                "identical": false
            },
            {
                "k": 79,
                "patch": "|| TreeNode.class.isAssignableFrom( g.getRawClass()));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)-1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.ON_NAME;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "|| TreeNode.class.isAssignableFrom(ep.getRawClass()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "|| TreeNode.class.isAssignableFrom(gramClass, t.getRawClass()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.getRawClassHasSideEffects;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "|| TreeNode.class.isAssignableFrom(ior.getRawClass()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "|| TreeNode.class.isAssignableFrom(led.class;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) charno);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) resultSet;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == ConcreteType.getRawClass()));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "|| TreeNode.class.isAssignableFrom( Shape.getRawClass()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "|| TreeNode.class.isAssignableFrom(owner.class;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) return t;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)}",
                "identical": false
            },
            {
                "k": 95,
                "patch": "|| din.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.list;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) locale;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)edType.getRawClass();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "|| TreeNode.class.isAssignableFrom(SPACE.getRawClass()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.relativePosition_NAME;",
                "identical": false
            }
        ],
        "buggy_line": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
        "fixed_line": "&& !TreeNode.class.isAssignableFrom(t.getRawClass()));"
    },
    "Jsoup-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i + 1 < length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (length < limit) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (i + lastChar < length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (i < length) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (length == limit) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i + length < lastChar) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i + startChar < length) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (length < lastChar) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i + length > lastChar) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i + offset < length) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i + charLength > lastChar) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i + len > lastChar) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (pos + length > lastChar) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (pos + lastChar < length) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i + startChar < length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i + offset > lastChar) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (i = 0; i < length; i++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i + lastChar < length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i + charLength < length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (length < length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (length + lastChar < length) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i + charIndex < length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i + offset > length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i + charCount < length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (length == startChar) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i + char[offset] = 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (int i = 0; i < length; i++) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i + char[offset++] = 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i + charLength > length) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i + MODEChar < length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (length - startChar >= lastChar) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i + startChar < lastChar) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (length == lastChar) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i + 1 < length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i + offset > start.length) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (length > lastChar) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i + charLength > start.length) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i + j > lastChar) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i + position < length) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (; i < length; i++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i + lastChar == length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i + len > start.length) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (length < start.length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i + char.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (length == startPropertyIndex) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i + startChar > lastChar) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (offset < length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i + startChar == lastChar) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (length < len) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (pos + lastChar == length) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (length > limit) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (length - lastChar >= 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (pos + lastChar == buffer.length) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i + char[offset] != lastChar) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i + startLength > lastChar) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i + charLength < length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (length > 9) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i + charCount > lastChar) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i + j > startChar) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i + startPropertyIndex < length) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i + charLength > limit) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i + j > startPropertyIndex) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (length < 9) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (pos + lastChar == startPropertyIndex) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i + charLength > startChar) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (length > startChar) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i + offset < length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (length == len) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i +64Char < length) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i + len < length) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (pos + lastChar > start.length) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (pos + lastChar <= lastChar) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (pos + lastChar == buffer.length - 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i + lastChar <= lastChar) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i + charLength > 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i + length < len;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i + pos < length) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i + length > lastChar;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (length + lastChar < length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i + startPropertyIndex < length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (pos + lastChar < length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (pos + lastChar == limit) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (length + lastChar == len) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (length >= lastChar) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i + == length) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (i + length < inputLen;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i + lastChar <= 9) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (length - lastChar >= len) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i + char[offset+len - lastChar;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (length >= 9) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i + char[offset] negative;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i + lastChar;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i + len > startChar) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (length - offset;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i + charLength > startPropertyIndex) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i + defaultValue < length) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i + char[offset] -= lastChar;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (i + signature < length) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (length - lastChar <= 9) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i + char[offset] != length) {",
                "identical": false
            }
        ],
        "buggy_line": "if (offset < length) {",
        "fixed_line": "if (offset < length && last <= length) {"
    },
    "Csv-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "final boolean emptyHeader = header.trim();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final boolean emptyHeader = header.trim;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final boolean emptyHeader = header.trim != header;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final boolean emptyHeader = header.trimMIN_VALUE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final boolean emptyHeader = header.trimInvocations.isEmpty();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final boolean emptyHeader = header.trim50.isEmpty();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final boolean emptyHeader = header.trimmed;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final boolean emptyHeader = header.trimAND_PART != header;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final boolean emptyHeader = header.trim().isEmpty;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final boolean emptyHeader = header.trimactic.isEmpty();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final boolean emptyHeader = header.trimBuffer.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final boolean emptyHeader = header.trim' + 1];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final boolean emptyHeader = header.trimAlignment != header;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final boolean emptyHeader = header.trim' != header;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final boolean emptyHeader = header.trimdata.isEmpty();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final boolean emptyHeader = header.trimCheckBox;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final boolean emptyHeader = header.trim[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final boolean emptyHeader = header.related != header;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final boolean empty = header.trim();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final boolean emptyHeader = header.trim1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final boolean emptyHeader = header.trimor.isEmpty();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final boolean emptyHeader = header.trimAND_PART_FLAG;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final boolean emptyHeader = header.trimAND_PART;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final boolean empty = header.trim;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final boolean emptyHeader = header.trim SerialDate.isEmpty;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final boolean emptyHeader = header.trim--n.isEmpty();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final boolean emptyHeader = header.trim mouse.isEmpty();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final boolean emptyHeader = header.trimAND_PART_A_STATE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final boolean emptyHeader = header.trimact != header;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final boolean emptyHeader = header.trimAND_FLAG;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final boolean emptyHeader = header.trimdata.isEmpty;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final boolean emptyHeader = header.trim avoid != header;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final boolean emptyHeader = header.trim's != header;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final boolean emptyHeader = header.trim-- != header;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final boolean emptyHeader = header.trimStack.isEmpty();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final boolean emptyHeader = header.trimor.isEmpty;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final boolean emptyHeader = header.trimInvocations.isEmpty;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final boolean emptyHeader = header.trimdata.isEmpty()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final boolean emptyHeader = header.trim[i][0];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final boolean emptyHeader = header.trimAlignment;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final boolean emptyHeader = header.trim--node.isEmpty;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final boolean emptyHeader = header.trim--node.isEmpty();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final boolean emptyHeader = header.related;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final boolean emptyHeader = header.trimAND_PART_CRC-isEmpty;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final boolean emptyHeader = header.trim().isEmpty != header;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final boolean emptyHeader = header.trimMIN_VALUE != header;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final boolean emptyHeader = header.trimLink;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final boolean emptyHeader = header.trimAND_NAMESPACE_CHARS[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final boolean emptyHeader = header.trimMock != header;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final boolean emptyHeader = header.trimAND_PART_PER_SECOND;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final boolean emptyHeader = header.trimSIG;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final boolean emptyHeader = header.trim3;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final boolean emptyHeader = header.trim--n.next;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final boolean emptyHeader = header.last;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final boolean emptyHeader = header.trimMINUTE_VALUE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final boolean emptyHeader = header.trimTOTYPE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final boolean emptyHeader = header.before;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final boolean emptyHeader = header.trimTOTYPE_VALUE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final boolean emptyHeader = header.before != header;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final boolean emptyHeader = header.primary.isEmpty();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final boolean emptyHeader = header.trim_0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final boolean emptyHeader = header.trim SerialDate.isEmpty();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final boolean emptyHeader = header.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final boolean emptyHeader = header.trimactic != header;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final boolean emptyHeader = header.trim--n.separatorChar;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final boolean emptyHeader = header.trimY;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final boolean emptyHeader = header.trim[i][1];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final boolean emptyHeader = header.trimPass;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final boolean emptyHeader = header.separator;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final boolean emptyHeader = header.trim-1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final boolean emptyHeader = header.trim implemented;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final boolean emptyHeader = header.trimStackTop;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final boolean emptyHeader = header.trimAND_PART_LEN;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final boolean emptyHeader = header.trimAND_OUT_VALUE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final boolean emptyHeader = header.trim[i]1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final boolean emptyHeader = header.None;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final boolean emptyHeader = header.trimOperationMap;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final boolean emptyHeader = header.trimText;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final boolean emptyHeader = header.trimAND_PART_VALUE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final boolean emptyHeader = header.trimS != header;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final boolean emptyHeader = header.trim'ow != header;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final boolean emptyHeader = header.trim2.isEmpty();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final boolean emptyHeader = header.trim - 1];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final boolean emptyHeader = header.trimDeserializer != header;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final boolean emptyHeader = header.trimAND_PART_C JSON_STATE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final boolean emptyHeader =header.trim();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final boolean emptyHeader = header.trimCheckBox.isEmpty();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final boolean emptyHeader = header.trim(';",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final boolean emptyHeader = header.trimInvocations.isEmpty()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final boolean emptyHeader = header.trimAND_PART_SEPARATOR.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final boolean emptyHeader = header.trimAND_NAMESPACE_ERROR;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final boolean emptyHeader = header.trim2 != header;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final boolean emptyHeader = header.trim--n.isEmpty;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final boolean emptyHeader = header.trimAND;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final boolean emptyHeader = header.trimS;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final boolean emptyHeader = header.trim--header.isEmpty();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final boolean emptyHeader = header.trim--[0] == header;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final boolean emptyHeader = header.trimAND_PART[i];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final boolean emptyHeader = header.trim process != header;",
                "identical": false
            }
        ],
        "buggy_line": "final boolean emptyHeader = header.trim().isEmpty();",
        "fixed_line": "final boolean emptyHeader = header == null || header.trim().isEmpty();"
    },
    "Chart-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "int g = this.upperBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int g = this.lowerBound - this.upperBound / 2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int g = this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int g = this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int g = this.upperBound - this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int g = v / this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int g = v / this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int g = this.upperBound - this.lowerBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int g = v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int g = this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int g = -value / this.lowerBound;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int g = this.upperBound - this.lowerBound / 2.0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int g = this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int g = this.lowerBound - this.upperBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int g = this.upperBound - this.lowerBound / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int g = this.lowerBound - this.upperBound / total;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int g = 2 * this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int g = (this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int g = (this.upperBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int g = this.lowerBound - v / this.upperBound;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int g = this.upperBound -value / this.lowerBound;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int g = this.upperBound - this.lowerBound / range;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int g = this.upperBound - this.lowerBound / i;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int g = this.lowerBound -value / this.upperBound;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int g = this.upperBound - this.lowerBound / + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int g = this.upperBound - this.lowerBound / s;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int g = this.upperBound - this.lowerBound / SUBDIVISIONS;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int g = 2 * this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int g = this.upperBound - this.lowerBound * v;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int g = this.lowerBound - this.upperBound / 2.0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int g = this.upperBound - this.lowerBound / LOG_10;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int g = this.upperBound - this.lowerBound / columns;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int g = insets.upperBound - this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int g = this.upperBound - v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int g = this.upperBound - this.lowerBound / sum;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int g = (this.lowerBound / this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int g = (this.lowerBound - this.upperBound / 2;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int g = this.upperBound - this.lowerBound / actualCount;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int g = this.upperBound - this.lowerBound / SUBDIVIDE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int g = this.upperBound - this.lowerBound / ivalue;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int g = this.upperBound - this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int g = this.upperBound - this.lowerBound /lang;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int g = this.upperBound - this.lowerBound / denominator;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int g = this.upperBound - this.lowerBound /Loc;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int g = this.upperBound - value / this.lowerBound;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int g = this.lowerBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int g = 2 * this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int g = this.lowerBound - this.upperBound / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int g = (this.upperBound - this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int g = this.upperBound - this.lowerBound / LOG_10_VALUE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int g = this.upperBound - lower / this.lowerBound;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int g = this.upperBound - this.lowerBound / iUnitMillis;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int g = this.upperBound - this.lowerBound / 8;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int g = this.lowerBound - this.upperBound / + 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int g = this.upperBound - this.lowerBound / sxx;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int g = this.upperBound - this.lowerBound /chips;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int g = this.upperBound - this.lowerBound /cut;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int g = this.upperBound - this.lowerBound / 3;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int g = this.upperBound - this.lowerBound /parentNode;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int g = this.upperBound - this.lowerBound / 12;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int g = this.upperBound - this.lowerBound / iGregorian;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int g = this.upperBound - this.lowerBound /unupperBound;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int g = this.upperBound - adjust / this.lowerBound;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int g = this.lowerBound - this.upperBound / i;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int g = this.lowerBound - this.upperBound) / 2;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int g = this.upperBound - this.lowerBound / DateTimeConstants.upperBound;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int g = this.upperBound - this.lowerBound / write;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int g = this.lowerBound / SUBDIVISIONS;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int g = this.lowerBound / SUBDIVIDE - this.lowerBound;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int g = (this.upperBound - this.lowerBound) / 2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int g = (this.lowerBound / this.upperBound) / 2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int g = this.upperBound - this.lowerBound /newInstance;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int g = this.upperBound - this.lowerBound) / 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int g = this.lowerBound / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int g = this.upperBound - this.lowerBound / LOG_10) % this.upperBound;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int g = this.upperBound - this.lowerBound / lun;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int g = this.upperBound - this.lowerBound /pc;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int g = this.lowerBound - this.upperBound + 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int g = (this.lowerBound / this.upperBound) - this.lowerBound;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int g = v / this.lowerBound + this.upperBound;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int g = this.upperBound - this.lowerBound /absolute;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int g = this.upperBound - this.lowerBound / zz;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int g = this.upperBound - this.lowerBound / property;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int g = -value / this.upperBound;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int g = this.upperBound - this.lowerBound / S;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int g = this.upperBound - this.lowerBound / \");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int g = this.upperBound - this.lowerBound /cc;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int g = this.lowerBound - this.upperBound / range;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int g = this.lowerBound / 2.0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int g = size.upperBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int g = this.upperBound - this.lowerBound / item;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int g = this.upperBound - this.lowerBound /[0]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int g = (this.lowerBound / this.upperBound - this.lowerBound) / 2;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int g = this.upperBound - this.lowerBound / SUB;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int g = this.upperBound - this.lowerBound / hm;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int g = this.upperBound - this.lowerBound /seconds;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int g = this.upperBound - this.lowerBound /Floating;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int g = insets.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int g = this.lowerBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int g = this.upperBound - this.lowerBound / DEFAULT_INTER;",
                "identical": false
            }
        ],
        "buggy_line": "int g = (int) ((value - this.lowerBound) / (this.upperBound",
        "fixed_line": "int g = (int) ((v - this.lowerBound) / (this.upperBound"
    },
    "Math-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "return imaginary;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return NaN;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return ZERO;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return INDEX_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "returncalculated;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return P1_GT_P;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return Double.POSITIVE_VALUE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return Double.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "returnimaginary;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return result;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Double.MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "returnAngle;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "returnround;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return Double.MILLIS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return Double.POSITIVE_PER_SECOND;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return Double.POSITIVE_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return P1_GT_PLETS_COMMA;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "returnField;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return Double.MINUTES_VALUE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return Double.MIN_PER_SECOND;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return Double.S_PER_SECOND;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return P1_GT_PLETS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return Double.MIN_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return c;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return real;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return Double.START_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return P1_GT_BACKS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return Double.START_PER_SECOND;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Double.MINUTES_PER_SECOND;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return Double.POSITIVE_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return Double.POSITIVE_PER_SE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return P1_GT_BACKS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return Double.POSITIVE_COMMA;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return Double.MILLIS_PER_SE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return P1_GT_PLETS_Mates;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return P1_GT_PLETS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return Double.MILLIS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return Double.POSITIVE_MILLIS;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return Double.S_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return P1_GT_PS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return INSTANCE_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return P1_GT_PLETS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return Double.S_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return Double.POSITIVE_PER_round;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return Double.MILLIS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return P1_GT_P2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return Double.MIN_PER_SE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return Double.POSITIVE_PER_BOUND;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return Double.NEGATIVE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return P1_GT_PS_COMMA;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return P1_GT_BACKS_COMMA;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return P1_GT_S_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return MAX_S_PER_SECOND;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return P1_GT_PLETS_Moment;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return P1_GT_PLETS_PER_EFF;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return MAX_S_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return P1_GT_BACKS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return P1_GT_PLETS_PER_ST;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return P1_GT_BACKS_PER_round;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return P1_GT_PLETS_PER_ARRAY;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return Double.MIN_PER_BOUND;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return P1_GT_PS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return P1_GT_PLETS_PER_round;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return Double.MIN_PER_T;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return P1_GT_PLETS_COMTOTYPE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return P1_GT_PLETS_PER_TOTYPE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return MAX_S_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return P1_GT_PLETS_ARRAY;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return P1_GT_PLETS_TOTYPE_AND_COMMA;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return Double.POSITIVE_PER_EFFECTS_INT;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return Double.START_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return q;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return Double.MIN_PER_VALUE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return P1_GT_S_PER_SECOND;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return Double.POSITIVE_PER_EFFECTS_COMMA;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return P1_GT_PLETS_TOTYPE_PER_SECOND;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return P1_GT_PLETS_TOTYPE_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return INSTANCE_NaN;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return Double.MIN_PER_SIGNATURE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return P1_GT_PS_IMATE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return Double.POSITIVE_PER_EFFECTS_M;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return P1_GT_S_COMMA;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return P1_GT_PLETS_AND_COMMA;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return P1_GT_PLET;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return P1_GT_PLETS_PER_COMMA;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return P1_GT_PLETS_COMEFF;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return MAX_INT;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return Double.POSITIVE_PER_EFFECTS_Rows;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return comment;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return Double.POSITIVE_PER_EFFECTS_LEN;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return P1_GT_PLETS_PER_ANGLE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return P1_GT_PLETS_PER_ ss_ARRAY;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return P1_GT_PS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return P1_GT_PLETS_IMATE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return P1_GT_PLETS_TOTYPE_Moment;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return INSTANCE_PER_SECOND;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return sum;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return Double.POSITIVE_PER_EFFECTS_FLOAT;",
                "identical": false
            }
        ],
        "buggy_line": "return NaN;",
        "fixed_line": "return INF;"
    },
    "Closure-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "Context rhsContext = p.child;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Context rhsContext = p.OTHER;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Context rhsContext = p.Type;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Context rhsContext = p.type;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Context rhsContext = p.height;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Context rhsContext = p.dCount;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Context rhsContext = p.right;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Context rhsContext = p.name;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Context rhsContext = p.node;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Context rhsContext = p.annotations;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Context rhsContext = p.getNext;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Context rhsContext = p.];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Context rhsContext = p.newExpr;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Context rhsContext = p.childCount;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Context rhsContext = p.dump;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Context rhsContext = p.next;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Context rhsContext = p.context;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Context rhsContext = p.helper;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Context rhsContext = p.prov;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Context rhsContext = p.header;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Context rhsContext = p.left;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Context rhsContext = p.module;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Context rhsContext = p.2):Context;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Context rhsContext = p.predicates;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Context rhsContext = p.ref;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Context rhsContext = p.prevExpr;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Context rhsContext = p.predecessorCount;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Context rhsContext = p. blocked;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Context rhsContext = p.d;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Context rhsContext = p.ly;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Context rhsContext = p. requires;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Context rhsContext = p. getOp;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Context rhsContext = p.getName;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Context rhsContext = p. Parse;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Context rhsContext = p. Button;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Context rhsContext = p.parentContext;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Context rhsContext = p.Exit;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Context rhsContext = p.in;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Context rhsContext = context;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Context rhsContext = p. millisecond;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Context rhsContext = p.docCount;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Context rhsContext = p.Cause;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Context rhsContext = p. charno;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Context rhsContext = p.refs;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Context rhsContext = p.JSType;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Context rhsContext = p.last;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Context rhsContext = p. allExpr;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Context rhsContext = p.ARRAY;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Context rhsContext = p.instance;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Context rhsContext = p.predecessor;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Context rhsContext = p.functionExpr;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Context rhsContext = p.NODE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Context rhsContext = p.config;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Context rhsContext = p.rightType;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Context rhsContext = p.restrictExpr;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Context rhsContext = p.lang;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Context rhsContext = p. >>= 8;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Context rhsContext = p. merExpr;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Context rhsContext = p.GETPROP;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Context rhsContext = p. Eval;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Context rhsContext = p.MODE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Context rhsContext = p.dValue;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Context rhsContext = p.SECTION;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Context rhsContext = p.opcode;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Context rhsContext = p.None;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Context rhsContext = p.FROM;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Context rhsContext = first.Type;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Context rhsContext = p.x;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Context rhsContext = p.inline;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Context rhsContext = p.FullName;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Context rhsContext = p.ito_GETELEM;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Context rhsContext = p. u;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Context rhsContext = p. readFully;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Context rhsContext = p. getProp;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Context rhsContext = p.getMonth;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Context rhsContext = p.getWidth;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Context rhsContext = p.UNOTHER;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Context rhsContext = p.restrict;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Context rhsContext = p.raw;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Context rhsContext = p. pp;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Context rhsContext = p.97;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Context rhsContext = p.START_FROM;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Context rhsContext = p.compiler;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Context rhsContext = p.CKET;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Context rhsContext = p. QU;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Context rhsContext = p.ito_FROM;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Context rhsContext = p.COUNT;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Context rhsContext = p.xml;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Context rhsContext = p.first;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Context rhsContext = p. Task;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Context rhsContext = p.nodes;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Context rhsContext = p.v;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Context rhsContext = p.secs;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Context rhsContext = p.temp;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Context rhsContext = p. Iterator;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Context rhsContext = p.START_P;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Context rhsContext = p. 0),;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Context rhsContext = p.START_apes;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Context rhsContext = first;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Context rhsContext = p. % 4;",
                "identical": false
            }
        ],
        "buggy_line": "Context rhsContext = Context.OTHER;",
        "fixed_line": "Context rhsContext = getContextForNoInOperator(context);"
    },
    "Chart-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return \" title=\\\"\" + toolTipText + urlText;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return \" title=\\\"\" + toolTipText + this.url;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return \" title=\\\"\" + toolTipText + this.toolTipText;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return \" title=\\\"\" + toolTipText + 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return \" title=\\\"\" + toolTipText + escapeText;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return \" title=\\\"\" + toolTipText + \")\";",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return \" title=\\\"\" + toolTipText + inline;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return \" title=\\\"\" + toolTipText + LENGTH;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return \" title=\\\"\" + toolTipText + this.urlText;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return \" title=\\\"\" + toolTipText +KEY;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \" title=\\\"\" + toolTipText + divisor;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return \" title=\\\"\" + toolTipText + targetClass;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return \" title=\\\"\" + toolTipText + url;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return \" title=\\\"\" + toolTipText +PROTOTYPE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return \" title=\\\"\" + toolTipText + msg;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return \" title=\\\"\" + toolTipText + ONE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return \" title=\\\"\" + urlText + toolTipText;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return \" title=\\\"\" + toolTipText +ByTipText;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return \" title=\\\"\" + toolTipText + hotspot;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return \" title=\\\"\" + toolTipText +dot;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt\";",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return \" title=\\\"\" + toolTipText +OutTipText;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt hasTipText;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altLength;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return \" title=\\\"\" + toolTipText +ATTRIBUTE_ urlText;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return \" title=\\\"\" + toolTipText + prev;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return \" title=\\\"\" + toolTipText +name;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return \" title=\\\"\" + toolTipText + map;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return \" title=\\\"\" + toolTipText + config;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\")\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return \" title=\\\"\" + toolTipText +url;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return \" title=\\\"\" + toolTipText +Dark;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return \" title=\\\"\" + toolTipText + adjust;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return \" title=\\\"\" + toolTipText + targetClass\";",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return \" title=\\\"\" + toolTipText +IALIZED;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return \" title=\\\"\" + toolTipText +\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return \" title=\\\"\" + toolTipText +ATTRIBUTE_NAME;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return \" title=\\\"\" + toolTipText + 16;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return \" title=\\\"\" + toolTipText + null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return \" title=\\\"\" + toolTipText + views;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return \" title=\\\"\" + toolTipText +EOF;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altWriter;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt0.5;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return \" title=\\\"\" + toolTipText + 1024;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return \" title=\\\"\" + toolTipText +PrintText;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return \" title=\\\"\" + toolTipText + str;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return \" title=\\\"\" + toolTipText +DESCRIPTION;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return \" title=\\\"\" + toolTipText + Token.urlText;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return \" title=\\\"\" + toolTipText +ATTRIBUTE_LEN;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return \" title=\\\"\" + toolTipText +ATTRIBUTE_url;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return \" title=\\\"\" + toolTipText + gen;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altMath.urlText;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return \" title=\\\"\" + toolTipText +ATTRIBUTE_URL;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt vv;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return \" title=\\\"\" + toolTipText + KeyText;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt[0];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return \" title=\\\"\" + toolTipText +ATTRIBUTE_toolTipText;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return \" title=\\\"\" + toolTipText + stream;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\";",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return \" title=\\\"\" + toolTipText + JDK_toolTipText;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" name;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return \" title=\\\"\" + toolTipText + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return \" title=\\\"\" + toolTipText + \", >= 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return \" title=\\\"\" + toolTipText + ry;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return \" title=\\\"\" + toolTipText + prop;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"\";",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return \" title=\\\"\" + toolTipText +MONTH;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return \" title=\\\"\" + toolTipText +Locals;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return \" title=\\\"\" + toolTipText +TypeName;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return \" title=\\\"\" + toolTipText + inline\";",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"))\";",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return \" title=\\\"\" + toolTipText +OutTipText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altLow;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return \" title=\\\"\" + toolTipText + visits;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return \" title=\\\"\" + toolTipText + duration;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return \" title=\\\"\" + toolTipText + rval;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return \" title=\\\"\" + toolTipText +Attribute;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return \" title=\\\"\" + toolTipText +OutTipText + urlText;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return \" title=\\\"\" + toolTipText + BYTE_toolTipText;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return \" title=\\\"\" + toolTipText + RectangleInsets;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return \" title=\\\"\" + toolTipText + see;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return \" title=\\\"\" + toolTipText + Entry;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return \" title=\\\"\" + toolTipText + serializer;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return \" title=\\\"\" + toolTipText + alias);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return \" title=\\\"\" + toolTipText + Entry\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return \" title=\\\"\" + toolTipText + Ver;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return \" title=\\\"\" + toolTipText + JDK_url;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return \" title=\\\"\" + toolTipText + Rectangle2D;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return \" title=\\\"\" + toolTipText +entities;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return \" title=\\\"\" + toolTipText +Word;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return \" title=\\\"\" + toolTipText +os]\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return \" title=\\\"\" + toolTipText + getPropertyName;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return \" title=\\\"\" + toolTipText +37;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return \" title=\\\"\" + toolTipText +warning;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return \" title=\\\"\" + toolTipText + predicates;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return \" title=\\\"\" + toolTipText +ATTRIBUTE_sig;",
                "identical": false
            }
        ],
        "buggy_line": "return \" title=\\\"\" + toolTipText",
        "fixed_line": "return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText)"
    },
    "Codec-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new String[] {\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new String[] { outside, bytes_1});",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new String[] {fraction, bytes;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new String;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new String[] {Unit, bytes;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new String[] { match, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new String[] { changes, bytes_1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new String[] { outside, bytes_1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new String[] { outside, bytes",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new String[] { changes, bytes",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new String[] { match, bytes.ISO_1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new String[] { Charsets_8859_ inject_1, bytes);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new String[] {Unit, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new String[] {fraction, bytes",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new String[] { lineno, bytes_1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new String[] { one, bytes",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new String[] {\");}",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new String[] {Not_1, bytes",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new String[] { Charsets_8859_ inject_1, bytes;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new String[] {fraction, bytes_1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new String[] { Frame.ISO, bytes_1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new String[] { one, bytes_1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new String[] { buffer, bytes_1});",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new String[] { _bytes, bytes_1});",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new String[] { changes, bytes_1});",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new String[] { elementType, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new String[] { lineno, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new String[] { outside, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new String[] { elementType, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new String[] {fraction,bytes.before_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new String[] { outside, bytes;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new String[] { changes, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new String[] { changes, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new String[] {fraction,bytes.before_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new String[] { elementType, bytes_1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new String[] {um_1_8859_ inject_1, bytes;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new String[] { one, bytes_1});",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new String[] { Charsets_8859_TO_1, bytes_1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new String[] { match, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new String[] { null, bytes_1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new String[] { heads, bytes",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new String[] { Charsets_FLAG, bytes_1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new String[] {\u0b0a_1_8859_ inject_1, bytes;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new String[] { null, bytes_1});",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new String[] { Charsets_8859_TO_1, bytes_1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new String[] { Frame.ISO, bytes_1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_PAINT);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new String[] { Charsets_FLAG, bytes_1});",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new String[] { match, bytes_1});",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new String[] { match, bytes.ISO_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new String[] {fun_1, bytes_1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_TO_1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_Follow_1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_SIZE);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new String[] {Unit, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new String[] {fun_1, bytes_1});",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new String[] { match, bytes.ISO_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new String[] { lineno, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new String[bytes.ISO_1];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new String[] { changes, bytes;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new String[] {fraction,bytes.before_1_8859_INSTANCE);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new String[] { changes, bytes_1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_ inject_1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new String[] {fraction,bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new String[] {Increment, bytes_1});",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new String[] { elementType, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new String[] { Charsets_8859_ inject_1, bytes_1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new String[] { outside, bytes.ISO_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new String[] {um_1_8859_ inject_1, bytes);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new String[] {YYYY, bytes_1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new String[] { match, bytes_1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_TO_1) ');",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new String[] {fraction,bytes.before_1_8859_ class_1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_STATEMENT);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_SIZE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new String[] { one, bytes_1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new String[] { raf, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new String[] { queue, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new String[0];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new String[] { changes, bytes_1)});",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new String[] {um_1_8859_PAINT, bytes;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_CALL);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_ inject_1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new String[] { Charsets_FLAG, bytes_1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_ERROR);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new String[] { outside, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new String[] { changes, bytes_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new String[] {\uc18d_1, bytes",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new String[] {\u5ce0_1_8859_ inject_1, bytes;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new String[] {Unit, bytes.ISO_1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new String[] {CRET_1, bytes",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new String[] {fun_1, bytes_1_8859_ inject_1;",
                "identical": false
            }
        ],
        "buggy_line": "return new String(bytes, Charsets.ISO_8859_1);",
        "fixed_line": "return newString(bytes, Charsets.ISO_8859_1);"
    },
    "Gson-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (value || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (value instanceof Double || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (this.isNaN || value.isInfinite;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (this.isNaN || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (value instanceof Double || this.value;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (value || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (this.value != Double.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (this.value instanceof Double || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || value;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (this.value == Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (this.value != Double.POSITIVE_INFINITY && value;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY && value;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (value instanceof Double || this.value) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (this.valueType == Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (this.value != Double.MIN_VALUE || this.value;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (this.value != Double.MIN_VALUE && value;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || value;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (this.value && value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (this.valueNaN || Double.isInfinite;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (this.value instanceof Double) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (value instanceof Double || value.isInfinite;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (this.value && value.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (value.isNaN || value;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (this.value == Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (this.key == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (this.valueType == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (this.valueType == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.value) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.isInfinite) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (value < 0 || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (this.valueUnit == Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (value instanceof Double || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (this.value != Double.POSITIVE_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (this.valueNaN || Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (this.value != Double.MIN_VALUE || this.value) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (this.valueTime == Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (value < this.maximumValue || value;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (this.valueUnit == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.isInfinite = value;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.isInfinite) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (this.valueType == Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || value.isInfinite;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (this.value > value || Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (this.valueType != Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (this.value instanceof Double || value.isInfinite;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (value < 0 || value.isInfinite\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (this.valueTime == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || writer) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (this.value || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (value instanceof Double || value.isInfinite)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (this.value != Double.NEGATIVE_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (value || Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (this.value < Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (this.value != double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (this.value instanceof Double || this.value;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.isInfinite) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (value < 0 || value.isInfinite_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (value > this.maximumValue || Double.isInfinite;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (enclosing != Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (this.valueUnit == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (this.valueLong == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (this.value instanceof Double || writer) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || value.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || value.isInfinite;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (this.value == Double.NEGATIVE_INFINITY || value;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.value) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (this.value > 0 || value.isInfinite;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (this.valueTime == Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (this.valueToUpdate || Double.isInfinite;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (value < 0 || value.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (this.value || Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (this.value == Double.NEGATIVE_INFINITY || this.isInfinite) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (this.value instanceof Double || value;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (value > this.maximumValue || Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (this.key == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (value instanceof Double || writer) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.value != Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (value < 0 || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (this.value > value || Double.isInfinite;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (enclosing != Double.NEGATIVE_INFINITY && value.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (this.value < Double.MIN_VALUE || value > Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (this.value == Double.MIN_VALUE || this.value;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (this.valueTime == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.isInfinite)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (this.value != Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (value && value.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (this.valueType == Double.NEGATIVE_INFINITY || value;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (value.isNaN || this.value;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (this.valueLong == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (this.valueType != Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.key;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (this.valueNaN || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.value != Double.isInfinite;",
                "identical": false
            }
        ],
        "buggy_line": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
        "fixed_line": "if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {"
    },
    "JacksonDatabind-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (rawType == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class || raw == Object.class) return Object.class;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || raw == short.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class ||Range == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == Object.class) Kit.class;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || out == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || raw ==Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || 0, Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class ||Raw == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || raw == float.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || with == Object.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || raw == byte.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || cls == Object.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class)msg == Object.class;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class) { // p't be Object",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Stringraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || sat == Object.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw.class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || caseType == Object.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "else if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || length == Object.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw != String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class ||matched == Object.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || raw == arguments.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class ||Error == Object.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || fixed == Object.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class ||Local == Object.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || raw ==Style.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || false == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == Std.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || case == Object.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class ||Weight == Object.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || raw == long.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || b == Object.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || \"0 == Object.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] be Object",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] skip",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw instanceof Object.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || raw == ((Object.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class ||Escape == Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || second == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class ||close == Object.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw'",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // p's per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || graph == Object.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class ||3 == Object.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if(raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || read == Object.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || hi == Object.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || for == Object.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314]';",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || getNamespace == Object.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || isVisible == Object.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || Reflect == Object.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) PeriodType.class;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == days.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // p's be Object",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || intr == Object.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw't be Object",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || getter == Object.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { // coercing should never happen",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || has == Object.class) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls as per [JACKSON-3",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] skip entries with null values?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || map == Object.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class ||sur == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || arguments == Object.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || against == Object.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] explicit't be Object",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-3",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // coercing should never be Object",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || Option == Object.class) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || className == Object.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || in == Object.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) { // [JACKSON-314] skip entries with null values?",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class ||sat == Object.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || h == Object.class) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls as per [JACKSON",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || Second == Object.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // coercing should never occur?",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class ||ELDS == Object.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == Object.class) {returnTypemsg == Object.class;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == modified.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class ||ms == Object.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw != Object.class) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class ||OTHER == Object.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || binary == Object.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || 48 == Object.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || upper == Object.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Closure-65": {
        "fixes": [
            {
                "k": 1,
                "patch": "case '\\0': sb.append(\"\\\\t; break;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case '\\0': sb.append(\"\\\\t;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case '\\0': sb.append(\"\\\\t = c; break;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case '\\0': sb.append(\"\\\\uslashEscape; break;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case '\\0': sb = c; break;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case '\\0': sb = i;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case '\\0': sb.append(\"\\\\t = c;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case '\\0 = c; break;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case '\\0': sb.append(\",slashEscape; break;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case '\\0': sb.append(\"\\\\u; break;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case '\\0': sb.append(\"\\\\uslashEscape;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case '\\0': sb.append(\"\\\\t; break L = c;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case '\\0': sb; break;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case '\\0': sb.append(\"\\\\uend; break;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case '\\0 += sb.length; break;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case '\\0': sb.append(\"\\\\uString; break;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case '\\0': sb.append(\"\\\\u\", s;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case '\\0': sb.append(\"\\\\tEscape; break;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case '\\0': sb = s; break;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case '\\0': sb.append(\"\\\\uString;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case '\\0': sb.append(\"\\\\t]\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case '\\0': sb.length; break;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case '\\0': sb.append(\"\\\\s; break;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case '\\0': sb.append(\"\\\\t = s;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case '\\0': sb.append(\"\\\\u\" + s;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case '\\0': sb.append(\"\\\\uslash;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case '\\0': sb.append(\"\\\\quoteEscape; break;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case '\\0': sb.append(\"\\\\uslash; break;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case '\\0': sb.append(\"\\\\t\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case '\\0': sb.append(\",slash; break;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case '\\0': sb.append(\"\\\\uEOF;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case '\\0': sb.append(\"\\\\ range; break;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case '\\0': sb.append(\"\\\\t = i;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case '\\0': sb.append(\"\\\\u;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case '\\0': sb.append(\"\\\\ns; break;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case '\\0': sb.append('; break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 = c;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case '\\0': sb.append(\"\\\\Item;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case '\\0 += sb.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case '\\0': sb.append(\"\\\\u7; break;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case '\\0': sb.append(\"\\\\; break;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case '\\0': sb.append(\"\\\\u\" + i;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case '\\0': sb.append(\"\\\\slashEscape; break;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case '\\0': sb.append(\"\\\\t); break;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case '\\0': sb.append(\"\\\\tcfg; break;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case '\\0': sb.append(\"\\\\tTYPE; break;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case '\\0': sb.append(\"\\\\ Data; break;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0;}",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case '\\0': sb.append(\"\\\\u> break;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case '\\0': sb.append(\"\\\\t; break = c;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case '\\0': sb.append(\"\\\\t] = c;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case '\\0': sb.append(\"\\\\s\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case '\\0': sb.append(\"\\\\t; breakrogate = c;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case '\\0': sb.append(\"\\\\tcodes;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case '\\0': sb.append(\"\\\\u); break;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case '\\0': sb.append(\"\\\\t + s;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case '\\0': sb.append(\"\\\\SECOND; break;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case '\\0': sb.append(\"\\\\u tick; break;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case '\\0': sb.append(\"\\\\u if (backslashEscape;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case '\\0': sb.append(\"\\\\tcodes; break;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case '\\0': sb.append(\"\\\\t; break Lies the end = c;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case '\\0': sb.append(\"\\\\tPos;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case '\\0': sb.append(\"\\\\u maximum; break;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case '\\0': sb.append(\"\\\\t; break + i",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case '\\0': sb.append(\"\\\\tConstruction; break;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case '\\0': sb.append(\"\\\\ ac; break;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case '\\0': sb.append(\"\\\\u if (legend.length-1); break;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case '\\0': sb.append(\"\\\\ 37; break;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case '\\0': sb.append(\"\\\\end; break;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case '\\0a': sb.append(\"\\\\t;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case '\\0': sb.append(\"\\\\tClassDef;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case '\\0;} break;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case '\\0': sb.append(\"\\\\t = s; break;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case '\\0': sb.append(\"\\\\uEOF; break;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case '\\0': sb.append(\"\\\\uToken; break;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case '\\0': sb.append(\"\\\\u if (s.length; break;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case '\\0': sb.append(\"\\\\uend;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case '\\0': sb.append(\"\\\\u if (legend.length; break;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case '\\0': sb.append(\"\\\\t 0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case '\\0': sb.append(\"\\\\t needEscape; break;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case '\\0': sb.append(\"\\\\Mock; break;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case '\\0': sb.append(\"\\\\t; in '\\\\') break;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case '\\0': sb.append(\"\\\\ stack; break;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case '\\0': sb.append(\"\\\\u if (backslashEscape; break;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case '\\0': sb.append(\"\\\\tSelected; break;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case '\\0': sb.append(\"\\\\t&0;} break;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case '\\0': sb.append(\"\\\\t = 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case '\\0': sb.append(\"\\\\ again; break;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case '\\0': sb = s.charAt(i;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 = s;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case '\\0': sb.append(\"\\\\ID; break;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case '\\0a': sb.append(\"\\\\t; break;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case '\\0': sb.append(\"\\\\u7;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case '\\0': sb.append(\"\\\\t'; break;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case '\\0': sb.append(\"\\\\u if (single0;} break;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case '\\0': sb.append(\"\\\\eter; break;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case '\\0': sb.append(\"\\\\ucfg; break;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case '\\0': sb.append(\"\\\\Exp; break;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case '\\0': sb.append(\"\\\\uOverride; break;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case '\\0': sb.append(\"\\\\tsignature = c; break;",
                "identical": false
            }
        ],
        "buggy_line": "case '\\0': sb.append(\"\\\\0\"); break;",
        "fixed_line": "case '\\0': sb.append(\"\\\\000\"); break;"
    },
    "Math-69": {
        "fixes": [
            {
                "k": 1,
                "patch": "out[i][j] -= 2d * t;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "out[i][j] -= 2 * t;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "out[i][j] -= 2 * r;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "out[i][j] -= 2d * r;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "out[i][j] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "out[i][0] = 2d * r;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "out[i][j] = 2d * t;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "out[i][j] -= 2d * t - r;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "out[i][j] = 2d * r;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "out[i][j] -= 2d * r, t;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "out[i][0] = 2d * t - r;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "out[i][0] = 2 * r;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "out[i][j] -= 2 * r, t;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "out[i][j] -= t * (1 - r;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "out[i][j] -= 2 * t - r;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "out[i] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "out[i][j] = 2d * t - r;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "out[i][j] = t * w;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "out[i][j] = t * w - r;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "out[i][j] = t * (1 - t;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "out[i][j] = t * r;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "out[i][j] = 2d * r, t;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "out[i][j] = t * 60 * t;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "out[i][j] -= i * t - r;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "out[i][j] -= j * t;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "out[i][0] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "out[i][0] = 2d * r, t;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "out[i][j] = t * h;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "out[i][j] -= 2d * coefficients[i][];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "out[i][j] = t * depth;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "out[i][0] = 2d * t;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "out[i][j] -= 2d * coefficients[i][2] - t;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "out[i][0] = 2d * r - t;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "out[i][j] -= i * t;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "out[i][j] -= 2d * t.cumulativeProbability;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "out[i][j] = t * mock;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "out[i][j] -= t * r;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "out[i][j] = t * A;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "out[i] = 2d * r;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "out[j] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "out[i] = 2d * t - r;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "out[i][j] -= 2d * t, j];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "out[i][j] = t * state.cumulativeProbability;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "out[i][j] = t * (1 - j;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "out[i][j] -= 2d * t.cum else if (t[i][z - r;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "out[i][j] -= alphaSize * t - r;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "out[i][j] -= 2d * coefficients[i][10];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "out[i][j] -= 2d * r);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "out[i][j] -= 2d * t.cum else if (t[i][2] - r;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "out[i][j] = t * state.cum else if (t[i][z - t;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "out[i][j] -= 2d * t+1];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "out[i][j] = t * state.cum else if (t[i][2] - t;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "out[i][0] = 1][j] / (1 - t;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "out[i][j] -= 2d * t, j]) / r;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "out[i][j] = t * caused;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "out[i][j] -= 2d * t, j]) - r;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "out[i][j] = t * 1] - r;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "out[i][j] = t * maxWidth - r;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "out[i][j] -= 2d * t >> 4];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "out[i][0] = 2d * coefficients[i][];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "out[i] = j * t - r;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "out[i][j] = t * 1000;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "out[i][0] = 2d * rvalue - t;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "out[i][j] = t / (1 - t;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "out[i][j] -= 2d * t.cum else if (t[i][c >> 4]) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "out[i][j] = t * close + i;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "out[i][j] -= 2d * t, j]) / n;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "out[i][j] = 2 * r;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "out[i][j] -= r * t;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "out[i][0] = 2d * r, t - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "out[i][j] -= r * t - r;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "out[i][j] -= i * t.cumulativeProbability(n + j]) / r;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "out[i][j] -= 2d * r, j]) - t;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "out[i][j] -= j * t - r;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "out[i][j] -= 2d * v;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "out[i][j] = t *Scope;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "out[i][0] = 1][j] / r * (1 - t;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "out[i][j] -= 2d * coefficients[i][pv];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "out[i][j] -= 2d * rvalue - t;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "out[i][j] -= 2d * t);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "out[i][j] = t * 2d;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "out[i][j] -= 2d * r, t.cum else if (n + j]) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "out[i][j] -= 2 * r);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "out[i][j] -= 2d * t.cum else if (t[i][ + j]) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "out[i][j] -= i * t.cumulativeProbability(n + j - t;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "out[i][j] = t * state.cum else if (t[i][v - r;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "out[i][j] -= 2d * t.cumulativeProbability(n + j]) / r;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "out[i][j] -= 2d * r, t);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "out[i][j] -= 2 * coefficients[i][2] - t;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "out[i][j] -= 2d * t.cum else if (t[i][itemCount - r;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "out[i][j] = t * state.cum else if (t[i][Space - t;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "out[i][j] -= t * 60 * t;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "out[i][0] = 2 * t;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "out[i][j] = 2 * t;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "out[i][j] -= 2d * coefficients[i][ lineLength - t;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "out[i][j] = t * state.cum else if (t[i][ + j]) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "out[i][j] -= 2 * r - t;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "out[i][j] -= 2 * r, j]) - t;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "out[i][j] -= i * t.cumulativeProbability(n - r;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "out[i][j] -= 2d * coefficients[i][MM;",
                "identical": false
            }
        ],
        "buggy_line": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
        "fixed_line": "out[i][j] = 2 * tDistribution.cumulativeProbability(-t);"
    },
    "Closure-86": {
        "fixes": [
            {
                "k": 1,
                "patch": "return false;",
                "identical": true
            },
            {
                "k": 2,
                "patch": "return false; // Definitely a read.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return false; // null or: can't really modify it should be from here.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return false; // can't be but we'll set",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return false; // P1_GT_PMD",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return false; // normalize it'll set on the pre, value",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return false; // The: can't be but we'll set",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return false; // The: can't be but we'll set on the pre, null",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_ARRAY",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return false; // can't do sanity check",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return false; // null or: can't be but we'll set",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return false; // null or: can't run type",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_ARRAY",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return false; // normalize it't the pre, value",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return false; // can't be but we'll set on the pre, null",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return false; // can't be valid for now on the pre, null",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_OBJECTLIT",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_Local",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return false; // null or: can't really modify it should be from",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return false; // null or: can't really modify it should be from here",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return false; // can't be for now on the pre, null",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return false; // note: can't be from here.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return false; // can't be but raw the pre, value",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return false; // null or: can't really modify it should check",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_OBJECTLIT",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return false; // can't be valid for now on the pre, value",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return false; // can't be for now on the pre, null if has matrix is passed in deliberately",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_Local",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return false; // can't be but for now on the pre, null if hasJSDOC_EXPR_ARRAY",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_OBJECT",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_TO",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_EMBEDDED_OBJECT",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return false; // null or: can't the first value",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_OBJECT",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return false; // can't be valid for now on the pre, null if has matrix is passed in deliberately",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return false; // null or: can't be from here.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_EMBEDDED_OBJECT",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return false; // null or: can't really gets this already calculated",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return false; // The: can't be but we'll set on the pre, value",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return false; // can't be valid for now on the pre, null if there.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return false; // can't be but a read.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return false; // null or: can't really modify it should be from here?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return false; // can't be valid for now on the pre, null if hasHook in del \"+n.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return false; // The: can't be but a read.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return false; // can't be for now on the pre, null if no need to check",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_TO",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return false; // can't be valid for now on the pre, true;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return false; // can't be but for now on the pre, null",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return false; // Definitely a read the matrix is not singular",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_TYPE",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return false; // null or: can't really modify it should be SHORT",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return false; // can't be for now on the pre, value",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return false; // can't be valid for now on the pre, null if no need to check",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_TYPE",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return false; // can't be for output",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return false; // can't be but for now on the pre, null if hasJSDOC_EXPR_OBJECTLIT",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return false; // can't be for now on the pre, null in deln.",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return false; // P can't do sanity check",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_SLOT_NAME;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return false; // null or: can'll set",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return false; // can't be for now on the pre, null if hasHook in del \"+n.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_SLOT_NAME;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return false; // can't be but for now on the pre, null in deln.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return false; // can't be for now on the pre, null if there.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return false; // can't be for now on the pre, null if has matrix is passed in del tag",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_INSTANCE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_ 6, to an InsnList",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return false; // null or: can't really gets this far",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return false; // can't be but we'll set:",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return false; // can't be for now on the pre, null if hasHook in deln.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return false; // can't be for now on the pre, null if has side",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return false; // can't be valid for now on the pre, null if has matrix is not singular",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return false; // can't be but raw the sanity check",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPORT",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return false; // can't be but for now on the pre, null if hasJSDOC_EXPR_Local",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return false; // null or: can't the pre, to check",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return false; // can'll set",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_NAME;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return false; // can't be valid for now on the pre, null if has matrix is passed in del tag",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return false; // The: can'll set on the pre, value",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPORT",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return false; // can't be valid for now on the pre, null if has side",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return false; // note: can't run type",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return false; // can't really gets this the pre, value",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_TO_1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return false; // can't be but for now on the pre, null if has matrix is passed in deliberately",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return false; // null or: can't really modify it should be in del",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return false; // null or: can't really modify it should be in deln.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return false; // null or: can't really modify it should be allow disabling of name",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return false; // can't be valid for now on the pre, null if has.",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_NAME;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return false; // normalize it'll set on the pre-empty check",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return false; // The if not already calculated",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_EMBED",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return false; // can't be null if it'll set",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return false; // The: can't be but we'll set flag",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_ERROR;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return false; // can't be valid for now on the pre, null in deln.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return false; // can't be but for now on the pre, null if hasJSDOC_EXPR_OBJECT",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return false; // can't be for now on the pre, null if has matrix is not singular",
                "identical": false
            }
        ],
        "buggy_line": "return true;",
        "fixed_line": "return false;"
    },
    "Math-58": {
        "fixes": [
            {
                "k": 1,
                "patch": "return guess;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return rawClassetric(), guess;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return raw.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return rawParent.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return rawClassetricLit.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return rawClassetricLit.new Gaussian = guess;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return raw.new Gaussian;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return rawClassetric*/.new Gaussian;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return rawClassetric.new Gaussian;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return fit.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return raw.new Gaussianeetric(), guess;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return rawClassetric1_.new Gaussian;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return rawClassetricLit.new Gaussian;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return Main.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return DEFAULT_INTERIOR_GAP;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return raw.new Gaussianing;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return rawClassetricToString.new Gaussian;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return raw.new Gaussian % guess;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return rawClassInfo.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return raw.new Gaussian % written;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return raw.new Gaussian %Out;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return raw.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return raw.new GaussianBounds;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return rawParent.new Gaussianatoretric(), guess;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return rawClassetric*/.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return rawClassetricLit.new Gaussian(), guess",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return rawClassetricLit.new Gaussian(), guess);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return Main.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return instance.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return rawClassetricLit.new Gaussian_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return rawClassetricToString.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return debug.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return rawClassetricLin.new Gaussian;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return rawClassetric Font.new Gaussian;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return rawClassetricStep.new Gaussianing;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return Main.new Gaussian_;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return rawClassetric1_.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return rawClassetric.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return rawParent.new Gaussian",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return rawClassetricLit.new Gaussianing;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return rawClassetricLit.new Gaussian =lbetric(), guess;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return rawClassInfo.new Gaussianing;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return rawClassetric.new Gaussianing;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "returnByDefault.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return rawParentClassetric(), guess;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return raw.new Gaussian % 23, 52;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return rawClassArray.new Gaussian;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return raw.new Gaussian %class;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return rawParent.new Gaussian % guess;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return rawParent.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return rawClassetricLit.new Gaussian = instanceType;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return raw.new Gaussian % border;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return rawParent.new Gaussianing;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return rawClassetricStep.new GaussianBounds;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return rawClassetric.new Gaussian = guess;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return Main.new Gaussianing;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return raw.new Gaussian %SIONS;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return rawClassetricLit.new Gaussian);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return rawClassetricLit.new Gaussian =guess;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return rawClassetricStep.new Gaussian = guess;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return rawClassetricLit.new Gaussian",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return rawClassetricLin.newCallback;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return rawClassInfo.new Gaussian % 23, 52;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return instance.new Gaussian;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return rawClassetricLit.new Gaussian first(), guess;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return rawParent.new Gaussian % 23, 52;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return rawParent.new Gaussian % written;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return rawClassetricLin.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return raw.new Gaussian %AbsolutePath;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return Main.new Gaussian_RANDOM;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return rawClassetricLit.new Gaussian(),guess;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return rawClassetricLit.new Gaussian inExterns;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return rawClassInfo.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return rawClassetricLit.new Gaussian_;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return rawParent.new Gaussian;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return Main.new Gaussian_OBJECT;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return rawClass.new Gaussian % 23, 52;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return rawClassetricLit.new GaussianEntryCount;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return rawParent.new Gaussian %Out;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return Main.new Gaussian_BASEDUPPER;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return rawClassetricLit.new Gaussian = names;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return raw.new Gaussian % NULL_PRESERVE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return rawClassetricLit.new Gaussian = instance;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return rawClassInfo.new Gaussian %Out;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return rawParent.new Gaussian % border;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return Main.new Gaussian %Out;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "returnLin.new Gaussian;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return EMPTY_BYTE_ARRAY;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return rawClassetricLit.new Gaussian-3;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return rawClassetricLit.new Gaussian(), guessCount;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return raw.new Gaussian % builder;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return Main.new Gaussian % written;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return rawClassetricLit.new GaussianS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return raw.new GaussianEntryCount;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return rawClassetric1_.new Gaussianing;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "returnPropertyetric.new Gaussian;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return Main.new Gaussian = guess;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return raw.new Gaussian % 400;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return rawClass.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return instance.new Gaussianing;",
                "identical": false
            }
        ],
        "buggy_line": "return fit(new Gaussian.Parametric(), guess);",
        "fixed_line": "return fit(guess);"
    }
}