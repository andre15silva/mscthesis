{
    "Bears-110": {
        "fixes": [
            {
                "k": 1,
                "patch": ".any().compile;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".any().length;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".any().numberOfEnd;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".any().numberOfArgs = 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".any;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".any().().compile;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".any().numberOfArgs = d;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".any().numberOfArgs(d);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".any().numberOfforeground = d;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".any().compareTo(d);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".any().Top;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".any().().numberOfEnd;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".any().numberOfEnd() {",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".any().numberOfArgs(dName);",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".any().numberOfEnd = d;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".any().numberOfArgs(number);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".any().numberOfContext = 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".any().numberOfforeground = 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".any().numberOfValidColumns().numberOfEnd;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".any(0).numberOfEnd;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".any().numberOfEnd().length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".any().numberOfField = d;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".any().compareTo(numberOfEnd) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".any().().length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".any().numberOfEndStrings = d;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".any().numberOfContext;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".anySetter().numberOfEnd;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".any().numberOfContext(number);",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".any().numberOfResult = 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".any().numberOfRight = d;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".any().numberOfResult = d;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".any().numberOfSuccess;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".any().numberOfArgs(base);",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".anySetter().length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".any().numberOfArgs(intIndex);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".any().compareTo(number);",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".any().numberOfEnd = 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".any().length() != 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".any().compareTo(d)[0];",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".any().numberOfreg = d;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".any().numberOfArgs(intValue);",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".any().().numberOfArgs = 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".any().numberOfStatement = d;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".any().numberOfEnd().number;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".any().numberOfEnd().numberOfEnd;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".any().numberOfArgs(-1 = 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".any().compareTo(numberOfEnd) != 0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".any().numberOfEnd) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".any().numberOfRight = 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".any().compareTo(numberOfEnd) break;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".anyAnalyzer().numberOfEnd;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".anyLiteral().numberOfEnd;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".any().numberOfArgs(state.number);",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".any().numberOfParent = 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".anyStrings = d).any;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".any().numberOfArgs(dTop);",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".any().numberOfArgs = 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".any(). ll;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".any().numberOfParent;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".any().numberOfToFront;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".any().compareTo(state.number);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".any().numberOfEndIndex = 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".any getClass().length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".any().compareTo(groupName);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".any().().numberOfArgs = d;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".any().compareTo(numberOfEnd)[0];",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".any().numberOfArgs(signature);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".any().numberOfArgs(d TreeSet);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".any().numberOfStatement = 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".any8().numberOfEnd;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".any().numberOfArgs(-1 = d;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".any().subtract(d+\"]\";",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".any().numberOfArgs -= d;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".any().numberOfEndCount = 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".any().compareTo(numberOfEnd);",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".any(). Decoder;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".any().compile = 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".any().Byte() {",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".any().compile(d+\"]).number;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".any().().numberOfArgs(d);",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".any().numberOfArgs((10, d);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".any().compareTo(state.numberOfEnd) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".any.numberOfEnd().length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".any().numberOfArgs(d1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".any().numberOfContext = d;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".anySignature().numberOfEnd;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".any().compareTo(exp);",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".anyany().numberOfEnd;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".any().Close;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".any().numberOfArgs;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".any().compareTo(numberOfEnd)Current).number;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".any().compareTo(numberOfEnd) d).number;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".any().numberOfArgs(top);",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".any().syntax = 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".any().numberOfEndRecyc = d;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".any().numberOf FunctionType = 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".any().numberOf((10, d);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".any().compareTo(numberOfEnd;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".any().compareTo(OFFSET;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".any().Information;",
                "identical": false
            }
        ],
        "buggy_line": ".any()",
        "fixed_line": ""
    },
    "Bears-22": {
        "fixes": [
            {
                "k": 1,
                "patch": "_referenced = value;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "_referenced = reference;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "_referenced = old;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "_referenced = newType;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_referenced = referenceType;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "_referenced = old.value;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "_referenced = new self;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "_referenced =H;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "_referenced = sb;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "_referenced = ref;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "_referenced = for;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_referenced = logType;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "_referenced = codec;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "_referenced = _set;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_referenced = oldType;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "_referenced = forSerialization;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "_referenced = 0, referenceType.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "_referenced =HType;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "_referenced = 0, referenceType;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_referenced = base._referenced;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "_referenced = src._referenced;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "_referenced = _referenced;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_refer old = value;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "_referenced =functionType;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "_referenced = 0, reference.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_referenced = isType;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "_referenced = instanceType;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "_referenced = right;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "_referenced = leftType;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "_referenced = forType;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "_referenced = DEFAULT_START_ARRAY;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "_referenced = 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "_referenced =Method;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_referenced = obj;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "_referenced = null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "_referenced = new_set;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "_referenced = | reference;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_refer old = reference;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "_referenced = base._set;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "_referenced = DEFAULT_START_DRAW;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "_referenced = DEFAULT_START_DUP;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "_referenced = init;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "_referenced = an;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_START_LEN+\"]\";",
                "identical": false
            },
            {
                "k": 45,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_START_ELEMENT;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 47,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw'",
                "identical": false
            },
            {
                "k": 49,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per ['",
                "identical": false
            },
            {
                "k": 50,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 51,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per ['",
                "identical": false
            },
            {
                "k": 52,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw'",
                "identical": false
            },
            {
                "k": 53,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 57,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 58,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw'",
                "identical": false
            },
            {
                "k": 59,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per ['",
                "identical": false
            },
            {
                "k": 60,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per!",
                "identical": false
            },
            {
                "k": 61,
                "patch": "_referenced = DEFAULT_START_TO_DRAW;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 63,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw'",
                "identical": false
            },
            {
                "k": 65,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 66,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per ['",
                "identical": false
            },
            {
                "k": 67,
                "patch": "_referenced = pattern;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 69,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per ['",
                "identical": false
            },
            {
                "k": 70,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw'",
                "identical": false
            },
            {
                "k": 72,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per!",
                "identical": false
            },
            {
                "k": 73,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per!",
                "identical": false
            },
            {
                "k": 74,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 77,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per!",
                "identical": false
            },
            {
                "k": 78,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per!",
                "identical": false
            },
            {
                "k": 79,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [JACKSON-Type+\"]\";",
                "identical": false
            },
            {
                "k": 80,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_referenced",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per!",
                "identical": false
            },
            {
                "k": 82,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per",
                "identical": false
            },
            {
                "k": 84,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per!",
                "identical": false
            },
            {
                "k": 85,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per!",
                "identical": false
            },
            {
                "k": 86,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 87,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw'",
                "identical": false
            },
            {
                "k": 88,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per!",
                "identical": false
            },
            {
                "k": 89,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw'",
                "identical": false
            },
            {
                "k": 90,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per ['s do not store 'raw' nulls as per ['",
                "identical": false
            },
            {
                "k": 91,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per",
                "identical": false
            },
            {
                "k": 92,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 93,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 94,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per!",
                "identical": false
            },
            {
                "k": 95,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per ['s do not store 'raw' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw's do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 97,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per ['s do not store 'raw' nulls as per [' nulls as per [' nulls as per!",
                "identical": false
            },
            {
                "k": 98,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per [' nulls as per ['",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it' nulls as per ['s do not store 'raw' nulls as per ['s do not store 'raw' nulls as per ['s do implicit re-Type+\"]\";",
                "identical": false
            },
            {
                "k": 100,
                "patch": "_referenced =H; // if not store 'raw' nulls as per [JACKSON-407] -- allow disabling of \"+_NUMBER_INT.value if it's do not store 'raw' nulls as per [' nulls as per [' nulls as per [' nulls as per ['s do not store 'raw' nulls as per",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (_referencedType != null) { throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+_referencedType+\", new = \"+ref); } _referencedType = ref; } @Override public JavaType getSuperClass() { if (_referencedType != null) { return _referencedType.getSuperClass(); } return super.getSuperClass(); } public JavaType getSelfReferencedType() { return _referencedType; } @Override public StringBuilder getGenericSignature(StringBuilder sb) {"
    },
    "Bears-137": {
        "fixes": [
            {
                "k": 1,
                "patch": "int bufIndex = matcher.length - beginIndex + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int flag = buf.length % 2 - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex + 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int flag = buf.length % 2 - beginIndex + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int bufIndex = matcher.length - beginIndex + length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int bufIndex = endIndex - 1 + length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int bufIndex = matcher.length - beginIndex + lengthInBits;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInIndex - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int bufIndex = 1 - beginIndex + length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int bufIndex = endIndex - beginIndex + length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int bufIndex = matcher.length - beginIndex + lengthInIndex;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int bufIndex = matcher.length - beginIndex + lengthInIndex - 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int flag = buf.length % 2 == 0 || length - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int bufIndex = buf.length - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInBits;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInBits - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int bufIndex = 0 || new StringIndex - 1 + length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int bufIndex = buf.length - beginIndex + length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int bufIndex = matcher.length - beginIndex + lengthInIndex % 2 - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int flag = buf.length % 2 - rIndex + 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int flagIndex = buf.length - beginIndex + 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int bufIndex = tmp.length - beginIndex + lengthInBits;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int bufIndex = tmp.length - beginIndex + lengthInIndex - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int bufIndex = init.length - beginIndex + length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int bufIndex = endIndex - 1 + lengthInIndex + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInBits / 2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int bufIndex = tmp.length - beginIndex + lengthInIndex;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int bufIndex = endIndex - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int bufIndex = props.length - beginIndex + lengthInIndex - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int bufIndex = 1 - beginIndex + lengthInIndex;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int bufIndex = buf.length - beginIndex + 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int bufIndex = endIndex - beginIndex + lengthInIndex - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int bufIndex = oldIndex - 1 + lengthIndex;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInIndex;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int bufIndex = this.in.length - 1 + length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int flag = buf.length % 2 -wrapperIndex + 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int bufIndex = tmp.length - beginIndex + lengthInBits / 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex % 2 == 0 || lengthInBits / 2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int bufIndex = 0 && pos == -1) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int bufIndex = matcher.length - beginIndex + lengthInIndex + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int flag = buf.length % 2 - caseIndex + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int bufIndex = oldIndex - 1 + length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int bufIndex = matcher.length - beginIndex + 2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int bufIndex = endIndex - beginIndex + lengthInBits / 2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int bufIndex = tmp.length - beginIndex + lengthInBits - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int bufIndex = matcher.length - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int bufIndex = 1000 - beginIndex + length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int bufIndex = 15Index - 1 + lengthIndex;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInIndex - 1];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int bufIndex = endIndex - 1 + lengthInIndex;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int flag = buf.length % 2 - beginIndex;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int flag = buf.length % 2 == 0 && bufIndex - 1 + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex % 2 == 0 && lengthInBitsIndex;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int bufIndex = 1 - beginIndex + lengthInBits / 2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int bufIndex = 1 -(\".Index + lengthInBits / 2 - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInBits % 2 - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int bufIndex = matcher.length - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int bufIndex = this.hashIndex - 1 + length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInIndex % 2 - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int bufIndex = this.in.length - 1 + lengthInIndex;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int flag = buf.length % 2 + 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int bufIndex = matcher.length - beginIndex + lengthInIndex % 2 == 0 || length - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int flag = buf.length % 2 -ValidIndex + 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int bufIndex = 0 || new StringIndex - beginIndex + length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int bufIndex = 1 - beginIndex + lengthInIndex % 2 == 0 || buf.length - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int bufIndex = 1000 - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int bufIndex = 1 - posIndex + 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int bufIndex = 1 - beginIndex + lengthInBits / 2 - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int bufIndex = 0 && posIndex == -1) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int bufIndex = contents.length - beginIndex + lengthInIndex - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int flag = buf.length % 2 == 0 && bufIndex - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int bufIndex = 1 - '0Index + length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex % 2 == 0 || flag;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int bufIndex = 0 && buf.length - 1 == -1) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int bufIndex = constructIndex - 1 + length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int bufIndex =om - beginIndex + lengthInBits / 2;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int bufIndex = size - 1 + lengthIndex;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int bufIndex = matcher.length - beginIndex + 3;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int flag = buf.length % 2 - 0 || lengthIndex - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex % 2 == 0 || localIndex - 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int flag = buf.length % 2 - propertyIndex + 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int flag = buf.length % 2 - fsIndex + 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int bufIndex = tmp.length - beginIndex + lengthInBits % 2 - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int bufIndex = endIndex - beginIndex + lengthInIndex;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int bufIndex = buf.length - 1 + lengthIndex;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int flag = buf.indexOf(' - beginIndex + length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int bufIndex =PROPERTY.length - beginIndex + lengthInIndex - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int bufIndex = endIndex - beginIndex + lengthInBits / 2 - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int bufIndex = matcher.length - beginIndex + lengthInIndex % 2 == 0 || lengthInBits;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex % 2 == 0 || length - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int bufIndex = 1 -(\".Index + length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex % 2 == 0 && beginIndex;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int bufIndex = 0 && buf.length - position + length - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int bufIndex = endIndex - 1 + lengthIndex % 2 == -1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInBits / 2 - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int flagIndex = buf.length - beginIndex + length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int bufIndex = buf.length - beginIndex + lengthInIndex % 2 == 0 || length - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int bufIndex = matcher.length - position + 2;",
                "identical": false
            }
        ],
        "buggy_line": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"AA\")); if (flagIndex != -1 && flagIndex - beginIndex == 6) {",
        "fixed_line": ""
    },
    "Bears-108": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOf)(m);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfValid().hh(d);",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOf)(dd);",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOf)(Math*d+dd);",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberdd(date).hh",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOf)(delta);",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberdd(date*d);",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".5)dd(date*d);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOf)(n*d);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberdd = d)(Math.numberOf)(d);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberdd = d)(d*d+dd);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfValid().dd(d);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberOfValid().dd(char)(d*d);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberdd = d)(Math.numberOf)(m);",
                "identical": false
            },
            {
                "k": 15,
                "patch": ". .numberOfValid().hh(d);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberdd = d)(Math.numberOf)(delta);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfValid().2(d);",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfField().dd(d);",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberdd = d)(m;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberdd(date*d+dd).hh",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfValid().hh(date*d);",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOf)(d);",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberdd = d)(d*d);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberdd(date).hh;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ". .numberdd(date*d);",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberdd = d)(Math.numberOfValues*d);",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberdd = dInvocations().hh(date*d);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberdd(date).).hh",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberdd(date*d+dd);",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberdd = dInvocations().hh(date);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberdd = d)(Math.numberOfEra().length-1d*d);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberOfValid().dd(char)(d);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOf)(dd*d+ d).hh",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfValidNTHd().hh(date*d);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOf)(Math).hh",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberOf)(Math*d);",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOf)( visible);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberdd = d)(Math.numberOfValid*d);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ". .numberOf)(Math*d+dd);",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberdd = d)(Math.numberOfValues*d+\"]).hh",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberOfValid().dd(angle);",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOfValid().hh(d*d);",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberdd = d)(Math.numberOfValues*d+d);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberdd = d)(m + 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberdd = d)(Math.numberOf)(number);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberdd = d)( text*d+dd);",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberdd = d)(Math.numberOfEra().length-1d*d+d);",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOfValid().dd(Deserializer);",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberdd = d)(Math.numberOfValues*d+ d).hh",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberdd = 1; // never happen",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberdd = d)(Math.numberOf)(d+1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOfValidColumns().hh(d);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberdd = d)(Math.numberOf)(dplus).hh;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ". .numberdd(date*d+dd);",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOf)(m >> 32);",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberdd = d)(Math.numberOfValid*d+\"]).hh",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberdd = d)(Math.numberOfSL*d+ d).hh",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOf)(dd*d);",
                "identical": false
            },
            {
                "k": 59,
                "patch": ". .numberOfValid().2(d);",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberdd = d)(Math*d+dd);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOf)(Math*d+ d).hh",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberdd = d)(Math.numberOfValues*d+\"]\";",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberdd = dplus)(numberOfValues*d);",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberdd = d)(Math.numberOfValues*d+dd);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberdd = d)(Math.numberOfEra().length-1dTop;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberdd = d)(Math.numberOf)(dd);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberOfValid().hh)(d);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOf)(Math*d+1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberdd = d)(d*d+dd).hh",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberOfValid().dd(Based);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ". .numberOf)(m);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOf)(Math*d+dd).hh",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberdd = dplus)(numberOfValues*d+d);",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberdd = d)(d*d+ d).hh",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberdd = d)(d*d+1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOfValid().dd(Visitd);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberdd = d)(Math.numberOf)(d*d);",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberdd = dplus)(numberOfValid*d);",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".5)dd(date).hh",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberdd = d)(Math.numberOf)(numberOfValid*d);",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberdd = d)(Math.numberOf)(dCount);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberOf)( adj);",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberOfValidColumns().hh)(d*d);",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberdd = d)(Math.numberOf)(dLevel).hh",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberdd = d)(Math.numberOfSL*d);",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberdd = dplus)(numberOf)(m);",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberdd = d)(Math.numberOfConstructors).hh;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfValid().dd(Recordd);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberdd = d)(Math.numberOfSL*d+\"]).hh",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberOf)(minutes).hh",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberOfValidColumns().hh)(d);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ". .numberdd(date*d+dd).hh",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberdd = d)(Math.numberOfValues*d + 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberdd = d)(d*d+\")).hh",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOf)(dd*d+dd);",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".dd(date*d);",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberdd = d)(Math.numberOf)()(d);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberdd = d)(Math.numberOfValues*d+d[0], 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberdd = d)(Math).hh",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberdd(low +ables).hh",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(dd)(dd)(dd):\") // time (hhmmss) .number(\"(-?d+.d+):\") // longitude .number(\"(-?d+.d+):\") // latitude .number(\"(d+.?d*):\") // speed .number(\"(?:NAN|(d+.?d*)):\") // accuracy .number(\"(?:NAN|(d+.?d*)):\") // course .number(\"(?:NAN|(d+.?d*))\") // altitude",
        "fixed_line": ""
    },
    "Bears-235": {
        "fixes": [
            {
                "k": 1,
                "patch": "wrapped) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "wrapped = referenceInfo.find(reference);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "wrapped = referenceInfo.find(wrapped);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "wrappedIterator wrapped = rs.find(funId);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "wrappedSetter.set(wrapped);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "wrapped = options.find(funId);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "wrapped END = referenceInfo.find(reference);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "wrappedIterator wrapped = ce;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "wrappedIterator wrapped = rs.find(fun);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "wrapped = options.find(wrapped);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "wrapped = rs.find(funId);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "wrapped = ce.find(funId);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "wrappedIterator wrapped = \".;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "wrappedIterator<Stack> wrapped = reference.find(fun);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "wrappedIterator wrapped = rs.find(propName);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "wrapped = ce.find(wrapped);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "wrapped END = referenceInfo.find(fun);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "wrapped = referenceInfo.find(fun);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "wrappedIterator<N, E> wrapped = wrapped;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "wrappedIterator<Name> wrapped = referenceInfo.find;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "wrapped END = referenceInfo.find(wrapped);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "wrappedConst = ce.find(wrapped);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "wrapped =Bounds.find(funId);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "wrapped = rs.find(fun);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "wrappedConst = ce.find(funId);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "wrapped =Ann.find(wrapped);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "wrapped basic.set(wrapped);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "wrappedIterator.set(wrapped);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "wrappedIterator<Name> wrapped = \".;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "wrapped = referenceInfo.find(prop);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "wrapped = tick;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "wrapped.set(wrapped);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "wrapped = ce.find(fun);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "wrappedIterator<N, E> wrapped = referenceInfo.find(reference);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "wrappedIterator<N, E> wrapped = jsdoc.find(reference);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "wrappedIterator<Stack> wrapped = referenceInfo.find(fun);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "wrapped Type.set(wrapped);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "wrappedIterator<Stack> wrapped = referenceInfo.find;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "wrappedIterator<N, E> wrapped = LINES_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "wrapped = options.find(fun);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "wrappedConst = ce.find(fun);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "wrapped END = referenceInfo.find(prop);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "wrappedIterator<Stack> wrapped = referenceInfo.find(prop);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "wrappedIterator<E> wrapped = ce.find(fun);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "wrappedIterator<Stack> wrapped = buffer.find;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "wrapped = user.find(funId);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "wrapped =and.find(funId);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "wrappedIterator<Name> wrapped = reference.find(fun);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "wrapped END = referenceInfo.find(propName);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "wrappedIterator<Name> wrapped = referenceInfo.find()) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "wrapped = tick.find(wrapped);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "wrappedIterator<Stack> wrapped = reference.find;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "wrappedIterator.set(reference);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "wrapped =Bounds.find(wrapped);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "wrappedIterator<Name> wrapped = LINES_PER_SECOND;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "wrappedIterator<N, E> wrapped = referenceInfo.find(fun);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "wrappedIterator<N, E> wrapped = getters.find(fun);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "wrappedIterator<Stack> wrapped = reference.find(set);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "wrapped = options.find(filterId);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "wrappedIterator<Name> wrapped = referenceInfo.find(fun);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "wrappedIterator wrapped = options.find(funId);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "wrappedIterator wrapped = rs.find(funName);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "wrappedStatement = options.find(funId);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "wrappedIterator<N, E> wrapped = jsdoc.find(fun);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "wrapped = ce;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "wrappedIterator<Name> wrapped = wrapped;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "wrapped END = referenceInfo.find(DEFAULT_TABLE_SIZE);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "wrappedIterator<Stack> wrapped = referenceInfo.find(set);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "wrappedIterator<Name> wrapped = reference.find;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "wrappedIterator<N, E> wrapped = LINE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "wrappedConst = ce.find(color);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "wrapped) {System.set(args); }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "wrappedIterator<Name> wrapped = fn.find;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "wrappedIterator<N, E> wrapped = rs.find(fun);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "wrappedIterator wrapped = rs.find(color);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "wrappedIterator<N, max> wrapped = wrapped;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "wrappedIterator wrapped = rs.find(reference);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "wrappedIterator<N, E> wrapped = ce.find(fun);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "wrappedIterator<E> wrapped = ce.find(color);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "wrapped END = referenceInfo.find(args);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "wrappedIterator<N, max);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "wrapped = rs.find(funName);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "wrappedIterator<N, E> wrapped = getters.find(reference);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "wrappedIterator wrapped = ce.find(funId);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "wrapped = tick.find(funId);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "wrappedIterator wrapped = ce.find(fun);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "wrappedIterator<N, E> wrapped = LINES_PER_SECOND;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "wrappedIterator<N, max> wrapped = referenceInfo.find(reference);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "wrappedIterator wrapped = LINE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "wrappedProvider.set(wrapped);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "wrappedIterator<N, E> wrapped = parent.set;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "wrappedIterator<E> wrapped = LINES_STACK_SIZE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "wrappedIterator<E> wrapped = LINES_PER_SECOND;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "wrapped.setmocking = wrapped;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "wrappedIterator<N, E> wrapped = referenceInfo.find(wrapped);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "wrapped = rs.find(propName);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "wrappedIterator<Name> wrapped = remove;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "wrappedIterator<N, E> wrapped =Comp.find(reference);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "wrappedIterator<N, E> wrapped = LINES;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "wrappedIterator<N, E> wrapped = LINES_PER_PAINT;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "*/ @Override public void disable(int accountId) { Optional<Account> wrappedAccount = accountRepository.findById(accountId); Account account = wrappedAccount.orElseThrow(NoSuchElementException::new); if (hasAnyChildrenAccountEnabled(account)){ throw new IllegalStateException(\"Children accounts enabled\"); } account.setDisabled(true); accountRepository.save(account); } private boolean hasAnyChildrenAccountEnabled(Account account){ return account.getChildren().stream() .filter(a -> !a.isDisabled()) .findAny() .isPresent(); } }"
    },
    "Bears-184": {
        "fixes": [
            {
                "k": 1,
                "patch": ".filter.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".filter.getJavaType().equals(itType)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".filterit.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is lower case",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is negative",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".filterType.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".filter.getJavaType().equals(it.class)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] -> UTF-8",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".filter.getJavaType().equals(qName);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314 -> UTF-8",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".filter.getJavaType().equals(it.name)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".filter.getJavaType().equals(itType, name);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".filterType.getJavaType().equals(name)) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".filter.getJavaType().equals(name)) { // and finishes at least",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-order",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] -> R",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".filter.getJavaType().equals(it.class)[0]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] skip",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".filter.getJavaType().equals(name)) { //a -> UTF-8",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".filter.getJavaType().equals(itType);",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".filterType.getJavaType().equals(it.class)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".filterId.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".filter.getJavaType().equals(itType.class)[0]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".filter.getJavaType().equals(replacement)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".filterType.getJavaType().equals(name)) { // [JACKSON-314] is lower case",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314 -> R",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".filter.getJavaType().equals(name)) { // and finishes at least 3 bytes",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".filter.getJavaType().equals(name)) { //a -> R",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is this happen",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-314 -> UTF-8",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is entirely",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-314] is lower case",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".filter.getJavaType().equals(itType)) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-314] -> UTF-8",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314]';",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".filterType.getJavaType().equals(it.class)[0]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".filter.getJavaType().equals(entityType)) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".filterType.getJavaType().equals(name)) { // [JACKSON-314] is negative",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".filter.getJavaType().equals(attributeCount;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-314] is negative",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is first",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".filterType.getJavaType().equals(name)) { // [JACKSON-314] -> UTF-8",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".filterType.getJavaType().equals(itType)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON- lower case",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is disabled",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".filter.getJavaType().equals(entityType)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-314] skip",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".filterit.getJavaType().equals(qName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is nope",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".filter.getJavaType().equals(entityType)) { // [JACKSON-314] is lower case",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".filterType.getJavaType().equals(name)) { // [JACKSON-314 -> UTF-8",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".filterit.getJavaType().equals(name)) { //a -> UTF-8",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is best possible",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] -> str",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".filterType.getJavaType().equals(it.name)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314, entity",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".filterType.getJavaType().equals(qName);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".filter.getJavaType().equals(itType, ->);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is more",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".filter.getJavaType().equals(itType, ->stream);",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".filter.getJavaType().equals(entityType);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314 or broken",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314]');",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON- and finishes",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".filter.getJavaType().equals(name)) { // and finishes at least 3 and finishes",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-order",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".filter.getJavaType().equals( DateTimeField)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".filter.getJavaType().equals(entityType)) { // and finishes at least",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".filterType.getJavaType().equals(name)) { // [JACKSON-order",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".filterType.getJavaType().equals(attributeCount;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314 chars:",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] isHeight",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".filterType.getJavaType().equals(name)) { // [JACKSON-314] -> R",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-314] -> R",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".filter.getJavaType().equals(itType.class)[0];",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".filter.getJavaType().equals(it.class)) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-3 as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".filter.getJavaType().equals(qName)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".filter.getJavaType().equals(it.name)) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".filterit.getJavaType().equals(name)) { // [JACKSON-314 -> R",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".filter.getJavaType().equals(itType.PROTOTYPE)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".filter.getJavaType().equals(itType;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] skip the first",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is more specific",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".filterit.getJavaType().equals(name)) { //a -> R",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".filterId.getJavaType().equals(name)) { // [JACKSON-314] is lower case",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is best",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is 19 -> UTF-8",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSONStateException",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] readFully",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".filter.getJavaType().equals(itType)) { // [JACKSON-order",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-314] is this far",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".filterit.getJavaType().equals(name)) { // and finishes at least",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".filter.getJavaType().equals(entityType)) { // [JACKSON-314] -> UTF-8",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".filter.getJavaType().equals(itType)) { // [JACKSON-314] -> UTF-8",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".filter.getJavaType().equals(name)) { // [JACKSON-3, entity",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".filter.getJavaType().equals(itType)) { // [JACKSON-314 -> UTF-8",
                "identical": false
            }
        ],
        "buggy_line": ".filter(it -> it.getJavaType().equals(entity)) //",
        "fixed_line": ""
    },
    "Bears-138": {
        "fixes": [
            {
                "k": 1,
                "patch": "int idx = 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "intLoader = i.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, 0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "intLoader = i.readUnsignedByte(buf, off, len;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf,i);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int pos = 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "intately = buf.readUnsignedByte(buf, i, off, len);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, 8) - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, i);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, off, len);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, off, len;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int pos = i.readUnsignedByte(buf, m, buf, offset, len);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int pos = i.readUnsignedByte(buf, 0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, buf, off, len;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "intately = buf.readUnsignedByte(buf, i, 16, len);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, qlen;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "intLoader = iBefore.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, EOF;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, off, len);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int\u73b2c = i.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int pos = i.readUnsignedByte(buf, m, buf, 0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "intUnreadUnsignedByte = buf, i.readUnsignedByte;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "intLoader = i.readUnsignedByte(buf, i, buf, off, len;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int c = 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "intLoader = iTypes.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int pos = i.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, buf, off, len);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "intately = buf.readUnsignedByte(buf, i, start, len);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "intLoader = i.readUnsignedByte(buf, position, buf, i);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, qlen);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "intately = buf.readUnsignedByte(buf, i, 16, TimeZone.LONG);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int circumstancesc = i.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int pos = i.readUnsignedByte(buf, m, buf, off, len);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int pos = i.readUnsignedByte(buf, offset, len);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "intately = buf.readUnsignedByte(buf, i, startIndex, len);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "intately = buf.readUnsignedByte(buf, i, startIndex, len;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, 12;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "intately = buf.readUnsignedByte(buf, i, 16);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "intately = buf.readUnsignedByte(buf, i, 16;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "intately = buf.readUnsignedByte(buf, i, buf, 0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, iLocale, i);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, off, TimeZone.LONG);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "intLoader = i.readUnsignedByte(buf, position, buf, qlen;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, 8) - 6;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, mLocale, i);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "intately = buf.readUnsignedByte(buf, i, 12;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, \".Height, bufpos);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, off, len;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "intLoader = i.readUnsignedByte(buf, i, buf, 0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf,DaysInFirstWeek);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, ch = 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "intLoader = i.readUnsignedByte(buf, i, len, buf, 0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int pos = i.readUnsignedByte(buf, m, buf, offset, len;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int pos = i.readUnsignedByte(buf, m, buf, off, len;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "intately = buf.readUnsignedByte(buf, i, buf, off, len);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int pos = i.readUnsignedByte(buf, position, buf, newLen;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "intLoader = i.readUnsignedByte(buf, offset, len);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "intately = buf.readUnsignedByte(buf, i, len,EntryCount, buf, 0);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "intLoader = iBefore.readUnsignedByte(buf, off, len;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "intately = buf.readUnsignedByte(buf, i, 8) - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, out);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, ('0');",
                "identical": false
            },
            {
                "k": 63,
                "patch": "intLoader = i.readUnsignedByte(buf, off, len, 7;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int pos = i.readUnsignedByte(buf, position, bufpos);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, off);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, year);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "intately = buf.readUnsignedByte(buf, i, pass, len, buf, 0);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "intately = buf.readUnsignedByte(buf, i, len,EntryCount);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "intately = buf.readUnsignedByte(buf, i, ns, 0);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, null);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int\u73b2c = i.readUnsignedByte(buf, off, len;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int pos = i.readUnsignedByte(buf, position, buf, 0);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "intately = buf.readUnsignedByte(buf, i, off, len;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int mn network = new int negated.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int hc = 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "intLoader = i.readUnsignedByte(buf, EOF, buf, off, len;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "intately = buf.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "intately = buf.readUnsignedByte(buf, i, 16, TimeZone.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, 12);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int weekday = buf.readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, padWith -= 8)];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "intately = buf.readUnsignedByte(buf, i, buf, off, len;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, \".\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "intLoader = i.readUnsignedByte(buf, i, buf, off, len);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "intLoader = i.readUnsignedByte(buf, EOF, buf, 0);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, off, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "intLoader = i.readUnsignedByte(buf, i, newLen, buf, EOF;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "intately = buf.readUnsignedByte(buf, i, 16, newCapacity;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf, padWith -= 7;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "intLoader = i.readUnsignedByte(buf, EOF, buf, offset, len);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "intately = buf.readUnsignedByte(buf, i, ns, newValues, i);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int pos = i.readUnsignedByte(buf, mSize, bufpos);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "intately = buf.readUnsignedByte(buf, i, len;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int weekday = buf.readUnsignedByte(buf, i, 8) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, buf,transitions).length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "intLoader = i.readUnsignedByte(buf, i, newLen;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "intately = buf.readUnsignedByte(buf, i, newLen, buf, EOF;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int pos = i.readUnsignedByte(buf, position, buf, i);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "intately = buf.readUnsignedByte(buf, i, 16, buf, 0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "intately = buf.readUnsignedByte(buf, i, len, bufpos);",
                "identical": false
            }
        ],
        "buggy_line": "int mnc = buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));",
        "fixed_line": ""
    },
    "Bears-159": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final DateTimeFormatter_FORMAT_PATTERN = DateTimeFormat.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final DateTimeFormatter_FORMAT_PATTERN = DateTimeFormatter.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final DateTimeFormatterGENER_PATTERN = DateTimeFormatter.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final DateTimeFormatterTEMP_FORMAT_PATTERN = DateTimeFormatter.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN.of-FORMAT_",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final DateTimeFormatter getNamespace = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final DateTimeFormattermm = \"yyyy- cPattern.of-FORMAT_PATTERN:mm-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final DateTimeFormatterdirty = \"yyyy-FORMAT_PATTERN.of-FORMAT_PATTERN:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm:mm: \"+_PATTERN.of-FORMAT_PATTERN;",
                "identical": false
            }
        ],
        "buggy_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
        "fixed_line": ""
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encrypted = request;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedDataKeys = request;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encryptedDesc = request;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encrypted5 = request;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedyped = request;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedLine = request;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedors = request;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encryptedConf = request;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encryptedNulls = request;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encrypted, request = request;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encrypted parameter = request;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encrypteduri = request;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encryptedARD = request;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encrypted idx = request;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedLIT = request;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encrypted IR = request;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encrypted description = request;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encrypted decl = request;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedSecond = request;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedAnnotations = request;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encrypted assuming = request;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedSort = request;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encrypted \") = request;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encrypted Gson = request;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedutor = request;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDeserialize = request;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encrypted DateUtils = request;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedRGB = request;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedeting = request;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encrypted Type = request;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encryptedCall = request;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encrypted sum = request;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encrypted segments = request;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedmd = request;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedAnonymous = request;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encrypted Graphics = request;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedov = request;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encrypted workaround = request;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encrypted numer = request;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedulate = request;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedINTER = request;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedgetElement = request;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encrypted78 = request;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedical = request;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedports = request;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encryptedPED = request;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedprinter = request;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedtol = request;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encrypted prot = request;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedDateFormat = request;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encrypted puts = request;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encrypted 22 = request;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encrypted % request.getEncrypted = request;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedage = request;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedcategory = request;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encrypted 10: = request;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encrypteder = request;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedSer = request;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encrypteddays = request;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedCH = request;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encrypted\u532d = request;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encrypted parseInt = request;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedid = request;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedraction = request;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encrypted listeners = request;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedEvent = request;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedof = request;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedfrozen = request;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encrypted func = request;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encrypted\u2197 = request;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encrypted found = request;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encrypted\u65cb = request;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encryptedINE = request;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encryptedIDS = request;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encryptedvable = request;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encrypted, request = request.getEncrypted;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedstate = request;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encrypted getShort = request;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedBlock = request;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedSize = request;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encrypted short = request;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encryptedApp = request;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encrypted currentValue = request;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encrypted identical = request;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedGet = request;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encrypted voice = request;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encryptedneeds = request;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encrypted\u2197yped = request;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encrypted both = request;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encrypted time = request;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encrypted Disk = request;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encrypted\u6fb1DataKeys = request;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encrypted createNewFile = request;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encrypted5 = request.getEncrypted;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encrypted567890 = request;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encrypted % request = request;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encrypted5 = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encrypted % request.getEncryptedage = request;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encrypted plan = request;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encrypted != request.getEncrypted = request;",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": ""
    },
    "Bears-187": {
        "fixes": [
            {
                "k": 1,
                "patch": "final ObjectMapper mapper = new ObjectMapper;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final ObjectMapper mapper = new ObjectMapper(true, false;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUO",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QU",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_Only_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_Only_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_Only_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final ObjectMapper mapper = new ObjectMapper comp, false;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_Only_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_Only_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_Only_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, false;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOOM_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES <= true;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOOM_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOOM_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOOM_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOOM_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final ObjectMapper mapper = new while while while while while while while while while while while (factory_QUOTE_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES_QUOTES, true;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOOM_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final ObjectMapper mapper = new ObjectMapper(false, false;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOOM_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final ObjectMapper mapper = new ObjectMapperIUS_QUOOM_QUOTED_QUOTED_QUO MINUTE_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOOM_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTED_QUOTES, false;",
                "identical": false
            }
        ],
        "buggy_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
        "fixed_line": ""
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType() && fieldNames.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType() && fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType() && fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType() || fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType() && fieldNames.contains(fieldArray;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || object;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType() && object.getType().contains(fieldNames);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || i.getName;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType() || fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || i);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType() && fieldNames.contains(fieldValue) != 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || i;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType() && fieldNames.contains(fieldNames;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType() != object && fieldNames.contains(fieldNames;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType() && object.getTypeArray.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || object.getName;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType() && fieldNames.contains(fieldValue) != object;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType() != object && fieldNames.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || field.getName;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType() && fieldNames.contains(fieldArray.getName;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType() || fieldNames.contains(fieldValue) != 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldNames;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType() || fieldNames.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - 1 != object;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType() && fieldNames.contains(fieldValueName);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType() && fieldNames.contains(fieldValue + ignored.getName;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getType() && fieldNames.contains(fieldSeparator);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType() || fieldNames.contains(fieldValue || i.getName;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType() && fieldNames.contains(fields);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldNames.getName;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - 1 != 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType() || fieldNames.contains(fieldValue || object;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType() && fieldNames.contains(fieldSourceName;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType() && fieldNames.contains(object) && i.getName;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || ignored.getName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType() && fieldNames.contains(fieldValue) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType() || fieldNames.contains(fieldValue || i;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType() || fieldNames.contains(fieldNames;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType() || fieldNames.contains(object);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType() && fieldNames.contains(fieldValue.getName;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType() || fieldNames.contains(fieldValue || ignored.getName;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType() && fieldNames.contains(object) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType() != object && fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || desc;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || iFieldNames;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType() && fieldNames.contains(field') || i.getName;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || range.getName;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType() && fieldNames.contains(fieldArray.getName);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType() && object.getTypeFactory;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType() && fieldNames.contains(object) && fieldNames;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType() && fieldNames.contains(fieldWIDTH;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType() && fieldNames.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType() && fieldNames.contains(fieldSourceName);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType() && fieldNames.contains(field object) != 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType() != object && fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType() || fieldNames.contains(fieldValueName;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - 1 != null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType() || fieldNames.contains(object) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType() && fieldNames.contains(fieldators);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType() != 0 || fieldNames.contains(object);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType() || fieldNames.contains(object) != 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || Base.getName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || i != object;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || Double.getName;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType() && object.getTypeFactory.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType() && fieldNames.contains(fieldValue {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType() && fieldNames.contains(object) && i;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldValue || ignored.getName;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType() && fieldNames.contains(field axes.getName;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType() || iNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType() && fieldNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType() && fieldNames.contains(field Byte.getName;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.getType() && fieldNames.contains(fieldNames || i.getName;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType() && object.getType;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType() || fieldNames.contains;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - 1, object;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType() && fieldNames.contains(fieldpool.getName;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType() || fieldNames.contains(fieldValue.getName;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - ignored.getName;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType() && fieldNames.contains(fieldId);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.getType() != object || fieldNames.contains(fieldNames;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType() || fieldNames.contains(fieldNames.getName;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldValue || i.getName;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType() && fieldNames.contains(fieldNames) != object;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || i == ignored.getName;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType() && fieldNames.contains(fieldNames) != 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType() && fieldNames.contains(fieldArray()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - 1 != fieldNames.getName;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.getType() || fieldNames.contains(fieldValue || field.getName;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.getType() && fieldNames.contains(fieldValueName;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType() && fieldNames.contains;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType() && fieldNames.contains(fieldret.getName;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType() != object && fieldNames.contains(fieldValue || field.getName;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType() && fieldNames.contains(field index);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || state.getName;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getType() ||fieldNames.contains(fieldValue);",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": ""
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private synchronized void add(intInput);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private synchronized void addArRecordsInput(intInput);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private synchronized void add(GraphInput);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private synchronized void addAr\u258fInput(intInput);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private synchronized void addArgamesInput(intInput);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private synchronized void add(angle);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private synchronized void addAr\u54edInput(intInput);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private synchronized void addArimplicitInput(intInput);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private synchronized void addAr\u079fInput(intInput);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private synchronized void addArrefixInput(intInput);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private synchronizedBuffer addArRecordsInput(intInput);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private synchronized void addArRecordsInput(methodName);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private synchronized void addInputResult = currInput;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private synchronized void addInput(intInput);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private synchronized void addInput = processInputFactory;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private synchronized void addSrivedInput(intInput);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private synchronized void addInput(int {}Input);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private synchronized void add( 100.0Input);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private synchronized void add(ModuleInput);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private synchronized void addInputResult = FLAGInputInputFactory;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private synchronized void addInputResult = FLAGInputFactory;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private synchronized void addInput = processInput;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private synchronized long addInput = processInput;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private synchronized void addInputResult = FLAGInputInput;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private synchronized void add(DateTimeFieldInput);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private synchronized long addInput = processInputFactory;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private synchronized void add(linkRecordsInput);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private synchronized void add(int {}Input);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private synchronized void addInput = process;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private synchronized void addInputResult =ModuleInputFactory;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private synchronized void addArRecordsInput(DateTimeFieldInput);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private synchronized voidSuperInput(intInput);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private synchronized void addInput(intProgress);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private synchronized void add(int descInput);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private synchronized void add(intequRecordsInput);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private synchronized void addInputResult =']InputFactory;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private synchronized void add(intProgress);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private synchronized void add(intsetAttributeInput);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private synchronized void currInput = process;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private synchronized void addInputResult = plotInput;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private synchronized void addInput(methodName);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private synchronized void addInput(int descInput);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private synchronized void add(intBetweenInput);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private synchronized void add( ilInput);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private synchronized void addInputResult = FLAGInput;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private synchronized void add(intFactor);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private synchronized void add(intEntry);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private synchronized void addInput(intEntry);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private synchronized void addInputResult = processInputFactory;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private synchronized void currInput = processInput;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private synchronized void add(estModuleInput);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private synchronized void add(int );",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private synchronized void add(intNodeName );",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private synchronized void add(linkLabelsInput);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private synchronized void addInputResult = workingInput;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private synchronized void addInput(int );",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private synchronized void add(conInput);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private synchronized void addInputResult =']Input;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private synchronized void addInputResult =ModuleInput;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private synchronized void addArRecordsInput(methodName, 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private synchronized void add(intLocals);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private synchronized void addArRecordsInput(methodName,SMRecordsInput);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private synchronized void addInputResult =ModuleInputCol;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private synchronized void addInputResult =ModuleInputInputFactory;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private synchronized void addArRecordsInput(annotatedInput);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private synchronized void addInputResult =ModuleInputInput;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private synchronized void add( UnrecognizedInput);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private synchronized long addInputResult = processInputFactory;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private synchronized void addInputResult = FLAGInputInputResult;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private synchronized void addArRecordsInput(methodName, labelInput);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private synchronized void add(typeInput);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private synchronized void addInput(intNodeName );",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private synchronized void add(methodName);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private synchronized void add(LookupInput);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private synchronized void addInputResult =methodInput;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private synchronized void add(showInput);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private synchronized void addInput(intBetween);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private synchronized void addInputResult = FLAGInputInputInput;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private synchronized void addInput(radix );",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private synchronized void add(intEntryInput);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private synchronized void add(ThisInput);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private synchronized void addInput(intModule);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private synchronized void addArRecordsInput(DateTimeFieldInputInput);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private synchronized void add(methodInput);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private synchronized void currInput = processInputFactory;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private synchronized void addInputResult = getInternalInputFactory;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private synchronized void addInputResult = processInput;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private synchronized void addInputResult = FLAGInputInputInputFactory;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private synchronized void add(ChartInput);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private synchronized void add(intInput );",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private synchronized long addInputResult = processInput;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private synchronized void addInput(intBetweenInput);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private synchronized void addSrived = processInput;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private synchronized void addInputResult = input;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private synchronized void addInputResult = FLAGInputInputIfRecordsInput;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private synchronized void addArRecordsInput(methodName, currInput);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private synchronized void add(ModulePath);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private synchronized void add(intFeatures);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private synchronized void addInputResult = workingInputFactory;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private synchronized void add( SYInput);",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": ""
    },
    "Bears-109": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setPosition(values[index++]);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setPosition(values[index++];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setPosition(indexId, values[index++]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setPosition(values[index++]) << 4];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setPosition(index + 1, values[index++]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setPosition(index, dateFormatNames[index++]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setPosition(index, dateFormats[index++]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.setPosition(index, formatter[index++]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION[index++]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setPosition(index, values[index++]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setPosition(indexId, dateFormats[index++]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setPosition(values[index++]) this.KEY_VERSION, position];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setPosition(values[index++]) << 16;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setPosition(values[index++]) >> 4];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setPosition(position, dateFormat, this.KEY_VERSION[index++]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setPosition(index, dateFormatMode[index++]);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setPosition(position, dateFormats[index++]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.setPosition(values[index - 1, values[index++]);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setPosition(position, dateFormatNames[index++]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION_VALUE++]);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setPosition(values[index++])Current_VERSION, position];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION_VALUE++);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setPosition(indexId, formatter[index++]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setPosition(values[index++] -= this.KEY;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setPosition(values, index++]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setPosition(values[index++] skip;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setPosition(values[index++] {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setPosition(index, query[index++]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setPosition(values[index++]) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setPosition(dateFormatStack, values[index++]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setPosition(indexId, this.KEY_VERSION[index++]);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setPosition(values[index++ <= 12;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setPosition(values[index++]) <= 12;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setPosition(values[index++])>equals(values[index++]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setPosition(index, dateFormatTypes[index++]);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.setPosition(indexId, 0)++] = 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setPosition(indexId, dateFormatTypes[index++]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setPosition(values[index++_VERSION, dateFormat++]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setPosition( index, values[index++]);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setPosition(values[index++]) >>> 4];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setPosition(values[index++] 1024S[index++];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setPosition(indexId, dateFormatNames[index++]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.setPosition(position, dateFormat, this.KEY_VERSION_VALUE++]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setPosition(values[index++] -= 12;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.setPosition(values[index++] =Session;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.setPosition(index, ERROR_VERSION, position);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setPosition(index, dateFormatcreDateFormat[index++]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setPosition(index, dateFormatAnnotation[index++]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setPosition(values[index++] = value;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setPosition(values[index++] adjust, dateFormat++]);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setPosition(values[index++]ruptS[index++];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION_VALUE++];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION_VALUEVALUE++]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.setPosition(indexId, strength[index++]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION_TRIPLETS[index++]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.setPosition(indexId, this.KEY_VERSION, null);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setPosition(values[index++] (0xffFormat.KEY, 0, values[index++]);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setPosition(position, dateFormat, this.KEY_VERSION_VALUE++);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.setPosition(index, dateFormatDateFormat[index++]);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setPosition(values[index++]) << power;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.setPosition(values[index++]) >>> 7;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setPosition(values[index++])>FIRST_VERSION, position];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.setPosition(index, dateFormat DEFLATER_VERSION_VALUE, values[index++]);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setPosition(values[index >> 4++];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.setPosition(values[index++]trim;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.setPosition(values[index++] = position;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.setPosition(values[index++] adjust adjust, dateFormat++]);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setPosition(values[index++] = formatter;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setPosition(values[index++] adjust, dateFormatNames[index++]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setPosition(values[index++] = read;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION, null);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.setPosition(index, strength[index++]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setPosition(values[index++])++] = value;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.setPosition(values[index++] 1024S[index++]);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setPosition(index, dateFormatise[index++]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.setPosition(values[index++_VERSION, position++]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setPosition(index, 0)++] = 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION, position);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setPosition(values[index++] = readBuffer[index++];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.setPosition(values[index++]sectionNumberFormat.KEY_VERSION, position++);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setPosition(indexId[index++]);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION_INT[index++]);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setPosition(values[index++] -= this.KEY_VERSION, position;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.setPosition(index, dateFormat, this.KEY_VERSION[index++];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setPosition(position, dateFormat, this.KEY_VERSION_VALUEVALUE++]);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.setPosition(indexId, this.KEY_VERSION, position);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setPosition(values[index++] adjust, dateFormatTypes[index++]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.setPosition(index, dateFormat_KEY, null);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setPosition(values[index++]) this.KEY_VERSION, position++]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.setPosition(values[index++] && position <= 360;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setPosition(VALUE, values[index++]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setPosition(values[index++]) >>> 12;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.setPosition(indexId, this.KEY_VERSION, position++);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setPosition(indexId[index++];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.setPosition(values[index++], 12;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setPosition(values[index++]==' 0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.setPosition(position, values[index++]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setPosition(values[index++]MC_KEY, dataFormat.index++);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.setPosition(values[index++]) u;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.setPosition(values[index++] adjust, dateFormatTypes[index++];",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.KEY_VERSION_FW, values[index++]);",
        "fixed_line": ""
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return parent.ofId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "returnizes.ofId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return CollectionId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return uri.of;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return parent.ofId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return CollectionId.getHost(), URI_PROVIDE_INIT_ERROR;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return CollectionId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return writeBooleanId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return().uriId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return parent.ofId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return CollectionId.getHost(), URI_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "returnage.ofId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return parent.ofId;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return writeBooleanId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return)',Id.getHost(), URI_PROVIDE_INIT_ERROR;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "returnizes.ofId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return parent.ofId.getHost(),().length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return uri.of(),().uriId;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return)',Id.getHost(), URI;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return().uriId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "returnTemId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return \"\"Path.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "returnthat.ofId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returnsmart.ofId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return COM.of(),().uriId;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "returnPARAMId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "returnage.ofId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return 8)Id.getHost(), URI;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return COM.ofId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return CollectionId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return aliasId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return uri.of(), matcher.getHost);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return writeBooleanId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return JanId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return parent.ofId.getHost(), convId;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return reportPath.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return aliasId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "returnSingletonId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return uriId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "returnTemId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "returnsmart.ofId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "returnPRECId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return uriId.of;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return?.ofId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return parent.ofId.getHost(), URI_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "returngetInstance.ofId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "returnizes.ofId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "returnPARAMId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return)',Id.getHost(), URI);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return 8)Id.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return\u5875Id.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return\u5875Id.getHost(), URI;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return parent.ofId.getHost(), h uri;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "returnPRECId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return \"\".getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return 8)Id.getHost(), URI);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return\u5875Id.getHost(), URI);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "returnthat.ofId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return aliasId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return().uriId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return parent.ofId.getHost(), URI_PROVIDE_INIT_ERROR;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return CollectionId.getHost(), URI = uri;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return CollectionId.getHost(), URIPath;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "returninheritId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return CollectionId.getHost(), URI_PROVIDE_Host);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return uri.of(), alias uri;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return parent.ofId.getHost(), localPath;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return LoginId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "returnSingletonId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return parent.ofId.getHost(), injectionId;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return JanId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "returnage.ofId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "returnsmart.ofId.getHost(), URI_PROVIDE_INIT_ERROR;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return parent.ofId.getHost(), localId;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return parent.ofId.getHost(), CollectionId;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return '6'Id.getHost(), URI;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "returngetInstance.ofId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return desireId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return uriId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return CollectionId.getHost(), URI_PROVIDE_Host;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return)',Id.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return uriId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "returnendantsId.of;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return parent.ofId.getHost(), URI = uri;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "returnizes.ofId.getHost(), alias uri;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "returnizes.ofId.getHost(), URI_Host);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return uri.of(), references.getHost);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "returnage.ofId.getHost(),().length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return JanId.getHost(),().uriId;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "returnizes.ofId.getHost(), h uri;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return)',Id.getHost(), URI = uri;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return?.ofId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return reportPath.getHost(), localId;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returnizes.ofId.getHost(), h);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return COM.ofId.getHost(), URI;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return CollectionId.getHost(), URI_PROVIDE_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return parent.ofId.getHost(),Statistics);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return CollectionId.getHost(), URI_PROVIDE_INIT_THIS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return desireId.getHost(), URI);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return)',Id.getHost(), h uri;",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": ""
    },
    "Bears-250": {
        "fixes": [
            {
                "k": 1,
                "patch": "int[] values = new double[40];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int[] values = new double[cardinality ? 1 : 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int[] values = new double[256];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int[] values = new double[40Map.length, indices ? 0 : 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int[] values = new double[40Map.size];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int[] values = new double[40Map.size - 1];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int[] values = new double[2 ? 0 : map;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int[] values = new double[2 ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int[] values = new double[40Map.size()];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int[] values = new double[N.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int[] values = new double[cardinality];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int[] values = new double[40 ? 1 : 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int[] values = new double[40Map.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int[] values = new double[cardinality ? 0 : map;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int[] values = new Numbercardinality ? 0 : map;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int[] values = new Numbercardinality ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int[] values = new double[40Map.size ? 1 : 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int[] values = new double[N.length ? 0 : 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int[] values = new int[cardinality];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int[] values = new double[40Map.size, indices ? 0 : 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int[] values = new double[40 ? 0 : map;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int[] values = new Number[cardinality];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int[] values = new Number[2 ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int[] values = new Number call ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int[] values = new Number[cardinality ? 0 : map;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int[] values = new double[N.length ? 0 : 1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int[] values = new NumberTickLabels, indices ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int[] values = new double[40Map.length ? 0 : 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int[] values = new double[40Map.length, indices ? 0 : 1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int[] values = new NumberTickLabels, indices.length ? 0 : 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int[] values = new Numbercardinality ? -1 : map.entrySet;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int[] values = new double[length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int[] values = new double[40 ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int[] values = new double[1 << power.size;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int[] indices = new double[256];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int[] values = new double[40 ? 0 : map.entrySet())];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int[] values = new int[cardinality ? 0 : map;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int[] values = new NumberTickLabels[2 ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int[] values = new double[2 ? 0 : 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int[] values = new double[N.length ? 0 : 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int[] values = new Numbercardinality ? 0 : map.entrySet()) : 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int[] values = new Number ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int[] values = new double[40Map.length, indices : 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int[] values = new NumberTickLabelsFlag ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int[] values = new double[40Map.length, indices ? 0 : map;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int[] values = new double[40Map.size() - 1];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int[] values = new double[12] ? 0 : map;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int[] values = new int[40];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int[] values = new double[40Map.length, indices ? 0 : 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int[] values = new double[40Map.length, indices.entrySet ? 0 : 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int[] values = new double[40Map.length, indices ? 1 : 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int[] values = new Number call ? -1 : map.entrySet;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int[] values = new double[40Map.size, map ? 1 : 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int[] values = new double[2 ? -1 : map.entrySet;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int[] values = new Number[10 ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int[] values = new double[40.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int[] values = new Number call ? 0 : map.entrySet()) : 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int[] values = new double[40Map.length, indices : 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int[] values = new double[2 ? 0 :map.entrySet;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int[] values = new double[40Map.size] ? 1 : 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int[] values = new NumberTickLabels, indices.length ? 0 : 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int[] values = new double[40Map.size, map ? 0 : 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int[] values = new Number[cardinality ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int[] values = new double[axis.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int[] values = new double[12] ? 1 : 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int[] values = new double[2 ? 0 : map.entrySet()) : 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int[] values = new Number[cardinality ? 0 : map.entrySet())];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int[] indices = new double[40];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int[] values = new double[N.length ? 0 : map;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int[] values = new double[40Map.size % 2];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int[] values = new Number ? 0 : map.entrySet()) : 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int[] values = new NumberTickLabels, indices ? 0 : : map.entrySet;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int[] indices = new double[40Map.size];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int[] values = new NumberTickLabels, indices : map.entrySet;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int[] values = new double[40 ? 0 : 1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int[] values = new double[2 ? 0 : : map.entrySet;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int[] values = new double[length] ? 1 : 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int[] values = new double[ text.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int[] values = new double[40Map.size ? 0 : 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int[] values = new double[N.size()];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int[] values = new Number[12] ? 0 : map.entrySet())];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int[] values = new int[N.length ? 0 : 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int[] values = new Numbercardinality ? ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int[] indices = new double[40Map.size()];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int[] values = new NumberTickLabels, indices.length ? 0 : map;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int[] values = new double[40Map.size, indices ? 1 : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int[] values = new NumberTickLabels, indices.length ? 0 : 1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int[] values = new double[40] ? 0 : map;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int[] values = new NumberTickLabel ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int[] values = new Numbercardinality ? 0 : map, length + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int[] values = new double[cardinality ? 1 : map;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int[] values = new Numbercardinality ? -1 : map.entrySet()) : 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int[] values = new double[WT.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int[] values = new int[40 ? 0 : map.entrySet;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int[] values = new Numbercardinality ? 0 : map, lengthIn.entrySet;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int[] values = new double[40Map.length ? 0 : 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int[] values = new double[40Map.size, indices ? 0 : map;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int[] values = new double[40Map.size, indices ? 0 : 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int[] values = new double[40Map.length] ? 1 : 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int[] values = new Number[ ? 0 : map.entrySet())];",
                "identical": false
            }
        ],
        "buggy_line": "int cardinality = map.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
        "fixed_line": ""
    },
    "Bears-160": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (tokens.isColumn) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (tokens.isFunctionToken()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (tokens.isDeclaration) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "t.tokens = tokens.isColumn;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "prev = tokens.canConsumeBounds;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (tokens.isStatement) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (tokens.HASHHASH) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tokens.isColumn) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (tokens.HASHHASHHASH) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (tokens.canConsume()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (tokens.isFunction()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (tokens.canAssign) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (tokens.isRenderingToken()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "prev = tokens.canConsume;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (tokens.isAssign) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (tokens.HASHHASHHASHHASH) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (tokens.isBlock) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tokens.canConsume()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "prev = tokens.canConsume()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (tokens.aliasAccessor) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (tokens.is request()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (tokens.can16) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "else if (tokens.isColumn) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "prev = tokens.isColumn;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (tokens.isFunctionObject()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (tokens.is 20) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (tokens.isBinary()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (tokens.canCOMPOSITIVE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "msg.tokens = tokens.isColumn;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (tokens.canLists) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (tokens.HASH == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (tokens.isColumn()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (tokens.HASHHASH == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (tokens.HASH) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (tokens.canColumn) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next; can't.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for Constants.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (tokens.isFunctionDeclaration) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (tokens.isEmpty()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (tokens.sideEffectCalls) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next; can't.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (tokens.is 20) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for next is more",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (tokens.can16;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (tokens.canDelay) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (tokens.canAssign) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for next is more specific",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for reference equality",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (tokens.isColumn;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (tokens.HASHHASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next is lower case",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (tokens.canSymbols) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (tokens.canSTATUS()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next is lower case",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next one too",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (tokens.isColumnInPass) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (tokens.isNull()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-314]\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next one too",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (tokens.isOPTION) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (tokens.canElements) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (tokens.cango()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for next is slot?",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow:",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (tokens.HASHHASHHASHHASHHASH) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow: can't run type",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (tokens.can NONE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for reference equality",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for next one too",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (tokens.aliasColumn) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for entity",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (tokens.isfilter()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (tokens.isFunctionPrototype()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for reference equality",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (tokens.HASHHASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next; can't.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (tokens.canBePass) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next is negative",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next is negative",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next; can't append, can't found",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for next; can't.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for entity",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next; can't append, can't found",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (tokens.HASHHASH, tokens);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for Constants.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next; can't here",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (tokens.canALNAME_COLUMN) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for entity",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping for next is too",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (tokens.is 20) { // [JACKSON-407] -- allow disabling wrapping for Constants.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for Constants.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next; can't here",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (tokens.isPass()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (tokens.HASHHASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next is more specific",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (tokens.HASHHASH) { // [JACKSON-407] -- allow disabling wrapping for next is more specific",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tokens.canAssign) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (tokens.isColumn) { // [JACKSON-407] -- allow disabling wrapping forMBEDDED_COLUMN",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": ""
    },
    "Bears-151": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (subProperties instanceof String) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (subProperties.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (value instanceof String) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (name instanceof String) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (name instanceof String.valueOf(subName, name.name) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (name instanceof String.valueOf(subinterval, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(value;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (subName == String.valueOf(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (subProperties.put(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (subProperties instanceof String.valueOf(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (subProperties != String.valueOf(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (name instanceof String.valueOf(subName, name.int) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (subProperties instanceof String.valueOf(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (subProperties.put(name, String.valueOf(type));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.class;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (aliasProperties.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (value instanceof String.valueOf(subName, name.name) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (value instanceof String) {name = name.valueOf(subinterval, value.valueOf(value; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (name instanceof String.valueOf(subName, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (subProperties.put(name, String.valueOf(name));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (value instanceof String.valueOf(subName, name.valueOf(value));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (subProperties.put(name, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(type);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (name instanceof String.valueOf(subinterval, value.int) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (subFile == String.valueOf(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (name instanceof String.valueOf(subName, name.valueOf(value));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (subNonEscapedChar == String.valueOf(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (value instanceof String.valueOf(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (name instanceof String.valueOf(value, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (value instanceof String.valueOf(subName, name.name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (name instanceof String.valueOf(subinterval, value.name) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (subNames.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.intValue;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (value instanceof String.valueOf(name, value.int) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (value instanceof String) {name = name.valueOf(subinterval, value.intValue; }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (name instanceof String.valueOf(subName, name.name));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (aliasProperties.put(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (value instanceof String.valueOf(name, String.value));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (subName != String.valueOf(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (subList.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (name instanceof String.valueOf(value, name));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(name, value);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (value instanceof String.valueOf(subName, name.int) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (name instanceof String.valueOf(value, namePrefix) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (subContext.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (_subProperties.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (name instanceof String.valueOf(value, name.valueOf(value));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (value instanceof String) {name = value.valueOf(subinterval, String.valueOf(value; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (value instanceof String.valueOf(subinterval, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (subProperties.put(name, String..valueOf(value));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (subProperties.put(name, String.aliasName, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (name instanceof String.valueOf(value, name.int) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (name instanceof String.valueOf(subName, name.name, value));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (value instanceof String.valueOf(name, String.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (value instanceof String.valueOf(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (value instanceof String) {name = name.valueOf(subinterval, value; }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (subProperties.put(name, String.valueOf(valuevalue));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.name;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (name instanceof String.valueOf(subName, value.int) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (subProperties.put(name, String.valueOf(instant));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (value instanceof String.valueOf(name, String.int) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (name instanceof String.valueOf(subName, value.name) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (name instanceof String.valueOf(type, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (name instanceof String.valueOf(value, value.int) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (subProperties.put(name, String.valueOf(key));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (value instanceof String.valueOf(subName, name.name, value == String.valueOf(value));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (subProperties != String.valueOf(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (value instanceof String.valueOf(name, value.valueOf(type));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (subProperties.put(name, String.valueOf(value;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (subProperties.put(name, String.valueOf, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(name);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(value);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (subName == String.valueOf(name, value.valueOf(type));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (name instanceof String.valueOf(subName, name.name)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (name instanceof String.valueOf(subinterval, value.intValue) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (subProperties.put(name, String.valueOf(subinterval));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (subProperties instanceof String.valueOf(name, String.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (name instanceof String.valueOf(value, String.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (name instanceof String.valueOf(longFile, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (functionName != String.valueOf(name, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (subProperties.put(name, String.valueOf(name, value));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (name instanceof String.valueOf(subSymbol, name.valueOf(value));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (name instanceof String.valueOf(type, value.int) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (bytes.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (name instanceof String.valueOf(subName, name.double) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (value instanceof String) {name = name.valueOf(subinterval, value); }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (name instanceof String.valueOf(subName, name.name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(type));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(typeId);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(type, value);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (value instanceof String) {name = value.valueOf(subinterval, sub.intValue; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (subProperties.put(name, String.valueOf(value) == String.valueOf(typeName;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (value instanceof String.valueOf(subinterval, value.valueOf(name));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (value instanceof String.valueOf(subName, name.name, value));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (subProperties.put(name, String.valueOfent) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (name instanceof String.valueOf(subinterval, value.valueOf(name));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (name instanceof String.valueOf(bytes, value.valueOf(value));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (subgraph.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (value instanceof String) {name = name.valueOf(subinterval, value.intValue); }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (subProperties != String.valueOf(name, value.valueOf(type));",
                "identical": false
            }
        ],
        "buggy_line": "if (value instanceof String) { subProperties.put(subName, String.valueOf(value)); }",
        "fixed_line": ""
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(2 + result.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(2 + result.readableBytes(result + 1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(2 * result + buf.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(2 + result.readableBytes(result + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(2 + buf.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(2 + length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(2 + result.readableBytes(_outputBuffer, _outputTail",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(2 + result.readableBytes(buf, offset + 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(2 + result.readableBytes(result / 2L;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(2 + 0, result.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(2 + result.readableBytes(buf)) / 2L;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(2 + result.readableBytesLength;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() / 2L;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(2 + result.readableBytes(result) / 2L;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() + 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length + 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length / 2L;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(2 + result.readableBytes(buf)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(2 + result.readableBytes(result) + 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() + 2));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(2 + result.readableBytes();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(2 + result.radixGap;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(2 + result.readable;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(2 + result.readableBytes(result));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(2 + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(2 + result.readableBytes(buf, offset + 2));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(2 + result.readableBytes(1));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length + 1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(2 + 2readable;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(2 + result.readable -= 2];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(2 + result.toBytes;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(2 + result.readableBytes() / 2L;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(2 + result.readableBytes?",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(2 + result.readableBytes(result() / 2L;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(2 + result.readableBytes(_outputBuffer, _outputTail);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(2 * result + buf;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() / 2));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(2 + result.readableBytes(buf, offset + 2L;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(2 + result.readableBytes(result);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(2 + result.readableBytes(buf.lengthlength() / 2L;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(2 +RotationBytes;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(2 + WORD;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(2 + 2L;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() + 2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(2 + result.elseBytes;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length / 2));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(2 + result.readableBytesYear;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(2 + result.readableBytesentities;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(2 + result.radix1.length;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(2 + result.readableBytes() / 2];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() / 2];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() * 2 + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(2 + result.readableBytes(buf != rightBytes);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(2 + result.readableBytes(buf, offset + 2];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(2 + result.definitionsBytes;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(2 + result.readableBytes(bufpos + 1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(2 + result.readableBytes(result) % 2];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(2 + result.readableBytes());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(2 + result.radixCollisionList;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(2 +result.readableBytes(buf.length() / 2L;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(2 + result.readableBytes(buf.lengthlength() + 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(2 + result.readableBytes = result.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(2 + result.readableBytes(buf.lengthlength() + 2));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length + 2));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(2 + length1, result.readableRight;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() * 2));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length) / 2L;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(2 + length] = result.readableBytes;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(2 + result.readableBytes(buf.lengthlength / 2L;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(2 + result.readableBytes(buf.lengthlength + 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(2 + WORDBytes;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(2 + result.readableBytes(buf)) / 2];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(2 + result.readableBytesOBJECTLIT;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(2 +result.readableBytes(buf.length() + 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(2 + length] = result.readableBytes();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(2 + result.readableBytes negative",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(2 + result.radix wasBytes;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(2 + length};",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() + 2];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(2 + result.readableBytes(_outputBuffer, _outputTail + 2));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() * 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() / 2 - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length * 2;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(2 + result.readable -= 2 + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(2 + length] = result.readable;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length() * 2);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(2 + result.readableBytestoString();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length * 2 + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(2 + result.readableBytes(buf.length * 2));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(2 + result.readableBytes(buf)) / 2;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(2 + result.readableBytes(buf != rightBytes;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(2 + bufpos;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(2 + result.readableBytesRect(buf.length() / 2L;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(2 + result.readableBytesRect(buf.length() + 2));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(2 + result.readableBytes(bufCount) / 2L;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(2 + result.readableBytes(bufCount * 2));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(2 + result.readable > 3) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(2 + result.readableBytes(buf) / 2L;",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": ""
    },
    "Bears-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "lac = Integer.parseInt;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "lac = Integer.parseInt(text[i]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "lac = Integer.parseInt( names[i]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "lac = Integer.parseInt(attributeCount, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "lac = Integer.parseInt(Double[i]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "lac = Integer.parseInt(Array[i]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "lac = Integer.parseInt(KEY_CLOSE[i]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "lac = Integer.parseInt( size, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "lac = Integer.parseInt(inputStack[i]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "lac = Integer.parseInt(inputBuffer[i]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "lac = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "lac = Integer.parseInt(attributeCount[i]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "lac = Integer.parseInt(sr[i]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "lac = Integer.parseInt( dereference[i]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "lac = Integer.parseInt(MO[i]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "lac = Integer.parseInt = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "lac = Integer.parseInt(pds[i]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "lac = Integer.parseInt(matches[i]);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "lac = Integer.parseInt(inputID[i]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGets;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "lac = Integer.parseInt( ArrayUtils.axis[i]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "lac = Integer.parseInt(fonts[i]);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "lac = Integer.parseInt(Right[i]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "lac = Integer.parseInt( ArrayUtils.unit[i]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "lac = Integer.parseInt(EXCEPTIONKeys[i]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "lac = Integer.parseInt(<?>[i]);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "lac = Integer.parseInt( ArrayUtils.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "lac = Integer.parseInt(Dynamic[i]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "lac = Integer.parseInt( ArrayUtils.codeBug[i]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "lac = Integer.parseInt(Copy[i]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "lac = Integer.parseInt(dhC_PUBLIC[0] = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "lac = Integer.parseInt(TagName[i]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "lac = Integer.parseInt( ArrayUtils.data[i]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "lac = Integer.parseInt( ArrayUtils.parseInt;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGoog, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "lac = Integer.parseInt(position[i]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "lac = Integer.parseInt(inputId[i]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "lac = Integer.parseInt( movelist[i]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "lac = Integer.parseInt( ArrayUtils.MAX_VALUE, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "lac = Integer.parseInt( ArrayUtils.code[i]);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "lac = Integer.parseInt( JsDocToken.codeBug[i]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "lac = Integer.parseInt(unit[i]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "lac = Integer.parseInt(args[i]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "lac = Integer.parseInt(clazz[i]);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGID_CLOSE, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "lac = Integer.parseInt(KEY_CLOSE[i] = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGOTO[i]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "lac = Integer.parseInt(attributeCount, Integer.MAX_VALUE[i]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "lac = Integer.parseInt( ArrayUtils.inside_VALUE, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "lac = Integer.parseInt(attributeCount[i] = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGoog_CLOSE, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "lac = Integer.parseInt(randomSer[i]);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "lac = Integer.parseInt( superclass[i]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "lac = Integer.parseInt(plot[i]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "lac = Integer.parseInt(existing[i]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "lac = Integer.parseInt(Table[i]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "lac = Integer.parseInt(plainC_PUBLIC[i]);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "lac = Integer.parseInt(GID[i]);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "lac = Integer.parseInt(diff[i]);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGFR, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "lac = Integer.parseInt(als[i]);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "lac = Integer.parseInt(plainC_ fspath, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGstart, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "lac = Integer.parseInt( injection[i]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "lac = Integer.parseInt( local[i]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "lac = Integer.parseInt( JsDocToken.MAX_VALUE[i]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "lac = Integer.parseInt( ArrayUtils.inside_CLOSE, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "lac = Integer.parseIntparseInt;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGets, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGoog_VALUE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "lac = Integer.parseInt(Names[i]);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "lac = Integer.parseInt(xml[i]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "lac = Integer.parseInt(dhC_PUBLIC[i]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "lac = Integer.parseInt( always[i]);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "lac = Integer.parseInt( ArrayUtils.inside_CLOSE[i]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "lac = Integer.parseInt(attributeCount;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "lac = Integer.parseInt(STATUS[i]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGJACKCrc = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "lac = Integer.parseInt(size[i]);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "lac = Integer.parseInt( names[i];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "lac = Integer.parseInt(callback[i]);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "lac = Integer.parseInt(data[i];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "lac = Integer.parseInt( JsDocToken.VALUE[i]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "lac = Integer.parseInt(axis[i]);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "lac = Integer.parseInt(KEY_CLOSE[i] & Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "lac = Integer.parseInt[i]);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "lac = Integer.parseInt( gid[i]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGOTO[i];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "lac = Integer.parseInt(Array[i];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "lac = Integer.parseInt(FLAGSC_PUBLIC[i]);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "lac = Integer.parseInt(dhC_PRIVATE[i]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "lac = Integer.parseInt(text[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "lac = Integer.parseInt(Logs[i]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGJACKCe#[i]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "lac = Integer.parseInt( JsDocToken.NULL_VALUE[i]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "lac = Integer.parseInt(plainC_BY_KEY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "lac = Integer.parseInt( URLs[i]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGJACKCORD[i]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "lac = Integer.parseInt( ArrayUtils.NEGoog_BLOCK_SIZE[i]);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "lac = Integer.parseInt = Integer.parseInt(text[i]);",
                "identical": false
            }
        ],
        "buggy_line": "lac = Integer.parseInt(data[i]); break; case \"#CID#\": cid = Integer.parseInt(data[i]);",
        "fixed_line": ""
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expressionainder(\"(?:\") // Blet has \" + name;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(\"(?:\") //Coordinates.numberOfFdt \" + name;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression\".equals(name).id=Id);",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression2oupon() - 1; // should never happen",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't do we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression2oupon() - 1; // should never happen but...",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(\"(?:\") //Coordinates.numberOfF remaining \" + name;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(\"(?:\") // Blet has \" + name;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't really modify it';",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn'll set vianumberOfF",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't really gets here",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't do we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't found",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't need 6",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't need 6",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't found",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't really modify it';",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn'tTransformers",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't really gets here",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn'tDesc",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn'll set vianumberOfF",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't do we didn't need 6",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't bit we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn'll set via this.\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn'tTransformers",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't do we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn'll set vianumberOfF",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't really gets here",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn'tDesc",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't found",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't do we didn't bit we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't need the series >= 0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn'll set via this.\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't need the we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression2oupon() - 1; // should never happen but we didn'tDesc",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't really modify it';",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't do we didn't really modify it';",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't need 6",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't bit we didn'll set vianumberOfF",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't really modify it'll set vianumberOfF",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle[0], null);",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitle[0], null);",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression2oupon() - 1; // should never happen but we didn'tTHREAD we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle[0], null);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't really gets this far",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression(\"(?:\") //Coordinates.numberOfF not supported negative",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't need 6",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression2oupon() - 1; // should never happen butnumberOfF",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't bit we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitle[0], null);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't really modify it's non-numberOfF",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't found",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn'll set vianumberOfF 1-based",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expressionSaveMillis(i).numberOfFocation; // we didn'll set via this right?",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't need the we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't bit we didn't need 6",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn'tTransformers",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't bit we didn't really modify it';",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn'tDesc",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't need the series >= 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitle) - 1; // should never happen",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle[0], null);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't do we didn't really gets this.\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't do we didn't really gets here",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't need the we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't really modify it'll set vianumberOfF",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression2oupon() - 1; // should never happen butnumberOfF 1-based",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't really gets here",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn'll set via this.\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression(\"(?:\") //Coordinates.number entirely at most \" + name;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(\"(?:\") //Coordinates.numberOfF_1_2 \" + name;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't do we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't bit we didn't bit we didn't really gets here",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't really modify it'll set vianumberOfF",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't need the we didn't really gets here",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't bit we didn't really here",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitleTitle) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't really modify it';",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression2oupon() - 1; // should never happen but we didn't bit we didn't do we didn't really modify it';",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression\".equals(iTitleTitleTitleTitleTitleTitleTitle[0], null);",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
        "fixed_line": ""
    },
    "Bears-127": {
        "fixes": [
            {
                "k": 1,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "decodeStatus: buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, position += 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "decodeStatus: buf.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len - 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "decodeStatusator = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "decodeStatus: buf.readUnsignedShort(buf, off, len1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "decodeStatusInt = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "decodeStatusio.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, position - 1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "decodeStatus: buf.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "decodeStatus = this.positionType.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "decodeStatus: buf.readUnsignedShort(buf, off, len;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len)[0];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "decodeStatusMethod.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "decodeStatusio.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len3);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, position += 2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, position + 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "decodeillisecond = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "decodeStatus =inalType.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, off, buf.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "decodeStatus bounds.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len+1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len + 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "decodeStatusioType.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "decode = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "decodeStatus = buf.readUnsignedShort(statusType, buf, position;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "decodeStatus: buf.readUnsignedShort(buf, off, len3);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "decodeStatusator buf.readUnsignedShort(buf, position += 2;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "decodeStatusioType.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "decodeStatuscomparison = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "decodeStatus = buf.readUnsignedShort(pt, position;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "decodeStatus: buf.readUnsignedShort(buf, off, len)[0];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "decodeStatusMethod.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "decodeStatus Type.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "decodeStatus = buf.readUnsignedShortBuffer(buf, position;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len1));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "decodeStatus = reached.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "decodeStatusator buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, begin, buf.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "decodeStatusioContext.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "decodeStatus = buf.readUnsignedShort(buf,HEXPR_EVENT_VALUE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, Token.EOF;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len)-1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "decodeStatus = classType.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "decodeStatusps = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "decodeStatusator buf.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, 0, buf.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "decodeStatus: buf.readUnsignedShort(buf, position += 2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, listeners.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "decodeStatusbits = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, lenlowerType.relativePosition);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "decodeStatus = buf.readUnsignedShortURI;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "decodeStatus = buf.readUnsignedShort(buf,allocInt;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "decodeStatusableValue = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len abstractType.relativePosition);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "decodeStatus = buf.readUnsignedShort(buf,HEXTENDED_EVENT_VALUE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "decodeStatus = OBJECT_EVENT_COMMA, buf.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "decodeStatus = buf.readUnsignedShort(b, off, len);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, lenfields.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "decodeStatus = buf.readUnsignedShort(statusType, buf, off, len;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "decodeStatusableValue.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, position);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "decodeStatusator = buf.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, off, len)[0];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "decodeStatusPath = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "decodeStatus = buf.readUnsignedShort(buffer, position;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "decodeStatus = buf.readUnsignedShort(buf,bits);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "decodeStatusioType.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "decodeStatusio.readUnsignedShort(buf, off, len)[0];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "decodeStatusioContext.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "decodeStatus = buf.readUnsignedShort(statusType, bufpos);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "decodeStatus =0 & buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, position + 2;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "decodeStatusMethod.readUnsignedShort(buf, position += 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "decodeStatus bounds.readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "decodeStatus bounds.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "decodeStatus section = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "decodeStatusMethod.readUnsignedShort(buf, off, len) >> 2;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, off, len1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, stringBufferTop) >> 2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "decodeStatus = b.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "decodeStatus cType = buf.readUnsignedShort(buf, position;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, stringBufferTop;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, lenlowerType);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "decodeStatus = buf.readUnsignedShort(buf,allocType.relativePosition;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "decodeStatus = buf.readUnsignedShort(statusType, buf);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "decodeStatusator = buf.readUnsignedShort(buf, off, len1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "decodeStatus cType = buf.readUnsignedShort(buf, off, len1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, off, len) == status;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "decodeStatusFunctionType.readUnsignedShort(buf, off, len) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "decodeStatus = buf.readUnsignedShort(buf, ptr, buf.length;",
                "identical": false
            }
        ],
        "buggy_line": "decodeStatus(position, buf.readUnsignedShort());",
        "fixed_line": ""
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos + 1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberOfValid().number(number, dpospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospospos - 1);",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\") // adc 2",
        "fixed_line": ""
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (position) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (position > data.length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (position.length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (position != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (position != data.length) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (position.length != data.length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (bytes.length) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (bytes.length != data.length) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (position.length == data.length) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (position != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (position -= data.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (position.length != dataLen) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (positionNames.length == data.length) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (bytes.length != dataLen) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (position.setSettings != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (position;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parent.length != data.length) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (enclosing != data.length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (position.referring > data.length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (positionNames.length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (position.first) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (position.charAt(0) == data.length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (position.encapsulator) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (context != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (context.length != data.length) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (position == data.length) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (position.length > data.length) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (position.enclosing != data.length) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (enclosing != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (position.encapsulator != data.length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (position.setSettings != data.length) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (position += data.length == data.length) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (position[1] == data.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (positionNames.length != data.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (position.clip) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (bytes.length != dataStart) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (position += data.length == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (positionNames.length == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (position.referenced) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (position.charAt(0) == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (position.objectCodec != data.length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (position += data.length != data.length) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (position.mode == data.length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (position.setSettings != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position.charAt(0) != data.length) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (position.charAt(0) != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (position.length == dataLen) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (position += data.length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (position. Restr) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (context != data.length) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (positionNames.length == dataLen) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position.finallyCtor > data.length) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (position -= data[0] == data.length) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (positionNames.length == data.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (position.encapsulator != dataLen) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (position.hasSignChar) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (position.charAt) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (positionNames.length == dataStart) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (position.charAt(0) != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (position += data.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (position.started) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (position.length == dataStart) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (encapsulator) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position.enclosing) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (position.length != dataStart) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (position.encapsInvocations) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (position += data.length != dataLen) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (position.charAt(0) == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (positionrounded) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (position.length != dataMin) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (position.encapsulator != dataMin.length) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (position. zoom) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (positionNames.length == maximalIterationCount) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (positionInvocations) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (position.size == data.length) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (position += data.length == dataLen) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parent.length != dataLen) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (enclosing) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (positionNames.length == data.NONE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (position -= dataStart;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (context.length != dataLen) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (position -= data.length) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (position.canContainInline) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (position.charAt(0) == Integer.MAXIMUM_VALUE) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (position. maxSize) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (position.hasSigns\", dataStart) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (position -= dataLen;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (position.encapsulator != dataStart) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (position. absoluteed) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (position.hasSigns) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (context.length != dataStart) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (positionNames.length != dataLen) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (position. getParent) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (position.length == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (position.length != dataSeparator) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (position.encapsulator != dataElement) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (position.hasLF) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (position.scope) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (position.encapsulator != dataSeparator) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (bytes.length != dataElement) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": ""
    },
    "Bears-102": {
        "fixes": [
            {
                "k": 1,
                "patch": "caseInt.setUnsignedByte(position, buf, position;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "caseInt.setUnsignedByte(position, buf.length;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "caseInt.setUnsignedByte(buf, position;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "caseInt.setUnsignedByte(position, 1, buf.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "caseInt.setUnsignedByte(tracer, buf, position;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "caseInt.setUnsignedByte(negative_VALUE, buf.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "caseInt.setUnsignedByte(position, buf;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "caseInt.setUnsignedByte(negative, buf, position;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "caseInt.setUnsignedByte( 7, buf.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "caseInt.setUnsignedByte( more_VALUE, buf;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "caseInt.setUnsignedByte(negative_R_KEY, buf.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "caseInt.setUnsignedByte(position, break;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "caseInt.setUnsignedByte(, buf, position;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_Readers, 1, buf.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "caseInt.setUnsignedByte(Dependencies, buf, position;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "caseInt.setUnsignedByte(negative_VALUE, buf;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "caseInt.setUnsignedByte( more_VALUE, buf.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "caseInt.setUnsignedByte( ArrayUtils.KEY_R_KEY, buf;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "caseInt.setUnsignedByte(negative, buf.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "caseInt.setUnsignedByte(form_VALUE, buf.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "caseInt.setUnsignedByte(position, buf, break;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "caseInt.setUnsignedByte(200;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "caseInt.setUnsignedByte( did, buf.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "caseInt.setUnsignedByte(INT_VALUE, buf;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "caseInt.setUnsignedByte( nb, buf, position;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "caseInt.setUnsignedByte( implements_VALUE, buf;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "caseInt.setUnsignedByte(position, 7;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "caseInt.setUnsignedByte(position, 6;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "caseInt.setUnsignedByte(Dependencies, buf.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_RSH;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "caseInt.setUnsignedByte(negative_KEY, buf.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "caseInt.setUnsignedByte(negative_R_KEY, buf;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "caseInt.setUnsignedByte( obj, position;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "caseInt.setUnsignedByte( break, buf.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "caseInt.setUnsignedByte(Condition, buf, position;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "caseInt.setUnsignedByte(position, 0, buf.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "caseInt.setUnsignedByte(position, buf, prefix;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "caseInt.setUnsignedByte(OBJECT_KEY, buf.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "caseInt.setUnsignedByte( lhs_VALUE, buf.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "caseInt.setUnsignedByte(index, buf, position;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_RANDOM;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "caseInt.setUnsignedByte(position, 0) break;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "caseInt.setUnsignedByte(cw, buf, position;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "caseInt.setUnsignedByte(attributes, buf.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "caseInt.setUnsignedByte(negative_Readers, position;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "caseInt.setUnsignedByte(INT_VALUE, 1, buf.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "caseInt.setUnsignedByte(trace_R_KEY, buf.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "caseInt.setUnsignedByte(negative) break;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "caseInt.setUnsignedByte( more_R_KEY, buf.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "caseInt.setUnsignedByte(list, buf, position;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "caseInt.setUnsignedByte(KEY_R_KEY, buf.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "caseInt.setUnsignedByte(rawType, buf, position;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "caseInt.setUnsignedByte(position, buf, 12;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "caseInt.setUnsignedByte(arrowLength, buf.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "caseInt.setUnsignedByte(Condition, buf.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "caseInt.setUnsignedByte(position, buf, \"UnsignedByte.KEY_Readers\")) break;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "caseInt.setUnsignedByte(Constants.KEY_R_VALUE, buf;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "caseInt.setUnsignedByte(JsName, buf, position;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "caseInt.setUnsignedByte(Constants.KEY_Readers, position;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_Readers, 0, buf.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "caseInt.setUnsignedByte(modules, buf, position;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "caseInt.setUnsignedByte(INT_VALUE, buf.length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "caseInt.setUnsignedByte( deserialize, buf, position;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "caseInt.setUnsignedByte(seconds, buf, position;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "caseInt.setUnsignedByte(aren, buf, position;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "caseInt.setUnsignedByte(negative_R_KEY, 1, buf.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "caseInt.setUnsignedByte(position, 0) 0) break;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "caseInt.setUnsignedByte( index, buf.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "caseInt.setUnsignedByte(composite, buf, position;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_Readers, position;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_Readers, 12;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "caseInt.setUnsignedByte( extended, buf.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_Readers, buf;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "caseInt.setUnsignedByte( lhs_VALUE, buf;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "caseInt.setUnsignedByte(Detail, buf, position;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "caseInt.setUnsignedByte(X_KEY, buf;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "caseInt.setUnsignedByte(position, buf, \"setUnsignedByte.KEY_VALUE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "caseInt.setUnsignedByte( fresh_VALUE, buf.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "caseInt.setUnsignedByte((8_R, buf, position;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_RAND_PART_C_STATE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "caseInt.setUnsignedByte(list, buf.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "caseInt.setUnsignedByte(wide, buf.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "caseInt.setUnsignedByte(position, propertyName);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "caseInt.setUnsignedByte(KEY_R_KEY, buf;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "caseInt.setUnsignedByte(31, buf.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "caseInt.setUnsignedByte(negative_KEY, buf;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "caseInt.setUnsignedByte(position, buf, 1, position;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_Readers;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "caseInt.setUnsignedByte(call, buf, position;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "caseInt.setUnsignedByte( did, buf, position;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "caseInt.setUnsignedByte(position, buf, 0, 1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "caseInt.setUnsignedByte(position, propertyName) break;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "caseInt.setUnsignedByte(X_KEY, buf.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "caseInt.setUnsignedByte( indicating, buf, position;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "caseInt.setUnsignedByte(position, BigInteger.KEY_Rprov) break;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "caseInt.setUnsignedByte(position, numerator_Readers, 1, buf.length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "caseInt.setUnsignedByte(negative_VALUE, buf, position;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "caseInt.setUnsignedByte( lhs, buf.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "caseInt.setUnsignedByte(position, buf, \"UnsignedByte.KEY_VALUE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "caseInt.setUnsignedByte(position, extended;",
                "identical": false
            }
        ],
        "buggy_line": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break; case 22: position.set(\"profile\", buf.readUnsignedByte()); break; case 66: position.set(Position.KEY_POWER, buf.readUnsignedShort() + \"mV\"); break; case 67: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() + \"mV\"); break; case 70: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
        "fixed_line": ""
    },
    "Bears-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "return result;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _unwrappedPropertyHandler.report(p, type, static final return result;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return JsonToken.FIELD_ARRAY;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return result;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _unwrappedPropertyHandler.report(p, type, bean, static final return 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0)",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "return result; } // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type: if (p.getCurrentToken() == JsonToken.START_ARRAY) { return super.deserializeTypedFromAny(p, ctxt); } else if (p.getCurrentToken() == JsonToken.VALUE_STRING) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { String str = p.getText().trim(); if (str.isEmpty()) { return null; } } } ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\"); return null; }"
    },
    "Bears-120": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 11;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, offset, length",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of s",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return 10; // empty String when to",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, offset, length",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return 12; // returns original String when possible",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, length",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling wrapping;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, 0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return INDEX_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return 10; // so, as per [JACKSON-407] --s, buf, offset, length",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of \"+buf, 0, buf.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, length",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return 10; // so, as per [JACKSON-407] --keys, buf, offset, length",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, bit, offset, length",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return INDEX_NOT_FOUND; // to read the matrix, buf, 0, length",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return INDEX_NOT_FOUND; // to check, buf, 0, length",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, 0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return 10; // so, as per [JACKSON-407] -- infer, buf, offset, length",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, 0, length",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return INDEX_NOT_FOUND; // to block, defaultValue, buf, length",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return 10; // so, as per [JACKSON-407] --normal, buf, offset, length",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return 10; // so, as per [JACKSON-407] --ROOT, buf, offset, length",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return 10; // so, as per [JACKSON-407] --subclass, buf, offset, length",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return 12; // false, buf, length",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return 10; // so, as per [JACKSON-407] --externs, buf, offset, length",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf, offset, length",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of \"+buf, buf, offset, length",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return NO_MATCH;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of advance, buf, offset, length",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of input, buf, offset, length",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, 0, length",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, angle, 0, length",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return 10; // so, as per [JACKSON-407] --T, buf, offset, length",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of nodes, buf, offset, length",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return 10; // so, as per [JACKSON-407] --s, buf, length",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of s, buf, offset, length",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return 10; // so, as per [JACKSON-407] -- -- allow, buf, offset, length",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return 10; // so, as per [JACKSON-407] --Collections, buf, offset, length",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, bit, offset, length",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, null, length",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return 10; // so, as per [JACKSON-407] -- 18, buf, offset, length",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf, _length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return 10; // empty String when to get(buf, 0, length",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, length",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, bit, length",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of \"+buf, 0, length",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, null, 0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return NO_ANNOTATION_MAPS;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, % amount;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf, element",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return 10; // so, as per [JACKSON-407] --Iterator, buf, offset, length",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return quads.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, off, length",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disablingIF, buf, offset, length",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return 12;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf,Parent, element",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return 0; // let's do a sanity check",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return 10; // so, as per [JACKSON-407] -- to do a, buf, offset, length",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling ofwd, buf, offset, length",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, angle, 0, length",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf,Parent)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return 10; // so, as per [JACKSON-407] length",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling zero, buf, offset, length",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return 0; // let's do a, buf, 0, length",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling zero, buf, 0);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of advance, buf, 0, length",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, bit, length",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of class, buf, offset, length",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, % 4)",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return 10; // so, as per [JACKSON-407] --ROOT, buf, 0, buf.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf, null, 0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, name;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf,Parent, _length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of advance, buf, length",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of s, buf, null, length",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return INDEX_NOT_FOUND; // to read the matrix, buf, length",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, converters, length",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return 12; // false, buf, 0, length",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of s, buf, 0);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, null, 0);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf, 0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return 10; // so, as per [JACKSON-407] -- the matrix, buf, offset, length",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling wrapping fornumeric, buf, offset, length",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return 10; // we's do implicit renam",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of s, length",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return 10; // so, as per [JACKSON-407] --externs, length, buf, null, 0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of s, buf, length",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow, buf, offset, length)",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return 10; // so, as per [JACKSON-407] --ROOT, buf, length",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return NO_MATCHER; // to check, buf, 0, length",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling wrapping fornumeric, buf, 0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return 0; // remember, but do a, buf, length",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of length, buf, name;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of nodes, buf, 0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return 10; // so, as per [JACKSON-407] --, buf, % amount;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling of s as per, buf, offset, length",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return 10; // so, as per [JACKSON-407] --ROOT, buf, 0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return 10; // so, as per [JACKSON-407] -- allow disabling zero, buf, length",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override protected Object decode( ChannelHandlerContext ctx, Channel channel, ChannelBuffer buf) throws Exception { // Skip Alive message while (buf.readable() && Character.isDigit(buf.getByte(buf.readerIndex()))) { buf.readByte(); } // Check minimum length if (buf.readableBytes() < 11) { return null; }"
    },
    "Bears-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return deser;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public InnerProperty() { return deser; }",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public InnerProperty(deser) { return deser; }",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public Inner() { return deser; }",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public InnerProperty(prop) { return deser; }",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public InnerProperty() { return _deser; }",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public InnerProperty() { return _value; }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public Inner() { return _value; }",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public Inner() { return _deser; }",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public InnerProperty() { return _value;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public InnerProperty(intValue.class) { return deser; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public InnerProperty(intValue() { return deser; }",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public InnerProperty(deser) { return _value; }",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public InnerProperty(deser) { return _deser; }",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public InnerProperty(Object.class) { return deser; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public Inner if (deser) { return deser; }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public void deser() { return _deser; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public InnerProperty(deser) { return _valueType; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public InnerPropertyNode(deser) { return deser; }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public InnerProperty(property) { return deser; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public InnerClass() { return deser; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public Inner while (deser) { return deser; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public InnerDeserializer() { return _value; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final int deser() { return _deser; }",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public InnerClass() { return _deser; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public InnerProperty(intValue) { return deser; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public InnerProperty(deser) { return deser, deser); }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public InnerPropertyHandler() { return deser; }",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public Inner time() { return deser; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public InnerProperty() { return _property; }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public void deser() { return _value; }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public InnerProperty(Modules) { return deser; }",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public InnerProperty(deser) { return deser;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public InnerProperty(member) { return deser; }",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public InnerProperty() { return _annotations; }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public InnerPropertyHandler() { return _deser; }",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public InnerProperty(outputValue) { return deser; }",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public InnerElement(deser) { return deser; }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public InnerProperty() { return deser;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public Inner time() { return _value; }",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public InnerProperty() { return _filteredProps; }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public InnerProperty(propertyName) { return deser; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public InnerProperty(serializerValue) { return deser; }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public InnerDeserializer() { return _deser; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public InnerClass() { return _value; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public InnerProperty(intValue() { return deser;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public InnerProperty( true) { return deser; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public InnerConfig() { return _deser; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final int deser() { return _value; }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public InnerProperty(deser) { return deser == deser; }",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public InnerBase() { return _deser; }",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public InnerProperty() { return _deser;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public InnerProperty() { return _outputBuffer; }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public Innerval() { return _value; }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public Inner() { return _value;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public InnerPropertyY() { return deser; }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public InnerProperty(deser) { return _valueTypeDeserializer; }",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public Inner while (deser) { return _deser; }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public InnerProperty(intValue.class) { return deser;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public Inner(deser) { return deser; }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public InnerProperty(deser) { return deser;; }",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public Inner.intValue() { return deser; }",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public InnerProperty(deser) { return deser, deser; }",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public InnerProperty( look) { return deser; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public InnerDeserializer() { return _valueType; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public InnerProperty(segment) { return deser; }",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public InnerProperty(deser) { return _class; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public InnerProperty(intValue() { return _deser; }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public InnerPropertyNode(deser) { return _deser; }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public InnerProperty(serializer) { return deser; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public InnerProperty() { return _setter; }",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static finalUnitProperty() { return deser; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public InnerPropertyHandler() { return _value; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public InnerProperty(prov) { return deser; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public Inner while (deser) { return _value; }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public InnerBase() { return deser; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public Innerrapping() { return deser; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public InnerProperty(intValue() { return _value;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public InnerProperty() { return _outputBuffer.length; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public InnerProperty() { return _valueType; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public InnerProperty(deser) { return deser; return deser; }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public InnerDeserializer() { return deser; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public InnerProperty(deser) { return deser; break;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public InnerProperty() { return _componentType; }",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public InnerintValue() { return deser; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public InnerProperty() { return _type; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public InnerProperty s() { return deser; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public InnerProperty with() { return deser; }",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public InnerProperty(deser) { return _value;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public InnerType() { return deser; }",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public InnerSetter() { return deser; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public final InnerProperty() { return deser; }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public Inner while (deser) { return _valueType; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public InnerProperty(intValue() { return _value; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public Inner localName() { return deser; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public InnerProperty() { return _beanType; }",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public Inner text() { return _value; }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public InnerProperty(deser) { return _property; }",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public Inner() { return _valueType; }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public InnerPropertyLiteral() { return deser; }",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public InnerClassProperty withValueDeserializer(JsonDeserializer<?> deser) { return new InnerClassProperty(this, deser); } @Override public void assignIndex(int index) { _delegate.assignIndex(index); } @Override public int getPropertyIndex() { return _delegate.getPropertyIndex(); } @Override public int getCreatorIndex() { return _delegate.getCreatorIndex(); } // // // BeanProperty impl @Override public <A extends Annotation> A getAnnotation(Class<A> acls) {"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.hasNext) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.hasNext()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (position.hasNext) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (position.hasNext()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (position.hasNext;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.hasNext == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.hasNext() {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if(position.hasNext) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (position.hasNext == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (opcode.hasNext) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if exception.hasNext()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELTA) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (oldDOW) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (newVal.hasNext) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (rows.hasNext) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if exception.hasNext;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (bestValidPos <= position;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (oldDO.hasNext) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEFINE.hasNext) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (position.hasNextChecked) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (oldDOW.hasNext) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (needed.hasNext) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (ClassReader.hasNext) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tmp.hasNext) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.hasNext == INVALID_NO_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.hasNext || position > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_VAR) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.hasNextChecked) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (children.hasNext) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DELTA) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (oldDOW.hasNext()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.hasNextRenaming) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEFINE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEPRECATED) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.hasNext, position) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELit.hasNext) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.hasNext || parser.hasNext) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_LENGTH) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (newPos > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.hasNext == INVALID_NO_GAPPROTOTYPE_MEMBER_DELTA) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_COMMAND) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_CALL) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_VAR) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (found.hasNext) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (entrySet.hasNext) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_VALUE) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (oldLen.hasNext()) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEFINE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (item.hasNext) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (model.hasNext) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELit.next) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.hasNext || position > 1970_GAPPROTOTYPE_MEMBER_DELTA) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_VAR) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_BODY) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_BODY) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (oldName.hasNext()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_AS_VAR) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_START) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( quick.hasNext) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_ minor) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (oldValue.hasNext) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.hasNext == INVALID_NO_GAPPROTOTYPE_MEMBER_VAR) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_VALUE) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_KEY) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_VALUE) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.hasNext == INVALID_UNQUOTED_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (dataset.hasNext) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEL) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (oldDO.hasNext()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_parser) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DELit.hasNext) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEFINE.hasNext;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_ERROR) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEFINE.START) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_CALL) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (size.hasNext) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DEPRECATED) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_VAR) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.hasNext == INVALID_NO_VAR) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_nextInt) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.hasNext int position) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_VAR) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_IS) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (tmp.hasNext()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.hasNextBuffer) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_VALUE) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DEFINE) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_START) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parserList.hasNext) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.hasNext || parser.hasNext;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_ minor) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (existing.hasNext) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.hasNext == INVALID_NO_SIDE_EFFECTS_AS_keepS) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Source.hasNext) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DESERVE_VALUE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_RIGHT) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DEFINE;",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": ""
    },
    "Bears-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (totalIndex = startCount == 0 && tri",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (totalIndex = startCount == 0 && tri int",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (totalIndex = startCount == 0 && tri int start",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (totalIndex = startCount == 0 && tri startIndex",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNo",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (totalIndex = startCount == 0 && trimsg",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex =",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex =",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (totalIndex = startCount == 0 && trimsgNo",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (totalIndex = startCount == 0 && triDis",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (totalIndex = startCount == 0 && tri fieldType",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (totalIndex = startCount == 0 && tri fieldTypeIndex",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex =",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (totalIndex = startCount == 0 && triDisNo",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (totalIndex = startCount == 0 && triDisNoIndex",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex = 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (totalIndex = startCount == 0 && tri debugging",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (totalIndex = startCount == 0 && tri int startPosition",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (totalIndex = startCount == 0 && tri debuggingIndex",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex = 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (totalIndex = startCount == 0 && tri fieldTypeIndex =",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex =",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (totalIndex = startCount == 0 && tri fieldTypeIndex = 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex = 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex = 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (totalIndex = startCount == 0 && tri fieldTypeIndex = 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (totalIndex = startCount == 0 && triDisNoIndex;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (totalIndex = startCount == 0 && tri settings",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (totalIndex = startCount == 0 && tri settingsIndex",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex = 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (totalIndex = startCount == 0 && tri targetClass",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (totalIndex = startCount == 0 && tri targetClassIndex",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (totalIndex = startCount == 0 && triFull",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (totalIndex = startCount == 0 && triReference",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (totalIndex = startCount == 0 && tri debuggingIndex =",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex = 0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (totalIndex = startCount == 0 && tri debuggingIndex = 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (totalIndex = startCount == 0 && tri int start start",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (totalIndex = startCount == 0 && triFullIndex",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex = 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (totalIndex = startCount == 0 && tri fieldTypeIndex;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (totalIndex = startCount == 0 && triDisNoIndex;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (totalIndex = startCount == 0 && triReferenceIndex",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (totalIndex = startCount == 0 && tri }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (totalIndex = startCount == 0 && tri int startNo",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (totalIndex = startCount == 0 && tri int startNoIndex",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (totalIndex = startCount == 0 && trimsgNoIndex;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (totalIndex = startCount == 0 && tri degrees",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (totalIndex = startCount == 0 && tri fieldTypeIndex = 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (totalIndex = startCount == 0 && tri int startIndex = 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (totalIndex = startCount == 0 && trimsgIndex = 0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (totalIndex = startCount == 0 && tri startIndexNoIndex;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (totalIndex = startCount == 0 && tri debuggingIndex = 0;",
                "identical": false
            }
        ],
        "buggy_line": "if (deviceState.getMotionPosition() != null && startEventIndex == -1 && trips != deviceState.getMotionState()) { startEventIndex = i; startNoEventIndex = -1; } if (trips == deviceState.getMotionState()) { if (startNoEventIndex == -1) { startNoEventIndex = i; } else if (deviceState.getMotionPosition() == null) { startNoEventIndex = -1; }",
        "fixed_line": ""
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (\u07d4.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (\u79e2.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( Assertions.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (ining.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( venue.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( ary.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (\u204b.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (\u6566.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( venue.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (\u204b.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (\u2c1b.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (379.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (']=.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (rgb.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( Learn.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( Assertions.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (ohn.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tage.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (\ud834\udd70.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (related.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( Offer.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (\ud834\udd70.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( '1234'.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (\u1367.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( ary.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (rgb.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (\ud83a\udd34.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (\u437b.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (ecessary.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (\u1b01 == null.getPipeline().class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (ining.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (\u2657.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (\u2a46.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (\u79e2.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( Offer.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (\u56fe.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (\u2a46.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (drawImage == null.getPipeline().class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( GetInteger.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (ohn.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (\u01b1.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (\u7dd1.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (\u203b.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Processes.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( zz.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (\u07d4.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (2\\.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (spy.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (\u2657.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( ary.getPipeline().class ==HttpRequest;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Done.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (serves.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (\ucfe3.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( apt.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (\u8093.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( Assertions.getPipeline().class ==HttpRequest;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (\u16d9.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (\u203b.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (of.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( autocomplete.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Collection.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( Postman.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (serves.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( autocomplete == null.getPipeline().class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (AWT.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (\u1b01.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (\u437b.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (\u01e3.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (\u16d9.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( zz.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (\u5473.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (\u2cdb.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (\ud801\udc29.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (\u2a0b.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (\ud864\udd45.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (\uaab4.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (BU.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (\u0c4a.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (rgb.getPipeline().class ==HttpRequest;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (\u0713.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (\u81d9.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (stuff.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (\u81d9.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (\u2cdb.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (\u3531.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (related.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (\u6031.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( itemType.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (\u2a0b.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (ceptor.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (empty.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (\u204b.getPipeline().class ==HttpRequest;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (\u6566.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (\u0c4a.getPipeline().class ==HttpRequest) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (ining.getPipeline().class ==HttpRequest;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( venue.getPipeline().class ==HttpRequest;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (\u0c4a == null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Done.getPipeline().class ==HttpRequest;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (\u79e2.getPipeline().class ==HttpRequest;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (\ud834\udd70.getPipeline().class ==HttpRequest;",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": ""
    },
    "Bears-131": {
        "fixes": [
            {
                "k": 1,
                "patch": "int index = position;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int index = position - 2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int index = position + 2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int index = 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int index = 16.substring(index + 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int index = 16;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int index = 16.substring(index + Integer.valueOfCount;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int index = r.substring(index + 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int index = 16.substring(index + 1];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int index = 16.substring(index + Integer.valueOf_VALUE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int index = 2;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int index = 16.substring(index + position;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int index = 9;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int index = 16.substring(value1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int index = 16.substring(index + 16;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int index = Integer.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int index = String.valueOf(value) % 2 == 0 ? Integer.valueOf(index;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int index = r.substring(index + Integer.valueOf_VALUE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int index = 16 - Integer.valueOf(value) % 4;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int index = 16.valueOf(value) % 2 == 0 ? Integer.valueOf(index;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int index = 16 - Integer.valueOf(value;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int index = 16.substring(index + Integer.valueOfMIDDLE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int index = 16.substring(index + Integer.valueOf[0];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int index = 16.substring(index + Integer.valueOf(value;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int index = String.valueOf(value) % 2 == 0xff;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int index = r.substring(index + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int index = 13 - Integer.valueOf(value) % 2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int index = 16.substring(index + Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int index = r.substring(index + 1];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int index = 16.substring(index + 8;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int index = r.substring(index + Integer.valueOfCount;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int index = Integer.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int index = 16.substring(index + 2];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int index = 16 - Integer.valueOf(value) % 2;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int index = 16.substring(index + Integer.valueOf;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int index = 16.substring(value + Integer.valueOfCount;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int index = 16.substring(index + center.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int index = String.valueOf(value) % 2 == 0 ? Integer.valueOf(index + 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int index = 13 - Integer.valueOf(value) % 4;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int index =e.substring(index + 2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int index = String.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int index = end.substring(index + 2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int index = r.substring(index + Integer.valueOf[0];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int index = 16.valueOf(value) % 2 == 0xff;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int index = 16.substring(index + 1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int index = 16 - Integer.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int index = Integer.valueOf(value) % 2];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int index = r.substring(index + Integer.valueOfMIDDLE;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int index = Integer.valueOf(value) % 2 + 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int index = 16.substring(index + Integer.valueOf(10;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int index = r.substring(index + 16;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int index = 16.substring(index + 4) % 4;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int index = 13 - Integer.valueOf(value) % 2];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int index = position.substring(index + 2;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int index = 16.substring(index + 6;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int index = 16.substring(index + Integer.valueOfUri;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int index = position - 16;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int index = 16.substring(index + 9;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int index = 16.substringsubstring(index + Integer.valueOfCount;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int index = String.valueOf(value) % 2];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int index = 13 - Integer.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int index = 16.substring(index + Integer.valueOfC_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int index = FIELDS_STORE_SIZE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int index = Integer.valueOf(value) % 2 == 0xff;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int index = 16.valueOf(value) % 2 == Integer.valueOf(index;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int index = 16.valueOf(value) % 2 == 0 ? Integer.valueOf(index + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int index =doubleValue.substring(index + Integer.valueOfCount;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int index = 16.valueOf(value) % 4;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int index = 16.substring(index + Integer.valueOfMillis;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int index = 16 - Integer.valueOf(value) % 2 == 0xff;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int index = String.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int index = 8 - Integer.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int index = 16.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int index = 16.substring(value1 + Integer.valueOf(index;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int index =Summary.substring(index + 2;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int index = 16 - Integer.valueOf(value) % 2 == 0 ? Integer.valueOf(index;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int index = r.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int index = 16.substring(0, index;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int index = 16.valueOf(value + Integer.valueOf(index;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int index = 16 - Integer.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int index = 16.substring(value + Integer.valueOf(index;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int index = 16.substring(index + Integer.valueOfAliases_VALUE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int index = r.substring(index + Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int index = r.substring(index + 6;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int index = String.valueOf(value) % 2 + 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int index = 16.substring(index + Integer.valueOf(1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int index = 13 - Integer.valueOf(value;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int index = 16.substring(value1 + Integer.valueOfCount;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int index = 16.valueOf(value) % 2 == 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int index = 16.substring(index + Integer.valueOf(index;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int index = 16.substring(index + Integer.valueOfUri_VALUE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int index = 16 + Integer.valueOf(value;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int index = r.substring(index + Integer.valueOf;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int index = 16.substring(index + Integer.valueOfPosition;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int index = value.substring(index + 2;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int index = 16.valueOf(value) % 2 == Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int index = 16.substringsubstring(index + 2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int index = 8 - Integer.valueOf(value) % 2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int index = 16.substring(index + Integer.valueOf -= 2;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int index = String.valueOf(value) % 2 == 0NewLine;",
                "identical": false
            }
        ],
        "buggy_line": "int index = Integer.valueOf(temp.substring(0, 2), 16); if (protocol >= 3) { double value = Short.valueOf(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.valueOf(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.valueOf(temp.substring(4), 16);",
        "fixed_line": ""
    },
    "Bears-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _referenced != null && o.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _referenced != null && o.equals(_referenced;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _referenced != null && o.equals(_valueType;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _referenced != null && _referencedType;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _referenced != null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _referenced != null || o.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _referenced != null && _referencedType.getSelf;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return this != null && _referenced;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _referenced != null && o.equals(_referenced) { return false; }",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _referenced != null && _referenced;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _referenced != null || o.equals(_referenced;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _referenced != null && o.equals(_value;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _class != null && o.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _referenced != null && _referenced.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _referenced != null && o.equals(_referenced);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _referenced != null && oType.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return this != null && _referenced.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _referenced != null && t.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _referenced != null && o.equals(_referenced) { return true; }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _referenced != null && o.equals(_objectType;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _referenced != null && o.equals(_value) { return false; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this != null && _referenced != null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _referenced != null && o.equals(_class;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _referenced != null && b.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _module != null && o.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return _referenced != null && bpType.equals(_referenced;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _referenced != null && o.equals(_referencedType) { return false; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _referenced != null && _referenced.equals(_valueType;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _referenced != null && t.equals(_referenced;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this != null && o.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _referenced != null && o.equals(_boundsType;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _referenced != null && getClass.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _referenced != null && o.equals(_addedInteger.getSelf;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _referenced != null && obj.equals(_referenced;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _referenced != null || oType.equals(_referenced;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _referenced != null && o.equals(_delegateType;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _referenced != null && o.equals(_referenced)) return false;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _referenced != null && o).getSelf;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return current != null && _referenced.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _referenced != null && o.equals(_memberType;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _referenced != null && obj.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _referenced != null && bpType.equals(_referenced);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _referenced != null && o.equals(_referencedType);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return this != null && _referenced.equals(_referenced;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _referenced != null || oType.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _referenced != null && o.equals(_referencedType.getSelf;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _referenced != null && numberType.equals(_referenced;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _referenced != null && transformerType.equals(_referenced;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _referenced != null && b.equals(_referenced;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _value != null && o.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _referenced != null && t.getSelfType;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return _referenced != null && o.equals(_referenced.getSelf;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _referenced != null && currentType.equals(_referenced);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _referenced != null && o.equals(_setSelf;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _referenced != null && oType.equals(_referenced;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return true == _referenced && _referencedType;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _referenced != null && o;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _referenced != null && transformerType.equals(_referenced);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return current != null && _referenced.equals(_referenced;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _referenced != null && _referencedType.equals(_value;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _delegateType != null && o.equals(_referenced;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _valueType != null && o.equals(_referenced;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return other._referenced != null && _referencedType;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _referenced != null && oType.getSelf;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return _referenced != null && o.equals(_referencedes;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _referenced != null && key.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _referenced != null && o.equals(_referencedType) { return true; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _referenced != null && o.equals(_referencedCount;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _referenced != null && rootNode.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this.referenced != null && _referencedType.getSelf;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _referenced != null && _referencedType.equals(_referenced);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _referenced != null && transformerType.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _referenced != null || o.equals(_valueType;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this != null && o.equals(_referenced;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _referenced != null && o.equals(_keyType;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _referenced != null && pairs.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _class != null && o.equals(_referenced;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _referenced != null && getClass.equals(_referenced;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _referenced != null && _referenced.equals(_value;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _referenced != null && o.equals(_props;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _referenced != null && _referenced.equals(o).getSelf;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _referenced != null && _referencedType.equals(_referenced;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _value != null && o.equals(_referenced;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this != null && _referencedType.getSelf;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _referenced != null && o.equals(_referencedType, false;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this != null && _referenced.equals(_valueType;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return _referenced != null && o).equals(_value;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _referenced != null && _referenced.equals(o) { return false; }",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _referenced != null && bpType.equals(_referenced) { return false; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return current != null && _referenced;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _referenced != null &&Method.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _referenced != null && mark.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _referenced != null && Min.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _valueType != null && _referenced;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _referenced != null && bpType.equals(_referenced).getSelf;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _referenced != null && numberType.equals(_referenced);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _referenced != null && o).equals(_referencedType;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return true == null || _referencedType.equals(_referenced;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _referenced != null && tag.equals(_referencedType;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _referenced != null && o.equals(_addedInteger.getSelfType;",
                "identical": false
            }
        ],
        "buggy_line": "// Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));",
        "fixed_line": "@Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() == getClass()) { // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since // there is likely to be a cycle... // but... true or false? return false; /* // Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType())); */ } return false; } }"
    },
    "Bears-163": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tokens.canCONSTANT_VALUE\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (tokens.canCONSTANT_VALUE\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (tokens.canCONSTANT_VALUE && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (tokens.canCONSTANT_VALUE\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsume()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsume(\"UNIQUENCY\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tokens.canConsume\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (tokens.canCONSTANT_VALUE && tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tokens.can izip_VALUE && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tokens.canConsume\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (tokens.canCONSTANT_VALUE && tokens.canConsume()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsumeBounds);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (tokens.canConsume\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tokens.can meth\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tokens.can\u1d1d_VALUE && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tokens.canConsumeBounds != TokenStream.ANY_VALUE && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tokens.canModify\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (tokens.canConsumeBounds != TokenStream.ANY_VALUE && tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsume\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (tokens.canModify\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tokens.canConsume(\"UNIQUE\", tokens.canConsumeBounds, \"\"));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsumeBounds != NONE) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tokens.canConsume(\"UNIQUE\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tokens.canConsume\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (tokens.canConsumeBounds || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (tokens.canConsumeLEGAL_VALUE && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tokens.canTopLevel\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsume(\"UNIQUE\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tokens.can rootElementBounds(tokens, \"UNIQUE\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (tokens.canCONSTANT_VALUE\", tokens.canConsume\", tokens, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (tokens.canCONSTANT_VALUE && tokens.canConsume\", tokens, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsume(\"UNIQUE\", tokens, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tokens.canBe(\"CONSTANT_VALUE\", tokens.canConsumeBounds, \"\"));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tokens.canConsume\", tokens.canConsumeBounds, \"\"));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tokens.canConsumeBounds(prov, \"UNIQUE\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsume(\"UNIQUE\") {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsume_VALUE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (tokens.can rootElementBounds(tokens, \"UNIQUE\", tokens.canConsume\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tokens.canConsume\") && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsumeBounds != TokenStream_VALUE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tokens.canConsumeBounds || tokens.canConsume()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tokens.canCONSTANT_VALUE\", tokens.canConsume()) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (tokens.canONE\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsume(\"UNIQUE\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsume\") {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (tokens.canConsume\") || tokens.canConsumeBounds != NONE) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (tokens.canCONSTANT_VALUE\", tokens.canConsumeBounds, \"\"));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (tokens.canAligned\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tokens.canDuplicateX\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (tokens.can meth\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (tokens.can rootElementBounds(tokens, \"UNIQUE\", tokens.canConsume_VALUE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tokens.can rootElementBounds(tokens, \"UNIQUE\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (tokens.canConsume(\"UNIQUE\", tokens.canConsume\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (tokens.canRACT\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tokens.canConsumeBounds && tokens.canConsume(\"UNIQUENCY\", tokens, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tokens.canCONSTANT_VALUE && tokens.canConsume(\"UNIl\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (tokens.canConsumeBounds || tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (tokens.canU(\"CONSTANT_VALUE\", tokens.canConsumeBounds, \"\"));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tokens.can\u1d1d_VALUE\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (tokens.canCONSTANT_VALUE && tokens.canConsumeBounds != NONE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tokens.canZeros\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (tokens.canCONSTANT_VALUE\", tokens.canConsumeBounds, \"UNIQUENCY\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (tokens.can Hint\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (tokens.canConsumeBounds && tokens.can [];\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tokens.canU(\"CONSTANT_VALUE\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tokens.canAndType\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (tokens.canConsume\") || tokens.canConsumeBounds != chars.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (tokens.canISO\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tokens.can [];\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (tokens.can\u1d1d_VALUE\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (tokens.canConsumeBounds(prov, \"UNIQUE\", tokens.canConsumeBounds);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (tokens.canBe(\"CONSTANT_VALUE\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (tokens.canConsumeBounds != TokenStream.ANY_VALUE && tokens.canConsumeAND_OPTIONAL_VALUE) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (tokens.canU(\"CONSTANT_VALUE\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (tokens.canModify\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsume\", tokens_VALUE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (tokens.canConsume(\"UNIQUE\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tokens.canDuplicateXIST_VALUE && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsume\") || tokens.canConsumeBounds);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (tokens.canConsume\", tokens.canConsumeBounds, \"UNIQUENCY\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (tokens.canConsumeBounds || tokens.canConsumeBounds != NONE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tokens.can analyze(\"CONSTANT_VALUE\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (tokens.canAligned\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (tokens.canBe(\"CONSTANT_VALUE\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tokens.can getFirst\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (tokens.canRACT\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsume\", tokens_OPTIONAL_VALUE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tokens.canConsumeBounds(prov, \"UNIQUE\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (tokens.can analyze(\"CONSTANT_VALUE\", tokens.canConsumeBounds, \"\"));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tokens.canCONSTANT_VALUE && tokens.canConsume_VALUE) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (tokens.canConsumeBounds && tokens.can analyze(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (tokens.can meth\", tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tokens.can [];\", tokens.canConsumeBounds) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (tokens.canConsumeBounds(tokens, \"UNIQUE\", tokens.canConsume()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tokens.can izip(\"UNIQUE\", tokens.canConsumeBounds, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (tokens.canConsumeBounds || tokens.canConsumeBounds != chars.canConsume(\"UNIQUE\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
        "fixed_line": ""
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class || raw == Object.class) return Object.class;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (rawType == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; }",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || raw == short.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class || raw == float.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || raw == Object.class) Kit.class;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || raw == Object.class) return Object.class == Object.class;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || raw == byte.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || raw == Object.class) {returnType.class;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (rawraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || raw ==Object.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; may be Object.class;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; not store 'raw' || raw == Object.class;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class)msg == Object.class;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || raw == Object.class) {returnType.class; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || raw == Object.class) PeriodType.class;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; must be Object.class;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || raw == Object.class || raw.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class ||Range == Object.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class || raw == Std.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; return Object.class;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; be Object.class;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] = Object.class",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] skip entries with Object.class",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || raw == 48 == Object.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || with == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "returnraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; not store 'raw' || raw == Object.class; }",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw.class == Object.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || out == Object.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public Stringraw == String.class || raw == Object.class) { return Object.class; }",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; double- Object.class;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { Kit.class; }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw == arguments.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' || raw.class",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || raw == days.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "intraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw ==Style.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) Object.class;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; < Object.class;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == Object.class) { return Objectmsg == Object.class;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || raw == long.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw == Object.class) {returnType == Object.class;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; double- Object.class; }",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || raw == Object.class) {returnTypemsg == Object.class;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == ((Object.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == (raw.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; value == Object.class;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] = Object.class;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; may be Object.class; }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { Kit.class;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawrawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { return short.class;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw != String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || cls == Object.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || case == Object.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawrawrawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) return arguments == Object.class;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == 48.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; inmsg == Object.class;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { return Objectmsg == Object.class; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || case.class == Object.class) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawrawrawrawrawrawrawrawrawrawrawrawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || raw == Object.class) {returnTypemsg == Object.class; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public Stringraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] be Object",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Object.class) { return short.class; }",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls as per [JACKSON-3",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; _rawrawraw == Object.class;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == double.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || caseType == Object.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; col col == Object.class;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == Object.class) { 0, Object.class;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || sat == Object.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; double-class;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; must be Object.class; }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class; in less.class;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (_class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || raw == Object.class) {returnType.class; double- Object.class;",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": ""
    },
    "Bears-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result = map.findAndAddSerializer;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.findAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result = map.findAndAddDeserializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "resultMap.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.mapAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.serializerAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.serializerAndSerializer = map;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result = map.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ser = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result = map.findAndAdd(type, provider, _property);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_serializerAndSerializer = map;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result = map.findAndAddDeserializer(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.Ptr = _secondary.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "provider.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "resultAndSerializer = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "w = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "StringSerializer = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.findAndAddDeserializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result = map.findAndAdding(type, provider, _property);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result = map.findAndAddDynamic(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "PropertySerializerMap map = provider.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result. objectIdAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.findAndAdd(type, provider, _property);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result = map.findAndAdduserName(type, provider, _property);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.SerializerAndMapResult result = map;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result = map.findAndAddSerializer(type, provider, this);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "_findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result result.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.SerializerAndMapResult result = map.findAndAddSerializer;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result = map.findAndAddSerializer(valueType, provider, _property);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddDeserializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.serializerAndSerializer(map, provider, _property);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "String result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.findAndAddDeserializer(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.findAndAddSerializer(map, provider, _property);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result = map.findAndAddSerializerModifier(type, provider, _property);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.mapAndSerializer(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.mapAndSerializer(type, provider, _objectIdWriter);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.Ptr = _secondary.findAndAddDynamic(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result = map.findAndAddSerializer(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.Ptr = _secondary.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result = map.findAndAddDeserializer(type, provider, _valueType;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.wAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result = map.findAndAddSerializer(type, provider, _objectIdWriter);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result result = map.findAndAddDeserializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result result = map.findAndAddSerializer;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAdd(type, provider, _property);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result = map.findAndAdd(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result = map.findAndAddDynamic(type, provider, _valueType;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result[1] = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result = map.findAndAddSerializer(type, provider, _objectIdWriter;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result. writeAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result = map.findAndAdduserName(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.serializerAndSerializer(type, provider, _valueType.class);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.findAndAdduserName(type, provider, _property);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result = map.findAndAdd \":(type, provider, _property);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "_findAndAddDynamic(map, provider, _valueType);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result. ReferenceAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result[1] = map.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result = map.findAndAddAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.findAndAddSerializer(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result = map.findAndAddDeserializer(type, provider, _valueType) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result = map.findAndAddSerializerBy(type, provider, _property);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.mapAndSerializer(type, provider, _valueType.class);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result result = map.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.findAndAddMap(type, provider, _property);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.findAndAddDeserializer(type, provider, _valueType) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.matcherAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result = map.findAndAddw(type, provider, _property);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result = map.findAndAddDeserializer(type, provider, _valueTypeSerializer;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result = map.findAndAddSerializer(type, provider);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.mapAndSerializer(type, provider, _valueType) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PropertySerializerMap.SerializerAndMap = map;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.mapAndSerializer(type, provider, _objectIdWriter = map;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.findAndAddSerializer(type, provider, _objectIdWriter);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result. objectIdAndSerializer(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PropertySerializerMap map = provider.findAndAddSerializer(type, _property);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "String result = map.findAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result = map.findAndAddSerializer(type, provider;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.findAndAddDynamic(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result = map.findAndAddSerializer(type, provider, _outputType);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.findAndAdduserName(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result result = map.findAndAddDeserializer(type, provider, _valueType);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.mapAndSerializer(type, provider, _objectIdWriter.class);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.serializerAndSerializer(map, provider, _valueType.class);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.tickAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result = map.findAndAddDeserializer(type, provider, _objectIdWriter);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_findAndAddDynamic(map, provider, _property);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.allAndSerializer(type, provider, _property);",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "} protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException { // 27-Jun-2017, tatu: [databind#1679] Need to avoid StackOverflowError... if (type == Object.class) { // basically just need to call `toString()`, easiest way: JsonSerializer<Object> ser = new Default(Default.TYPE_TO_STRING, type); _dynamicSerializers = map.newWith(type, ser); return ser; } PropertySerializerMap.SerializerAndMapResult result = // null -> for now we won't keep ref or pass BeanProperty; could change map.findAndAddKeySerializer(type, provider, null); // did we get a new map of serializers? If so, start using it if (map != result.map) {"
    },
    "Bears-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (df == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return df == null;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (df != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (pattern != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tz != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (format == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return df != null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return df == JsonFormat.Shape;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return df == JsonFormat.START_ARRAY;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return df == JsonFormat.START_OBJECT;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return df == JsonFormat.END_ARRAY;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return df == JsonFormat.FIELD_RETURN;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return df == JsonFormat.toolTipText;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return df == JsonFormat.VALUE_RETURN;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (pattern == JsonFormat.Shape.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return df == JsonFormat.START_FALSE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (format != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return df == JsonFormat. polygonFormat;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return df == JsonFormat.Source;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return df == JsonFormat.START_Convert;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return df == JsonFormat.Shape.START_OBJECT;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (pattern == JsonFormat.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (pattern == JsonFormat.Shape.START_ARRAY) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return df == JsonFormat.VALUE_DEPRECATED;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tz == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (pattern == JsonFormat.START_ARRAY) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return df == JsonFormat.START_IL, format;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return df == JsonFormat.START_RETURN;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return df == JsonFormat. format;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return df == JsonFormat. ourFormat;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (pattern == null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return df == JsonFormat.START_OBJECT, format;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return df == JsonFormat.VALUE_FALSE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return df == JsonFormat.START_CAST;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return df == JsonFormat.Shape.FALSE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (pattern == JsonFormat.Shape.NONE) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return df == JsonFormat.VALUE_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return df == JsonFormat.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return df == JsonFormat.START_ format;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return df == JsonFormat.TypFormat;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return df == JsonFormat.VALUE_LF;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return df == JsonFormat.START_TRUE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (pattern == JsonFormat.Shape.START) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return df == JsonFormat.efficientValue;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return df == JsonFormat.START_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return df == JsonFormat.VALUE_EMBEDDED_MATCH;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return df == JsonFormat.Shape.START_ARRAY;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (pattern == JsonFormat.Shape) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (pattern == JsonFormat.Shape.THIS) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return df == JsonFormat.START_CACHE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return df == JsonFormat.START_LF;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (pattern == JsonFormat.Shape.ARRAY) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return df == JsonFormat. if (formatISO) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return df == JsonFormat.DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return df == JsonFormat.START_CHARACTER;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return df == JsonFormat.VALUE_EXTECTED;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (pattern == JsonFormat.Shape.START_DUPPER_PROPERTY) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return df == JsonFormat.START_TICK_UNIT;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return df == JsonFormat.START_IL;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return df == JsonFormat.forFormat;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return df == JsonFormat.START_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return df == JsonFormat.Shape.NONE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return df == JsonFormat.Shape.FollowFormat;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (pattern == JsonFormat.Shape.FALSE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return df == JsonFormat.START_EXPR_VALUE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return df == JsonFormat.START_DUPLICATE_FALSE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return df == JsonFormat.START_Overrides;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return df == JsonFormat. if (tz) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return df == JsonFormat.UTF8) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return df == JsonFormat.Shape.OBJECT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return df == JsonFormat.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (other == null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return df == JsonFormat.DRAW;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return df == JsonFormat.NONE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return df == JsonFormat.START_LEN;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return df == JsonFormat.FIELD_FALSE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return df == JsonFormat.START_OK;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return df == JsonFormat.START_EXTECTED;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return df == JsonFormat.START_EXTENDED;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return df == JsonFormat.START_iso, format;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return df == JsonFormat.Shape.THIS, format;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (pattern == JsonFormat.Shape.UNKNOWN) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return df == JsonFormat.VALUE_EXPR_INSTANCE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (pattern == JsonFormat.Shape.START_PER_PROPERTY) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return df == JsonFormat.Shape.START_FALSE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return df == JsonFormat.efficients, format;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return df == JsonFormat.START_getCurrent;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return df == JsonFormat.START_ idea;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return df == JsonFormat.UNKNOWN;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return df == JsonFormat.START_DUPLICATE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return df == JsonFormat.Shape.START_OBJECT, format;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (pattern == JsonFormat.Shape.START_OK) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return df == JsonFormat.VALUE_Convert;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (pattern == JsonFormat.Shape.OK) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return df == JsonFormat.START_ findFormat;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return df == JsonFormat.START_EXTENDS;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return df == JsonFormat.FASTRACT;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return df == JsonFormat.START_getConnection;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return df == JsonFormat.START_parsed;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_formatISO8601 == null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (property != null) { JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format != null) { // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) { TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this;",
        "fixed_line": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky.. // First: custom pattern will override things if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } // Otherwise, need one of these changes: final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); // Jackson's own `StdDateFormat` is quite easy to deal with... if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } // 08-Jun-2017, tatu: Unfortunately there's no generally usable // mechanism for changing `DateFormat` instances (or even clone()ing) // So: require it be `SimpleDateFormat`; can't config other types if (!(df0 instanceof SimpleDateFormat)) { // serializers.reportBadDefinition(handledType(), String.format( serializers.reportMappingProblem( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { // Ugh. No way to change `Locale`, create copy; must re-crete completely: df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); } /* /********************************************************** /* Accessors"
    },
    "Bears-234": {
        "fixes": [
            {
                "k": 1,
                "patch": "BigDecimal s.setreferenced = valParent;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "BigDecimal s.setreferenced = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "BigDecimal BigDecimal s.set BLOCK = valParent;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "BigDecimal s.setreferenced = valParent.find();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "BigDecimal s.setPaint = valParent;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "BigDecimal s.setreferenced = BigDecimal;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "BigDecimal BigDecimal.set BLOCK = valParent.find();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR(oldName);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "BigDecimal s.set BLOCK = valParent;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "BigDecimal s.set = valParent;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "BigDecimal s.set BLOCK BLOCK = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "BigDecimal BigDecimal s.setPaint = valParent;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "BigDecimal s.set BLOCK BLOCK = BigDecimal;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "BigDecimal s.setFalse = valParent;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "BigDecimal s.setreferenced = QName.find();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "BigDecimal BigDecimal s.set = valParent;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "BigDecimal BigDecimal.set BLOCK = valParent;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "BigDecimal BigDecimal s.set BLOCK BLOCK = valParent;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "BigDecimal s.setav = BigDecimal.findATOR(invocation);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "BigDecimal BigDecimal s.setreferenced = valParent;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "BigDecimal s.setPaint = valParent.find();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "BigDecimal s.set BLOCK BLOCK = valParent;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "BigDecimal BigDecimal s.set BLOCK BLOCK = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "BigDecimal s.setav = BigDecimal.findATOR(oldName);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR(invocation);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findProperties();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "BigDecimal BigDecimal s.setPaint = valParent.find();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "BigDecimal.set BLOCK = valParent.find();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "BigDecimal s.set BLOCK = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "BigDecimal BigDecimal s_0 = valParent.set();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findFIRST;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "BigDecimal BigDecimal s.setav = valParent;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "BigDecimal s.setav = valParent;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "BigDecimal s.setav =char)(divNames;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "BigDecimal s.set BLOCK = BigDecimal;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "BigDecimal BigDecimal s.set BLOCK = valParent.find();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "BigDecimal BigDecimal s.setreferenced = valParent.find();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR(referenced);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "BigDecimal BigDecimal s.setav =char)(divNames;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "BigDecimal BigDecimal s.setreferenced = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "BigDecimal BigDecimal s.setreferenced = BigDecimal.findATOR(oldName);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "BigDecimal BigDecimal s_0 = valParent.find();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "BigDecimal s_0 = valParent.set();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findProperty(propName);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR(stream);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "BigDecimal s.setblock = valParent;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "BigDecimal s.setFalse = valParent.find();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "BigDecimal BigDecimal s.setav = valParent.find();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR(propName);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "BigDecimal s.setav = BigDecimal.findFIRST;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "BigDecimal BigDecimal sineTransform = valParent;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "BigDecimal BigDecimal s.setav = BigDecimal.findATOR(oldName);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "BigDecimal s.setreferenced =char)(divNames;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "BigDecimal BigDecimal.set BLOCK BLOCK = valParent.find();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "BigDecimal BigDecimal s.setav = BigDecimal.findATOR(invocation);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "BigDecimal BigDecimal.set BLOCK BLOCK = valParent;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "BigDecimal BigDecimal s.set BLOCK BLOCK = BigDecimal;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "BigDecimal BigDecimal s.set BLOCK = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "BigDecimal s.set BLOCK =char)(divNames;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "BigDecimal BigDecimal s.setreferenced = QName.find();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "BigDecimal s.setav = BigDecimal.findProperty(propName);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "BigDecimal.set BLOCK = valParent;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR(newName);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "BigDecimal BigDecimal s.set BLOCK =char)(divNames;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "BigDecimal s.set BLOCK BLOCK = BigDecimal.findATOR(invocation);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "BigDecimal s.setav = valParent.find();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "BigDecimal.set BLOCK BLOCK = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "BigDecimal s.setperiod = valParent;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "BigDecimal BigDecimal.set BLOCK BLOCK = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "BigDecimal s.set BLOCK BLOCK = BigDecimal.findATOR(oldName);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "BigDecimal sineTransform = valParent;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "BigDecimalstate.setcy(oldName);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "BigDecimal BigDecimal s.setblock = valParent;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "BigDecimal s.set BLOCK = BigDecimal.findATOR(invocation);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "BigDecimal BigDecimal s.set = valParent.find();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "BigDecimal s.set BLOCK = valParent.find();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "BigDecimal.set BLOCK BLOCK = valParent;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "BigDecimal s.setav = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findProperties(oldName);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR(Bin);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "BigDecimal s.set = valParent.find();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "BigDecimal BigDecimal s =setav;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "BigDecimal BigDecimal sineTransform = strings.find( ASS);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "BigDecimal BigDecimal s.set BLOCK BLOCK = BigDecimal.findATOR(oldName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "BigDecimal s.setav = BigDecimal.findATOR(Bin);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "BigDecimal.set BLOCK BLOCK = valParent.find();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "BigDecimal s.setav = BigDecimal.findATOR(invocations);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "BigDecimal BigDecimal s_0 = valParent.set {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "BigDecimal BigDecimal s() {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "BigDecimal BigDecimal s.set BLOCK BLOCK = BigDecimal.findATOR(invocation);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "BigDecimal BigDecimal s.setreferenced = BigDecimal.findATOR(invocation);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "BigDecimal BigDecimal s.set BLOCK = BigDecimal;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "BigDecimal s.setperiod = valParent.find();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "BigDecimal BigDecimal s.set BLOCK = BigDecimal.findATOR(invocation);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "BigDecimal BigDecimal s.setav = BigDecimal.findFIRST;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "BigDecimal BigDecimal s.setreferenced = BigDecimal;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "BigDecimalited = BigDecimal.find();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR( startIndex);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findfindATOR(oldName);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "BigDecimal s.setreferenced = BigDecimal.findATOR(ung);",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": ""
    },
    "Bears-183": {
        "fixes": [
            {
                "k": 1,
                "patch": "return foundAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return out;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this.entityAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return firstAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return info.entityAllClass, null, null);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return firstAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return firstAllClass, null, null);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return insnClass, pageable, null);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return oldAllClass, null, null);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return mAllClass, rowableClass, null);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this.entityAllClass, null, null);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "returnfirstAllClass, null, null);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return mAllClass, anable, null);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return nullAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this.outAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "returnleftAllClass, null, null);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return insnClass, pageable, null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnfirstAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return foundAllClass, pageable, null;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return EMPTY_BYTE_ARRAY, null, null);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return firstAllClass, pageable, null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return sizeAllClass, null, null);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return ArrayAllClass, null, null);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returniterAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return asAllClass, null, null);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return mAllClass, BEable, null);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return info.entityAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return classNameAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return firstAllClass, page, null);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return insnClass, null, pageable);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return sizeAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return insertClass, null, pageable);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return mAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return addItemAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return this.outAllClass, pageable, null, null);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return this.outAllClass, pageable, null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "returnasAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return oldAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "returnFromClass, pageable, null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this.sourceClass, null, pageable);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return pageAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return nextAllClass, null, null);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return FeatureAllClass, null, null);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "returnleftAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return parentAllClass, null, null);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "returnatAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return foundAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return data;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this.outAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return foundAllClass, null, null);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return insertAllClass, null, null);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return displayAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return parentAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return Token.entityAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return pageAllClass, nameable, null);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this.entityClass, null, pageable);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return Token.ERRORAllClass, null, null);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return displayAllClass, null, null);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return queryAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this.entityAllClass, null, pageableClass);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "returnasAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "returnHeadAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "returniterAllClass, null, null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return mAllClass, null, null);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return0000AllUnknownClass, null, pageable);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return mAllClass, writtenable, null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return Token.entityAllClass, null, null);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this.sourceClass, pageable, null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return asAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return firstAllClass, null, pageableValues);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "returnfirstAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "returnHeadAllClass, null, null);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return firstAllClass, null, pageable != null);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "returniterAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return firstClass, pageable, null);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this.sourceClass, pageable, null);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "returnprevAllClass, pageable, null);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return Token.ERRORAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return mAllClass, JClass, null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "returniterAllClass, output, null);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return ArrayAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "returnbufferAllClass, null, pageable);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "returnasAllClass, page, null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return0000AllUnknownClass, null, null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return foundAllClass, page, null);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "returnfirstClass, null, pageable);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return classesClass, null, pageable);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return accessClass, nameable, null);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return replaceAllClass, null, null);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return insertClass, null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return firstAllClass, null, pageableClass);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return foundAllClass, null, pageableValueClass);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return mAllClass, null, pageable != null);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return mAllClass, style, null);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return sizeAllClass, null, pageable != null);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return mAllClass, anable, null, null);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.outAllClass, null, null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return mAllClass, rowableClass, null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return insnClass, page, null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return FieldsAllClass, output, null);",
                "identical": false
            }
        ],
        "buggy_line": "return queryAll(entityClass, pageable, null);",
        "fixed_line": ""
    },
    "Bears-95": {
        "fixes": [
            {
                "k": 1,
                "patch": "return entity != null && !entity.getType().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return entity != null && !entity.getTypeFactory;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return entity != null && !entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return entity != null && !entity.getTypePackage.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return entity != null && !entity.getTypeParameters.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return entity != null && !entity.getType().startsWith(\"/.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return entity != null && !entity.getType().startsWith(\".\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return entity != null && !entity.getType().startsWith(\"/.get .startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return old != null && !entity.getType().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return entity != null && !entity.getType().startsWith it.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.length != 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return entity != null && !entity.getType().startsWith(\" .Int.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return entity != null && !entity.getTypeFactory.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return entity != null && !entity.getType(0).getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.length != null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.class;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return entity != null && !entity.getTypeDesc.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return entity != null && !entity.getType().startsWith.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.new .util.class;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.getName()+\", str);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return entity != null && !entity.getTypeBuilder.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.new .\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return entity != null && !entity.getType().startsWith XML.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return entity != null && !entity.getType().startsWith(\"[.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.new .util.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.modifiers);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return entity != null && !entity.getType().startsWith(\" \")).get .\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return entity != null && !entity.getType().startsWith(\"\\.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.modifiers != null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return entity != null && !entity.getTypeFactorylocal.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return entity != null && !entity.getTypeensure.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return entity != null && !entity.getType().startsWith(\"/.get .\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return entity != null && !entity.getType().startsWith(\" Type.getPackage\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return entity != null && !entity.getType().startsWith(\"/.get .util.class;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return entity != null && !entity.getType().startsWithzones.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return entity != null && !entity.getType().startsWith(\" \")).get .util.class;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.new .io.class;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return entity != null && !entity.getType().startsWith(\"<.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return entity != null && !entity.getTypeWriter.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return entity != null && !entity.getType().startsWith(\"-.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return entity != null && !entity.getType() == null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return entity != null && !entity.getTypeFactorys.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return entity != null && !entity.getType().startsWith cd.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return entity != null && !entity.getType BASE.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return entity != null && !entity.getType().startsWith(\" .io.getPackageListener.class;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return entity != null && !entity.getType().startsWithATER.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.OBJECT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return entity != null && !entity.getTypeencod.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.new .io.class) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.modifiers;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return entity != null && !entity.getType().startsWith(\" Type.get .\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return entity != null && !entity.getType().startsWith(\" .startsWith.getPackage\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return entity != null && !entity.getType().startsWith(\" .io.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return entity != null && !entity.getType().startsWith(\" .startsWith\" + !entity.getName();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return entity != null && !entity.getType().startsWith(\" .io.class;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return entity != null && !entity.getType().startsWith(\" .suffix;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return entity != null && !entity.getType().startsWith(\" .Int.length != 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.height;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return entity != null && !entity.getType().startsWith(\" Type.getName()+\", str);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return entity != null && !entity.getType().startsWith(\" .startsWith);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.\"))) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return entity != null && !entity.getType().startsWith(enum.getName;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return entity != null && !entity.getType().startsWith(\" .constructor.getPackage\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return entity != null && !entity.getType().startsWith(\" .lang.getName()+\", str);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return entity != null && !entity.getType().startsWith(\" .startsWith.getName()+\", str);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.length != 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return entity != null && !entity.getType().startsWith(\" .startsWith(0);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return entity != null && !entity.getTypeParameters.getName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.new .util.length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.data;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util. text;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return entity != null && !entity.getType().startsWith(\"/.get .util.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return entity != null && !entity.getType().startsWith(\" .ulator\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return entity != null && !entity.getType().startsWith(\" .io.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return entity != null && !entity.getType().startsWith(\".Floor;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.BUFFER;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return entity != null && !entity.getType().startsWith(\" .awt.get .util.class;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return entity != null && !entity.getType().startsWith(\" .io.getName()+\", str);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return entity != null && !entity.getType().startsWith(\" Type.get .util.class;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return entity != null && !entity.getType().startsWith(\" . name;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return entity != null && !entity.getType().startsWith(\" .io.getPackage.class;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return entity != null && !entity.getType().startsWith(enum.getName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.new Type.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return entity != null && !entity.getType().startsWith(\"/.length == 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util. b.get .\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return entity != null && !entity.getType().startsWith(\"/.get .startsWith(\" .util.length != null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.new .util.length != 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return entity != null && !entity.getType().startsWith(\" .util.length != 0 .util.class;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return entity != null && !entity.getType().startsWith(\" .cycle\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return entity != null && !entity.getType().startsWith(\" .io.getPackageListener;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return entity != null && !entity.getType().startsWith(\" .dd.get .util.class;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return entity != null && !entity.getType().startsWith(\" .Int != null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return entity != null && !entity.getType().startsWith(\" .constructor.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return entity != null && !entity.getType().startsWith(\" .math.get .util.class;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return entity != null && !entity.getType().startsWith(\" .awt.get .\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return entity != null && !entity.getType().startsWith(\" .startsWith it.get .\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return entity != null && !entity.getType().startsWith(\"/.get 2 != null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return entity != null && !entity.getType().startsWith(\" .awt.get .util.class) {",
                "identical": false
            }
        ],
        "buggy_line": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\"java\");",
        "fixed_line": ""
    },
    "Bears-124": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number text = supportedd+\")).number;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number text text = supportedd+\")).number; // the current/d is negative",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number text = supportedd+\")).number; // the current/d is negative",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number text text = supportedd+\")).number;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number text =noned+\") // w).number;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number text text = supportedd+\")).number; // the current instruction",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number SAME_\") = type+d;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number text = supportedd+\")).number; // the current instruction",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number text =noned+\")\"; // w/d",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number SAME_\") = type+\") // w).number;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number text =CONTd+\")\"; // the current instruction",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberProgress = type+\") // w).number;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number text =noned+\")).number;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number text text = supportedd+\")).number; // the current pad w/d is negative",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number text = tmpd+\")Begin;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number text text = tmpd+\")Begin;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberBigd = type+\") for // tii+\")\";",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number text = tmpd+\")).number;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number text text = supportedd+\")).number; // the current negative",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number text text = supportedd+\")).number; // the t is negative",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number text text = supportedd+\")).number; // the current gap is negative",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number text text = tmpd+\")).number;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number text text = supportedd+\")).number; // the matrix is negative",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number text text =noned+\") // w).number;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"d surrogate pair:AGEd+\")).number; // the current/d is negative",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number text =noned+\")).number; // the current/d is negative",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberBigd = type+\")).number;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number text text =noned+\")).number;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number text = tmpd+\")).number; // the current/d is negative",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number textNumber(\"0\") // w).number;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number <-d = t+\") // w).number;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number('\\d:AGEd+\")).number = text;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number text = supportedd+\")).number; // the current gap is negative",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number text = supportedd+\")).number; // the matrix is negative",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number text = supportedd+\")).number; // the t is negative",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number text = supportedd+\") 0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number text = ge + 1; // should never happen",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number text text = supportedd+\") 0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number text = supportedd+\")).number; // the current negative",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"d surrogate pair:AGEd+\")).number = d\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number text =noned+\")).number; // the current instruction",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberworkd = type+\")).number;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number text text = supportedd+\")Begin; // the matrix is negative",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberBigd = type+\")\";",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number text text = supportedd+\")).number; // the current order",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number text text = supportedd+\") x;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number text text = supportedd+\")).number; // the current quad",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number text = tmpd+\")Begin; // now is negative",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number text text = tmpd+\")).number; // the current/d is negative",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number text text =noned+\")).number; // the current/d is negative",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number text = supportedd+\") 0); // we didn't really modify it startingd",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number text text =noned+\")).number; // the current instruction",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number text text = supportedd+\")Begin; // the current instruction",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberworkd = type+\") for \"+number;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number text text = tmpd+\")Begin; // now is negative",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number text text = supportedd+\")).number; // now is negative",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number text text =noned+\")\"; // w/d",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number text = tmpd+\")).number; // the current instruction",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number text text = supportedd+\")Begin;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number text text = supportedd+\")).number; // the current is negative",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number('\\d:AGEd+\")).number = d;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberBigd = type+\") for // w;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number text = supportedd+\")).number; // the current order",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number text = supportedd+\")\"; // the current instruction",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberBigd = type+\")Begin;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number text text = supportedd+\")).number; // the current/d",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number text = supportedd+\") x;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number text = w;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number text text = tmpd+\")).number; // the current instruction",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number text text = supportedd+\")).number; // the polygon series",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number text = supportedd+\")).number; // the current quad",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number text text = tmpd+\")Begin; // now on the current instruction",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number text = supportedd+\") 0); // we didn't really modify it starting at begin/d",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number text text = tmpd+\")Begin; // the current instruction",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number text = tmpd+\")Begin; // the current instruction",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number text text = supportedd+\")).number; // the series",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number text =CONTd+\")\"; // the current order",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number text = supportedd+\")).number; // the current is negative",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number text = supportedd+\")\"; // w/d",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"d surrogate pair:AGEd+\")).number; // the current instruction",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number text text = supportedd+\") 0); // we didn't need 6",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number text text = supportedd+\")Begin; // now is negative",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number('\\d:AGEd+\")).number;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"d surrogate pair:AGEd+\")).number;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"number\" + dtd+\") // w).number;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number text = supportedd+\")Begin;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number text = supportedd+\")\"; // we didn't really here",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number text =noned+\") // current order",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number text text = supportedd+\")).number; // the polygon series...",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number text = supportedd+\") 0); // we didn't need 6",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number text text = supportedd+\")\"; // the current instruction",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberOfd PRI(\"number here here here here here here/d+\") // the current instruction",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number text text = supportedd+\")).number; // the current gap",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number text text = supportedd+\") 0); // we didn't really modify it startingd",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfd PRI(\"number here here here here here here here/d+\") // the current instruction",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number text = supportedd+\")Begin; // the current instruction",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number text = tmpd+\")Begin; // now on the current instruction",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberBigd = type+\") 0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number text = supportedd+\")).number; // the current/d",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(d+.d+)\").text(\"+\") // latitude .number(\"(d+.d+)\").text(\"+\") // longitude",
        "fixed_line": ""
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"roppppo\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(\"ropppp:.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"roppppo;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"ropppp.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"roppo\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"roppppo.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"ropppp:Compiler.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(\"ropppp:.Session.SessionData;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"ropppp.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"ropppp: remove.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"roppppo.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"roppppppo\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"ropppp:.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"roppppList.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"ropppp\".Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"ropppp:.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"ropppppp:.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"ropppp: : types.Session.SessionData;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"ropppp:.SessionData\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(\"ropppp.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"roppppo.Session.SessionData;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"ropppp:Compiler.SessionData\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"ropppp.Session.SessionData;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"ropppp:, White.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"ropppp.SessionData\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"ropppp:, White.Session.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"ropppp:Compiler.Session.SessionData;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"ropppp\".Session.SessionData\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"ropppp: % LENGTH.Session.SessionData;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"ropppp array.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"ropppp: greatestList.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"ropppp: remove.SessionData\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"ropppp, White.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"ropppp: remove remove.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"ropppp:OrdinalList.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"ropppp, White.Session.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"roppppppo.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"roppppo.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"ropppp: remove) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"ropppp.Sessiono\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"ropppp.Session.=session;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(\"ropppp---.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"ropppp:, White.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"roppppList.SessionData\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"ropppp\".equals(h.class)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(\"ropppp.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"ropppp:.Session.SessionData &&pp.SessionData;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"roppppo.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"ropppp.Session.ernaryo\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"ropppp:normalMap.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"ropppp on.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"ropppp: path.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"ropppp:, White.Session.Session.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"ropppp: : types.Session.Session.SessionData;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"ropppp.Session.\"]\";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"ropppppp:Compiler.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"ropppppp.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"ropppp:Compiler.Session.=session;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"ropppp:Compiler.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"ropppp: % LENGTH.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"ropppppp:.Session.SessionData;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"ropppp) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"ropppp:Compiler.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"ropppp:.Session.=session;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"roppppo.Session.\"]\";",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"ropppp, White.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"roppppList.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"ropppp: % LENGTH.Session.Session.SessionData;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"ropppp: now.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"ropppp, White.Session.Session.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"ropppp mut.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"roppppo.SessionData\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"ropppp: remove.Session.SessionData;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"rosepp.Sessiono\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"ropppp: remove.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"ropp.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"ropppp:.Session.ernaryo\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"roppppo.Session.=session;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"ropppppp:.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"ropppp aliasList.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"roppppppo.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"ropppp:.SessionData;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"ropppp:normalMap.SessionData\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"ropppp: remove remove.SessionData\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"roppppPattern.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"ropppp: remove.Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"ropppp array.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"ropppp: remove;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"ropppp: greatestList.SessionData\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"roppppppo;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"ropppp builder.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"ropppp bounds.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"ropppp:.Session.Session.SessionData;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"ropppp:.Session.=session.Session.SessionData;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"ropppp:.Session. optimalData\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"ropppp:.=session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"ropppp.Session.=session.SessionData;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"ropppp mod.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"ropppp:Compiler.Session.=session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"roppppo.Session.ernaryo\");",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": ""
    },
    "Bears-119": {
        "fixes": [
            {
                "k": 1,
                "patch": "String type = buf, off, len);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "String type = buf, offset, len);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "String type = buf.indexOf(';",
                "identical": false
            },
            {
                "k": 4,
                "patch": "String type = buf.indexOf('\\n, start, len);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "String type = cw.indexOf(';",
                "identical": false
            },
            {
                "k": 6,
                "patch": "String type = buf, 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "String type = iText.indexOf(',, start, len);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "String type = buf.indexOf(bs, start, len);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "String type = buf.indexOf(bs, default, 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "String type = cw.indexOf('\\n, start, len);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "String type = buf.indexOf(',, 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "String type = buf.indexOf(',, start, len);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "String type = iText;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "String type = decodeX,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "String type = decodeX,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "String type = cw.indexOf(',, INVALID_FLAG, buf, defaultAD);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "String type = decodeX,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "String type = decodeX,,,,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "String type = decodeX,,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "String type = decodeX,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "String type = decodeX,,,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "String type = decodeX,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "String type = buf.indexOf(bs, 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "String type = decodeX,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "String type = decodeX,,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "String type = decodeX,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "String type = decodeX,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "String type = decodeX,,,,,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "String type = decodeX,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "String type = decodeX,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "String type = decodeX,,,,,,,,,,,,,, 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "String type = decodeX,,,,,,,,,,,,,,, public);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "String type = decodeX,,,,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "String type = decodeX,,,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "String type = decodeX,,,,,,,,,,,,,, public);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "String type = decodeX,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "String type = decodeX,,,,,,,,,,,,,,, 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "String type = decodeX,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "String type = decodeX,,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "String type = decodeX,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "String type = decodeX,,,,,,,,,,,,,,, renderer);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "String type = decodeX,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,Transformer);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "String type = decodeX,,,,,,,,,,,,,,Transformer);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "String type = decodeX,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "String type = decodeX,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "String type = decodeX,,,,,,,,,,,,,Transformer);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "String type = check.substring(0, default, end);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "String type = decodeX,,,,,,,,,,,,,,, CollectionInfo);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,, public);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "String type = decodeX,,,,,,,,,,,,, public);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "String type = decodeX,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "String type = decodeX,,,,,,,,,,,,,, CollectionInfo);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "String type = decodeX,,,,,,,,,,,,, 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "String type = decodeX,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,Transformer);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "String type = iText.indexOf(',, 0,stream.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,, 1LLEGAL_PROTOTYPE, default: return 0;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "String type = decodeX,,,,,,,,,,,,, CollectionInfo);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "String type = decodeX,,,,,,,,,,,,,,, 1LLEGAL_PROTOTYPE, default: return 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,, CollectionInfo);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,, renderer);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "String type = decodeX,,,,,,,,,,,,, 1L);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "String type = decodeX,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "String type = decodeX,,,,,,,,,,,,,,, 1LLEGAL_NAME, buf, defaultAD);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,, 1LLEGAL_NAME, buf);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "String type = decodeX,,,,,,,,,,,, 1L);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "String type = decodeX,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,,,ir);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,,,,,,Usage);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "String type = decodeX,,,,,,,,,,,,, 1LLEGAL_NAME, buf, defaultAD);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,, public);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "String type = decodeX,,,,,,,,,,,Transformer);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "String type = decodeX,,,,,,,,,,,,,, 1LLEGAL_NAME, buf, defaultAD);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,,,,, 1LLEGAL_NAME, label);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "String type = decodeX,,,,,,,,,,,,,,,, 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "String type = decodeX,,,,,,,,,,,,,, used);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "String type = decodeX,,,,,,,,,,,,Transformer);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "String type = decodeX,,,,,,,,,,,,,, 1L);",
                "identical": false
            }
        ],
        "buggy_line": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart)); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress);",
        "fixed_line": "switch (marker) { case \"*\": String sentence = buf.toString(StandardCharsets.US_ASCII); int typeStart = sentence.indexOf(',', sentence.indexOf(',') + 1) + 1; int typeEnd = sentence.indexOf(',', typeStart); if (typeEnd > 0) { String type = sentence.substring(typeStart, typeEnd); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress); } } else { return null; } case \"$\": return decodeBinary(buf, channel, remoteAddress); case \"X\": default:"
    },
    "Bears-245": {
        "fixes": [
            {
                "k": 1,
                "patch": "return modifiers;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return modifier;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either block (modifiers; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either : modifiers; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final Map<() { return _modifiers; } //modifiers, modifiers; must either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either either = modifiers; }",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": ""
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position += i + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position += i * 4;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position = i + 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position += i * 4 + 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position += i * 16 + for (index; i < Short.length; i++) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position += i * 16 + for (index + 1; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position += i * 4 / total;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position += i * 16 + for (int i=0; i < Short.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position += i * 16 + for (int i=0; i < means.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position += i * 16 + for (int i=0; i < Short.length; i++) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position += i * 16 + for (index; i++) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position += i * 16 + for type; i < Short.length; i++) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position += i * 16 + for (index; i < Short.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position += i * 16 + for (int idesc, index + 1; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position += i * 16 + for (index; i < Integer.MAX_VALUE; i++) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position += i * 16 + for (index + 1; i < Short.length; i++) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position += i * 16 + for (int i=0; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position += i * 16 + for (int i + 1; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position += i * 16 + for (int i = 0; i < AVERAGE; i++) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position += i * 16 + for (int i = 0; i < means.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position += i * data[index + 1];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position += i * 16 + 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position += i * 16 + for (int i++) - 1; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position += i * 16 + for (int i=0; i <before.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position += i * 16 + for (index + 1; i < 0.0List.length; i++) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position += i * 16 + for (index; i < means.length; i++) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position += i * 16 + for (int i=0; i < converter.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position += i * 16 + for (int i=0; i < AVERAGE; i++) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position += i * 16 + for (int iFieldType + 1; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position += i * 16 + for (index + 1; i < Integer.MAX_VALUE; i++) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position += i * 10) + 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position += i * 16 + for (int i=0; i < A.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position += i * 16 + for (int i=0; i < source.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position += i * 16 + for (int i=0; i < Integer.MAX_VALUE; i++) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position += i * 16 + for (int i=0; i < converter.length; i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position += i * 16 + for (int i=0; i < Integer.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position += i * 16 + for (int i=0; i < documentation.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position += i * 16 + for (index + 1; i < 0.0Count; i++) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position += i * 16 + for (index + 2 - 1; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position += i * 16 + for (int i = 0; i < converter.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position += i * 16 + for (int i = 0; i < means.length; i++) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position += i * 16 + for (int i=0; i < means.length; i++) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position += i * 16 + 0, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position += i * 16 + for (int i << 16; i < Short.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position += i * 16 + for (index + 1; i < 0; i++) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position += i * 16 + for type + 1; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position += i * 16 + Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position += i * 16 + for (int i=0; i < 0.0Count - 1; i++) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position += i * 16 + for (int i << 16; i < Short.length; i++) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position += i * 16 + for (index + 1; i < documentation.length; i++) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position += i * 16 + value.length - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position += i * 16 + for (int i=0; i < 0.0Count; i++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position += i * 16 + for (int i + 1; i < Short.length; i++) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position += i * 16 + for (index; i < names.length; i++) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position += i * 16 + for (int i=0; i < A.length; i++) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position += i * Integer.MAX_VALUE, index + 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position += i * 16 + for (index; i < means.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position += i * 16 + for (int i6[index++] - 1; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position += i * 16 + for (index; i < names.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position += i *8)[index + 1];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position += i * 16 + for (index + 1; i < Integer.length; i++) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position += i * Integer.MAX_VALUE, index + 2 - i;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position += i * 16 + for (int i6[index++] - 1; i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position += i * -1 + 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position += i * 16 + for (int i = 0; i < typeCount; i++) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position += i * 16 + for (int idesc, index + 1; i < 0.0List.length; i++) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position += i * 16 + for (int idesc, index + 1; i < Short.length; i++) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position += i * 16 + for (index + 1; i < 0.025Count; i++) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position += i * 16 + for (int idesc, index + 1; i < 0.025; i++) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position += i * attributes.length + 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position += i * 16 + rendererCount - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position += i * 16 + for (int i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position += i * 16 + for type; i < Short.length - 1; i++) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position += i * 16 + for (int i + 1; i < 0.0Count; i++) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position += i * 16 + for (int i=0; i < documentation.length; i++) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position += i * 16 +absolute.length - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position += i + id[index - 1].getNameShort(type, index * 16;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position += i * 16 + for (index + 1; i < 0.025; i++) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position += i * 16 + for (index; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position += i * 16 + for (int i << 16; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position += i * 16 + for (int i=0; i <before.length; i++) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position += i * 16 + this.data[index++] - index;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position += i * 16 + for (int i = 0; i < typeCount - 1; i++) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position += i * 16 + for (int idesc, index + 1; i < AVERAGE; i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position += i + id[index - 1].parseShort 0.0] * 16;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position += parser[index + i - 1].parseShort 0.0] * index;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position += i * 16 + for (int i=0; i < source.length; i++) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position += i * 16 + for (int i = 0; i < converter.length; i++) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position += data[index + 1].parseShort 0.0] * 16;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position += i * 16 + for type; i < Short.length - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position += i * 16 + for (int i = 0; i < 0.0; i++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position += parser[index + i - 1].parseShort 0.0] * 16;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position += data[index + 1].getNameShort(index, value * 16;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position += i *ELEMENT.length - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position += iText[index + i - 1].parseShort 0.0] * 16;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position += index * data[index + i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position += i * 16 + for (int i + 1; i < 0.025Count; i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position += i * | 0.02525252525ers[index++] & 0xFF;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position += i * 16 + for (int idesc, index + 1; i < 0.0Count; i++) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position += i * 32,S[index + 1];",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": ""
    },
    "Bears-222": {
        "fixes": [
            {
                "k": 1,
                "patch": "List<E> v = 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "List<E> v = n.get(i + 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "List<E> v = n.next;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "List<E> v = n.get(i;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "List<E> v = other.next;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "List<E> v = n.get(i);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "List<E> v = n;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "List<E> v = d.get(i);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "List<E> v = d.get(i;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "List<E> v = i;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (int j = 0; j < n; ++i) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "List<E> v = other.get(i);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (int j = 0; j < n; j++) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "List<E> v = 2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "List<E> v = translated.get(i);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "List<E> v = d.get(i + 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "List<E> v = n.getA;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "List<E> v = final ArrayList<E> v.get(i);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "List<E> v = other.get(i;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "List<E> v = other.i;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "List<E> v = final List<E> v.get(i);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "List<E> v = translated.get(i + 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "List<E> v = asAdj;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "List<E> v = other.value;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "List<E> v = y.get(i);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "List<E> v = final List<E> v.get(i + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "List<E> v = final ArrayList<E> v.get(i;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "List<E> v = n.get(r.next;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "List<E> v =terr.get(i;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "List<E> v = unknown.get(i);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "List<E> v =terr.get(i);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "List<E> v = y.get(i;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "List<E> v = final ArrayList<E> v.get(r.next;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "List<E> v = final ArrayList<E> v.get(i + 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "List<E> v = translated.get(i;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "List<E> v = entry.next;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "List<E> v = header.get(i;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "List<E> v = n.get(v - 1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (int j = 0; j < other.value; ++i) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "List<E> v = Array.get(i;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (i = 0; j < n; ++i) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "List<E> v = final ArrayList<E> v.get(n);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (i = 0; i < n;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "List<E> v = d.get(r.namespace;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "List<E> v = tr.get(i);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "List<E> v = Collections.get(i);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "List<E> v = final List<E> v.get(i;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "List<E> v = final ArrayList<E> v.next;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "List<E> v = Array.get(i);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "List<E> v = y.get(i + 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "List<E> v = d;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "List<E> v = final ArrayList<E> v.get(n;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "List<E> v = final ArrayList<E> v.get(r.oldestAt;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "List<E> v = d.get(n);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (int j = 0; j < other.get(i;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "List<E> v = n.getE> v;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "List<E> v = header.next;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "List<E> v = header.get(i);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (int j = 0; j < n; k += 2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "List<E> v = big.get(i);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "List<E> v = d.get(n;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "List<E> v = final ArrayList<E> v.get(r.next) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "List<E> v = _r.get(i);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "List<E> v = File.get(i);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "List<E> v =signature.get(i + 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "List<E> v = d.get(r.oldestAt;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "List<E> v =terr.get(i + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "List<E> v =Contents.get(i);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "List<E> v =pad.get(i);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (i = 0; j < n; j++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "List<E> v = d.get(r.next;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "List<E> v = final ArrayList<E> v.get(r.namespace;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "List<E> v =signature.get(i);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (int j = 0; j < other.value; j++) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "List<E> v = Collections.get(i + 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (int j = 0; j < other.get(n; ++i) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "List<E> v = n.get(v - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "List<E> v = n.get(i - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "List<E> v = final ArrayList<E>(target.next;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "List<E> v =XPath.get(i);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "List<E> v = n.get(r.next) - 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (i = 0; i < n; ++i) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "List<E> v = t.get(i);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "List<E> v = heap.get(i);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "List<E> v =w.get(i);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "List<E> v = tr.get(i + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "List<E> v = t;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "List<E> v = Node.get(i);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "List<E> v = other.get(i + 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "List<E> v =w.get(i;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "List<E> v = t.get(i;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "List<E> v = other.getA;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "List<E> v = colon.get(i);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "List<E> v = unknown.get(i;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "List<E> v = big.get(i;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "List<E> v =invalids.get(i);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (int j = 0; j < n; k++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "List<E> v = ai.get(i);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "List<E> v = n.value;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (int j = 0; j < other.get;",
                "identical": false
            }
        ],
        "buggy_line": "List<E> viAdj = adj.get(i); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { V v = ring.get(i); E e = adj.get(i).get(r);",
        "fixed_line": ""
    },
    "Bears-223": {
        "fixes": [
            {
                "k": 1,
                "patch": "import = v;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "importt.height;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "importt.internalProperty(prop.type;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "importt.internalProperty(prop.cache;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "importt. consumed.typ(dest, src.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "importt.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "importt.internalProperty(prop.type, importet;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "importt.internalProperty(prop.subtypes;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "importt.internalProperty(prop.finalValue;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "importt. consumed.typ(destType;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "importt. consumed.typ(dest, src.internalPropertyIndex;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "importt. possible;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "importt. consumed.typ(dest, src.internalPropertyWriter;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "importFactor.typ(dest, src.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "importt.internalProperty(prop.Major;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "importt.internalProperty(this, src.internalType;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "importt.internalProperty(prop.DateTime, importet;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "importt.ObjectMapper.typ(dest, src.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "importt.internal;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "importt.ired = v;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "importt. consumed.typ(sourceValue;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "importt.HasProperty(destType;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "importt.internalProperty(prop.innerType;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "importt.hasProperty(prop.internalPropertyType;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "importt. consumed.typ(dest, src.internalPropertyHandler;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "importt.internalProperty(dest, src.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "importt.internalProperty(prop.cache, importet;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "importt. consumed.typ(dest, src.internalPropertyType;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "importt.parameters;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "importt.height = v;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "importt.irdProperty(this.internalType;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "importt. consumed.typ(dest, src.internalProperty;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "importt.labels.typ(sourceValue;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "importt.before(destType;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "importt. consumed.typ(dest,STRUCTOR;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "importt.hasProperty(prop.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "importt.internalProperty(dest,STRUCTOR;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "importt.internalProperty(this.internalType;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "importt. consumed.typ(dest, src.internalProperty);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "importt.internalProperty(prop.>\\Type;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "importt.internalProperty(propertyName;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "importt.SuperTypes(sourceValueMethod;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "importt.relativePosition;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "importt.graphics;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "importt.ly;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "importt.internalProperty(prop.height;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "importt.internalProperty(prop.subType;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "importt.internalProperty(prop.DateTime;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "importt. consumed.typ(dest, src.internalType;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "importt.internalProperty(prop.subClass;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "importt.irdProperty(prop.internalPropertyType;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "importt.internalProperty(dest, src.internalPropertyHandler;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "importt.internalProperty(prop.segments;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "importt.ObjectMapper.typ(dest, src.internalPropertyIndex;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "importt.internalProperty(dest, src.internalPropertyType;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "importt.hasProperty(prop.internalPropertyIndex;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "importt.internalProperty(transformValue;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "importt. patch = v;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "importt.internalProperty(prop.iterableType;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "importt.internalProperty(this.internalType, src.internalType;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "importt.internalProperty(this, src.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "importt.internalProperty(prop.cache, src.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "importt.internalProperty(prop.class;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "importt.hasProperty(prop.internalType;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "importt.internalProperty(sourceName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "importt.internalProperty(dest, src.internalPropertyIndex;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "importt.hasProperty(destType;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "importt.internalProperty(prop.upperBound;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "importt.irdProperty(prop.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "importt.internalProperty(prop.scope;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "importt.irdProperty(prop.internalPropertyIndex;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "importt.internalProperty(prop, importet;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "importt.HasPropertyHandler;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "importt.intersects.typ(destType;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "importt.intersects.typ(dest;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "importt.invocation;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "importt. rValue = v;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "importt.internalProperty(prop.types;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "importFactor.typ(dest, src.internalPropertyIndex;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "importt.SuperTypes(source.class;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "importt.internalProperty(this.internalType, src.internalPropertyIndex;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "importt.containsValue(Double.class;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "importFactor.typ(dest, src.internalPropertyWriter;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "importt. consumed.typ(dest, src.internalPropertytask;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "importt.internalProperty(dest, src.internalPropertyWriter;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "importt. consumed.typ(sourceName;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "importt.finish = v;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "importt.internalProperty(prop.subtitles;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "importt.HasProperty(dest,STRUCTOR;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "importt.internalProperty(prop.cache, src.internalPropertyIndex;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "importt.internalProperty(sourceName, parameters;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "importt. consumed.typ(dest,vanet;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "importt.intersect = v;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "importt.SuperTypes(destType;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "importt. consumed.typ(dest, src.internalPropertyWriter.denominator;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "importt.internalProperty(prop.Chunks;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "importt.HasPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "importt.internalPropertyWriter(dest, src.internalPropertyWriter.class;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "importt.numOccurrences;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "importt. consumed.typ(dest;",
                "identical": false
            }
        ],
        "buggy_line": "import io.vavr.Value; import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.spi.ConditionalConverter; import org.modelmapper.spi.MappingContext; import org.modelmapper.spi.PropertyInfo; /** * @author jstuecker * * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }",
        "fixed_line": "package com.github.julianps.modelmapper; import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.spi.ConditionalConverter; import org.modelmapper.spi.MappingContext; import org.modelmapper.spi.PropertyInfo; import io.vavr.Value; /** * @author jstuecker * <p> * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { if (context == null || context.getSource() == null) { return null; } final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); } }"
    },
    "Bears-249": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dep = new Clock;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dep = new Clock-1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dep = new ClockUnknown;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dep = new ClockStackTrace;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dep = new Clock center;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dep = new ClockSafeClass;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dep = new ClockDepScope;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dep = new Clock[0].dep;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dep = new ClockD.dep;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dep = new ClockDeprs;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dep = new ClockDep BeanDeserializer.dep;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dep = new ClockDep = new Clock;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dep = new ClockEncoder.dep;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dep = new ClockDep builder;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dep = new ClockDep\\\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dep = new ClockDep textBox;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dep = new ClockgetText;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dep = new ClockSafe;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dep = new ClockHex;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dep = new Clock24;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dep = new ClockDep = this.dep;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dep = new ClockDepPropertyHandler.dep;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dep = new ClockDepOnly;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dep = new ClockDepScope.dep;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dep = new ClockDepgp;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dep = new ClockDepData;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dep = new ClockDepVoid;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dep = new Clock Attributes;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dep = new ClockNoSideEffectCalls;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dep = new ClockClass;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dep = new ClockDeprant;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dep = new ClockOne;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dep = new Clock_0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dep = new ClockDepOTH;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dep = new ClockSafeClass.dep;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dep = new ClockDep mMax;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dep = new ClockDepCriteria;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dep = new ClockDep('-;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dep = new ClockDep onto;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dep = new ClockDep 77;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dep = new ClockDep thousands;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dep = new Clock ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dep = new ClockDepCapacity;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dep = new ClockDep;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dep = new ClockDep tricky;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dep = new ClockLiteral;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dep = new ClockTypeName;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dep = new ClockDep(2).dep;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dep = new ClockDep Provider;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dep = new Clock-1;[0];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dep = new ClockElse;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dep = new ClockUtf8;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dep = new ClockLEFT;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dep = new ClockUnknown);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dep = new ClockNoSideEffectSeen;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dep = new ClockDepCreation;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dep = new ClockDep coin;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dep = new ClockContaining;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dep = new ClockContent;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dep = new Clockraction;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dep = new ClockDep==;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dep = new ClockDepProvider;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dep = new Clock5];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dep = new ClockDep lhs;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dep = new ClockDep(2);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dep = new ClockSafeClass.dep);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dep = new Clockfactory;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dep = new Clock Accessible;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dep = new ClockCollection;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dep = new Clock-1;Box;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dep = new ClockDepGlobal;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dep = new Clock68;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dep = new ClockSolver;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dep = new Clockdesc;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dep = new Clock currFile;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dep = new Clockions;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dep = new Clock instant;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dep = new ClockScope;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dep = new Clock-1;Box.dep;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dep = new Clock Preconditions;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dep = new ClockDep =ots;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dep = new ClockTemplate;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dep = new ClockDep lhs);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dep = new ClockDep('[;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dep = new ClockVolume;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dep = new ClockDeprecationBox;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dep = new Clock \"/\";",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dep = new ClockDepProperty(ots);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dep = new Clock getCh;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dep = new Clock/**;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dep = new Clock27;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dep = new ClockDep = new ClockD.dep;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dep = new Clock how;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dep = new Clockday;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dep = new ClockSer;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dep = new Clockparser;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dep = new ClockEncoder;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dep = new Clockracket;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dep = new ClockDep seeingDep = new Clock;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dep = new Clockforce;",
                "identical": false
            }
        ],
        "buggy_line": "this.dep = new Clock<>(commitDepBox.dep);",
        "fixed_line": ""
    },
    "Bears-135": {
        "fixes": [
            {
                "k": 1,
                "patch": "int endIndex = beginIndex - startIndex;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int endIndex = buf.length - beginIndex;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int endIndex = buf.indexOf('\\n');",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int endIndex = startIndex + 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int endIndex = startIndexIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int endIndex = buf.length - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int endIndex = beginIndex - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int endIndex = buf.indexOf('\\n', startIndex;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int endIndex = startIndex + n;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int endIndex = endIndex - startIndex;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int endIndex = endIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int endIndex = startIndex + frame.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int endIndex = startIndex.indexOf('\\n');",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int endIndex = startIndex + _reader.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int endIndex = array.length - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int endIndex = buf.indexOf('\\n', pos - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int endIndex = startIndex + len;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int endIndex = startIndex startIndex + 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int endIndex = buf.indexOf('\\n', start);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int startIndexIndex = endIndex - startIndex;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int endIndex = buf.indexOf('\\n', startIndex - 2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int endIndex = buf.indexOf('\\n', cursor;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int endIndex = startIndexIndex - endIndex;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int endIndex = startIndex + _buffer.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int endIndex = buf.indexOf('\\n', startIndex - 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int endIndex = array.indexOf('\\n');",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int endIndex = startIndex + amount;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int endIndex = buf.indexOf('\\n', pos);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int startIndexIndex = endIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int endIndex = beginIndex - startIndex; // to check for label",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int endIndex = beginIndex % '\\n');",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int endIndex = buf.indexOf('\\n\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int endIndex = startIndex +.length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int endIndex = startIndex + amount - 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int endIndex = hashIndex - startIndex;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int endIndex = buf.indexOf('\\n' - startIndex;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int endIndex = array.indexOf('\\n', startIndex;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int endIndex = startIndexIndex - startIndex;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int endIndex = buf.length - beginIndex; // to check for label",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int endIndex = buf.indexOf('\\n', startIndex - startIndex;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int startIndex = endIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int endIndex = buf.indexOf('\\n', cwIndex - startIndex;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int endIndex = buf.indexOf('\\n', pos - startIndex;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int endIndex = startIndex.indexOf('\\n', pos - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int endIndex = startIndex.indexOf('\\n', startIndex;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int endIndex = _reader.indexOf('\\n');",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int endIndex =Str.length - beginIndex;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int endIndex = startIndex, buf.length - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int endIndex = startIndex + withIndex - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int endIndex = startIndex + withIndex;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int endIndex = startIndex + position - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int endIndex = buf.indexOf('\\n', startIndex - 1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int endIndex = startIndex + _reader.length - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int endIndex = startIndexIndex - beginIndex; // to check for label",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int endIndex = buf.indexOf('\\n' - 1, buf.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int endIndex = beginIndex % 2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int endIndex = buf.length - startIndex;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int endIndex = startIndex.indexOf('\\n\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int endIndex = startIndex startIndex + n;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int endIndex = startIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int endIndex = buf.indexOf('\\n', start, endIndex - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int endIndex = buf.indexOf('\\n', start;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int endIndex = startIndex + buf.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int endIndex = buf.indexOf('\\n', startIndex - 1, endIndex;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int endIndex = endIndex - beginIndex; // to check for label",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int endIndex = buf.indexOf('\\n', pos - 2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int endIndex = buf.indexOf('\\n', endIndex;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int endIndex = array.indexOf('\\n', pos - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int endIndex = frame.length - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int endIndex = buf.indexOf('\\n;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int endIndex = startIndex + _bufferIndex - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int endIndex = startIndex + with;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int endIndex = parametersIndex - startIndex;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int endIndex = startIndexPeriod.indexOf('\\n');",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int endIndex = buf.indexOf('\\n' - beginIndex;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int endIndex = startIndexv - beginIndex;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int endIndex = beginIndex, endIndex - startIndex;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int endIndex = startIndex startIndex.indexOf('\\n');",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int endIndex = startIndex, buf.length - beginIndex;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int endIndex = buf.indexOf('\\n', indicesIndex - startIndex;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int endIndex = buf.indexOf('\\n', pos) % 2;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int endIndex = reaching.indexOf('\\n');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int endIndex = startIndex + beginIndex - 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int endIndex = startIndex startIndexIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int endIndex = startIndex + _buffer.length - 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int endIndex = size - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int startIndexIndex = endIndex - 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int endIndex = startIndex + _mainIndex;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int endIndex = startIndex.length - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int endIndex = buf.indexOf('\\n', start+endIndex - 2;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int endIndex = startIndexIndex - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int endIndex = startIndexAndIndex % 2;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int endIndex = startIndexAndIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int endIndex = startIndex startIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int endIndex = startIndex + len - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int endIndex = closeIndex - startIndex;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int endIndex = len - beginIndex; // to check for label",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int endIndex = startIndex.indexOf('\\n', start, endIndex - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int endIndex = startIndex startIndex + _reader.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int endIndex = buf.indexOf('\\n', pos;",
                "identical": false
            }
        ],
        "buggy_line": "if (beginIndex > 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex > 0) {",
        "fixed_line": ""
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position >= 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position + length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position * DateTimeConstants.position\", 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return position * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position >= 1_msS_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position >=BoundS_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position >= YEAR_msS_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position * DateTimeConstants.DE_ms;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position >= TWO_msS_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position >= TWO_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return position >= 1_msS_msk * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position >=Sign_msS_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return position * DateTimeConstants.DELLEGATE_msk;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position >= YEAR_msS_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return position >= Integer.MAX_msk;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position >= YEAR_msS_msk;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return position >= createType_msS_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return position >= 1_msS_msk;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position >=NON_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position >= 1_msS_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position >= DateTimeConstants.DEFINE_msk;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position * DateTimeConstants.ACC_msk;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position >= createType_msS_msk;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position >=Bound;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position >=BoundS_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position >= 1_msS_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.MAX_msk;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position >= TWO_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position >= TWO_msS_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position >=BoundS_msk;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position >= 1_msS_msk * DateTimeConstants.DEPRECATED_ms;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position >= ((_msk * UNDERS_msk);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position >=Sign_msS_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position >=NON_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return position >=NON_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return position >= TWO_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.position\", 1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position >= DateTimeConstants.DEFINE_msS_msk;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position * DateTimeConstants.DEPRECATED_ms;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position - 4 * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position >= YEAR_msS_msk * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return position >= YEAR_msS_msk * DateTimeConstants.DEPRECATED_ms;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.MILLIS_ms;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position >= createType_msS_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position >= YEAR_msS_ms (position - 4 * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position >= Integer.MAX_msl_msk;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return position >= YEAR_msS_ms (position - 4 * DateTimeConstants.DEPRECATED_msk);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.DEPRECATED_ms;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position >= createType_msS_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position >= TWO_msS_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.DEPRECATED_ms;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.DEFINE_msk;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position >=BoundS_msk * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position >=Sign_msS_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.DEFINE_ms;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return position >= YEAR_msS_ms (position - 4 * DateTimeConstants.MILLIS_PER_msk);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position >= YEAR_msS_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position >=NON_msk * DateTimeConstants.DEFINE_msk;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position >=SerializableS_msk;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position * DateTimeConstants.MILLIS_PER_ms\", 1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.ACC_msk;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position >= YEAR_msS_ms (position - 4 * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position >=map_msS_msk;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return position >= 1_msS_msk * DateTimeConstants.MILLIS_PER_msk);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position - 4 * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position >=BoundS_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position >= UNINITIALIZED_msk * DateTimeConstants.position\", position;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return position >= YEAR_msS_msk * DateTimeConstants.DEPRECATED_msk);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position >=Sign_msS_msk * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return position >= YEAR_msS_msk * DateTimeConstants.MILLIS_PER_msk);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return position >= 1_msS_msk * position;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position >=BoundS_msk * DateTimeConstants.MILLIS_PER_msk);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position >= 0, assert_msS_msk * position;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position >= YEAR_msS_ms (position - 4 * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position >= createType_msS_msk * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position >= YEAR_msS_ms (position - 4 * DateTimeConstants.DEFINE_msk);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants. des_msk;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position >= TWO_msS_msk * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return position >= YEAR_msS_ms (position - 4 * DateTimeConstants.DEPRECATED_ms;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return position * DateTimeConstants.position\", one_msk;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position >= YEAR_msS_ms (position - 4 * DateTimeConstants.MILLIS_msk);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return position == JsonToken.START_msS_msk;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position >= 15S_msk;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position * DateTimeConstants.MILLIS_PER_msk);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return position >= createType_msk;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position >= 1_msS_msk * DateTimeConstants.MILLIS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position >= YEAR_msS_msk * DateTimeConstants.DELIMITED_msk;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position >= DateTimeConstants.DEFINE_msS_msk * position;",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": ""
    },
    "Bears-224": {
        "fixes": [
            {
                "k": 1,
                "patch": "Object target = p.next;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Object source = target;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Object target = p.parent;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Object target = p.doc;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Object target = p.type;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Object target = p.value;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Object source = target == null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Object target = p.empty;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Object target = p.child;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Object target = p.in;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Object target = p. diff;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Object target = p.extern;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Object target = p.object;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Object target = p.header;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Object target = p.intValue;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Object target = this.source;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Object target = p.previous;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Object target = p.FALSE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Object target = p. diff == null;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Object target = p.ize;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Object target = p.fill;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Object target = p.cloned;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Object target = p.right;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Object target = p.hash;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Object source = p.next;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Object target = p.hash == null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Object target = p.CONSTANT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Object target = p.buffer;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Object target = p.Iterator;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Object source = this.source;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Object target = target == null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Object target = target == null ? EMPTY_VALUE : p.empty;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Object target = p.u;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Object target = p. th;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Object target = p.Ordinal;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Object target = p.normalMap;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Object target = p.externs;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Object target = p.stack;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Object target = p.parameters;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Object target = p.left;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Object target = target == null ? \"\" : source;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Object target = p.mer;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Object target = target == null ? JsonToken.VALUE_NULL : p.empty;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Object target = p.index;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Object target = p == null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Object target = p.inner;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Object target = target == null ? p.empty : input;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Object target = p.name;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Object target = p.finalValue;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Object target = target == null ? EMPTY_NOT_FOUND : p.empty;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Object target = target == null ? input.empty : p;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Object target = target == null ? NO_VALUE : p.empty;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Object target = target == null ? INDEX_NOT_FOUND : p.empty;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Object target = p.empty ? NO_VALUE : p.empty;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Object target = p.childCount;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Object target = target == null ? INDEX_NOT_FOUND : source;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Object target = target == null ? p.empty : p.empty;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Object target = target == null ? JsonToken.VALUE_FALSE : p.empty;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Object target = target == null ? DOUBLE : p.empty;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Object target = target == null ? NO_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Object target = target == null ? input.empty : p.empty;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Object target = target == null ? TRUE : p.empty;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Object target = p. category;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Object target = target == null ?PATTERN.empty : p;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Object target = p.content;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Object target = p. prototype;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Object target = p.ctxt;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Object target = p.state;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Object target = target == null ? p.empty;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Object target = target == null ? JsonToken.VALUE_STRING : p.empty;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Object target = p.source;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Object target = p.d;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Object target = p.block;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Object target = target == null ? JsonToken.VALUE_STRING : p;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Object target = p. seconds;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Object target = target == null ? comparator.empty : p;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Object target = p.withValue;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Object target = p. solver;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Object target = target == null ? EMPTY : p.empty;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Object target = p. gotten;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Object target = target == null ? \"\" : p.empty;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Object target = p.empty ? INDEX_NOT_FOUND : Value;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Object target = target == null ? \"\" : source.empty;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Object target = p.empty ? NO_A.empty : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Object target = p.lang;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Object target = target == null ? EMPTY_VALUE_FALSE : p.empty;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Object target = target == null ? p.empty : p;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Object target = p.segments;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Object target = target == null ? NULL_VALUE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Object target = target == null ? JsonToken.VALUE_NULL : p;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Object target = p. start;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Object target = p.power;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Object target = target == null ? JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Object target = p.empty ? TRUE : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Object target = target == null ? p.next : p.empty;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Object target = target == null ? p.FALSE : Value;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Object target = p.Json;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Object target = p.empty ? TRUE : new Value;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Object target = target == null ? JsonToken.VALUE_EXTEEN : p.empty;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Object target = p.can;",
                "identical": false
            }
        ],
        "buggy_line": "Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty();",
        "fixed_line": ""
    },
    "Bears-181": {
        "fixes": [
            {
                "k": 1,
                "patch": "ResultSet.of = resultSet.next;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ResultSet.of = resultSet.getLong().nextLong;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ResultSet.of = resultSet.getLong(2);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ResultSet.of = resultSet.format(\"select %s\", from;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ResultSet.of = resultSet.format(\"select % 2: return resultSet;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", resultSet;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from.getLong;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ResultSet.of = resultSet.format(\"select\", from - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", resultSet.getLong;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from - 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromName;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ResultSet.of = resultSet.format(\"select\", from;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ResultSet.of = resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ResultSet.of = resultSet.format(\"select & resultSet.getLong;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ResultSet.of = resultSet.format(\"select\", fromEntitys\", resultSet;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ResultSet.of = resultSet.getLong(returnType, this.count - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ResultSet.of = resultSet.format(\"select % 2: return resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromR())) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromEntity;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ResultSet.of = resultSet.format(\"select % 2\" + 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ResultSet.of = resultSet.format(\"select\", resultSet;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ResultSet.of = resultSet.getLong(returnType).getLong(0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ResultSet.of = resultSet.interpreterStack % 2 != 0 || resultSet.next;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from).getLong;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromClass;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ResultSet.of = resultSet.format(\"select: % 2 != 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ResultSet.of = resultSet.getLongMatcher().nextLong;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ResultSet.of = resultSet.getLong('\\s\", resultSet;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ResultSet.of = resultSet.getLong('\\s\", from;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ResultSet.of = resultSet.format(\"select-number\", from;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromKey;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ResultSet.of = resultSet.format(\"select %s\", fromName;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ResultSet.of = resultSet.format(\"select: % 4;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ResultSet.of = resultSet.format(\"select %s\", resultSet;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ResultSet.of = resultSet.getLongnumberOfEntity().nextLong;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromName.getLong;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ResultSet.of = resultSet;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ResultSet.of = resultSet.getLongnumberOfEntitys\", resultSet;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ResultSet.of = resultSet.format(\"select %s\", resultSet.getLong;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ResultSet.of = resultSet.getLong(returnType).value;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ResultSet.of = resultSet.getLong(returnType).nextLong;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ResultSet.of = resultSet.format(returnType.class) + 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ResultSet.of = resultSet.format(\"select % 2];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ResultSet.of = resultSet.getLong(returnType.class) % 2];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ResultSet.of = resultSet.format\", from;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ResultSet.of = resultSet.getLong('\\Entity\", resultSet;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ResultSet.of = resultSet.format(returnType.class) % 2];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from Node.getLong;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ResultSet.of = resultSet.format(\"select %s\", from.getLong;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromLong;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ResultSet.of = resultSet.interpreterStack % 2 != 0 || resultSet.getLong;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ResultSet.of = resultSet.value % 2 != 0 ? resultSet.next : resultSet;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromnumber;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ResultSet.of = resultSet.format(\"select\", fromEntitys\", resultSet);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ResultSet.of = resultSet.getLongnumberOfEntity().next;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ResultSet.of = resultSet.format(\"select: % 2 != 0 || resultSet.next;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ResultSet.of = resultSet.format(\"select\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ResultSet.of = resultSet.getLong(returnType) % 2];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from.next;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromegates;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ResultSet.of = resultSet.format(\"select %s\", from - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ResultSet.of = resultSet.getLong('\\Entity\", from;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ResultSet.of = resultSet.headerEntity;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ResultSet.of = resultSet.formatSettings;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ResultSet.of = resultSet.format(\"select: % 2 + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromMarker.value;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ResultSet.of = resultSet.format(\"select\", from + 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromMarker.next;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ResultSet.of = resultSet.getLong(returnType, this.count;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ResultSet.of = resultSet.format(\"select\", fromEntitys2.getLong;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from5,",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromType;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ResultSet.of = resultSet.getLong(returnType) % 2 != 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ResultSet.of = resultSet.format(\"select: % 2.getLong(0);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ResultSet.of = resultSet.format(\"select %s\", fromKey;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ResultSet.of = resultSet.format(\"select: % 2 != 0 || resultSet.getLong;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ResultSet.of = resultSet.format(\"select %s\", from).getLong;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ResultSet.of = resultSet.format(\"select: % 2\" + 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ResultSet.of = resultSet.format(\"select: % 2 != 0 || resultSet;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromType.getLong;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ResultSet.of = resultSet.getLong originalName % 2 != 0 || resultSet;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", from << 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromRhs;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ResultSet.of = resultSet.format(\"select: % 2: return resultSet;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromR;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ResultSet.of = resultSet.value % 2 != 0 || resultSet.next;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ResultSet.of = resultSet.format(\"select: %s\", fromCount;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ResultSet.of = resultSet.format(\"select % 2: return resultSet.next;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ResultSet.of = resultSet.format(\"select type: %s\", from;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ResultSet.of = resultSet.format(\"select-numberOfEntitys\", from;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ResultSet.of = resultSet.getLong(\"-\" + count;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ResultSet.of = resultSet.getLong(2, count;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ResultSet.of = resultSet.getLongroutines;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ResultSet.of = resultSet.getLong(returnType);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ResultSet.of = resultSet.getLong\", resultSet;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ResultSet.of = resultSet.interpreterStack % 2 != 0 || resultSet;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ResultSet.of = resultSet.getLongExceedEntity(returnType).getLong(0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return resultSet.of.format(\"select: %s\", from;",
                "identical": false
            }
        ],
        "buggy_line": "ResultSet resultSet = this.databaseClient.singleUse().executeQuery(Statement.of( String.format(\"select count(*) from %s\", persistentEntity.tableName()))); resultSet.next(); return resultSet.getLong(0);",
        "fixed_line": ""
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent = input;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponent = input == paintComponent;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent = options.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponent = input.getGraphics());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponent = inputStack.getGraphics());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent = input == reference.getGraphics());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponent = options.getGraphics());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponent = inputInfo.getGraphics());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponent = input == null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponent = input == calendar.getGraphics());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponent = inputStackInputPosition;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponent = r.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponent = inputed;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponent = input == ROUND_EXPORTS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponent = input == calendar.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponent = input == referenceInfo.getGraphics());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent = input == native.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponent = input == others.getGraphics());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponent = input ==Graphics.getGraphics());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponent = inputStack.getGraphics();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponent = inputStack.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponent = input == pd.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponent = input == reference.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponent = input == referenceMax.getGraphics());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponent = input == nativeMethods.getGraphics());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponent = input == nativeMethods.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponent = options.getGraphics();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponent = org.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponent = inputATURAL_COMPARATOR;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponent = input_stream;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponent = input == nativeInfo.getGraphics());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponent = input ==transformer.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponent = input == modules;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponent = input ==transformer.getGraphics());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponent = input == native.getGraphics());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponent = input == special.getGraphics());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponent = inputStackTop;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponent = inputMap;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponent = inputs;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponent = input == anotherVal;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponent = inputName;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponent = input ==\u7ec4;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponent = input == ROUND_EXPORTS_PER_INSTANCE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponent = input.getGraphics();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponent = r.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponent = options.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponent = input == ROUND_EXPORTS_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponent = input == ROUND_EXPORTS_PER_SECOND);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponent = inputArray.getGraphics());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponent = input ==Graphics.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponent = optionsInputPosition;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponent = inputStack.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponent = inputS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponent = inputArray.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponent = input == 5.0.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponent = input ==\u3c63;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponent = input == nativeInfo.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponent = input == pd.getGraphics());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponent = inputATURPrune;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponent = input == 5.0.getGraphics());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent = input == checksum;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponent = input == modules.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponent = inputPrune;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponent = inputS_stream;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponent = input == ROUND_EXPORTS_PER_ERROR;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponent = input == Must.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponent = input == nativeMethods.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponent = input == referencePosition;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponent = input == calendar.getGraphics()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent = inputATURAL_COMS_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponent(inputPosition);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponent = input.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponent = input == others.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponent = input == ROUND_stream.getGraphics());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponent = input == special.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponent = inputTypes;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponent = input == referenceMax.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponent = buf.getGraphics());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponent = input == status;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponent = input == referenceInfo.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponent = options.getGraphicsBound;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponent = inputArray;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponent = inputATURAL_COMS;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponent = inputATURAL_COMS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponent = input == ROUND_EXPORTS_PER_DAY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponent = input == ROUND_stream.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponent = input == Must.getGraphics());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponent = input == ROUND_EXPR_INSTANCE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponent = input == ROUND_EXPORTS_PER_CHARS;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponent = input == nativeType.NONE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponent = inputSEGMENT_LEN;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponent = options.getGraphicsHandler;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponent = input == ROUND_S_PER_BACKSLASH;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponent = options.getGraphicsName();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponent = input == ROUND_stream;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponent = inputStack.getGraphicsTypes()[0];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponent = input ==hing_PER_SECOND;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponent = input == ROUND_EXPORTS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponent = input == 2].NONE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponent = input == INVALID;",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": ""
    },
    "Bears-186": {
        "fixes": [
            {
                "k": 1,
                "patch": "baseOnly = 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_ERROR;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_PROPERTY;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_CHARS;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "baseOnly = UNINITIALIZED_THIS;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "timezoneOnly = baseUri;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_EXCEPTION;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_EXPORTS_ERROR;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "AliasOnly = baseUri;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "freqOnly = options.objectProperties;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "17Only = baseUri;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cmdOnly = _annotationProperties;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "freqOnly = baseUri;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cmdOnly = _objectProperties;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "clsOnly = baseUri;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_PREFIX;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "endOnly = _objectProperties.get(baseName);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "OutOnly = baseUri;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "chOnly = _annotationProperties.get(baseName);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "baseOnly = firstProperties;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "baseOnly = actualProperties.valueOf(baseType);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "freqOnly = options.valueOf(baseType.class);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "null lineOnly = baseUri;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "getPositionOnly = baseUri;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "chOnly = actualProperties.get(baseName, baseUri);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_METHOD;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "chOnly = actualProperties.get(interfaceName, baseUri);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cmdOnly = _objectProperties.get(propertyName, baseUri);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "baseOnly =iator.get(baseName, options.PROTOTYPE_DEPRECATED;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "freqOnly = options.baseType;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_MEMBER_DESERVE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_LINE_PAINT;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cmdOnly = _objectProperties.get(gen);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "chOnly = actualProperties.valueOf(baseType, baseUri);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_MEMBER_DEFINE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "chOnly = actualProperties.valueOf(baseType);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "baseOnly = actualProperties.get(baseName, baseUri);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_24;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "endOnly = _objectProperties.get(propertyName);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "baseOnly = bodyProperties.get(propertyName, baseUri);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_PROTTY_PRINTER;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cmdOnly = _annotationProperties.get(baseName);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "signatureOnly = baseUri;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "chOnly = actualProperties.valueOf(baseType, baseUri;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "endOnly = _objectProperties.get(propertyName, baseUri);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_TRYS_ERROR;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "resOnly = baseUri;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_MEMBER_DELIMITED_ERROR, options;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PreviousOnly = baseUri;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "baseOnly =iator.get(baseName, options.PROTOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_OTH;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "numberOnly = baseUri;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseType, CSTRUCTOR_THROWABLE_ERROR;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "baseOnly = firstProperties.get(interfaceName, baseUri);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "baseOnly = actualProperties.get(baseName, options);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_MEMBER_DESERIALIZER;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_EXTENDED;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.objectProperties;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ourceOnly = baseUri;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseType, CSTRUCT_THROWABLE_ERROR;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "entriesOnly = baseUri;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseType, grS_ERROR;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "chOnly = actualProperties.get(implName, baseUri);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "baseOnly =iator.get(baseName, options.PROTOTYPE_DELEGATE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "baseOnly =iator.get(baseName, options.PROTOTYPE_MEMBER_DESERVE_DEPRECATED;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_PAINT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_CHECK_ERROR, interfaces;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cmdOnly = _objectProperties.get(baseName, baseUri);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "baseOnly = bodyProperties.get(baseName);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_calendar;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_TRYS;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseName, interfaces)[0];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_MEMBER_DELTA;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_MEMBER_DELIMITERS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cmdOnly = _objectProperties.get(baseName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_SUFFIX;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseType, CSTRUCT_ERROR;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "baseOnly =iator.get(baseName, options.PROTOTYPE_CHECK_ERROR;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseType, CSTRUCT_OBJECTS;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_NAMES;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseType, CSTRUCT_OBJECT;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_LABELS_ERROR;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(this.baseTimeline;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "sOnly = baseUri;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "baseOnly =iator.get(baseName, interfaces)[0];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "freqOnly = options.valueOf(baseType.PROTOTYPE_MEMBER_DELIMIT)];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "genOnly = options.objectProperties;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseType, CSTRUCT_THROWABLE_PROPERTY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_.valueOf(baseUri);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_TRIProperties;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_TRIMIDDLE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "chOnly = _annotationProperties.get(interfaceName);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "baseOnly =iator.get(baseName, options.PROTOTYPE_DEFINE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "baseOnly = actualProperties.get(baseName);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (options.objectProperties) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_TRIESCAPE_ERROR;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "baseOnly = UNINITIALIZED_THROWABLE_LABELS;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": ""
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = a << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = size << 8) | a[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = 1 << 8) | a[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = size << 6) | a[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = size << width - a[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = a[i - 1];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = size << 8 - a[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = a << 8) | i;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = u << 8) | a[i];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = a << 8) | b[i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = size << a.length - a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = r << 8) | a[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = p << 8) | a[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = size << a[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l =PRO - a[i];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = a << 8) | i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = size << pieces.length - a[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = minimum << 8) | a[i];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = size - a[i];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = a << 8) | c;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l =test << 8) | a[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = size << 8) | b[i];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = a << 6) | a[i];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l =old << 8) | a[i];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = a << 8) - a[i];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = size << COLUMN_BITS | a[i];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (a << 8) | a[i];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = months << 8) | a[i];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l =Distance << 8) | a[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = size << 8];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = u & a.length - a[i];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = l - a[i];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = months << a[i];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = LOCAL << 8) | a[i];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l =()+\" << 8) | a[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l =amount << 8) | a[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = size <<[0]) - a[i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = val << 8) | a[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = INITIAL << 8) | a[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = width << 8) | a[i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = size << Pointer | a[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = 1 << 6) | a[i];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l =Interfaces[i - 1];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = OBJECT | a[i];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = Frame.length - a[i];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = size << width | a[i];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = size << 8) | c;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = a << 8) |Construction[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = size << precision.length];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l =ALIAS << 8) | a[i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = r << 8) - a[i];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = a << 8) | p[i];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = minimum[i - 1];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = a << 8) | val[i];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = size << 8) - a[i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = ceiling << 8) | a[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = b << 8) | a[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = u & a[i];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = r << 6) | a[i];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = size <<sqrt | a[i];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = size <<test - a[i];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = size << 8 + a[i];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = size << b[i];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = size << 8) | i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = size << 8) | i;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = size << Pointer | b[i];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = a << 8) | a[l];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = a << 8) | a[length];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l =PRO | a[i];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = a << 8) | j;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = size << point[i];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = opcode - a[i];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = size << 18];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = size << a.length - b[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l =Absolute - a[i];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = area[i - 1];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = a << 8) | size;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = a << 8) | adjust;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = short[i - 1];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = a << 8) | a[b];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = size << 8) | a[l];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l =Properties[i - 1];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = l - size[i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l =end - a[i];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = a - b[i];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = interval - a[i];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = size << 8) | a[b];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = size << 8;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = u & 0x0];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = u & Frame.length - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = a[size - 1];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = size << i;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = p & 0x0];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l =-1] - a[i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = l - r[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l =Visibility[i - 1];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = l + a[i];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = a << 8) | a[size];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = size << 1;",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": ""
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new Concurrent",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new Concurrentattributes;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new Concurrent || attribute.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentserializationHashMap;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new Concurrent;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentName.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentserializationHashMap.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new Concurrent || attributes.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new Concurrenta.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new Concurrent now;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentidType.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentSet.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new Concurrent ? attributes.length : 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new Concurrent h.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentList;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new Concurrent est;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new Concurrentclass.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentFinal.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentKeys.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new Concurrentdeser.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new Concurrent ? attributes.length : 4;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentInner.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentserializationHashMap(attributeCount;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new Concurrent lhs.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new Concurrent \"_\" + attributes.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new Concurrentattributes.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentPair.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new Concurrentfalse;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new Concurrent || attribute == attributes.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) Kit.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentPanel.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) Kit.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new Concurrent[1], attribute.length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new Concurrent ex.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentMap;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new Concurrent \"_\"a.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new Concurrentep.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentserializationHashMap, h.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) 0) Kit.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentserializationHashMap, attributes.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentAnonymous ? attributes.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new Concurrent];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new Concurrent || attribute.length == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) ? attributes.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentStack.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new Concurrentserialization.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new Concurrent \"_\" ? attributes.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) 0) 0) Kit.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new Concurrent ? char.length : 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) ? attributes.length;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentByName.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentMap.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new Concurrentrapped.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentMask;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentserializationHashMapType.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new Concurrent || attribute.length == 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new Concurrent emptyHashMap.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentDate[0].length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new Concurrent ? char.length : 4;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentAnonymous ? attributes.length : 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentThis.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new Concurrent][1];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentIssue.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new Concurrent ? attributes.length : 16;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new Concurrenta;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new Concurrent ? attributes.length :attributes;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) 0) 0) 0) Kit.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new Concurrent ? attributes.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentRGB.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentserializationHashMap(attributeCount);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) 0) ? attributes.length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentPredicate.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentValidHashMap(attributeCount;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new Concurrent88[0].length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new Concurrent(_name, attributes.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentserializationHashMapHashMap;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new Concurrent(_attributeCount;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentserializationHashMapHashMap.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentAttribute.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new Concurrent('$[0].length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) return attributes.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) 0) 0) 0) 0) Kit.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new Concurrent(_name.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentValidHashMap;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new Concurrentaps;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new Concurrentt;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) Kit.codeBug;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentAnonymous ? attributes.length : 4;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) 0) 0) ? attributes.length;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) Kit.codeBug;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new Concurrent || attributes.length == 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new Concurrent != 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new Concurrent ? attributes.length : 10;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new Concurrent (attributeCount == 0) 0) return attributes.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new Concurrent ? attributes.length :List;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new Concurrent rightHashMap.length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentnumberOfValidColumns.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentThis;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new Concurrent (attributeCount == 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new Concurrent=0,attributes;",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": ""
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOfValid().number(baseName);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfValidColumns().number(baseName);",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+\") //).number;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+\") //).number",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+\") //Parameters).number",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+\") //Parameters).number;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberBigx+1 = x2+\") //).number;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+\") // current order",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOfValid().number(number2+\") // current, state);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOf(x+1).number;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfValid().number(basebaseName);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+\") // unnumber",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+\") //ParametersParameters).number",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+\") // NOPMD",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOf(x3)).number;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfValidColumns <= 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfValidColumns().number(x2+\") // current, state);",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfValid().number(baseName+\") // current order",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberOfValidColumns().number(dx);",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+\") //ParametersParameters).number;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfValid().number(dx);",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOfValid().number(number2+\") // 20;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberOfValidColumns().number(baseName+\") // current order",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberOfValid ge().number(baseName);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfValid().number(x2+\") // current, state);",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfValidColumns().number(baseName+\") //Parameters",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOf(x+1)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOf(x+\") //Parameters).number",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfValid().number(number2+\") //Parameters",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOf(x+\") //Parameters).number;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+\") // current, result[1]).number;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+\") // current, state).number",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+\") // current, state).number;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfValidColumns().number(baseName+\") // current quad",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+1-1]).number;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberOfValid().number(number2+\") // 20",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfValidColumns().number(baseName+\") // 20",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+\") // BYTE",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+\") // current offset",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOfValid().number(baseName+\") // current quad",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberOfValidColumns().number(x3,",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+\") // current instruction",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+\") // 5 bytes",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+\") // {}",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberOfValid().number(baseName+\") // current instruction",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+\") // or current order",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberOf(x+1).numberOfValidColumns; // or:",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOfValidColumns().number(baseName+\") // currentVal",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfValid().number(number2+\") // current;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberOfx+1).number(number1s);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOfValidColumns().number(basebaseName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberpeek().number(x3) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOfValidColumns().number(baseName+\") //Parameters, state);",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+\") //o).number;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOfValid().number(number2+\") // 5number",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfValidColumns().number(baseName+\") // current);",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberOfValidColumns().number(baseName+\") // current instruction",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOf(x+1).numberOfValidColumns00000000(number2, c2);",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberOfValid().number(baseName+\") // 20",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfValid().number(baseName+\") // current quad, state);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOf(x+1).number = 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfValidColumns().number(x3, f4;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberBigx+1 = x2+\") //Parameters",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberOfValid().number(baseName+\") // currentVal",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfValid().number(baseName+\") // current);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberOfValidColumns().number(baseName+\") // 20 32",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+\") // current, mock",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+\") // current current order",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberOfValid().number(baseName+\") //Parameters, state);",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberOf(x+1).numberOf(number);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberOfValidColumns().number(baseName+\") // current, i",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOfValidColumns().number(x3, f4);",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberBigx+1 = x1+\") //).number;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOfValid().number(number1s);",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberBigx+1 = x2+\") // 20;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOf(x+1).numberOfValidColumns00000000(number1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberBigx+1 = x2+\") // vertical;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberOfValidColumns().number(baseName+\") // current, state);",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOfValid().number(baseName+\") //Parameters",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberOf(x+1).numberOfValidColumns00000000(number2, c3);",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberOfValid().number(basebaseName+\") // current order",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberBigx+1 = x1+\") //Parameters).number;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+\") //).number = 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberOfValid().number(baseName+\") // current quad, i",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+\") //Parameters",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberOfValidColumns().number(x2 - 1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberBigx+1 = x2+\") //Parameters).number;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfValid().number(baseName+\") // current, state);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfValid().number(baseName+\") // 5number",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberBigx+1 = x2 - startxOffset;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberOfValid().number(baseName+\") // 20 32",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x1+\") // current, state).number",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberBigx+1 = x2+\") // unnumber;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberOfValidColumns().number(x3, f1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+\") // current current, state).number;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfValidColumns().number(baseName+\") //Parameters).number",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOfx+1).number(number1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOfValid().number(top);",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberBigx+1 = x2+\") // unnumberOfValidColumns <= 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberOf(x+\") // current order",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\") // power",
        "fixed_line": ""
    },
    "Bears-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (_index >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (c == '+' || c == '-') { // missing minutes",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (index == 0 && name.charAt(0) == '[') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (_attributeCount == '+' || c == '-') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (c == '+' || c == '-') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (c == ' whole') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (c == '+' || c == '-') { // >= '0')",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (index == 0 && c.charAt(0) == '[') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (_base == '+' || c == '-') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (c == '+' || c == '-') { // can't found",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (c == '+' || c == '-') { // can'",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (c == '+' || c == '-') { //val?",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (c == '['' || c == '}') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (index == 0 && index <= 'Y' || c.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (_attributeCount == 'ON' || c == '-') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (_attributeCount >= 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (c == ' CLE' || c == '}') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (_bufferIndex >= 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (index == 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (_bigEndian && c == '}') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (c == '+' || c == '-') { // minutes",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (index == 0 && name.charAt(value);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (_attributeCount == '+' || c == '-') { // missing minutes",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (_valueType != '0') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (_attributeCount == '+' || c == '-') { // can'",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (c == 'Any' || c == '}') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (_index >= '0') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (index == 0 && name.charAtcharAt(0) == '[') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (c == '+' || c == '-') { // not store '}",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (c == '['' || c == '}') { // missing minutes",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (c == ' CLE' || c == '[' {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (c == '+' || c == '-') { // >= 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (c == ' CLE' || c == 'null') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (index == WHOLE_COLLECTION) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (_classNames[indexindex] == '0') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (_attributeCount == 'ON' || c == '}') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (c == ' expected' || c == '}') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (_bigEndian && c == 'String') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (_inputPtr >= _resultString.length) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (c == '+' || c == '-') { // >= 0; }",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (c == '+' || c == '-') { // not access",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (index == WHOLE_FOR_COLLECTION) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (c == '+' || c == '-') { // >= '0';",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (_attributeCount == '}') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (_attributeCount == 'Any' || c == '}') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (c == '+' || c == '-') { // can''); }",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (c == '+' || c == '-') { //val'); }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (c == '+' || c == '-') { // 37?",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (_attributeCount == '+' || c == '-') { // >= '0')",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (_attributeCount == '+' || c == '-') { // can't found",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (c == '+' || c == '-') { //name",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (index == WHOLE_FOR_S) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (index == 0 && c.charAt(0) == '-') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (c == '['' || c == '-') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (index == 0 && name.charAt(0) == '-') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (c == '+' || c == '-') { // not store 'raw'",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (c == '+' || c == '-') { // can'tres",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (_attributeCount == 'Any' || c == '-') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (_attributeCount == ' ') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (index == value.length '0') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (c == '+' || c == '-') { //val.length < 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (_delegateIndex >= 0 && value.charAt(0) == '[') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (c == '+' || c == '-') { // exponent?",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (c == 'Any' || c == '}') { // missing minutes",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (c == '['' || c == '}') { // >= '0')",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (c == 'global' || c == 'null') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (c == '+' || c == '-') { //val.length; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (c == '['' || c == '-') { // missing minutes",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (index == WHOLE_FOR_STRING) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (_delegateIndex >= 0 && value.charAt(0) == '-') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (_base == '+' || c == '-') { // can't found",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (c == '+' || c == '-') { // can't 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (_customFormat.charAt(0) == 'V' || c == '}') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (c == ' CLE' || c == ' Rule') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (_ '0') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (index == WHOLE_FOR_STRINGS) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (_attributeCount == '+' || c == '-') { // can't 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (c == ' expected' || c == '}') { // missing minutes",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (c == '+' || c == '-') { // can't 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (_base == '+' || c == '-') { // missing minutes",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (_base == '+' || c == '-') { // can'",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (_delegateIndex >= 0 && value.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (_factoryConfig == 'Any' || c == '}') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (c == '+' || c == '-') { // not yet",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (c == 'global' || c == '}') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (_objectIdWriter != '9') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (c == '+' || c == '-') { // can't missing minutes",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (_bigEndian && c == 'null') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (c == '+' || c == '-') { //1000",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (index == WHOLE_FOR_EMPTYS) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (_factoryConfig == 'Any' || c == '-') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (c == '+' || c == '-') { // >= '0');",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (c == ' expected' || c == '}') { // >= '0')",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (_attributeCount == '+' || c == '-') { //val?",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (c == ' CLE' || c == 'result') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (c == '+' || c == '-') { // can do implicit re-parse",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (_customFormat.charAt(0) == 'V' || c == '-') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (index == ' CLE' || c == '[' {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (_objectIdWriter != '0') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (c == '+' || c == '-') { // '0')",
                "identical": false
            }
        ],
        "buggy_line": "} else { // [databind#149]: Allow use of 'String' indexes as well char c = name.charAt(0); if (c >= '0' && c <= '9') { try { int index = Integer.parseInt(name); if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { return ctxt.handleWeirdNumberValue(_enumClass(), index, \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\" ); }",
        "fixed_line": ""
    },
    "Bears-100": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean ignition = position;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean ignition = result.getBooleanStartPosition;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean ignition = result.getBooleanPosition;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean ign = result.getBooleanStartPosition;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean ign = position;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean ignition = result.getBoolean(result == Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean ignition = result.getBoolean(result);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean ignition = src.getBooleanStartPosition;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean ignition = _position;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean ign = result.getBooleanPosition;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXPECT_TYPE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean ignition = this.oldestAt;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean ignition = result.getBoolean() == Context.START_TYPE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean ignition = result.getBoolean index;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean ignition = result.getBoolean() == Context.START_OF_EXPR;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == 0 ? lastId : 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean ignition = result.getBooleanWithoutgn_VALUE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean ignition = result.getBoolean(result)];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean ignThrowable = result.getBooleanPosition;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == 0 ? position : 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXPR;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean ignition = result.getBoolean() == Context.START_OF_EXPECT_TYPE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean ignition = _ignorableProps;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_RANGE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean ignition = result.getBoolean(oldName;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXPORTS;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean ignition = src.newBoolean;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean ignition = result.getBoolean(result == Context.STATE_VALUE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean ignition = Collections.getBooleanStartPosition;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean ignition = result.getBooleango;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_DUPPER_BOUNDS;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXPORTS_TYPE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean ign = result.getBoolean(result);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean ignition = isBoolean;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean ignition = result.getBoolean(result == Context.NAME;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean ignition = result.getBoolean(result == Context.NAME_OF_RANGE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean ign = result.getBoolean() == Context.START_UNKNOWN;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean ign = result.getBoolean() == Context.START_OF_EXPR;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean ign = result.getBoolean index;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean ign = result.getBoolean(result == Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean ignition = isFirst ? lastId : position;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == 0 ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean ignition = src.getBoolean() == Context.START_TYPE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXPORT;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean ignition = result.getBoolean() == Context.START_VALUE;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == 02;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean ignition = src.getBoolean index;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == 0 ? 1 : 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean ignition = src.getBoolean() == Context.START_VALUE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean ignition = src.getBooleanWithoutgn_VALUE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXTENDED;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean ignition = result.getBoolean(result) % 2 != 0 ? result : 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean ignition = false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean ignition = result.getBoolean(resultresult == Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_DUPPER_DAY;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean ign = result.getBoolean() == Context.START_OF_EXPECT_TYPE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXTER;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean ignition = result.getBoolean(result) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean ignition = Collections.getBoolean(oldName;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_DUPPER_SIGNATURE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean ignition = result.getBoolean(result) % 2 != 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_DUPPER_Doc;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_EXTEPosition;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_SIGNATURE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean ignition = result.getBoolean(resultresult == Context.START_OF_EXPECT_TYPE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean ignition = src._ignorableProps;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean ignition = this.oldestable;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean ignition = result.getBoolean;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_STRUCTION_SIGNATURE;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_DUPPER_RANGE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean ignor = result.getBooleanPosition;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean ign = result.getBoolean() == Context.START_TYPE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean ignition = result.getBooleanWithoutgn_IGN;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean ignition = result.getBoolean(result) <= 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean ignition = result.getBoolean(result == Context.NAME_OF_EXPECT_TYPE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean ign = result.getBoolean(result) % 2 == 0 ? position : 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == 0 ? lastId_VALUE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean ignition = result.getBoolean(result == Context.CASE_OF_RANGE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean ignition = Collections.getBoolean(result);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_DUPPER_INITIALIZED;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_STRUCTION_TYPE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean ign = result.getBoolean();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean ignition = result.getBooleanId() == Context.START_TYPE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean ignition = result.getBoolean() == Context.START_OF_TYPE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean ignition = result.getBooleanIncludesPosition;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean ignition = result.getBoolean(result == Context.NAME_OF_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean ignition = oldIgn;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean ign = result.getBoolean(result == Context.START_OF_EXPECT_TYPE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean ignition = result.getBoolean(result == Context.NAME_OF_EXPORTS_TYPE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean ignition = result.getBoolean(result)1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean ignition = result.getBooleanCurrentPosition;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean ignition = result.getBoolean(result) % 2 != 0 ? position : 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean ignition = result.getBoolean(result == Context.NAME_OF_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean ign = result.getBoolean(result) % 2 == 0 ? lastId : 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean ignition = result.getBoolean(result == Context.CASE_OF_gn;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean ignition = result.getBoolean(result) % 2 == 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean ignition = result.getBoolean(result == Context.START_OF_DUPPER_STR;",
                "identical": false
            }
        ],
        "buggy_line": "boolean ignition = position.getBoolean(Position.KEY_IGNITION); boolean oldIgnition = false; Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null) { oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); } if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
        "fixed_line": ""
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = propName;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = i.getIgnored;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = data;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = node.getIgnored;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = iTransitions.getIgnored;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = compiler.getIgnored;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = Array.getIgnored;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored =content.getIgnored;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = props.getIgnored;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = propNameNode.getIgnored;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = t.getIgnored;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = dataShadow.getIgnored;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELTA;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = iNames.getIgnored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = iAny;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored =But.getIgnored;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELit.getIgnored;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = NO_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = allNames.getIgnored;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = EmitUtils.getIgnored;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = iProp != ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignoreals;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = iBuffer.getIgnored;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored =ctxt.getIgnored;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = serializers.getIgnored;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = rs.getIgnored;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = i;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = fnInfo.getIgnored;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignore.getIgnored;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ials;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = context.getIgnored;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = iPropNames.getIgnored;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = parent.getIgnored;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERIALIZER;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored =NTHETorals.getIgnored;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELIMIT;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_ p.getIgnored;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored =56.getIgnored;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = data.getIgnored;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = getPer.getIgnored;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_ p.getIgnored;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = Member.getIgnored;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_gn;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored =iator.getIgnored;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_ p.getIgnored;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = explicit.getIgnored;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = Flat.getIgnored;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = NO_A.getIgnored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = method.getIgnored;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignore;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored =NTHETorals.getIgnored();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = i.getIgnoredING_EXPORTS_WITHOUT_orals;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored =TimeZone.getIgnored;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = properties.getIgnored;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_gn;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored =Outside.getIgnored;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = getProp != ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored =Element.getIgnored;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_ZERO;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = NO_EXPORTS_WITHOUT_TYPE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_EFFECTS;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_gn;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PUTEFFECTS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_AFTER_EFFECTS;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_getIgnored;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = names.getIgnored;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_WRAPEFFECTS;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PUTEFFECTS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignorals.getIgnored(propName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DECIMAL;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DECOMPOSITIVE_TO_DUPPER_ p.getIgnored;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_Union.getIgnored;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ctxt.getIgnored;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = JSType.getIgnored;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEFINE_TO_DUPPER_ p.getIgnored;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = getIgnoredReference.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_pad;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_STATIC;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored =CTED.getIgnored;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_WRAPEFFECTS;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PUTEFFECTS.getIgnored;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = i.getIgnored();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_WRAPECTS;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_WITHOUT_gn;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = NO_MATCH;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PRINTER;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_EFFECTS;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored =ers.getIgnored;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_NODE_TYPE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = NO_REF.getIgnored;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": ""
    }
}