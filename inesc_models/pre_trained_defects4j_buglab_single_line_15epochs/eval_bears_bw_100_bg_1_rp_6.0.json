{
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"roppo\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(\"roppo;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"ropp:Compiler.SessionData\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"ropp\".equals(n.class)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"ropp---.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"ropp\".equals(ables.class)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"ropp: remove) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(\"ropp\".Session.SessionData\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"ropp:Compiler.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"ropp array.Sessiono\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"ropp') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"ropp: removeFilter.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"ropp:normalMap.SessionData\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"roseppo\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"ropp: Pred.SessionData\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"ropp it.Sessiono\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"ropp\".equals(n.pi;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"ropp[0].nodeData\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"roseo\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(\"roTable.SessionData\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"ropp\".Session.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"ropp\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"ropp:Graph.SessionData\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"roppMILLIo\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"ropp\".equals(;\".class)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"ropp: removet.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"ropp\".equals(gc.class)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"ropp:normalMap.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"ropp: removeIdx.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"ropp array.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"ropp\".equals(TOKENNode.class)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"ropp\".equals(h.class)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"ropp[0].Objecto\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"ropp\".equals(numFilter.class)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"roppPattern.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"ropp\".tmp;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"ropp\".equals( equals)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"rosepp[0].session;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"ropp[0].session.SessionData\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"ropp: removeabs.SessionData\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"ropp)>o\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(\"ropp[0].nodeFactory;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"ropp[0].fieldName;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"ropp\".equals(TOKENNode.pi;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"ropp---.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(\"ropp\".equals(CHARS.class)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"ropp\".OrEnum.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"roppbeanDesc;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"ropp bounds.SessionData\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"ropp: removeoperand.SessionData\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"ropp: Pred.SessionData;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"ropp:normalMap.SessionData;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"ropp[0]. some;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"ropp:Compiler.SessionData;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"ropp\".equals(gc.pi;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"ropp:Graph.SessionData;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"roppData\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"ropp array.SessionData\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"rosepp:Compiler.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"roppPattern.Session.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"ropp\".equals(className)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"ropp v.SessionData\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"ropp\".equals(n.pi)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"ropp: removeFilter.Session.SessionData;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"ropp\".equals( shade)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"roppSeriesData\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"ro avppo\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"ropp\".equals(annotated.class)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"ropp\".ptype;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"roreads.Sessiono\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"roppMap.SessionData\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"ropp\". seqo\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"ropp nodeType;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"ropp:Compiler.Session.SessionData;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"ropp---.Session.SessionData;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"ropp[0].nodeData;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"roppMap.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"ropp\".equals( attrs.class)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"ropp\".Session.SessionData;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"roppo\"); // nope",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"ropp builder.SessionData\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"ropp: removeIdx.SessionData\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"ropp\".equals(;\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"roTable.SessionDataMessage;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"rofeature.pi;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"ropp\".session.SessionData\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"ropp:normalMap.Session.SessionData;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"ropp it.SessionData\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"rosepp[0].nodeFactory;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"ropp: remove floorData\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"roppo\"); // no longer necessary!",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"ropp\".equals(;\".pi;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"ropp paint\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"ropp\".equals(ables.pi;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"roppIdentifier.SessionData\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"ropp\".equals(h.pi;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"ropp mod.Session.SessionData\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"ropp[0].session;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"ropp mod.Sessiono\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"ropp v.SessionDataMessage;",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(2 + length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(2 + 2readable;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(2 + length};",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(2 + length);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(2 + length1, 2L;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(2 + WORD;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(2 + length -= 2readable;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(2 + length -= 2 * result.readable;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(2 + 2L;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(2 + bufpos;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(2 + length];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(2 + length unknownBytes;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(2 + length negativeBytes;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(2 + lengthEncodingSize;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(2 * result + buf;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(2 + length));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(2 + length] = result.readable;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(2 + length1,Buf.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(2 + buf.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(2 + length1, key2);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(2 + lengthSize;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(2 + length] = result.readableBytes();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(2 + lengthTYPEBytes;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(2 + length / 2readable;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(2 + length] = result.readableRight;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(2 + bufpos -= 2 + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(2 +RotationBytes;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(2 +Long.readableBytes(buf)) / 2L;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(2 + lengthIncompleteBytes;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(2 + length ? 2 : 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(2 + length) / 2readable;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(2 + length1,Gap;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(2 + lengthPaint;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(2 + 6;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(2 + bytesBytes;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(2 * result + buf.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(2 + lengthpaint;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(2 + WORDBytes;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(2 +labelBytes;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(2 + length[3];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(2 + lengthPartial;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(2 + length / 2L;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(2 + 0, length);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(2 + buf, offset + length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(2 + bufBytes;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(2 + lengthOutputStream.readableBytes;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(2 + lengthSideEffects;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(2 +BottomBytes;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(2 + lengthgetItemBytes;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(2 + length unknownBytes = result.readableRight;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(2 + length poolCount;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(2 + lengthGATIVE_NewBytes;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(2 * result + 2readable;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(2 + 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(2 +Long.readableBytes(buf, offset + 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(2 + length -= 2 - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(2 + lengthlareVars.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(2 + lengthGATIVE_BIGINT;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(2 * result + 2L;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(2 +fontSize;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(2 + length_2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(2 +Long.readableBytes(buf)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(2 + lengthGATIVE_RADIUS;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(2 + builder.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(2 + lengthRegular.readableBytes;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(buf + 2L;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(2 + lengthGATIVE_L;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(2 + buf;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(2 + length().readableBytes;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(2 + 2readableBytes;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(2 + lengthEncodingSize + 2readable;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(2 +Long.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(2 + lengthdefault 2L;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(2 + length * result.readable;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(2 + length] = result.readableRightBytes();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(2 + lengthInCharBuffer.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(2 + lengthServletContextBytes;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(2 + DateFormat.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(2 + length charno;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(2 + length] = result.readableDate;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(2 + lengthSideEffect -= 2 * result.readable;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(2 + buf, offset + 2readable;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(2 + bbitsCount;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(2 + lengthIncrease;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(2 +Long.readableBytes(buf, offset + 2));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(2 + length -= 2')];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(2 + lengthDelta;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(2 + length * result.readableBytes;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(2 + lengthGATIVE_F];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(2 + length selected;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(2 + lengthInMENT;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(2 + length << 2];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(2 + lengthGATIVE_IMATE) % 2readable;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(2 + lengthxF;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(2 +false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(2 + length1, 2Lineno;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(2 + length -= 2];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(2 + bufposSize;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(2 + fontBytes;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(2 + lengthGATIVE_ress) % 2readable;",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-200": {
        "fixes": [
            {
                "k": 1,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return convert(throwable, t);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return convert(throwable, fn);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return convertPointers(throwable, throwable);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return convert( throwable, t);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return convertnull;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return convertable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return convert(throwable, throwable;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return convertnull(throwable, throwable);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return convertPredicate(throwable, throwable);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return convert(throwable,oot);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return convert(thousands, throwable);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return convertValue(throwable, throwable);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return convert( throwable, throwable);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return convert(throwable, height);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return convertComponent(throwable, throwable);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return convertOnly(throwable, throwable);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return convert(throwable, sw);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return convert(throwable,string);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return convert(throwable, reference);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return convert_0(throwable, throwable);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return convertView(throwable, throwable);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return convertImpl(throwable, throwable);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return convert(thous, throwable);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return convert(throwable, Verification);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return convert(throwable, wanted);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return convertnulls, throwable);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return convert(thousnull, throwable);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return convert(throwable, months);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return convert(throwable, type);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return convertUnit(throwable, throwable);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return convertIf(throwable, throwable);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return convert(throwable, time);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return convertPointers(throwable, t);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return convertException(throwable, throwable);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return convert(throwable, src);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return convert(throwable, dst);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return convertcomposite(throwable, throwable);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return convert(throwable,UI);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return convert(throwable, listeners);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return convertinit(throwable, throwable);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return convert(throwable, v);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return convert(throwable, prop);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return convertAlias(throwable, throwable);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return convert(throwable, Ali);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return convertBoolean(throwable, throwable);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return convert(throwable, s);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return convert>(throwable, throwable);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return convert(t, throwable);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return convert(throwable, parameters);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return convert(throwable, exceptions);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return convertResult(throwable, throwable);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return convertround(throwable, throwable);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return convertPointers(throwable, fn);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return convertPointers, throwable);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return convert<null, throwable;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return convert(throwable, throwable );",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return convertnulls(0, throwable;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return convert(throwable, init);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return convertPointers(0, throwable;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return convert(throwable,UI)[0];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return convert(throwable, annotated);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return convert(throwable, Comment);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return convert(throwable, nodes);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return convert(throwable, TYPE_MATCH;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return convert(throwable,plus);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return convertnulls, throwable;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return convert(throwable, NUM);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return convert(throwable, result);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return convert(throwable, Comparator);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return convert(throwable, body);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return convert(throwable, ce);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return convert(throwable, fs);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return convert(throwable,0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return convert<null, throwable);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return convert( throwable, dst);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return convert(throwable, namespace);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return convert(throwable, fnName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return convertnull(throwable, t);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return convert(throwable,values);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return convert(throwable, seconds);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return convert(throwable,tf);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return convert(throwable,instances);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return convert(throwable, Constants);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return convert(throwable, operand);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return convert(throwable,TextField);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return convert(throwable, JsonArray);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return convert(throwable,UI) - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return convert(throwable, etc);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return convertable(throwable, t);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return convertnull( throwable, t);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return convert(throwable, distributed);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return convert(throwable, t;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return convert(throwable,Visitor);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return convert(throwable,event);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return convert(throwable, 57);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return convert(throwable, NULL_ERROR);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return convert(throwable, JsonArray );",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return convert(throwable, 120);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return convert(throwable,UI)) {",
                "identical": false
            }
        ],
        "buggy_line": "return convert(null, throwable);",
        "fixed_line": "return convert(\"\", throwable);"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (position.length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (enclosing != data.length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (position > data.length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (position != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (bytes.length) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (position.first) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (position != data.length) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (position) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (encapsulator != data.length) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (enclosing != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (position != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (position.charAt) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (inputStart > data.length) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (position.charAt(5) != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (encapsulator) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (position.keys != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( days > data.length) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (position.encapsulator) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (position.charAt(5) != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( VM > data.length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (position.charAt(0) == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (bestValidPos > data.length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (position.length != dataLen) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (position == data.length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (bytes.length != dataLen) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (index > data.length) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (enclosing != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (position.length == dataStart) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (position.length == dataLen) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (position.enclosing != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (position.encapsulator != dataLen) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (position.canContainInline) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (context != data.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (position += data.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (position.has AffineTransform\", dataStart) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (position.charAt(0.0 <= data.length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (position.stackMap != dataLen) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (encapsulator) data[0] == data.length) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (position. zoom) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (position.stackMap != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (position.hasSigns\", dataStart;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (position.charAt(0) == data.length) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (position.hasLF) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (position.stackMap != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (encapsulator != dataMin.length) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (position.DEPRECATED) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (position.iteration != data.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (position;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (position.PreferredSize) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (encapsulator) data[2];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (position.scope) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position.hasSignChar) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (encapsulator != dataLen) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (position.charAt(0) == Integer.MAXIMUM_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (enclosing) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (position.length > data.length) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (bytes.length != dataStart) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (position.encapsulator != dataStart) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (position. absoluteed) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (position.keys != dataLen) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (position.mode == dataStart) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (position.Iter) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (position.enclosing != data.length) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position.keys != Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (inputStart) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (true) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (position.has AffineTransform\", data[2]) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (position.hasSigns\", dataStart) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (position.range) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (position.\"));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (position.Constant) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (position.poolSize) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (position.hasSigns\", dataStart);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (position.encapsulator != dataSeparator) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (position.encapsulator != dataElement) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (EXCEPTION) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (positionNames.length) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (position.charAt(0) == this.position) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (position.firstTickLabels) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (position.charAt(0) == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (position. needs != dataLen) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (position.firstDefinition) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (position.encapsulator != data;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (position.clone) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (bestValidPos) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (position.hasSigns\", data[2]) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (position.split(\",) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (position.charAt(5) != Integer.MAXIMUM_VALUE) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (position.k) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (position.charAt(0) == dataStart) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (position.hasSigns\", data[2];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (position.Equals) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (position.first == dataStart) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (position.length != data.length) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (position. absolute) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (encapsulator) data[0] == dataMin.length) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (position.zed) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (position.length == 1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (position._1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (position.charAt stats) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent = input;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponent = r.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent = options.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponent = inputStack.getGraphics());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponent = x.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent = inputSaled;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponent =e;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponent =[2],edInput.getGraphics());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponent = inputS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponent = inputed;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponent = inputInfo.getGraphics());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponent = inputStackInputPosition;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponent = options.getGraphics());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponent = input.getGraphics());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponent = r.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponent = inputS_stream;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent = 13Info.getGraphics());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponent = constructorInfo.getGraphics());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponent = input_stream;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponent = r.getGraphics());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponent = inputTypes;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponent = position;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponent = inputStackTop;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponent = inputName;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponent = inputS_EXPORTS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponent = inputArray;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponent = inputStack.getGraphics();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponent = x.getGraphics());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponent =UnitInputS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponent = inputStackInfo.getGraphics());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponent =[2],edInput.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponent = r.getGraphicsBound;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponent = inputPrune;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponent = inputArray.getGraphics());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponent = 13InputPosition;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponent = inputXValues;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponent = methoded;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponent = inputS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponent = inputStack.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponent = inputS_PER_BACKSLASH;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponent = inputStack.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponent = 8;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponent = inputArray.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponent = rValue;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponent = inputs;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponent = inputParens;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponent = options.getGraphics();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponent = buf;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponent = r;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponent = newGraphicsTypes;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponent = input == null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponent = inputS_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponent = coloned;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponent = inputDuration;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponent = r.getGraphicsTypes()[0];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponent = inputY_stream;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponent = inputMap;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponent =style;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponent = inputArray.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponent = inputPSaled;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent = inputS_PER_WEEK;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponent = inputS_PER_STRACT_ARRAY;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponent = inputS_EXPORTS_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponent = optionsInputPosition;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponent = inputS_EXPORTS_PER_INSTANCE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponent = r.getGraphicsUTC;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponent = r.getGraphicsHandler;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponent =[2],edInput.getGraphics();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponent = inputS_EXPORTS_PER_CHARS;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent = r.getGraphics();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponent = upperedInputPosition;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponent = ctxt;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponent = dist;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponent = inputArray.getGraphics();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponent = 13;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponent = inputS_PER_BOUNDS;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponent = options.getGraphicsBound;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponent = denominatored;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponent = inputS_ARROW_COMPARATOR;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponent = indexOf;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponent = inputS_VAR;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponent = inputStack.getGraphicsTypes()[0];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponent = input ==\u3c63;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponent = inputS_PER_STRACT_CHARS;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponent = inputS_PER_CHARS;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponent = inputStack.getGraphicsBound;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponent = inputS_EXPORTS_PER_WEEK;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponent =VIDEFINE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponent = inputStackInputSaled;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponent = inputS_ALL_ARRAY;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponent(inputPositionaled);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponent = inputStacked;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponent = input.getGraphics();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponent = inputStackValues;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponent = 13Info.getGraphicsTypes;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponent = inputS_PER_STRACT_ZERO;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponent = skipValues;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponent = inputS_EXPORTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponent =[2],edInput.getGraphicsTypes();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponent = inputStack.getGraphicsHandler;",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (ining.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (\ud801\udc29.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( Offer.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( Assertions.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( ary.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( venue.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (ENUM.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (rgb.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (\u204b.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (\u79e2.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (ceptor.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (\u07d4.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (Done.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (serves.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (ilon.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (osen.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (Processes.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (\u30f5.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (Collection.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (\u2a46.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (\u1e33.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (\u1367.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( addNode.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( zz.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( GetInteger.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (\u6031.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( Stage.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (\u304f.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (\u633d.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (bat.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (PropertyName.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (']=.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (\u0713.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (\u447c.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (orrent.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( incre.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (ObjectName.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (\ud834\udd70.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( setAttribute.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (\u0694.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (\u16e9.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( Hand.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (\u2b21.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( Learn.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (\u6d4b.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (ponent.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (igo.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (Renaming.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (emptyId != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (ignoreIds == null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (AWT.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( ajax.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( Hand == null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (\ud801\udc29.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( Assertions == null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (ining == null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( venue.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (\ucfe3 == null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (3.7 == null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (exet != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (\ud801\udc29.getPipeline().class == null) { // not store 'raw'",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (\u0c4a == null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( ary == null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (ining.getPipeline().class != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( Stage.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (\u204b.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (ignoreIds != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( Offer.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (vocab == null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (orrent.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (\u633d.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( autocomplete == null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (40 == null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (ilon.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (osen.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (exet == null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Processes.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( Assertions.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( Offer == null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (BU == null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (']=.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (\u6031.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (\u79e2.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (\u0694.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (ceptor.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( paintComponent == null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (\u1367.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( Hand.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Collection.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (\u1b01 == null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (xlabelManager == null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (ponent.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (rgb.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( GetInteger.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (ining.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (\u68af == null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (ENUM.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (\u2a46.getPipeline().class == null) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( venue.getPipeline().class == null) { // not store 'raw'",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (ceptor == null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position += i + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position += i * 4 / total;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position += i * 4;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position = i + 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position += parser[i - 1].parseShort(index, i * 16;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position += iText[index + i++] * 16;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position += i * 4 + 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position += i * 1000 + 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position += parser[i + 1].parseShort(index, i * 16;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0 / 16;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position += parser[i - 1].parseShort(index, type * 16;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position += parser[i - 1].parseShort(index, i * 16 + 1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE) << power;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position +=entry.parseShort(index + i * 4 / total;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position += i * 16 + 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE)];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position += parser[i - 1].parseShort(index, i * 16 + 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position += iText[index + i++] * A >> 16;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position += parser[i - 1].parseShort(index, item * 2) + 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0) << 16;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setShortText(index + 1, index, i * 16;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position += parser[i + 1].parseShort(index, value * 16;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position += parser[i - 1].parseShort(index, type * 2) + 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position += parser[index + i++] * A >> 16;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position += i * ancestors[index++], Integer.MAX_VALUE, month++ + 1];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0 args[index++];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position += parser[index + i++] * 16;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position += parser[i + i - 1].parseShort(index, Integer.MAX_VALUE)];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position += i * AVERAGE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position += i * 16 + Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position +=entry.parseShort(index + i, 0.0DUP[index++] * i;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position += i * AargestPosition[index++],Element, i + 1];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position += parser[i - 1].parseShort(index, data[index * 4];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position += parser[i + i - 1].parseShort(index, value * 2)];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position += parser[i - 1].parseShort(index, item * 16;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position += i * 4 + Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setShortText(index + 1, index, i * 16 + 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position += i * 4 / this.data.length - 1];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position += parser[i - 1].parseShort(index, value * 4];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position += parser[i - 1].parseShort(index, type * 16 + 1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE * 16 + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0) << 8 * id;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE + 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0) << 8 * 16;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position += parser[i + i - 1].parseShort(index, value * 16;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setShort(index + 1, index, Short.length - 1];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setShort(index + 1, index, Short.length - i;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position += parser[i + i - 1].parseShort(index, Integer.MAX_VALUE) << power;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setShortText(index + 1, index, Short.length - i * 16;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position += parser[i + i - 1].parseShort(index, Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE * 16;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position += iText[index + i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0)];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position += parser[i - 1].parseShort(index, i + 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position += parser[i - 1].parseShort(index, item * 2)];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setShortText(index + 1, index, Short.length - i;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position += parser[i - 1].parseShort(type, i * 16;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position += i * ancestors[index++], Integer.MAX_VALUE, -1) + 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position += parser[i - 1].parseShort(index, WORD * 16;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position += parser[i - 1].parseShort(index, data[index + 1];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position += i *8)[index++] = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position += parser[i + 1].parseShort(index, type * 16;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position += parser[i - 1].parseShort(index, value * 2)];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0) << 8;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position += parser[i - 1].parseShort(index, i + 1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position += parser[i - 1].parseShort(index, i + 1, 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0};",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position += parser[i - 1].parseShort(index, data[index++]) << 4];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE, 0.0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position += parser.parseShort(index + i * 4 / total;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position += parser[i - 1].parseShort(index, value * 2) + 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0RESET_FROM_SIZE * 16;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position += i * 10) + 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position += parser.set(i + 1, index * 4);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position += i * 4 / this.data.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position += parser[i - 1].parseShort(index, type * 10) + 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE + 2 * index);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position += parser[i - 1].parseShort(index, data[index++];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position += parser[i - 1].parseShort(index, data[index++ * 4];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position += parser[i - 1].parseShort(index, type * 2) << 16;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE) << 8 * 16;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position += parser[i - 1].parseShort(index, data[index * 2)];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE) << 4];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position +=entry.parseShort(index + i, 0.0DUP[index++];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position += parser[i - 1].parseShort(index, item * 2) << 16;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE) + 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position += parser[i - 1].parseShort(index, data[index * 2) << 16;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0 / 4];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setShortText(index + 1, index, Short.length - 1];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position += parser[i - 1].parseShort(index, 0) + 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position += parser[i + i - 1].parseShort(index, month++]) << 16;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position += i * -1) + 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0) << power;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position += parser[i - 1].parseShort(index, Integer.MAX_VALUE) << 16;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position += parser[i - 1].parseShort(index, type * 4];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position += parser[i - 1].parseShort(index, data[index",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0) << 8 * index;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position += parser[i + i - 1].parseShort(index, 0.0 / 2;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "returnuriId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "returnuri.of;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "returnuri.of(), uri;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "returnuri.ofId;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return uriId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "returnuri.of(), uriId);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "returnuri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "returnuri.ofNameId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return CollectionId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "returnuri.ofPoint.getHost(), uri;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "returnuriId.getHost(), uri);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "returnuriFunctionId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "returnuri.ofaccessor.getHost(), uri;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "returnZipId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "returnuri.of(), uriId;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "returnuri.ofIdSupplier.getHost(), uri;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return nameId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnuri.of(), uriPath;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "returnuri.of(), rId);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return uri.of(), rId);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "returnuri.of(), CollectionId);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return uri.of(),uriId);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "returnuri.ofaccessor.getHost(), uri);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returnuri5Id.getHost(), uri;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "returnIssueId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return uri.of;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return desireId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "returnuriId.getHost(), ns;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "returnPRECId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return uri.of(), ns);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return uriId.getHost(), ns;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "returnuriId.getHost(), collection;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return uriId.of(), ns);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return RemoveId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return uri.of(), ns;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "returnuri.ofIdConversion;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "returnuri.of(), CollectionId;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return uriId.getHost(),uriId);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "returnuriId.getHost(), uriPath;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "returnuriId.getHost(), 64;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return XMLId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return uriId.of;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "returnuriId.getHost(), CollectionId);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return uriId.getHost(), name;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return uriId.of(), uri;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "returnuriId.getHost(), referencesId);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return writeBooleanId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return?.getHost(), uri;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "returnZipId.getHost(),uriId;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return namespaceURIId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "returnuriId.getHost(), name;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "returnaddClassId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return injectionId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return uriId.getHost(), ns);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return uriId.of();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "returnuriId.getHost(), CollectionId;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "returnuri.ofNameId.getHost(), ns);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return uriId.getHost(),COMMENT_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "returnASSId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return properties.getHost(), uri;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return CSVId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "returnSeen.getHost(), uri;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return injectionPoint.getHost(), uri;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "returnVERId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return uriId.getHost(),uriId;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "returnuriId.getHost(),COMMENT_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return flushId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "returnuri.ofNameId.getHost(), uri);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "returnuriId.getHost(), XMLId);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "returnuri;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return uri.ofNameId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "returnuriId.getHost(), collection);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "returnuriId.getHost(), ns);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return uriId.of(),uriId);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return leavingId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return uri.of(), 64;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "returnuri.of(), collection;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "returnionsId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return uri.of();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "returnuri.of(), referencesId);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return uriId.getHost(), 64;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "returnuri.ofNameId.getHost(), 64;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return uri.of(), rId;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "returnuri.of(), rId;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "returnuri.of(), ns;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "returnuri.ofIdSupplier.getHost(), uri);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "returnuriId.getHost(), uri = uri;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return uriId.getHost(), uri);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "returnuri.ofNameId.getHost(), uriPath;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "returnconditionalId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return uriId.getHost(), collection;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return uriId.of(), nsPath;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "returnuri.ofId();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return reverse.getHost(), uri;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "returnuri.of(), objectId);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "returnuri.of(), 64;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "returnidedId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "returnuri.of(), 11Id);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return ns.of(), uri;",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position >= 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position + length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position >= Integer.MAX_msk;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position >= 1_msS_msk;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return Integer.MAX_VALUE\", position;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return Integer.MAX_msk - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position >= Integer.MIN_msk;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position >= Integer.MAX_msl_msk;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position >= Integer.MIN_msl_msk;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position >= Integer.MIN_msS_msk;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position >= 15S_msk;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return Integer.MAX_VALUE\", CSTRUCT_msk);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return Integer.MAX_msk;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position >= Integer.MAX_msS_msk;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return Integer.MAX_msk * position;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position >= YEAR_msS_msk;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.positionParameter\", position;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position >= 1 scaled_msS_msk;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return Integer.MAX_msk - this.position\", position;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position >= 1S_msk;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return positionFFF & _position_msS_msk) != 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position >= DateTimeConstants.DEFINE_msk;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position >= Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position >= 1 EMPTY_msS_msk;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position * DateTimeConstants.ACC_msk;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position >=Sign_msS_msk;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position >= 1blocks_msS_msk;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position >= 1 EMPTY_msS_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position >=NON_msS_msk;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position >= S_msS_msk;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position >= Integer.MIN_msl_msS_msk;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return positionFFF & _position_msS_msk;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position >=Into_msS_msk;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position >= Integer.MIN_msS_msl_msk;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position >= DateTimeConstants.DEFINE_msS_msk;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position >= Integer.MIN_msk && position <= 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position >= 1 tomsS_msk;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position >= Integer.MAX_msl_msS_msk;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position >= 1_msS_msl_msk;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return Integer.MAX_msl_msk;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return Integer.MAX_msk - this.position;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return Integer.MAX_msl_mskcurrToken.DEFINE_msk;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position >= Integer.MIN_msk && position <= this.position;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position >= 1 EMPTY_msS_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position >= 1 EMPTY_msS_msk * DateTimeConstants.MILLIS_PER_ms;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position >= 1_msS_msk) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return Integer.MAX_mskcurrBlock\", position;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position >= Integer.MAX_msk) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position >= YEAR_msS_ms (position - 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position >= YEAR_msS_msl_msk;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position >= 1 EMPTY_msS_msk * DateTimeConstants.DEPRECATED_ms;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return Integer.MAX_VALUE\", 15);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return Integer.MAX_msl_mskcurrBlock\", position;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position + 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position >= 1 torowsS_msk;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.DEPRECATED_ms;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position >= 1 EMPTY_msS_msk * DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position >=NO_msS_msk;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.DEPRECATED_msk;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return Integer.MAX_VALUE\", position);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return Integer.MAX_msl_mskcurrToken.DEFINE_msk);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position >= Integer.MAX_msk && position <= 0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position >= 1 EMPTY_msS_msl_msk;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position >= 1 scaled_msS_msk) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position >= Integer.MIN_msk) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position >= 1_msS_ms (position -MathobjectIdWriter.DOUBLE_msk) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position >= Integer.MIN_msk && position <= PAD;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position >= DateTimeConstants.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position * DateTimeConstants.MILLIS_PER_msk);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this.position\", position;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position >= Integer.MAX_msf;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position >= Integer.MIN_msl_msk && position <= 0;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.MILLIS_PER_msk;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return Integer.MAX_msl_mskcurrToken.DEPRECATED\", C_msk);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position >= Integer.MIN_msk * position;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return Integer.MAX_VALUE\", _position;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return Integer.MAX_msl_msk * position;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position >= YEAR_msS_ms (position -assertED_msk);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position >=Sign_msk;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position >= 1_msS_ms (position - this.position;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position >= 1_msS_msk && position <= 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position >= Integer.MAX_msk && position <= this.position;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position >= Integer.MILLIS_msk;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position * DateTimeConstants.DE_ms;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return Integer.MAX_msl_mskcurrToken.DEFINE_msk * position;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return positionFFF & _position_msS_msk) == 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position >= 1 toElement_msk;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return Integer.MAX_msl_msk - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position >= Integer.MAX_msl_msk) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants. des_msk;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return Integer.MAX_msk\", position;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position >= Integer.MAX_msk * DateTimeConstants.DEFINE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position >= Integer.MIN_msk && position <= MAX_msOR_msk;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position >= UNINITIALIZED_msk;",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression2D.Double(0, 0); // Record",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression2D.Double(0, 0, 0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression2D.Double(0, 0); //Coordinates",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression2D.Double(0, 0); //MM-numberOfValid",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // more than one space",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF]); // more than one space already",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfFMM // more than one space",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression2D.Double(0, 0); // should never happen",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // \"Band // more than one space already",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression2D.Double(0, 0, 0); //Coordinates",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // more than one space already",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression2D.Double(0, 0); // syntax we didn't really modify it';",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFMM // more than one space",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression2D.Double(0, 0); //Annotations",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF maxX // more than one space",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFall // more than one space",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression2D.Double(0, 0); // 2d",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF]); // more than one space",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression2D.Double(0, 0); // syntax we didn't found",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // \"Band // more than one space",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // \"body",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFMILLISECOND // more than one space",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // more",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFDir // more than one space",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF]); // more",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF adjusted // more than one space",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression2D.Double(0, 0); // more than one space already",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression2D.Double(0, 0); // equator",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF nodeType // more than one space",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfFMILLISECOND // more than one space",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression2D.Double(0, 0,Select).id=serialize(name);",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF nodeType // more than one space",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF maxX // more than one space",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression2D.Double(0, 0); // syntax we didn't really global",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // the current quad",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression2D.Double(0, 0); //).numberOfValid",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression2D.Double(0, 0); // more than one space",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression2D.Double(0, 0); //Annotations')",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression2D.Double(0, 0, 0); // Record",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression2D.Double(0, 0); // more than one space, state.numberOfValid",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression2D.Double(0, 0); //numberOfValid",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // no changes",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); //itize this right?",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression2D.Double(0, 0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); //ivalues",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression2D.Double(0, 0); // series...",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); //itize this class not happen",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF]); // \"body",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression2D.Double(0, 0); // didn't found",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression2D.Double(0, 0); // state.numberOfValid",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // \"this represents",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression2D.Double(0, 0); // parameters, state.numberOfValid",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression2D.Double(0, 0); //\"));",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // belongs to an escape",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // Record",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression2D.Double(0, 0); //...",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression2D.Double(0, 0); //Dataset",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression2D.Double(0, 0); // key",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression2D.Double(0, 0); // syntax we didn'd",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // normalize zero",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFMILLISECOND // more than one space already",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression2D.Double(0, 0); // multiply",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // since",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfFMM // more than one space).state.number\";",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression2D.Double(0, 0, 0); // syntax we didn't really modify it';",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFsite; // the current quad",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression2D.Double(0, 0, 0); // syntax we didn't found",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // \"Band // more than one space already calculated",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // the current negative",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); //App",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // \"",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF()] {",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); //",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF prod);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); //sign",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // add",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression2D.Double(0, 0); // denominator 10;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); //COLON?",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFocation // more",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression2D.Double(0, 0); //MM-numberOfTOTYPE",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression2D.Double(0, 0,inside);",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression2D.Double(0, 0); // syntax we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression2D.Double(0, 0); // syntax we didn't9 ? 1 : 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression2D.Double(0, 0); // 2d-numberOfValid",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF Collect; // the current quad",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression2D.Double(0, 0); // belongs to an escape",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); //COLON\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // assigns",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // no longer belongs to an escape",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF_1Callback);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFMILLISECOND // more than one space);",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFMM // more than one space already",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression2D.Double(0, 0, 0); // equator",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF]); // the current quad",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfFators) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression2D.Double(0, 0, wccy, state.numberOfF]); // \" + name",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression2D.Double(0, 0); // syntax we didn't columns",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression2D.Double(0, 0,\\nccy, state.numberOfF maxX // more than one space);",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\")      // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\")     // iccid"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = a << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = a << 8) | b[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = r << 8) | a[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = 1 << 8) | a[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = size << 8) | a[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = a << 8) - a[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = u << 8) | a[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = a << 8) | i;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = a << 8) | c;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = size << width - a[i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = r << 8) - a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = size << 8) | b[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l =old << 8) | a[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = minimum << 8) | a[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = p << 8) | a[i];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = size << i;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = size << 6) | a[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = a[i - 1];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l =Distance << 8) | a[i];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = months << 8) | a[i];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l =test << 8) | a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = width << 8) | a[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = val << 8) | a[i];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = size << 8 - a[i];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l =amount << 8) | a[i];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = isl << 8) | a[i];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = u & a[i];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l =()+\" << 8) | a[i];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l =Interfaces[i - 1];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = a << 8) |Construction[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l =PRO - a[i];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = rewrite << 8) | a[i];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = ceiling << 8) | a[i];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = x << 8) | a[i];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = size << a[i];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = c << 8) | a[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = opcode - a[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = a << 8) | i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = size <<ANT - a[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = INITIAL << 8) | a[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = size << 8) - a[i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = field << 8) | a[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = a << 8) | c[i];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l =old << 8) - a[i];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = t << 8) | a[i];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = minimum[i - 1];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = old[i - 1];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = volume << 8) | a[i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = this. 8) | a[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l =ALIAS << 8) | a[i];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = df << 8) | a[i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = merge << 8) | a[i];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = size << polynomial + a[i];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = LOCAL << 8) | a[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = size << 8];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = size << FRAME + a[i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l =c << 8) | a[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = multiplier << 8) | a[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = size << width | a[i];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l =x << 8) | a[i];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = labels[i - 1];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = 1.0 - a[i];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = months << a[i];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = a << 8) | val[i];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = interval - a[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = a << 6) | a[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = delta - a[i];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = b[i - 1];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = size - a[i];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = a << 8) | D[i];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l =Absolute - a[i];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = OBJECT | a[i];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = 1 << 8) | b[i];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = u << 8) | b[i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = a << 8) | adjust[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = a << 8) | adjust;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = field - a[i];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = short[i - 1];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = u & 0x0];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l =end - a[i];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l =Visibility[i - 1];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = size << 8) | c;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = newSize - a[i];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = a << 8) | size;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = area[i - 1];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = size << 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = months << i;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = fill - a[i];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = && a[i - 1];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = x[i - 1];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = a << 8) | j;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = size << x[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = a - 8)];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = size << precision.length];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = a - b[i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l =-1] - a[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = radius - a[i];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = a & b[i];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = size << 8) | i;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = a & 0x0];",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = propName;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = propNameNode.getIgnored;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = node.getIgnored;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = dataShadow.getIgnored;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored =content.getIgnored;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = data;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = Array.getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = getProp != ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = names.getIgnored;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = referenceInfo.getIgnored;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = NO_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = props.getIgnored;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = parent.getIgnored;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = methodAfterName.getIgnored;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = propNameNode;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored =gridorals.getIgnored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = context.getIgnored;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = EmitUtils.getIgnored;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = methodBuffer.getIgnored;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored =gridorals.getIgnored();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = t.getIgnored;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = methodNames.getIgnored;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = recv.getIgnored;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = methodInfo.getIgnored;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = dest.getIgnored;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = compiler.getIgnored;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored =POL.getIgnored;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored =Element.getIgnored;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = getIgnoredReference.getIgnored;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = method.getIgnored;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = getIgnored;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = lazy.getIgnored;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = reference.getIgnored;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = rs.getIgnored;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored =Reference.getIgnored;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = f.getIgnored;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored =CTED.getIgnored;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = NO_PROTOTYPE.getIgnored;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = getIgnored 32,.getIgnored;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = i.getIgnored;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored =occ.getIgnored;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = data.getIgnored;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = getProp != ignorals;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = NO_REF.getIgnored;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = NO_VIESCAPE_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored =y.getIgnored;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = getIgnoredmitUtils.getIgnored;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = will.getIgnored;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = NO_EXPORTS_WITHOUT_TYPE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored =Issue.getIgnored;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = NO_A.getIgnored;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = propNameNode.getIgnored();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = getIgnoredProperties.getIgnored;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = serializers.getIgnored;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = predicate.getIgnored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = iNames.getIgnored;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = receiver.getIgnored;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = minus.getIgnored;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = explicit.getIgnored;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = propNameNodePointer.getIgnored;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored =INDENT_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored =ft.getIgnored;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = propNameNode.getIgnored nopeek();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = explicitName.getIgnored;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = NO_.getIgnored;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = getPropNames.getIgnored();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = getIgnoredZerosorals.getIgnored;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = getIgnoredorals.getIgnored();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = getIgnoredIgnorals;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = getIgnoredSetter.getIgnored;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = dataShadow.getIgnored",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = NO_MATCH;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = getPropNames.getIgnored;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored =ers.getIgnored;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = methodAfterName.getIgnored();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = propNameNode.getIgnoredmarkAnyProperty(propName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = allAny;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getIgnoredForStubbing;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = getIgnored20orals.getIgnored();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = getIgnored20orals;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = propNameNode.getIgnorednumberOf(propName);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnoredMockBuffer(propName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = NO_ON_or_.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored =INDENT_PROTOTYPE.getIgnored;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignorals.getIgnoredCharacterIndex(propName);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = iAny;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = methodAfter.getIgnored;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored =CTED.getIgnored();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.getIgnored(propName);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = NO_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = getIgnoredorals.getIgnored;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored =ers.getIgnored();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = getProp.getIgnored();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = propNameNode.getIgnorednumberOfValidorals;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getIgnoredURI(propName);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = getIgnored.getIgnored;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = propNameNode.getIgnored",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = NO_EXPORTS_or_WITHOUT_TYPE;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (rawType == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class || raw == Object.class) return Object.class;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || raw == short.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class ||Range == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == Object.class) Kit.class;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || out == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || raw ==Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || 0, Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class ||Raw == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || raw == float.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || with == Object.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || raw == byte.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || cls == Object.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class)msg == Object.class;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class) { // p't be Object",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Stringraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || sat == Object.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw.class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || caseType == Object.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "else if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || length == Object.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw != String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class ||matched == Object.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || raw == arguments.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class ||Error == Object.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || fixed == Object.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class ||Local == Object.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || raw ==Style.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || false == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == Std.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || case == Object.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class ||Weight == Object.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || raw == long.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || b == Object.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || \"0 == Object.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] be Object",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] skip",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw instanceof Object.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || raw == ((Object.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class ||Escape == Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || second == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class ||close == Object.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw'",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // p's per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || graph == Object.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class ||3 == Object.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if(raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || read == Object.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || hi == Object.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || for == Object.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314]';",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || getNamespace == Object.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || isVisible == Object.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || Reflect == Object.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) PeriodType.class;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == days.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // p's be Object",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || intr == Object.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw't be Object",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { return Object.class;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || getter == Object.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { // coercing should never happen",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || has == Object.class) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls as per [JACKSON-3",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] skip entries with null values?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || map == Object.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class ||sur == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || arguments == Object.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || against == Object.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] explicit't be Object",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-3",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // coercing should never be Object",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || Option == Object.class) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || className == Object.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || in == Object.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) { // [JACKSON-314] skip entries with null values?",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class ||sat == Object.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || h == Object.class) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls as per [JACKSON",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || Second == Object.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // coercing should never occur?",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class ||ELDS == Object.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == Object.class) {returnTypemsg == Object.class;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == modified.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class ||ms == Object.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw != Object.class) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class ||OTHER == Object.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || binary == Object.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || 48 == Object.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || upper == Object.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encrypted = request;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedDataKeys = request;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encrypted5 = request;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encryptedyped = request;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedDesc = request;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedConf = request;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedAnnotations = request;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encryptedors = request;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encrypted DateUtils = request;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encryptedLine = request;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encrypted decl = request;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encrypted IR = request;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encrypted \") = request;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encrypted description = request;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedNulls = request;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedLIT = request;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encrypted idx = request;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedSort = request;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedutor = request;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedSecond = request;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encrypted parameter = request;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encrypted assuming = request;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encryptedDateFormat = request;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encryptedDeserialize = request;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedAnonymous = request;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encrypted Gson = request;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encrypteduri = request;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedof = request;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encrypted 22 = request;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encrypteder = request;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encrypted78 = request;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encrypted createNewFile = request;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedRGB = request;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedical = request;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedPED = request;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedCall = request;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedARD = request;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encrypted\u65cb = request;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encrypted\u532d = request;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encrypteddays = request;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedeting = request;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encrypted\u2197DataKeys = request;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encrypted prot = request;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedraction = request;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encrypted puts = request;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encrypted found = request;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encrypted Graphics = request;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encrypted observed = request;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedSer = request;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encrypted kub = request;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedage = request;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encrypted sum = request;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encrypted workaround = request;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedgetElement = request;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encrypted\u6fb1DataKeys = request;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encryptedports = request;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encrypted currentValue = request;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedulate = request;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedMM = request;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedfrozen = request;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encrypted voice = request;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encrypted segments = request;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedIDS = request;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encrypted parseInt = request;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encrypted numer = request;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encrypted short = request;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedov = request;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedmd = request;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedRuntime = request;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encrypted Type = request;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encrypted identical = request;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encrypted\u5126DataKeys = request;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encryptedprinter = request;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encryptedtol = request;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encrypted\u7021 = request;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedGet = request;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedvable = request;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encrypted time = request;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encrypted func = request;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedetriDataKeys = request;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedINTER = request;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encrypted sure = request;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encrypted\ub2eb = request;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encrypted parser = request;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedKey = request;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedneeds = request;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encrypted dp = request;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encrypted \"/DataKeys = request;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encrypted\u2197 = request;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encrypted\u2197yped = request;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encrypted alone = request;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encrypted, request = request;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encrypted[( = request;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encrypted plan = request;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encrypted Media = request;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedCli = request;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encrypted % request;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encrypted % request = request;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encrypted RestTemplate = request;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encrypted RC = request;",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private synchronized void add(GraphInput);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private synchronized void addArRecordsInput(methodName);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private synchronized void add(intInput);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private synchronized long addInput = processInput;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private synchronized void add(linkRecordsInput);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private synchronized void addArRecordsInput(targetInput);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private synchronized void addArRecordsInput(ancestorInput);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private synchronized void add( 100.0Input);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private synchronized void addArRecordsInput(annotated);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private synchronized void addArRecordsInput(intInput);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private synchronized void add( UnrecognizedInput);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private synchronized void add(ModuleInput);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private synchronized void addInputResult =\u16c7Input;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private synchronized void addArRecordsInput(methodName, 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private synchronized void addInputResult =\ue7c7Input;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private synchronized void addInput(methodName);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private synchronized void addAr\u54edInput(intInput);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private synchronized void addAr\u258fInput(intInput);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private synchronized long addInput = processInputFactory;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private synchronized void addArRecordsInput(Lookup);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private synchronized void addArRecordsInput(mdInput);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private synchronized void add(angle);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private synchronized void addInput(intProgress);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private synchronized void addArRecordsInput(methodName, currInput);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private synchronized void add(DateTimeFieldInput);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private synchronized void addArRecordsInput(DateTimeField);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private synchronized void add( newMapInput);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private synchronized void addInput(Lookup);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private synchronized void addInput = process;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private synchronized void addArRecordsInput(subplots,GEInput);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private synchronized void addArRecordsInput(convention);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private synchronized void addInput(subplots,SuperTypes);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private synchronized void addInput(int );",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private synchronized void addInput(intBetween);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private synchronized void addInput(Module);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private synchronized void addInputResult = plotInput;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private synchronized void addInputResult = selinuxInput;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private synchronized void add(typeInput);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private synchronized void addArRecordsInput(methodName, labelInput);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private synchronized void addInputResult =ModuleInput;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private synchronized void add(subplots, lengthInput);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private synchronized void addInputResult = changesInputFactory;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private synchronized void addInputResult = currInput;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private synchronized void add(declaration);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private synchronized void addInputResult =\ue7c7InputFactory;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private synchronized void addInputResult = selinuxInputFactory;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private synchronized void addInputResult =ModuleInputFactory;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private synchronized void addInputResult = modInputFactory;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private synchronized void addArRecordsInput(methodName,GEInput);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private synchronized void add(ModulePath);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private synchronized void addArRecordsInput(DateTimeField)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private synchronized void addArRecordsInput(subplots,SuperTypes);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private synchronized void addArRecordsInput(subplots);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private synchronized void addArRecordsInput( input);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private synchronized void addArRecordsInput( collectionInput);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private synchronized void addInput(subplots);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private synchronized void addInputResult =htInputFactory;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private synchronized void addInputResult = FLAG;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private synchronized void addArRecordsInput(methodName,SuperTypes);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private synchronized void add(showInput);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private synchronized void add(dashInput);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private synchronized void addInput =ModuleInputFactory;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private synchronized void addInput(angle);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private synchronized void addArRecordsInput(methodName,keysInput);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private synchronized void addInputResult =\u16c7InputFactory;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private synchronized void addArRecordsInput(int );",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private synchronized void addInput = highestInputFactory;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private synchronized void add( asmInput);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private synchronized void addArRecordsInput( inputName);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private synchronized void addInput(intModule);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private synchronized void addInput(radix );",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private synchronized void addArRecordsInput(intlare );",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private synchronized void addInputResult = minorInput;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private synchronized void addArRecordsInput(subplots, lengthInRecords);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private synchronized void add(estModuleInput);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private synchronized void addInput(subplots, body);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private synchronized void addInput(subplots, 1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private synchronized void addInputResult = input;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private synchronized void addInputResult = TRUE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private synchronized void addArRecordsInput(subplots, body);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private synchronized void addInputResult = minorInputFactory;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private synchronized void addInput(subplots, lengthInRecords);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private synchronized void addInput(radix);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private synchronized void addArRecordsInput(intNodeName );",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private synchronized void addInput(declaration);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private synchronized void addInput(intTickLabels);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private synchronized void addArRecordsInput(subplots,Super);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private synchronized void addArRecordsInput(aliasName);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private synchronized void add(declaration;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private synchronized void addArRecordsInput(methodName, getInternalInput);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private synchronized void addArRecordsInput(intProgress);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private synchronized void addInput(intNodeName );",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private synchronized void addInput(subplots,Super);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private synchronized void addArRecordsInput(intBetween);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private synchronized void addArRecordsInput( > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private synchronized void addInput( way);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private synchronized void addArRecordsInput(radix );",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private synchronized void add( SYInput);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private synchronized void addInput(subplots, length);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private synchronized void addArRecordsInput(subplots, lengthInput);",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOf(x+1)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfValidColumns(title2.number\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOfValidColumns <= 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOfValidColumns(x+1)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberOfValidColumns(2.number\";",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOfValidColumns <= 1) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfValidColumns = dval+\") // 20;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberOf(x+\") // ('0' + 1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberBigx+1 = x+\") // 20;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOfValidColumns <= 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOf(x+\") // current offset",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfx+1 = xHigh - 20;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberOf(x+1)) { // x is entirely at the current quad, state.",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberOf(x+\") //;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOf(x+1)) { // x is entirely at least 3 bytes",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfValidColumns(dx).x < 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberBigx+1 = x+\") // exp",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOf(x+1)) { // x is entirely at least",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberBigx+1 = x+\") // gramps;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberOf(x+1)) { //\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOf(x+1)) { // sanity check",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOf(x+\") // current);",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberBigx+1 = x+\") // cause",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+\") // cause",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfValidColumns = c+\")\";",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberBigx+1 = x+\") // ('0' + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOfValidColumns = dval+\") // current;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOf(x+1)) { // + 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfValidColumns <= dval;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfValidColumns(w+1)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberBigx+1 = x+\") // addTo > 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+\") //XY2.number",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOf(x+\") // current order",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfValidColumns(title2.number};",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberBigx+1 = x+\") // current order",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberBigx+1 = x+\") // exps3.number here",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOf(x+\") //Parameters, state.base",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberBigx+1 = x+\")\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberOf(x+\") // never happen but...",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOf(x+1)) { // should never happen",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberBigx+1 = x+\") // current;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOfValidColumns = dval+\") // add",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberBigx+1 = x+\") //Parameters.numberOfValidColumns <= 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberOfValid().number(baseName+\") // current);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberOfValidColumns(baseName+\") // current);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOf(x+\") // 9;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberOfx+1(c+\") // current order",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOf(x+1)) { // should never occur?",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfValidColumns = dval+\") // current order",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberBigx+1 = x+\") // current at least",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberBigx+1 = x+\") //1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOf(x+\") // never happen\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOf(x+1)) { // x is entirely",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberBigx+1 = x+\") // exps3.numberOfValidColumns <= 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number get(x+1)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberBigx+1 = x+\") // current at least for ns;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberBigx+1 = x+\") //Parameters.numberOfValidColumns;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(x+\") //Parameters, state.base",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberOfValidColumns = dval;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfx+1 = xHigh;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOf(x+\") //Central offset",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberBigx+1 = x+\") //bits",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOfx+1)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberBigx+1 = x+\") // vertical;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOf(x+1)) // never happen",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberOfValid().number(baseName);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberBigx+1 = x+\") //Parameters.number here",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOfx+1(c+\") // current offset",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(x+1)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberBigx+1 = x+\") // add",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberOfx+1 = xHigh - 20; // or:",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOf(x+\") // current;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberOfValidColumns = dval+\") // add a2.number;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOf(x+1)) { // since we't need 6 bytes",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberOf(x+\") //Central case already",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOf(x+\") // + 1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberOf(x+1)) { // should never happen but...",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberBigx+1 = x+\") // current offset",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOf(x+1)) { // x is entirely at the current of s",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberBigx+1(c+\") // cause",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberBigx+1 = x+\") // current);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberBigx+1 = x+\") // BYTE",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberBigx+1 = 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberBigx80 = x+1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberOf(x+\") // never happen",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+\") // current offset",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberOfValidColumns(title2.number;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOf(x+1)) { // x is entirely at the",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberBigx+1 = x+\") // add a sanity check",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberOfx+1 = x+\") // current order",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberBigx+1 = x+\") //Parameters.numberOfValidColumns <= 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+\") // state.",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberOfValidColumns(NewLine);",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+\") // or invalid fields",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOf(x+1)) { // x is entirely at the current quad, state.number",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOf(x+1)) { // x is entirely at the currentshape <= 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOf(x+1)) { // since we need the current quad, state.",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOfValidColumns(arg+\") //;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberBigx+1 = x+\") // exps1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberOf(x+1)) { // x is entirely at the current quad oneSTANDARD",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\")                     // power",
        "fixed_line": ".number(\"(x+)?,\")                    // power"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new Concurrent",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new Concurrent || attribute.length;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new Concurrentattributes;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new Concurrent;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentName.length;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentserializationHashMap.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentList.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new Concurrentserialization.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentserializationHashMap;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new Concurrentclass.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new Concurrenta.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentSet.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new Concurrent h.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new Concurrentep.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new Concurrent est;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentFinal.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new Concurrentattributes.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new Concurrent || attribute.length == 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentidType.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new Concurrentdeser.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentKeys.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentserializationHashMap(attributeCount);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new Concurrentida.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new Concurrent emptyHashMap.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new Concurrent lhs.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentPredicate.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentIssue.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentThis.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentInner.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentserializationHashMap, h.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentAttribute.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new Concurrent ex.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentPanel.length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentidList.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new Concurrent == _xmlHashMap.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new Concurrent][1];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentMask;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new Concurrent \"_\"a.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new Concurrent nope.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentserializationHashMap, syAttribute.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentStack.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentPair.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentValidHashMap(attributeCount);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new Concurrent K>(attributeCount);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentnumberOfValidColumns.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new Concurrent status.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new Concurrent ? char.length : 0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new Concurrentrapped.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new Concurrentday.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new Concurrent || attribute.length == 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new Concurrent(attributeCount);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new Concurrent node.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new Concurrent rightHashMap.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentDate[0].length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new Concurrent space.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentList;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new Concurrent K>(attributeCount;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentNull.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentserializationHashMap, context.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new Concurrent lhsHashMap.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentSpec.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new Concurrent emptyHashMap(attributeCount);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new Concurrentlist.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new Concurrent w.length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new Concurrent || attribute == char.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new Concurrentfalse;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentRGB.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new Concurrent(_name, attributes.length);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new Concurrent ? char.length : 16;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new Concurrent ? char.length : 4;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new Concurrent w;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentserializationHashMapType.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new Concurrentaps;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new Concurrent(_attributeCount);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentZERO.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new Concurrent(_name.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentDeprecated.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentCount;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new Concurrent=0,attributes;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new Concurrent now;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new Concurrent K>(attributes.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new Concurrent nopeek.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new Concurrent!=attributes;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentidHashMap.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new Concurrent cmp;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new Concurrentt;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentserializationHashMap(attributeCount;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new Concurrent != 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentserializationHashMap, polynomials.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentserializationHashMap, polynomialOrEnum.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentserializationHashMapSideEffects.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new Concurrent selattributes;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentserializationHashMap, allNames.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new Concurrent hashCode;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new Concurrent(_attributeCount;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentserializationHashMapSideEffectsList.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentValidHashMap.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new Concurrentfalse);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentValidHashMap(attributeCount;",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType() && object.getType().contains(fieldNames);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType() && object.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType() && object.getTypeArray.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType() && object.getTypeFactory;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType() && object.getType();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType() ||fieldNames.contains(object);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || object;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType() && fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType() && object.getType().contains(object);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType() && object.getType;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType() || fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType() && object.getType());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType() && object.contains;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType() && fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType() != object && fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType() || object.getType;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType() != 0 || fieldNames.contains(object);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || i);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType() ||fieldNames.contains(object) && i.getName;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType() && object.getType().contains;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType() || fieldNames.contains(object);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType() && fieldNames.contains(fieldArray;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType() || Double.isArray;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType() || object.getType();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType() || fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || i;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType() && object.isArray()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType() || iNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType() && fieldNames.contains(fieldValue) != object;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType() && objectNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType() != object && fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType() != object || fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType() || iNames.contains(object);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType() && object.contains().isArray;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType() && fieldNames.contains(fieldValue + ignored.getName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType() && object.getTypeInteger.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType() && i.isArray;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType() < 0 || fieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType() && object.isArray();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType() && objectNames.contains(fieldValue - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType() != 0 || fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType() && fieldNames.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType() && object.getTypeArray.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType() && fieldNames.contains(object) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - ignored.getName;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType() || iNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType() && object.getTypeArray.getName;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType() && fieldNames.contains(fieldSeparator);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType() ||fieldNames.contains(object) && i;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || i != object;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType() && object.getTypeArray.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType() ||fieldNames.contains(object) != 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType() && object.iFieldNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return fieldClass < 0 || fieldNames.contains(fieldValue) && object.getName;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType() || fieldNames.contains(fieldValue) != 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType() && object.isArray;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType() != object || fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType() && fieldNames.contains(fieldValue - 1 != object;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType() && fieldNames.contains(fieldSourceName;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || Double.getName;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || ignored.getName;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType() != object && fieldNames.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType() != object && fieldNames.contains(fieldValue - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType() && object.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || desc;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType() || iNames.contains(object) && ignored.getName;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType() || fieldNames.contains(object) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType() && fieldNames.contains(fieldValue) != 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType() && fieldNames.contains(fieldValue || Base.getName;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType() && fieldNames.contains(fields);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType() && object.getTypeArray.contains(fieldSourceName);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType() && ignored.isArray;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType() && iNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field instanceof().isPrimitive && fieldNames.contains(object) || i.getName;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType() && fieldNames.contains(fieldWIDTH;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType() && fieldNames.contains(fieldSourceName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType() && object.getTypeParameters.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType() && Double.isArray;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType() ||fieldNames.contains(object) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType() != object && fieldNames.contains(fieldArray;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType() && object.getType().contains(fieldNames;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.getType() != object && fieldNames.contains(fieldValue || i;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType() < 0 || fieldNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field != 0 && fieldNames.contains(fieldValue || object.getType());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType() ||fieldNames.contains(object) && object;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field instanceof().isPrimitive && fieldNames.contains(object) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType() || propertyNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType() && fieldNames.contains(fieldValueName);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType() != object || fieldNames.contains(object);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.getType() || fieldNames.contains(fieldValue) != object;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field != clazz && fieldNames.contains(fieldValue || object.getType());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.getType() || Base.isArray;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return fieldClass != 0 || field.getType() {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return fieldClass < 0 || field.getType() {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return fieldClass && fieldNames.contains(fieldValue) != 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType() != object && fieldNames.contains(fieldSourceName;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return fieldClass < 0 || fieldNames.contains(fieldValue) && ignored.getName;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getType() && propertyNames.contains(fieldValue - 1;",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOfValidColumns <= 0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfValidColumns <= 1) { // should never happen",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOfValidColumns().length+1; // normalize zero.",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOfValidColumns <= 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never happen",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets here",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfValidColumns <= dminus;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberOfValidColumns <=largest, 0, data.length);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOfValidColumns().length+1 ? 1 : 0);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOfValidColumns <= 1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfValidColumns().length+1; // normalize it'll set on",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfValidColumns <= 0) { // should we err on negative",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberOfValidColumns().length+1; // normalize it't be 2d",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberOfValidColumns(). current, result[1] * 2d);",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOfValidColumns <=largest, 0, 0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfValidColumns = d+\") // 20;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfValidColumns(). current, result[1] * 2d;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfValidColumns <= 1) { // can't really need 6",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberOfValidColumns <= 127) { // should never happen",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't here",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never occur?",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOfValidColumns().length+1XValues, time / 2d);",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberOfValidColumns <= dval;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberOfValidColumns().length+1 { // should never happen",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfValidColumns = d+\") // 20",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfValidColumns <= 127) ? ad : c.numberOf)?;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOfValidColumns().length+1; // normalize it'll set flag",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOfValidColumns(). current, result[1] * 2d; // or:",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfValidColumns <= 0) { // should never happen",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never be negative",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberOfValidColumns <= 2) { // should never happen",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberOfValidColumns().length+1; // normalize it't be SHORT",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOfValidColumns().length+1; // normalize it't be negated",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets this",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOfValidColumns().length+1; // normalize it't here",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberOfValidColumns = d5 - 1; // should never happen",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfValidColumns().length+1 * 2d; // or:",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberOfValidColumns = d+\") // cls.numberOf)? 2, 2d",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberOfValidColumns().length+1d[1];",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOfValidColumns <= d');",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberOfValidColumns().length+1 { // should never occur?",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOfValidColumns = d[1]+1; // normalize zero.",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberOfValidColumns <= 1) { // should never occur?",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't need 6",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberOfValidColumns = d+\") // w begin, 0);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOfValidColumns = d5+1]; // should never happen",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberOfValidColumns = d[1][c+i+1]; // should never happen",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOfValidColumns().length+1XISTORE = 0, data.length * 2d);",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfValidColumns = d[2]; // 0, 0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberOfValidColumns().length+1XValues, 0);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOfValidColumns().length+1XISTORE = 0, data.length * 2dValue);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOfValidColumns().length+1XValues, time / 2d; // i",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets this right?",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberOfValidColumns().length+1XISTORE = 0, data.length);",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOfValidColumns().length+1 * 2d; // 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets this >> 2d",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberOfValidColumns().length+1; // normalize it't do zero.",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOfValidColumns <=lamic.number, 2d;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberOfValidColumns <= 2d, d);",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfValidColumns().length+1; // normalize it'll set",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOfValidColumns <=lamic.number, 2d; // 0, 0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfValidColumns <= 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOfValidColumns <= 0x7FFFFFFF; // should never be negative",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets thisintern, 0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets this isSeparatorAtTop",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberOfValidColumns().length+1X(1, 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberOfValidColumns().length+1; // normalize it't be one",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets this stage",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberInt = d5]; // should never happen",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberOfValidColumns <= 0x7FFFFFFF;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberOfValidColumns <= d ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOfValidColumns = d[1] - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberOfValidColumns().length+1XISTORE = 0, 0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOfValidColumns().length+1 * 2d; // lower case",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberOfValidColumns = d[1]+1]; // should never happen",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOfValidColumns <= d 10);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberOfValidColumns().length+1XISTORE = 0, data.length * 2dCount);",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberOfValidColumns().length+1; // normalize it't found",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do zero",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberOfValidColumns().length+1XISTORE = 0, data.length * 2dCount;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets here",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberOfValidColumns <= 1) { // can't happen",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberOfValidColumns().length+1XValues, time / 2d); // lower case",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberOfValidColumns = d[1][c+i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberOfValidColumns().length+1; // normalize it't be negative",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberOfValidColumns().length+1; // normalize it't be 2d+\")",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberOfValidColumns().length+1 * 2d; // or:mm of current, 0);",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfValidColumns(). //(numer, 2, 2d);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfValidColumns().length+1 { // BMP",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets this is negative",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberOfValidColumns().length+1; // normalize it'll, 0);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberOfValidColumns(). //(numer, 2, 2d');",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberInt = d5]; // should never happen, 0, 0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberOfValidColumns().length+1 ? 1 : 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOfValidColumns <=largest, 0, data.length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really modify it'd",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOfValidColumns().length+1d 8; // normalize zero.",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOfValidColumns().length+1 * 2d; // 0, 0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberOfValidColumns = d[1] - 1; // should never gets this class not do we didn't really gets this isSeparatorAtNon",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberOfValidColumns <= 0x7FFFFFFF; // should never happen",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\")                    // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional()         // adc 2"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.hasNext) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.hasNext()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parser.hasNext;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (position.hasNext) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext() {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.hasNext == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if exception.hasNext()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if exception.hasNext;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ifparser.hasNext()) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if(position.hasNext) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (position.hasNext()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ifparser.hasNext;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELTA) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DELTA) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ifparser.hasNext() {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.hasNext == INVALID_UNQUOTED_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if exception.hasNext() {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (opcode.hasNext) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parserList.hasNext) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parserList.hasNext()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (position.hasNext == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEPRECATED) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEFINE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_VAR) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.hasNextING_ZOTED_RESETS_BOTH_COMMAND;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.hasNextING_ZOTED_RESETS_BOTH_COMMAND) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if exception.hasNextChecked) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEFINE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.hasNextChecked) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_START) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_VAR) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (position.hasNext;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.hasNext ==[1], position) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_START) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tmp.hasNext) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DEPRECATED) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext == 1970) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DEFINE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.hasNext == INVALID_NO) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_VAR) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.hasNext == INVALID_VAR) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.hasNextRenaming) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DEFINE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (oldDO.hasNext) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_VALUE) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.hasNext, position) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if count.hasNext;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (needed.hasNext) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.hasNext == parameterTypes.START_OF_EXTENDED) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if exception.hasNext == 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_VAR) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELit.next) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_VALUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.hasNext == FindTOTYPE_VAR) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (item.hasNext) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DEL) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.hasNext == FindTOTYPE_START) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ifializers.hasNext()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.hasNext == INVALID_NO_VALUE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.hasNext == parameterTypes.START_OF_STRUCTION_KEY) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.hasNextING_ZOOM_RESETS_BOTH_COMMAND;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.hasNext == parameterTypes.START_OF_EXPORTS_ERROR) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.hasNext == INVALID_NO_VAR) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DESERVE_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.hasNext == INVALID_DEFINE.START) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.hasNextING_ZOOM_RESETS_BOTH_COMMAND) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DELit.next) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (oldDOW.hasNext) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_VALUE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ifparser.hasNext) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELit) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.hasNext || parser.hasNext) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.hasNextBuffer) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_RIGHT) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.hasNext == desired_UNQUOTED_VALUE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.hasNextING_ZOTED_OUT_BOTH_COMMAND;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.hasNext == FindTOTYPE_render) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if u.hasNext;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (\"\".equals(methodName)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_MEMBER_DEL) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.hasNext == INVALID_UNPROTOTYPE_item) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.hasNext1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.hasNextING_ZOTED_OUT_VALUE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_VALUE) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.hasNextING_ZOTED_OUT_BOTH_COMMAND) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.hasNextListener) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.hasNext == parameterTypes.START_OF_STRUCTION_VALUE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.hasNext == debuggingDO {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELIMIT) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DESERVE_OPTION ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.hasNext == 1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_RIGHT) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.hasNext == XMLStream) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.hasNext == debuggingNTHETIC) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.hasNextRule) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.hasNext == 2) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if exception) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (ClassReader.hasNext) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELABLE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.hasNext == INVALID_PROTOTYPE_MEMBER_DELTA;",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    }
}