{
    "Closure-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "Context rhsContext = p.child;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Context rhsContext = p.child;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Context rhsContext = p.OTHER;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Context rhsContext = p.OTHER;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Context rhsContext = p.Type;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Context rhsContext = p.Type;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Context rhsContext = p.type;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Context rhsContext = p.type;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Context rhsContext = p.height;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Context rhsContext = p.height;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Context rhsContext = p.dCount;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Context rhsContext = p.dCount;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Context rhsContext = p.right;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Context rhsContext = p.right;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Context rhsContext = p.name;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Context rhsContext = p.name;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Context rhsContext = p.node;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Context rhsContext = p.node;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Context rhsContext = p.annotations;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Context rhsContext = p.annotations;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Context rhsContext = p.getNext;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Context rhsContext = p.getNext;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Context rhsContext = p.];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Context rhsContext = p.];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Context rhsContext = p.newExpr;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Context rhsContext = p.newExpr;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Context rhsContext = p.childCount;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Context rhsContext = p.childCount;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Context rhsContext = p.dump;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Context rhsContext = p.dump;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Context rhsContext = p.next;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Context rhsContext = p.next;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Context rhsContext = p.context;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Context rhsContext = p.context;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Context rhsContext = p.helper;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Context rhsContext = p.helper;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Context rhsContext = p.prov;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Context rhsContext = p.prov;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Context rhsContext = p.header;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Context rhsContext = p.header;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Context rhsContext = p.left;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Context rhsContext = p.left;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Context rhsContext = p.2):Context;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Context rhsContext = p.2):Context;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Context rhsContext = p.module;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Context rhsContext = p.module;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Context rhsContext = p.predicates;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Context rhsContext = p.predicates;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Context rhsContext = p.ref;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Context rhsContext = p.ref;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Context rhsContext = p.prevExpr;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Context rhsContext = p.prevExpr;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Context rhsContext = p.predecessorCount;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Context rhsContext = p.predecessorCount;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Context rhsContext = p. blocked;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Context rhsContext = p. blocked;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Context rhsContext = p.d;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Context rhsContext = p.d;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Context rhsContext = p.ly;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Context rhsContext = p.ly;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Context rhsContext = p. requires;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Context rhsContext = p. requires;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Context rhsContext = p. getOp;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Context rhsContext = p. getOp;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Context rhsContext = p.getName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Context rhsContext = p.getName;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Context rhsContext = p. Parse;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Context rhsContext = p. Parse;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Context rhsContext = p. Button;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Context rhsContext = p. Button;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Context rhsContext = p.Exit;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Context rhsContext = p.Exit;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Context rhsContext = p.in;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Context rhsContext = p.in;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Context rhsContext = context;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Context rhsContext = context;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Context rhsContext = p. millisecond;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Context rhsContext = p. millisecond;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Context rhsContext = firstContext;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Context rhsContext = firstContext;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Context rhsContext = p.docCount;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Context rhsContext = p.docCount;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Context rhsContext = p.Cause;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Context rhsContext = p.Cause;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Context rhsContext = p.refs;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Context rhsContext = p.refs;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Context rhsContext = p.JSType;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Context rhsContext = p.JSType;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Context rhsContext = p.last;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Context rhsContext = p.last;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Context rhsContext = p.ARRAY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Context rhsContext = p.ARRAY;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Context rhsContext = p.instance;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Context rhsContext = p.instance;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Context rhsContext = p.predecessor;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Context rhsContext = p.predecessor;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Context rhsContext = p.rightType;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Context rhsContext = p.rightType;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Context rhsContext = p.restrict;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Context rhsContext = p.restrict;",
                "identical": false
            }
        ],
        "buggy_line": "Context rhsContext = Context.OTHER;",
        "fixed_line": "Context rhsContext = getContextForNoInOperator(context);"
    },
    "Math-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "return imaginary;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return imaginary;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return NaN;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return NaN;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return ZERO;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return ZERO;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "returncalculated;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "returncalculated;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return Double.POSITIVE_VALUE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return Double.POSITIVE_VALUE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Double.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return Double.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "returnimaginary;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "returnimaginary;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return result;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return result;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return Double.MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return Double.MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "returnAngle;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returnAngle;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return Double.MILLIS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return Double.MILLIS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return Double.POSITIVE_PER_SECOND;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return Double.POSITIVE_PER_SECOND;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "returnround;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "returnround;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Double.POSITIVE_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return Double.POSITIVE_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "returnField;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "returnField;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return Double.MINUTES_VALUE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return Double.MINUTES_VALUE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return Double.MIN_PER_SECOND;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return Double.MIN_PER_SECOND;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return Double.S_PER_SECOND;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return Double.S_PER_SECOND;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return Double.MIN_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return Double.MIN_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return Double.START_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return Double.START_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return c;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return c;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return real;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return real;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return Double.START_PER_SECOND;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return Double.START_PER_SECOND;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_MINUTES_VALUE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_MINUTES_VALUE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_STANDARD;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_STANDARD;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return Double.MINUTES_PER_SECOND;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return Double.MINUTES_PER_SECOND;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return Double.POSITIVE_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return Double.POSITIVE_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_INT;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_INT;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return Double.POSITIVE_PER_SE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return Double.POSITIVE_PER_SE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_ includes;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_ includes;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_FLOAT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_FLOAT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return Double.POSITIVE_PER_EFFECTS_INT;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return Double.POSITIVE_PER_EFFECTS_INT;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return Double.MILLIS_PER_SE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return Double.MILLIS_PER_SE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return Double.POSITIVE_COMMA;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return Double.POSITIVE_COMMA;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_P;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_P;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_round;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_round;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return Double.POSITIVE_PER_EFFECTS_COMMA;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return Double.POSITIVE_PER_EFFECTS_COMMA;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_bucket;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_bucket;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_ ZERO;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_ ZERO;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return Double.MILLIS;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return Double.MILLIS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return Double.POSITIVE_PER_EFFECTS_M;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return Double.POSITIVE_PER_EFFECTS_M;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_URL;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_URL;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_graph;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_graph;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_NUMBER;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_NUMBER;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_DOUBLE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_DOUBLE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_Rows;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return Double.POSITIVE_PER_EFFECTS_PER_Rows;",
                "identical": false
            }
        ],
        "buggy_line": "return NaN;",
        "fixed_line": "return INF;"
    },
    "Chart-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return \" title=\\\"\" + toolTipText + urlText;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return \" title=\\\"\" + toolTipText + urlText;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return \" title=\\\"\" + toolTipText + this.urlText;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return \" title=\\\"\" + toolTipText + this.urlText;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + urlText;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + urlText;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return \" title=\\\"\" + toolTipText + this.url;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return \" title=\\\"\" + toolTipText + this.url;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return \" title=\\\"\" + toolTipText + this.toolTipText;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return \" title=\\\"\" + toolTipText + this.toolTipText;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + toolTipText;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + toolTipText;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return \" title=\\\"\" + toolTipText + escapeText;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return \" title=\\\"\" + toolTipText + escapeText;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return \" title=\\\"\" + toolTipText + 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return \" title=\\\"\" + toolTipText + 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + this.urlText;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + this.urlText;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return \" title=\\\"\" + toolTipText + \")\";",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return \" title=\\\"\" + toolTipText + \")\";",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return \" title=\\\"\" + toolTipText + \"TipText + toolTipText;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return \" title=\\\"\" + toolTipText + \"TipText + toolTipText;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return \" title=\\\"\" + toolTipText + inline;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return \" title=\\\"\" + toolTipText + inline;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return \" title=\\\"\" + toolTipText +ByTipText;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return \" title=\\\"\" + toolTipText +ByTipText;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return \" title=\\\"\" + toolTipText + \" url\" + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return \" title=\\\"\" + toolTipText + \" url\" + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \"\\n\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \"\\n\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return \" title=\\\"\" + toolTipText + LENGTH;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return \" title=\\\"\" + toolTipText + LENGTH;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return \" title=\\\"\" + toolTipText + \" + toolTipText;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return \" title=\\\"\" + toolTipText + \" + toolTipText;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + 1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return \" title=\\\"\" + toolTipText + \" url\" + toolTipText;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return \" title=\\\"\" + toolTipText + \" url\" + toolTipText;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return \" title=\\\"\" + toolTipText +KEY;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return \" title=\\\"\" + toolTipText +KEY;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return \" title=\\\"\" + toolTipText + targetClass + toolTipText;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return \" title=\\\"\" + toolTipText + targetClass + toolTipText;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return \" title=\\\"\" + toolTipText + \" url\" + toolTipText + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return \" title=\\\"\" + toolTipText + \" url\" + toolTipText + toolTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return \" title=\\\"\" + toolTipText +OutTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return \" title=\\\"\" + toolTipText +OutTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + \" + toolTipText;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + \" + toolTipText;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + this.url;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + this.url;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + \"\\n\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + \"\\n\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return \" title=\\\"\" + toolTipText + divisor;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return \" title=\\\"\" + toolTipText + divisor;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return \" title=\\\"\" + toolTipText + targetClass;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return \" title=\\\"\" + toolTipText + targetClass;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return \" title=\\\"\" + toolTipText + \"TipText + urlText;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return \" title=\\\"\" + toolTipText + \"TipText + urlText;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + escapeText;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + escapeText;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \")\";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \")\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + this.url;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + this.url;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText + this.urlText;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText + this.urlText;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \" + toolTipText;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return \" title=\\\"\" + toolTipText + toolTipText + \" + toolTipText;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + this.urlText;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return \" title=\\\"\" + toolTipText + urlText + this.urlText;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return \" title=\\\"\" + toolTipText +OutTipText;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return \" title=\\\"\" + toolTipText +OutTipText;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return \" title=\\\"\" + toolTipText + \", \" + toolTipText;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return \" title=\\\"\" + toolTipText + \", \" + toolTipText;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return \" title=\\\"\" + toolTipText +ByTipText + toolTipText;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return \" title=\\\"\" + toolTipText +ByTipText + toolTipText;",
                "identical": false
            }
        ],
        "buggy_line": "return \" title=\\\"\" + toolTipText",
        "fixed_line": "return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText)"
    },
    "Math-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "ret = Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ret = Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ret = Double.doubleToLongBits(rhs) - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ret = Double.doubleToLongBits(rhs) - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ret = Double.doubleToLongBits(rhs) - rhsBits;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ret = Double.doubleToLongBits(rhs) - rhsBits;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue && rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue && rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue || rhs.doubleValue;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.NEGATIVE_RawLongBits;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.NEGATIVE_RawLongBits;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ret =rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ret =rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_RawLongBits;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_RawLongBits;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhsBits;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhsBits;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_INFINITY && rhs;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberToRawLongBits;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberToRawLongBits;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleValue;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleValue;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToLongBits == Double.doubleValue;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToLongBits == Double.doubleValue;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_RawLongBits;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.NEGATIVE_RawLongBits;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.doubleToLongBits) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.doubleToLongBits) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs.doubleToLongBits == Double.doubleValue;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs.doubleToLongBits == Double.doubleValue;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue) rhsBits;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleValue) rhsBits;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ret = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ret = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.END;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.END;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.NEGATIVE_RawLong;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.NEGATIVE_RawLong;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleValue == Double.doubleValue;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleValue == Double.doubleValue;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.class && rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.class && rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.numberDouble.doubleValue || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.numberDouble.doubleValue || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleValue == Double.doubleToLongBits;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleValue == Double.doubleToLongBits;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs.doubleToRawLong.doubleValue;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.Break' || rhs.doubleToRawLong.doubleValue;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberBits && rhsBits;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ret = Double.doubleToRawLongBits(rhs.doubleToLongBits == Double.numberBits && rhsBits;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue && rhs.doubleToLongBits;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue && rhs.doubleToLongBits;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits || rhs.doubleToRawLong;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits || rhs.doubleToRawLong;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubledoubleToLongBits == Double.doubleToLongBits || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubledoubleToLongBits == Double.doubleToLongBits || rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue || rhs.doubleToRawLong.doubleValue;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleValue || rhs.doubleToRawLong.doubleValue;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ret = Double.doubleToRawLongBits % 2 == Double.doubleToLongBits",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ret = Double.doubleToRawLongBits % 2 == Double.doubleToLongBits",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits || rhs.doubleToRawLong.doubleValue;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.doubleToLongBits || rhs.doubleToRawLong.doubleValue;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToRawLong.doubleValue;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY || rhs.doubleToRawLong.doubleValue;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY &&rhs.doubleToLongBits;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ret = Double.doubleToRawLongBits = Double.doubleToLongBits == Double.POSITIVE_INFINITY &&rhs.doubleToLongBits;",
                "identical": false
            }
        ],
        "buggy_line": "ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));",
        "fixed_line": "ret = (real == rhs.real) && (imaginary == rhs.imaginary);"
    },
    "Jsoup-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final Map unescapePattern = Pattern;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final Map unescapePattern = Pattern;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final Map unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final Map unescapePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final NavigablePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final NavigablePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final PatternMustPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final PatternMustPattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final Pattern makePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final Pattern makePattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final Pattern&Pattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final Pattern&Pattern = Pattern.compile;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final Pattern pkga = Pattern.compile;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final Pattern pkga = Pattern.compile;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final Pattern printer = Pattern.compile;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final Pattern printer = Pattern.compile;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final Patternprops = Pattern.compile;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final Patternprops = Pattern.compile;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final Pattern==Integer = Pattern.compile;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final Pattern==Integer = Pattern.compile;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-40;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final PatternservePattern = Pattern.compile[a-inputPtr-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1]-1;",
                "identical": false
            }
        ],
        "buggy_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");",
        "fixed_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");"
    },
    "Csv-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "final boolean emptyHeader = header.trim();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final boolean emptyHeader = header.trim();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final boolean emptyHeader = header.trim;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final boolean emptyHeader = header.trim;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final boolean emptyHeader = header.trim != header;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final boolean emptyHeader = header.trim != header;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final boolean emptyHeader = header.trimMIN_VALUE;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final boolean emptyHeader = header.trimMIN_VALUE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final boolean emptyHeader = header.trimInvocations.isEmpty();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final boolean emptyHeader = header.trimInvocations.isEmpty();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final boolean emptyHeader = header.trim50.isEmpty();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final boolean emptyHeader = header.trim50.isEmpty();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final boolean emptyHeader = header.trimCheckBox.isEmpty();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final boolean emptyHeader = header.trimCheckBox.isEmpty();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final boolean emptyHeader = header.trimactic.isEmpty();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final boolean emptyHeader = header.trimactic.isEmpty();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final boolean emptyHeader = header.trimAND_PART_FLAG;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final boolean emptyHeader = header.trimAND_PART_FLAG;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final boolean emptyHeader = header.trimmed;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final boolean emptyHeader = header.trimmed;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final boolean emptyHeader = header.trimAND_PART != header;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final boolean emptyHeader = header.trimAND_PART != header;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final boolean emptyHeader = header.trimAND_PART_A_STATE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final boolean emptyHeader = header.trimAND_PART_A_STATE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final boolean emptyHeader = header.trim().isEmpty;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final boolean emptyHeader = header.trim().isEmpty;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final boolean emptyHeader = header.trimBuffer.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final boolean emptyHeader = header.trimBuffer.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final boolean emptyHeader = header.trim.last;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final boolean emptyHeader = header.trim.last;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final boolean emptyHeader = header.trim.last.trim();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final boolean emptyHeader = header.trim.last.trim();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final boolean emptyHeader = header.trimdata.isEmpty();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final boolean emptyHeader = header.trimdata.isEmpty();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final boolean emptyHeader = header.trim' + 1];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final boolean emptyHeader = header.trim' + 1];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final boolean emptyHeader = header.trimAlignment != header;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final boolean emptyHeader = header.trimAlignment != header;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final boolean emptyHeader = header.trimStack.isEmpty();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final boolean emptyHeader = header.trimStack.isEmpty();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final boolean emptyHeader = header.trim' != header;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final boolean emptyHeader = header.trim' != header;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final boolean emptyHeader = header.trimAND_PART_C_STATE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final boolean emptyHeader = header.trimAND_PART_C_STATE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final boolean emptyHeader = header.trimCheckBox;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final boolean emptyHeader = header.trimCheckBox;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final boolean emptyHeader = header.trimAND_PART_CRC-isEmpty;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final boolean emptyHeader = header.trimAND_PART_CRC-isEmpty;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final boolean emptyHeader = header.trim.last != header;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final boolean emptyHeader = header.trim.last != header;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final boolean emptyHeader = header.trimmed.isEmpty();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final boolean emptyHeader = header.trimmed.isEmpty();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final boolean emptyHeader = header.trim[i];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final boolean emptyHeader = header.trim[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final boolean emptyHeader = header.related != header;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final boolean emptyHeader = header.related != header;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final boolean emptyHeader = header.trimAND_PART_PER_SECOND;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final boolean emptyHeader = header.trimAND_PART_PER_SECOND;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final boolean empty = header.trim();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final boolean empty = header.trim();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final boolean emptyHeader = header.trim1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final boolean emptyHeader = header.trim1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final boolean emptyHeader = header.trimor.isEmpty();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final boolean emptyHeader = header.trimor.isEmpty();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final boolean emptyHeader = header.trim.firstHeader != header;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final boolean emptyHeader = header.trim.firstHeader != header;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final boolean emptyHeader = header.trim mouse.isEmpty();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final boolean emptyHeader = header.trim mouse.isEmpty();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final boolean emptyHeader = header.trimAND_PART;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final boolean emptyHeader = header.trimAND_PART;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final boolean emptyHeader = header.trimAND_PART_C_STATEMENT;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final boolean emptyHeader = header.trimAND_PART_C_STATEMENT;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final boolean emptyHeader = header.trim--n.isEmpty();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final boolean emptyHeader = header.trim--n.isEmpty();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final boolean empty = header.trim;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final boolean empty = header.trim;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final boolean emptyHeader = header.trimAND_PART_LEN;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final boolean emptyHeader = header.trimAND_PART_LEN;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final boolean emptyHeader = header.trimAND_PART_VALUE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final boolean emptyHeader = header.trimAND_PART_VALUE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final boolean emptyHeader = header.trimAND_PART_ss.isEmpty;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final boolean emptyHeader = header.trimAND_PART_ss.isEmpty;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final boolean emptyHeader = header.trimAND_PART_safe.isEmpty;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final boolean emptyHeader = header.trimAND_PART_safe.isEmpty;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final boolean emptyHeader = header.trim.before != header;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final boolean emptyHeader = header.trim.before != header;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final boolean emptyHeader = header.trimAND_PART_SEPARATOR.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final boolean emptyHeader = header.trimAND_PART_SEPARATOR.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final boolean emptyHeader = header.trimdata.isEmpty;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final boolean emptyHeader = header.trimdata.isEmpty;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final boolean emptyHeader = header.trim != header.isEmpty;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final boolean emptyHeader = header.trim != header.isEmpty;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final boolean emptyHeader = header.trimact != header;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final boolean emptyHeader = header.trimact != header;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final boolean emptyHeader = header.trimAND_PART_C JSON_STATE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final boolean emptyHeader = header.trimAND_PART_C JSON_STATE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final boolean emptyHeader = header.trimAND_FLAG;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final boolean emptyHeader = header.trimAND_FLAG;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final boolean emptyHeader = header.trim's.isEmpty();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final boolean emptyHeader = header.trim's.isEmpty();",
                "identical": false
            }
        ],
        "buggy_line": "final boolean emptyHeader = header.trim().isEmpty();",
        "fixed_line": "final boolean emptyHeader = header == null || header.trim().isEmpty();"
    },
    "JacksonDatabind-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "visitFloatFormat(typeHint, vts, _typeHint);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "visitFloatFormat(typeHint, vts, _typeHint);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "visitFloatFormat(typeHint, _config, typeHint);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "visitFloatFormat(typeHint, _config, typeHint);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "visitFloatFormat(typeHint, vts, element);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "visitFloatFormat(typeHint, vts, element);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "visitFloatFormat(typeHint, vts, elementType);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "visitFloatFormat(typeHint, vts, elementType);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "visitFloatFormat(typeHint, vts, valueHint);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "visitFloatFormat(typeHint, vts, valueHint);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "visitFloatFormat(typeHint, vts, elementHint);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "visitFloatFormat(typeHint, vts, elementHint);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "visitFloatFormat(typeHint, _typeHint, vts);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "visitFloatFormat(typeHint, _typeHint, vts);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "visitFloatFormat(typeHint, vts, elementSerializer);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "visitFloatFormat(typeHint, vts, elementSerializer);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberFormatType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberFormatType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "visitFloatFormat(typeHint, vts, _typeHint;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "visitFloatFormat(typeHint, vts, _typeHint;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER_INTEGER);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER_INTEGER);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberFormatType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "visitFloatFormat(typeHint, vts, elementNumberFormatType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat, v2 = JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat, v2 = JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "visitFloatFormat(typeHint, _ & JsonParser.BIG_INTEGER_INTEGER) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "visitFloatFormat(typeHint, _ & JsonParser.BIG_INTEGER_INTEGER) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "visitFloatFormat(typeHint, vts,contentType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "visitFloatFormat(typeHint, vts,contentType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "visitFloatFormat(typeHint, vts, element;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "visitFloatFormat(typeHint, vts, element;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "visitFloatFormat(typeHint, vts, exceptionsType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "visitFloatFormat(typeHint, vts, exceptionsType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "visitFloatFormat(typeHint, vts, element elementType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "visitFloatFormat(typeHint, vts, element elementType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "visitFloatFormat(typeHint, vts, element.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "visitFloatFormat(typeHint, vts, element.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "visitFloatFormat(typeHint, vts, elementTypeHint);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "visitFloatFormat(typeHint, vts, elementTypeHint);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "visitFloatFormat(typeHint, vts, replaceType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "visitFloatFormat(typeHint, vts, replaceType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat, v2Type.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat, v2Type.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "visitFloatFormat(typeHint, vts, state.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "visitFloatFormat(typeHint, vts, state.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "visitFloatFormat(typeHint, vts, floatType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "visitFloatFormat(typeHint, vts, floatType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "visitFloatFormat(typeHint, vts, float.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "visitFloatFormat(typeHint, vts, float.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER, h);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER, h);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIGFormat.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIGFormat.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER_INTEGER;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER_INTEGER;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER_INTEGER);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER_INTEGER);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER_INTEGER;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "visitFloatFormat(typeHint, vts, JsonParser.BIG_INTEGER_INTEGER;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGERType.BIGINT);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "visitFloatFormat(typeHint, vts, i.BIG_INTEGERType.BIGINT);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "visitFloatFormat(typeHint, vts, JSONType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "visitFloatFormat(typeHint, vts, JSONType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "visitFloatFormat(typeHint, property, vts);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "visitFloatFormat(typeHint, property, vts);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "visitFloatFormat(typeHint, _isBIGFormatReadersType.BIG_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "visitFloatFormat(typeHint, _isBIGFormatReadersType.BIG_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat, v2D_INTEGER;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat, v2D_INTEGER;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "visitFloatFormat(typeHint, vts, element elementType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "visitFloatFormat(typeHint, vts, element elementType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "visitFloatFormat(typeHint, vts, elementType.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "visitFloatFormat(typeHint, vts,contentType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "visitFloatFormat(typeHint, vts,contentType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "visitFloatFormat(typeHint, _isBIGFormatReadersType.BIGINT_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "visitFloatFormat(typeHint, _isBIGFormatReadersType.BIGINT_INTEGER, typeHint);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "visitFloatFormat(typeHint, vts, i i.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "visitFloatFormat(typeHint, vts, i i.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER, _typeHint);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "visitFloatFormat(typeHint, _isBIGFormat.BIG_INTEGER, _typeHint);",
                "identical": false
            }
        ],
        "buggy_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
        "fixed_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);"
    },
    "Jsoup-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (variable != \"b\", 0,gs) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (variable != \"b\", 0,gs) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (arg.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (arg.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (variable || \"base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (variable || \"base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (osname\", \"b\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (osname\", \"b\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (variable || \"base\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (variable || \"base\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (variable != \"b\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (variable != \"b\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (variable != \"b\", Variable, \"link\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (variable != \"b\", Variable, \"link\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (osname\", \"command\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (osname\", \"command\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (osname\", \"command\",\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (osname\", \"command\",\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (osname\", \"command\",\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (osname\", \"command\",\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (zone.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (zone.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (childCount == 2) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (childCount == 2) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (config.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (config.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (osname\", \"command\", Token.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (osname\", \"command\", Token.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (key.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (key.base\", \"link\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (variable != \"b\", 327.length\", \"title\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (variable != \"b\", 327.length\", \"title\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (stackMap(\"b\", \"Z\") {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (stackMap(\"b\", \"Z\") {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (osname\", \"command\",\", \" \"Z\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (osname\", \"command\",\", \" \"Z\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (osname\", \"command\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (osname\", \"command\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (osname\", \"b\",\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (osname\", \"b\",\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (osname\", \"command\",\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (osname\", \"command\",\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (arg.base\", \"link\", \" + parent\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (arg.base\", \"link\", \" + parent\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (osname\", \"command\",\", \" Integer.MAX_VALUE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (osname\", \"command\",\", \" Integer.MAX_VALUE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (osname\", \"command\",\", \" Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (osname\", \"command\",\", \" Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (osname\", \"command\",\", ret, \" \"Z\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (osname\", \"command\",\", ret, \" \"Z\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (osname\", \"command\",\", \"Z\") {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (osname\", \"command\",\", \"Z\") {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (arg.base\", \"link\", (2\", \" + parent\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (arg.base\", \"link\", (2\", \" + parent\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (osname\", \"command\", ret, \" \"Z\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (osname\", \"command\", ret, \" \"Z\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (osname\", \"command\",\", \"Cannot\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (osname\", \"command\",\", \"Cannot\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (Collection(\"b\", \" + fileLevel\", in);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (Collection(\"b\", \" + fileLevel\", in);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (osname\", \"command\", Token.base\", \" \"link\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (osname\", \"command\", Token.base\", \" \"link\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (osname\", \"command\",\",\", \"title\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (osname\", \"command\",\",\", \"title\", ret, \"Z\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (osname\", \"command\",\", ret, \"undefined\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (osname\", \"command\",\", ret, \"undefined\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (osname\", \"command\",\", ret, \"title\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (osname\", \"command\",\", ret, \"title\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (osname\", \"command\", ret, \"title\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (osname\", \"command\", ret, \"title\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (osname\", \"command\",\", ret, \"title\", chain\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (osname\", \"command\",\", ret, \"title\", chain\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret, \"undefined\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret, \"undefined\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (osname\", \"command\",\", \" \"Z\") {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (osname\", \"command\",\", \" \"Z\") {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (osname\", \"command\",\", \" Integer.MAX_VALUE\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (osname\", \"command\",\", \" Integer.MAX_VALUE\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (osname\", \"command\", ret, \"Z\")\";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (osname\", \"command\", ret, \"Z\")\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret, \"link\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if ( NodeUtil.base\", \" \"command\", \"title\", ret\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if ( NodeUtil.base\", \" \"command\", \"title\", ret\", \"Z\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (osname\", \"command\",\", \" Integer.MAX_VALUE\", \"title\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (osname\", \"command\",\", \" Integer.MAX_VALUE\", \"title\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (variable !=(\"b\", \"Z\",style\", in);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (variable !=(\"b\", \"Z\",style\", in);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (osname\", \"command\", Token.base\", \"Z\") {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (osname\", \"command\", Token.base\", \"Z\") {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (osname\", \"command\",\", strLen, \"Z\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (osname\", \"command\",\", strLen, \"Z\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret, \"g\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (osname\", \"command\",\", \"title\", ret, \"g\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (variable !=(\"base\", \"Z\",style\", in);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (variable !=(\"base\", \"Z\",style\", in);",
                "identical": false
            }
        ],
        "buggy_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {",
        "fixed_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
    },
    "Mockito-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (k instanceof CapturesArgumentss) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (k instanceof CapturesArgumentss) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (k instanceof Captures) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (k instanceof Captures) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (k instanceof CapturesArgumentss - k;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (k instanceof CapturesArgumentss - k;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (k instanceof CapturesArgumentss - k) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (k instanceof CapturesArgumentss - k) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (k instanceof CapturesArgumentssArgumentss - k;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (k instanceof CapturesArgumentssArgumentss - k;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (k instanceof CapturesArgumentssArgumentss) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (k instanceof CapturesArgumentssArgumentss) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (k instanceof CapturesArgumentss - k);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (k instanceof CapturesArgumentss - k);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (k instanceof CapturesArgumentss(0, i);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (k instanceof CapturesArgumentss(0, i);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (k instanceof CapturesArgumentss private - k;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (k instanceof CapturesArgumentss private - k;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (k instanceof CapturesArgumentssInstantiator) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (k instanceof CapturesArgumentssInstantiator) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (k instanceof CapturesArgumentss == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (k instanceof CapturesArgumentss == 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (k instanceof CapturesArgumentss this) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (k instanceof CapturesArgumentss this) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (k instanceof CapturesArgumentssArgumentss - k);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (k instanceof CapturesArgumentssArgumentss - k);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (k instanceof CapturesArgumentssRemove) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (k instanceof CapturesArgumentssRemove) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (k instanceof CapturesArgumentss - i);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (k instanceof CapturesArgumentss - i);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (k instanceof CapturesArgumentssMatcher) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (k instanceof CapturesArgumentssMatcher) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (k instanceof CapturesArgumentss + k;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (k instanceof CapturesArgumentss + k;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (k instanceof CapturesArgumentss == i) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (k instanceof CapturesArgumentss == i) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (k instanceof CapturesArgumentssInstanti) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (k instanceof CapturesArgumentssInstanti) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (k instanceof CapturesArgumentssPlot) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (k instanceof CapturesArgumentssPlot) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (k instanceof CapturesArgumentssArgumentss - k) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (k instanceof CapturesArgumentssArgumentss - k) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (k instanceof CapturesArgumentss || k != 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (k instanceof CapturesArgumentss || k != 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (k instanceof CapturesArgumentss[1];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (k instanceof CapturesArgumentss[1];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (k instanceof CapturesArgumentssArgumentssArgumentss - k;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (k instanceof CapturesArgumentssArgumentssArgumentss - k;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (k instanceof CapturesArgumentss == m) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (k instanceof CapturesArgumentss == m) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (k instanceof CapturesArgumentssLink) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (k instanceof CapturesArgumentssLink) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (k instanceof CapturesArgumentss[k];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (k instanceof CapturesArgumentss[k];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (k instanceof CapturesArgumentss || k != 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (k instanceof CapturesArgumentss || k != 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (k instanceof CapturesArgumentssAccess) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (k instanceof CapturesArgumentssAccess) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (k instanceof CapturesArgumentss private - k) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (k instanceof CapturesArgumentss private - k) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (k instanceof CapturesArgumentss - k];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (k instanceof CapturesArgumentss - k];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (k instanceof CapturesArgumentss - i;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (k instanceof CapturesArgumentss - i;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (k instanceof CapturesArgumentssArgumentss private - k;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (k instanceof CapturesArgumentssArgumentss private - k;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (k instanceof CapturesArgumentssArgumentss == m) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (k instanceof CapturesArgumentssArgumentss == m) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (k instanceof CapturesArgumentssArgumentss == i) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (k instanceof CapturesArgumentssArgumentss == i) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (k instanceof CapturesArgumentssUndefined) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (k instanceof CapturesArgumentssUndefined) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (k instanceof Captures(0, i) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (k instanceof Captures(0, i) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (k instanceof CapturesArgumentssArgumentss + k;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (k instanceof CapturesArgumentssArgumentss + k;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (k instanceof\u5841sArgumentssArgumentssArgumentss - k;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (k instanceof\u5841sArgumentssArgumentssArgumentss - k;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (k instanceof CapturesArgumentss\", k);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (k instanceof CapturesArgumentss\", k);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (k instanceof CapturesArgumentssWrapper) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (k instanceof CapturesArgumentssWrapper) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (k instanceof CapturesArgumentssCallback) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (k instanceof CapturesArgumentssCallback) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (k instanceof CapturesArgumentssArgumentss this) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (k instanceof CapturesArgumentssArgumentss this) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (k instanceof CapturesArgumentssArgumentss - i);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (k instanceof CapturesArgumentssArgumentss - i);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (k instanceof CapturesArgumentssIterator) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (k instanceof CapturesArgumentssIterator) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (k instanceof CapturesArgumentssArgumentss == 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (k instanceof CapturesArgumentssArgumentss == 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (k instanceof CapturesArgumentssClassDef) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (k instanceof CapturesArgumentssClassDef) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (k instanceof CapturesArgumentssProp) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (k instanceof CapturesArgumentssProp) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (k instanceof CapturesArgumentss info) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (k instanceof CapturesArgumentss info) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (k instanceof CapturesArgumentssArgumentssArgumentss) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (k instanceof CapturesArgumentssArgumentssArgumentss) {",
                "identical": false
            }
        ],
        "buggy_line": "if (m instanceof CapturesArguments) {",
        "fixed_line": "if (m instanceof CapturesArguments && i.getArguments().length > k) {"
    },
    "JacksonDatabind-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "found = name;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "found = name;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "found = name.equals(key);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "found = name.equals(key);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "found = name.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "found = name.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "found = prop.equals(name);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "found = prop.equals(name);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "found = name.equals(prop.getName;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "found = name.equals(prop.getName;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "found = found.equals(key);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "found = found.equals(key);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "found = name.equals(name);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "found = name.equals(name);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "found = name.equals(key.getName());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "found = name.equals(key.getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "found = name.getName;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "found = name.getName;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "found = found.equals(key.getName());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "found = found.equals(key.getName());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "found = prop.getName;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "found = prop.getName;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "found = found.equals(key;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "found = found.equals(key;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "found = name.equals(other.getName;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "found = name.equals(other.getName;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "found = properties.equals(name);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "found = properties.equals(name);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "found = name.equals(prop.getName_STRING;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "found = name.equals(prop.getName_STRING;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "found = name.equals(key;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "found = name.equals(key;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "found = name.equals(prop.name;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "found = name.equals(prop.name;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "found = name.equals(prop.getName_CONSTANT_NAME;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "found = name.equals(prop.getName_CONSTANT_NAME;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "found = found.equals(name);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "found = found.equals(name);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "found = name.equals(lang.getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "found = name.equals(lang.getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "found = found.equals(name.getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "found = found.equals(name.getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "found = prop.equals(key;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "found = prop.equals(key;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "found = name.equals(prop.getName_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "found = name.equals(prop.getName_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "found = properties.equals(key);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "found = properties.equals(key);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "found = name.equals(key.getName;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "found = name.equals(key.getName;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "found = name.equals(prop.getName_calculated;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "found = name.equals(prop.getName_calculated;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "found = name.equals(keyNode.getName());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "found = name.equals(keyNode.getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "found = name.equals(this.getName;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "found = name.equals(this.getName;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "found = name.equals(prop.getName_TYPE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "found = name.equals(prop.getName_TYPE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "found = name.equals(prop.getName_hi;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "found = name.equals(prop.getName_hi;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "found = name.equals(prop.getName_oldLen;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "found = name.equals(prop.getName_oldLen;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "found = name.equals(prop.getName_EXTENDED;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "found = name.equals(prop.getName_EXTENDED;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "found = name.equals(lang.getName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "found = name.equals(lang.getName;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "found = name.equals(prop.getName_CONSTANT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "found = name.equals(prop.getName_CONSTANT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "found = name.equals(prop.getName_GAP_PROP;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "found = name.equals(prop.getName_GAP_PROP;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "found = name.equals(prop.getName_oldName;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "found = name.equals(prop.getName_oldName;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "found = name.equals(prop.getName_ a;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "found = name.equals(prop.getName_ a;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "found = found.equals(key.getName_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "found = found.equals(key.getName_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "found = name.equals(prop.getName_FOR_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "found = name.equals(prop.getName_FOR_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "found = name.equals(prop.getName_PLETS_FIELD;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "found = name.equals(prop.getName_PLETS_FIELD;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "found = name.equals(name;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "found = name.equals(name;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "found = name.equals(keyNode;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "found = name.equals(keyNode;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "found = name.equals(prop.getName_PLETS_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "found = name.equals(prop.getName_PLETS_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "found = name.equals(prop.getName_oldestAt;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "found = name.equals(prop.getName_oldestAt;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "found = name.equals(prop.getName_FOR_STRING;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "found = name.equals(prop.getName_FOR_STRING;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "found = name.equals(prop.getName_FOR_BLOCK_SIZE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "found = name.equals(prop.getName_FOR_BLOCK_SIZE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "found = name.equals(key.getName_TYPE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "found = name.equals(key.getName_TYPE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "found = found.equals(key.getName_EXTENDED;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "found = found.equals(key.getName_EXTENDED;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "found = root.equals(key);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "found = root.equals(key);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "found = name.equals(prop.getName_PLETS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "found = name.equals(prop.getName_PLETS_PER_SECOND;",
                "identical": false
            }
        ],
        "buggy_line": "found = key.equals(prop.getName());",
        "fixed_line": "found = key.equals(_hashArea[i-1]);"
    },
    "Math-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "for (i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "for (i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (i = 0; i < weights.length; i += 2) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "for (i = 0; i < weights.length; i += 2) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "for (i = 0; i < text.length; i++) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (i = 0; i < text.length; i++) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (i = 0; i < weights.length; i += 8; i++) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (i = 0; i < weights.length; i += 8; i++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "for (i = 0; i < text.length; i += 2) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (i = 0; i < text.length; i += 2) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (i = 0; i < indexes.length; i += 2) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (i = 0; i < indexes.length; i += 2) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (i = 0; i < intr.length; i++) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "for (i = 0; i < intr.length; i++) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "for (i = 0; i < slope.length; i++) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (i = 0; i < slope.length; i++) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (i = 0; i < indexes.length; i++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (i = 0; i < indexes.length; i++) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (i = 0; i <Room.length; i++) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (i = 0; i <Room.length; i++) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (i = 0; i < slope.length; i += 2) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (i = 0; i < slope.length; i += 2) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "for (i = 0; i < weights.length; i += 1) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (i = 0; i < weights.length; i += 1) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (i = 0; i < intr.length; i += 2) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (i = 0; i < intr.length; i += 2) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (i = 0; i < qlen; i += 2) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (i = 0; i < qlen; i += 2) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (i = 0; i < 3.0.length; i++) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (i = 0; i < 3.0.length; i++) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (i = 0; i < buf.length; i++) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "for (i = 0; i < buf.length; i++) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (i = 0; i < weights.length; i += 8;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "for (i = 0; i < weights.length; i += 8;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (i = 0; i <Beta.length; i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (i = 0; i <Beta.length; i++) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (i = 0; i < 3.0.length; i += 2) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (i = 0; i < 3.0.length; i += 2) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (i = 0; i < qlen; i++) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (i = 0; i < qlen; i++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (i = 0; i <Beta.length; i += 2) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (i = 0; i <Beta.length; i += 2) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (i = 0; i < x.length; i++) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (i = 0; i < x.length; i++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (i = 0; i < coefficients.length; i++) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "for (i = 0; i < coefficients.length; i++) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (i = 0; i < polynomialW; i += 2) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (i = 0; i < polynomialW; i += 2) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (i = 0; i < weights.length; i += 4) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (i = 0; i < weights.length; i += 4) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (i = 0; i < buf.length; i += 2) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (i = 0; i < buf.length; i += 2) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (i = 0; i < parameterTypes.length; i++) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (i = 0; i < parameterTypes.length; i++) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (i = 0; i <Room.length; i += 2) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (i = 0; i <Room.length; i += 2) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (i = 0; i <a.length; i++) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (i = 0; i <a.length; i++) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (i = 0; i <eps.length; i += 2) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (i = 0; i <eps.length; i += 2) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (i = 0; i < encoding; i += 2) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (i = 0; i < encoding; i += 2) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (i = 0; i < scope.length; i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (i = 0; i < scope.length; i++) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "for (i = 0; i < 3.0W.length; i += 2) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (i = 0; i < 3.0W.length; i += 2) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (i = 0; i < weights.length; i += 7;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (i = 0; i < weights.length; i += 7;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (i = 0; i < 3.0W.length; i++) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (i = 0; i < 3.0W.length; i++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "for (i = 0; i < iterationCount; i += 2) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (i = 0; i < iterationCount; i += 2) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (i = 0; i < arc.length; i++) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (i = 0; i < arc.length; i++) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (i = 0; i < values.length; i++) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (i = 0; i < values.length; i++) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (i = 0; i <DECB; i += 2) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (i = 0; i <DECB; i += 2) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (i = 0; i <hit.length; i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (i = 0; i <hit.length; i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (i = 0; i <Text.length; i++) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (i = 0; i <Text.length; i++) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (i = 0; i < Del.length; i++) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (i = 0; i < Del.length; i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (i = 0; i < initial.length; i++) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (i = 0; i < initial.length; i++) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (i = 0; i < options.length; i++) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (i = 0; i < options.length; i++) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "for (i = 0; i <\u6697.length; i++) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (i = 0; i <\u6697.length; i++) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (i = 0; i < rotate.length; i++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (i = 0; i < rotate.length; i++) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (i = 0; i < weights.length; i += 8; i += 2) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (i = 0; i < weights.length; i += 8; i += 2) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (i = 0; i <ARGS.length; i++) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (i = 0; i <ARGS.length; i++) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (i = 0; i <irected.length; i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (i = 0; i <irected.length; i++) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (i = 0; i < nex.length; i++) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (i = 0; i < nex.length; i++) {",
                "identical": false
            }
        ],
        "buggy_line": "for (int i = 0; i < weights.length; i++) {",
        "fixed_line": "for (int i = begin; i < begin + length; i++) {"
    },
    "Closure-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (x < 0x10000 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (x < 0x10000 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (x < 0 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (x < 0 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (x < 0x07 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (x < 0x07 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (x < 0x10000 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (x < 0x10000 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (x < 0x10000 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (x < 0x10000 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (x < 0x10000 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (x < 0x10000 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (x < 0x10000 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (x < 0x10000 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (x < 0x10000 && prev == '-') { // x is disabled",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (x < 0x10000 && prev == '-') { // x is disabled",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (x < 0x07 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (x < 0x07 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (x < 0x800 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (x < 0x800 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (x < 0x10000 && prev == '-') { // x is.\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (x < 0x10000 && prev == '-') { // x is.\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (x < 0x10000 && prev == '-') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (x < 0x10000 && prev == '-') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (x < 0x10000 && prev == '-') { //debug",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (x < 0x10000 && prev == '-') { //debug",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (x < 0 && prev == '-') { //debug is negative",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (x < 0 && prev == '-') { //debug is negative",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (x < 0x07 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (x < 0x07 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (x < 0x20 || x == '-') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (x < 0x20 || x == '-') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (x < 0x10000 && prev == '-') { // x is entirely",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (x < 0x10000 && prev == '-') { // x is entirely",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (x < 0x10000 && prev == '-') { // x is ObjectId",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (x < 0x10000 && prev == '-') { // x is ObjectId",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (x < 0x07 && prev == '-') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (x < 0x07 && prev == '-') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (x < 0x10000 && prev == '-') { // x is0",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (x < 0x10000 && prev == '-') { // x is0",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (x < 0x10000 && prev == x) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (x < 0x10000 && prev == x) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (x < 0x07 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (x < 0x07 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (x < 0x10000 && prev == '-') { // x is nope",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (x < 0x10000 && prev == '-') { // x is nope",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (x < 0 && prev == '-') { // \".",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (x < 0 && prev == '-') { // \".",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (x < 0x07 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (x < 0x07 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (x < 0x10000 && prev == '-') { // x is status",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (x < 0x10000 && prev == '-') { // x is status",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (x < 0 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (x < 0 && prev == '-') { // x is",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (x < 0 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (x < 0 && prev == '-') { // x is -> UTF-8",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (x < 0x10000 && prev == '-') { // x is Hash",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (x < 0x10000 && prev == '-') { // x is Hash",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (x < 0x07 && prev == '-') { // x is.\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (x < 0x07 && prev == '-') { // x is.\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (x < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (x < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (x < 0x10000 && prev == '-') { // x isSTR",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (x < 0x10000 && prev == '-') { // x isSTR",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (x < 0x10000 && prev == '-') { // x is aliases",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (x < 0x10000 && prev == '-') { // x is aliases",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (x < 0x10000 && prev == '-') { // \".",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (x < 0x10000 && prev == '-') { // \".",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (x < 0x10000 && prev == '-') { // x is taken",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (x < 0x10000 && prev == '-') { // x is taken",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (x < 0 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (x < 0 && prev == '-') { // x is too",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (x < 0x10000 && prev == '-') { // x is first",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (x < 0x10000 && prev == '-') { // x is first",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (x < 0x10000 && prev == '-') { // x is maybe",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (x < 0x10000 && prev == '-') { // x is maybe",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (x < 0x >= 0 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (x < 0x >= 0 && prev == '-') { // x is negative",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (x < 0x10000 && prev == '-') { // x is more",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (x < 0x10000 && prev == '-') { // x is more",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (x < 0 && prev == '-') { //debug",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (x < 0 && prev == '-') { //debug",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (x < 0x07 && prev == '-') { // x is ObjectId",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (x < 0x07 && prev == '-') { // x is ObjectId",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (x < 0x10000 && prev == '-') { // x is localName",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (x < 0x10000 && prev == '-') { // x is localName",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-x00",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-x00",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (x < 0 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (x < 0 && prev == '-') { // x isbase",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (x < 0 && prev == '-') { // UTF-8",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (x < 0 && prev == '-') { // UTF-8",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (x < 0x10000 && prev == '-') { // x isPATTERN",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (x < 0x10000 && prev == '-') { // x isPATTERN",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (x < 0x10000 && prev == '-') { // x isRem",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (x < 0x10000 && prev == '-') { // x isRem",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407]",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (x < 0 && prev == '-') { // [JACKSON-407]",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (x < 0x10000 && prev == '-') { // x is body",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (x < 0x10000 && prev == '-') { // x is body",
                "identical": false
            }
        ],
        "buggy_line": "if (x < 0 && prev == '-') {",
        "fixed_line": "if ((x < 0 || negativeZero) && prev == '-') {"
    },
    "Math-63": {
        "fixes": [
            {
                "k": 1,
                "patch": "return x == 0 && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return x == 0 && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return x == 0 && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return x == 0 && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return x == 0 && Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return x == 0 && Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return x == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return x == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return x == y || Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return x == y || Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this.x == y && Double.isNaN;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return this.x == y && Double.isNaN;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return this.x == y && Double.isNaN == y;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this.x == y && Double.isNaN == y;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this.x == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this.x == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return this.x == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return this.x == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.x == y && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this.x == y && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return x == 0 && Double.isNaN(x) && x == y;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return x == 0 && Double.isNaN(x) && x == y;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this.x.isNaN || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this.x.isNaN || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "returnx == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "returnx == y || Double.isNaN;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this.x.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this.x.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this.x == y || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this.x == y || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return x == y || Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return x == y || Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return this.x == y && Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this.x == y && Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return x == x || Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return x == x || Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return x == 0 && Double.isNaN(y) && x == y;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return x == 0 && Double.isNaN(y) && x == y;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return this.x == x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this.x == x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return this.x.isNaN || x == Double.class;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.x.isNaN || x == Double.class;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return x == 0 && Double.isNaN(y) || y == y;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return x == 0 && Double.isNaN(y) || y == y;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return x == y || Double.isNaN(x) && y == y;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return x == y || Double.isNaN(x) && y == y;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return this.x == y && Double.isNaN(x) == y;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.x == y && Double.isNaN(x) == y;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return x == x || Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return x == x || Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.x == y && Double.isNaN(y) == y;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return this.x == y && Double.isNaN(y) == y;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return x == y || Double.isNaN(x) || y == x;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return x == y || Double.isNaN(x) || y == x;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return x == 0 && Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return x == 0 && Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return x == y || Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return x == y || Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this.x || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this.x || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return x == 0 && x == y;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return x == 0 && x == y;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return x == 0 && Double.isNaN;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return x == 0 && Double.isNaN;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this.x == y && Double.isNaN(x) % x == y;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this.x == y && Double.isNaN(x) % x == y;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this.x == x || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this.x == x || x == Double.isNaN;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return x == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return x == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this.x == y && Double.isNaN(y) && x == y;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this.x == y && Double.isNaN(y) && x == y;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "returnx == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "returnx == y && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this.x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this.x || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this.x == y && Double.isNaN(y) || y == y;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this.x == y && Double.isNaN(y) || y == y;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.x == y || Double.isNaN == y;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this.x == y || Double.isNaN == y;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this.x == y && Double.isNaN(y) % x == y;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return this.x == y && Double.isNaN(y) % x == y;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return this.x.isNaN || x == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this.x.isNaN || x == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return x == 1 && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return x == 1 && Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return x == 0 && Double.isNaN(x) && y == y;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return x == 0 && Double.isNaN(x) && y == y;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return x < 0 || x == Double.POSITIVE_INFINITY || x == y;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return x < 0 || x == Double.POSITIVE_INFINITY || x == y;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return this.x == x || y == Double.POSITIVE_INFINITY || x == y;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this.x == x || y == Double.POSITIVE_INFINITY || x == y;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return this.x.isNaN || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this.x.isNaN || y == Double.isNaN;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return x == 1 && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return x == 1 && Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.x == Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return this.x == Double.isNaN || x == y;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return x == y || Double.isNaN(x) || y == this;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return x == y || Double.isNaN(x) || y == this;",
                "identical": false
            }
        ],
        "buggy_line": "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
        "fixed_line": "return equals(x, y, 1);"
    },
    "Jsoup-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return html;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return html;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return parent.toString;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return parent.toString;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return html.toString;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return html.toString;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return data.toString;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return data.toString;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return text;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return text;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return getLength.toString;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return getLength.toString;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return top;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return top;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return entry.toString;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return entry.toString;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "returnChar;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnChar;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return Match.toString;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return Match.toString;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return blindScope;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return blindScope;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return prefix;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return prefix;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return blindScope.toString;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return blindScope.toString;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return views.toString;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return views.toString;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return parent.toString();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return parent.toString();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return constraint.toString;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return constraint.toString;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return node.toString;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return node.toString;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return parent.toString.trim;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return parent.toString.trim;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "returnscale.toString;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "returnscale.toString;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return nodeType;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return nodeType;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return head.toString;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return head.toString;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "returnround;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "returnround;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return entry.value;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return entry.value;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return parent.value;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return parent.value;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return html.toString();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return html.toString();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return itemCount;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return itemCount;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return defaultValue;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return defaultValue;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "returnscale.toString();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "returnscale.toString();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "returnto.toString;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "returnto.toString;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return views.toString();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return views.toString();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "returnto.value;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "returnto.value;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return getLength;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return getLength;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return entry.to().trim;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return entry.to().trim;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return entry.to.trim;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return entry.to.trim;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return getLength.toString();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return getLength.toString();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return parent.toString()+\", inHtml;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return parent.toString()+\", inHtml;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return constraint.toString();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return constraint.toString();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return parent.modCount;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return parent.modCount;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return ret;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return ret;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return parent.toString()+\";",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return parent.toString()+\";",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return entry;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return entry;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return Control;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return Control;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "returnch;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "returnch;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "returnto.intValue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "returnto.intValue;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return data.length;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return data.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return entry.untrim;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return entry.untrim;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "returnto.trim;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returnto.trim;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return parent.toString1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return parent.toString1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return last;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return last;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return length;",
                "identical": false
            }
        ],
        "buggy_line": "return accum.toString().trim();",
        "fixed_line": "return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();"
    },
    "Closure-168": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (n == 2) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (n == 2) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (n.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (n.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parent.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parent.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (first.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (first.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (cost.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (cost.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (n == parent.getScopeDepth) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (n == parent.getScopeDepth) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (cost.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (cost.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parent != 2) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parent != 2) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (first.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (first.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (first.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (first.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (t != 2) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (t != 2) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (n.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (n.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (cost.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (cost.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parent.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parent.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (n != 2) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (n != 2) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (n.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (n.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (cost.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (cost.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parent.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parent.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parent.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parent.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (cost.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (cost.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (n.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (n.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (t == 2) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (t == 2) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (n != parent.getScopeDepth) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (n != parent.getScopeDepth) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (first.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (first.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parent.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parent.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (right.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (right.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( that.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( that.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parent.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parent.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (n == parent.getScope) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (n == parent.getScope) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (lhs.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (lhs.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (t != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (t != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (syntacticDepth != 2) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (syntacticDepth != 2) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (n != parent.getScope) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (n != parent.getScope) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (cost.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (cost.getScopeDepth() != 3) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (t != JsonToken.Depth) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (t != JsonToken.Depth) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (first.getScope() != 3) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (first.getScope() != 3) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (n.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (n.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (n.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (n.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (t != n.getScope) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (t != n.getScope) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (first.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (first.getScopeDepth != 2) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (partial.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (partial.getScope() == 2) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parts.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parts.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (n.getScopeDepth() != 4) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (n.getScopeDepth() != 4) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (child.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (child.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (cur.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (cur.getScopeDepth() != 2) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (first.getScope() != n) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (first.getScope() != n) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (t != JsonToken.TRUE) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (t != JsonToken.TRUE) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( that.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( that.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (root.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (root.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( finally.getScope() != 2) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( finally.getScope() != 2) {",
                "identical": false
            }
        ],
        "buggy_line": "if (t.getScopeDepth() <= 2) {",
        "fixed_line": "if (t.getScopeDepth() <= 1) {"
    },
    "Jsoup-47": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (in;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (in;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (inExterns) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (inExterns) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (inExterns) in t;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (inExterns) in t;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (inExterns) inExterns;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (inExterns) inExterns;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (inAttribute) in html;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (inAttribute) in html;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (inExterns) inBuf;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (inExterns) inBuf;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (inExterns) inExceptions;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (inExterns) inExceptions;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c == EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c == EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (inExterns) in tokens;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (inExterns) in tokens;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c == 'Attribute') break;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c == 'Attribute') break;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (inExterns) \");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (inExterns) \");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (inAttribute) attrib;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (inAttribute) attrib;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (inAttribute) bytes;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (inAttribute) bytes;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (inExterns) in 8;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (inExterns) in 8;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (inLoop) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (inLoop) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (inExterns) break;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (inExterns) break;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (inExterns) inulin;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (inExterns) inulin;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c ==inAttribute) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c ==inAttribute) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (inAttribute) EOF_CHAR;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (inAttribute) EOF_CHAR;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (inExterns) in stackSize;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (inExterns) in stackSize;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (inExterns) in 2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (inExterns) in 2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (inAttribute) in 2;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (inAttribute) in 2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (inExterns)",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (inExterns)",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (inExterns) in due;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (inExterns) in due;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (inExterns) in DEP;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (inExterns) in DEP;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (inExterns) put;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (inExterns) put;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (inExterns) in The;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (inExterns) in The;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (inExterns) inExtern;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (inExterns) inExtern;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (inAttribute) inExterns;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (inAttribute) inExterns;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (inAttribute) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (inAttribute) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (inAttribute)c;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (inAttribute)c;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (inAttribute) c;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (inAttribute) c;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (inExterns) inDev;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (inExterns) inDev;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c == 'Attribute') continue;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c == 'Attribute') continue;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (inExterns) inlined;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (inExterns) inlined;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (inExterns) in data;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (inExterns) in data;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (inExterns) inWord;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (inExterns) inWord;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (inExterns) inparse;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (inExterns) inparse;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (inExterns) in current;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (inExterns) in current;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (inExterns) look;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (inExterns) look;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (inExterns) inns;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (inExterns) inns;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (inAttribute) condition;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (inAttribute) condition;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (inAttribute) in 2*;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (inAttribute) in 2*;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (inExterns) inLiteral;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (inExterns) inLiteral;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (inExterns) int;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (inExterns) int;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (inExterns) inch;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (inExterns) inch;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (inExterns) inExternTypes;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (inExterns) inExternTypes;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (inAttribute) break;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (inAttribute) break;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (inAttribute) inhtml;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (inAttribute) inhtml;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (inExterns) inplot;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (inExterns) inplot;",
                "identical": false
            }
        ],
        "buggy_line": "if (!inAttribute)",
        "fixed_line": "if (!inAttribute || escapeMode == EscapeMode.xhtml)"
    },
    "Codec-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0, false);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0, false);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return CharSequenceUtils.regionMatches(Graph, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return CharSequenceUtils.regionMatches(Graph, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return CharSequenceUtils.regionMatches(true, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return CharSequenceUtils.regionMatches(true, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return CharSequenceUtils.regionMatches(XY1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return CharSequenceUtils.regionMatches(XY1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, cs1.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, cs1.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return CharSequenceUtils.regionMatches(h1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return CharSequenceUtils.regionMatches(h1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return CharSequenceUtils.regionMatches(variable1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return CharSequenceUtils.regionMatches(variable1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return CharSequenceUtils.regionMatches(value1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return CharSequenceUtils.regionMatches(value1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return CharSequenceUtils.regionMatches(Renderer1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return CharSequenceUtils.regionMatches(Renderer1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return CharSequenceUtils.regionMatches(h, cs1.length, max;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return CharSequenceUtils.regionMatches(h, cs1.length, max;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, description2.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, description2.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1.length, max;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1.length, max;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return CharSequenceUtils.regionMatches(h1, cs1.length, max;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return CharSequenceUtils.regionMatches(h1, cs1.length, max;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return CharSequenceUtils.regionMatches(Output1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return CharSequenceUtils.regionMatches(Output1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, false, description1.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, false, description1.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0,impl1.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return CharSequenceUtils.regionMatches(preds1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return CharSequenceUtils.regionMatches(preds1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length,cs2.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length,cs2.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return CharSequenceUtils.regionMatches(wrapped1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return CharSequenceUtils.regionMatches(wrapped1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, false, description2.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, false, description2.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0, false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, month, 0, false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return CharSequenceUtils.regionMatches(based1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return CharSequenceUtils.regionMatches(based1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return CharSequenceUtils.regionMatches( holds, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return CharSequenceUtils.regionMatches( holds, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return CharSequenceUtils.regionMatches( stack1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return CharSequenceUtils.regionMatches( stack1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return CharSequenceUtils.regionMatches(Margin1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return CharSequenceUtils.regionMatches(Margin1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, false);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, false);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return CharSequenceUtils.regionMatches(Graph, cs, 0, Math.length, max2.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return CharSequenceUtils.regionMatches(Graph, cs, 0, Math.length, max2.length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return CharSequenceUtils.regionMatches(true, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return CharSequenceUtils.regionMatches(true, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return CharSequenceUtils.regionMatches(variable1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return CharSequenceUtils.regionMatches(variable1, 0, cs1.length, false;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return CharSequenceUtils.regionMatches(h, cs1, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return CharSequenceUtils.regionMatches(h, cs1, 0,impl2.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return CharSequenceUtils.regionMatches(g2, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return CharSequenceUtils.regionMatches(g2, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, max);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, 0, cs1.length, max);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, false;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return CharSequenceUtils.regionMatches(font1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return CharSequenceUtils.regionMatches(font1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return CharSequenceUtils.regionMatches(number1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return CharSequenceUtils.regionMatches(number1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return CharSequenceUtils.regionMatches(Graph, cs, 0, -1, false;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return CharSequenceUtils.regionMatches(Graph, cs, 0, -1, false;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return CharSequenceUtils.regionMatches(des1, month, 0, -1, false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return CharSequenceUtils.regionMatches(des1, month, 0, -1, false;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, -1, false;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return CharSequenceUtils.regionMatches(true, cs1, 0, -1, false;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return CharSequenceUtils.regionMatches(des1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return CharSequenceUtils.regionMatches(des1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return CharSequenceUtils.regionMatches(fragments1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return CharSequenceUtils.regionMatches(fragments1, 0, cs1.length, max;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, false;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs, 0, false;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return CharSequenceUtils.regionMatches(des1, month, 0, false);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return CharSequenceUtils.regionMatches(des1, month, 0, false);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0,impl2.length, false);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0,impl2.length, false);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return CharSequenceUtils.regionMatches(Graph, cs, 0, -1, false, description1.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return CharSequenceUtils.regionMatches(Graph, cs, 0, -1, false, description1.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0, cs2.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return CharSequenceUtils.regionMatches(Graph1, cs2, 0, cs2.length;",
                "identical": false
            }
        ],
        "buggy_line": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
        "fixed_line": "return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());"
    },
    "Chart-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (endIndex < 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (endIndex < 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (endIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (endIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (itemIndex < 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (itemIndex < 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (endIndex < 0) { // end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (endIndex < 0) { // end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (endIndex < 0) { // end period is first item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (endIndex < 0) { // end period is first item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (lastIndex == -1) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (lastIndex == -1) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (max - 1 < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (max - 1 < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (lastIndex == -1) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (lastIndex == -1) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (endIndex < 0) { // end period is not in original String is not in original series",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (endIndex < 0) { // end period is not in original String is not in original series",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (endIndex < 0) { // end period is first item after last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (endIndex < 0) { // end period is first item after last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item after last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item after last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (endIndex < 0) { // end period is first item after last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (endIndex < 0) { // end period is first item after last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (endIndex < 0) { // end period is last item after last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (endIndex < 0) { // end period is last item after last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period period is not in original series",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period period is not in original series",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (endIndex < 0) { // end period is not in original String is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (endIndex < 0) { // end period is not in original String is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (max -endIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (max -endIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (endIndex < 0) { // end period is not in original item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (endIndex < 0) { // end period is not in original item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (lastIndex == -1) { // first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (lastIndex == -1) { // first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original String is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original String is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is first item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is first item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item AFTER end period is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (endIndex < 0) { // end and v is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (endIndex < 0) { // end and v is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is first item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is first item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (endIndex < 0) { // end period is -> last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (endIndex < 0) { // end period is -> last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original String is not in original series",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original String is not in original series",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (max - 1 < 0) { // end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (max - 1 < 0) { // end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original String is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original String is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (endIndex < 0) { // end period is not in original String is first item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (endIndex < 0) { // end period is not in original String is first item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (endIndex < 0) { // first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (endIndex < 0) { // first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (endIndex < 0) { // end period is not in original String is first item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (endIndex < 0) { // end period is not in original String is first item AFTER end period is last item AFTER end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (endIndex < 0) { // end period is not in original String is last item after last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (endIndex < 0) { // end period is last item item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (endIndex < 0) { // end period is last item item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is last item AFTER end period is first item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end and v is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end and v is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is last item AFTER end period is last itemIndex next is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period is last item AFTER end period is last itemIndex next is last item AFTER end period is not in original series",
                "identical": false
            }
        ],
        "buggy_line": "if (endIndex < 0) {",
        "fixed_line": "if ((endIndex < 0)  || (endIndex < startIndex)) {"
    },
    "Math-85": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (fa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (fa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (b * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (b * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (a * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (a * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (initial * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (initial * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( (fa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( (fa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (b > 0.0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (b > 0.0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (seconds * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (seconds * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (b0 * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (b0 * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (num * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (num * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (bb * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (bb * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( \"< * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( \"< * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (a / b24 >= 0.0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (a / b24 >= 0.0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( usableSize * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( usableSize * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (b2 < 0.0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (b2 < 0.0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (blare * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (blare * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (b >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (b >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (Regular * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Regular * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (b2 * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (b2 * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (days * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (days * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (top * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (top * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Container * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (Container * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (load * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (load * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (fa * fb == 0.0 ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (fa * fb == 0.0 ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( a * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( a * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( propertyName * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( propertyName * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( ins * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( ins * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (lowerBound >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (lowerBound >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (a / b instanceof 0.0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (a / b instanceof 0.0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( formatter * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( formatter * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (TICAL * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (TICAL * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (fa * fb != 0.0 ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (fa * fb != 0.0 ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Child * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (Child * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (dx * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (dx * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( direct * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( direct * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (bIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (bIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (a >= 0.0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (a >= 0.0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (a / b24 >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (a / b24 >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (upperBound >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (upperBound >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (a * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (a * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (a >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (a >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (a * fb == 0.0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (a * fb == 0.0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (foundIterations > 0.0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (foundIterations > 0.0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (bIterations >= 0.0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (bIterations >= 0.0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (minIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (minIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (lowerBound >= 0.0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (lowerBound >= 0.0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (a * fb == 0.0 ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (a * fb == 0.0 ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (f instanceof 0.0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (f instanceof 0.0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (DIterations >= 0.0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (DIterations >= 0.0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (HorizontalIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (HorizontalIterations >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (a / b) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (a / b) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fa * fb >= 0.0 ) {",
        "fixed_line": "if (fa * fb > 0.0 ) {"
    },
    "Csv-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.class);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.class);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerMap);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerMap);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.this.headerMap);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.this.headerMap);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.TYPE);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.TYPE);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerMap;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerMap;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.size);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.size);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.class);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.class);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.this.headerMap;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.this.headerMap;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new LinkedHashMap<String, Integer>( Integer.MIN_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new LinkedHashMap<String, Integer>( Integer.MIN_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, column);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, column);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.class);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.class);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.headerMap);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.headerMap);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.DATE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.DATE);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.By);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.By);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.header_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.header_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.header);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.header);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.itemCount);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.itemCount);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.header, Integer.class);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.header, Integer.class);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.itemCount);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.itemCount);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.numberOfMap);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.numberOfMap);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.su_VALUE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.su_VALUE);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerName, Integer.class);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerName, Integer.class);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new LinkedHashMap<String, Integer>(MAX_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new LinkedHashMap<String, Integer>(MAX_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerMap, Integer.class);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerMap, Integer.class);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, new Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, new Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerName);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerName);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer. Overflow);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer. Overflow);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, new Integer.class);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, new Integer.class);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.this.headerMap, Integer.class);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.this.headerMap, Integer.class);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.Utils.headerMap);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.Utils.headerMap);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerName, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.headerName, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.header_VALUE);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.header_VALUE);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.transformMap);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.transformMap);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.Utils.OBJECT_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.Utils.OBJECT_VALUE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap[this.headerMap;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap[this.headerMap;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.INFO);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.INFO);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer. configMap);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer. configMap);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.DD);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.DD);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap[this.headerMap);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap[this.headerMap);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerName, Integer.class);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerName, Integer.class);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.NAME);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.NAME);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.RANGE_OBJECT);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.RANGE_OBJECT);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.DD_VALUE);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.DD_VALUE);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.RANGE_OBJECT_ARRAY;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.RANGE_OBJECT_ARRAY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.mayCount);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer.mayCount);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.Utils.OBJECT_VALUE);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap.Utils.OBJECT_VALUE);",
                "identical": false
            }
        ],
        "buggy_line": "return new LinkedHashMap<String, Integer>(this.headerMap);",
        "fixed_line": "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);"
    },
    "Chart-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultStrings);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultStrings);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.time, RegularTimePeriod.DEFAULT_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.time, RegularTimePeriod.DEFAULT_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultLocale);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultLocale);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.time = RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.time = RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.timeZone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.timeZone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.time = RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.time = RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch_ZONE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch_ZONE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultID_ZONE;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultID_ZONE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultinternal;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultinternal;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.time = time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.time = time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(zone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(zone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.time = time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.time = time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultIter",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultIter",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCode;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCode;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch_ZONE);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch_ZONE);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultVEN);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultVEN);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultLocale;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultLocale;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCode);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCode);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.timeZone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.timeZone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultlier);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultlier);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.time, RegularTimePeriod.DEFAULT_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.time, RegularTimePeriod.DEFAULT_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault';",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault';",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.time, RegularTimePeriod.DEFAULT_PER_DAY, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.time, RegularTimePeriod.DEFAULT_PER_DAY, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSymbols;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSymbols;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultString;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultString;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault % 2 != Locale.getDefault;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault % 2 != Locale.getDefault;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultARY_ZONE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultARY_ZONE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, instant;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, instant;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() - 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault() - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultPLETS_PER_DAY);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultPLETS_PER_DAY);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultByte;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultByte;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultos);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultos);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultToken);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultToken);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDefault;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDefault;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSearch_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultID_ZONE);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultID_ZONE);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault.getDefault());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault.getDefault());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultToken;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultToken;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultvp_ZONE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultvp_ZONE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDeserializer);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultDeserializer);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultNEW_ZONE);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultNEW_ZONE);",
                "identical": false
            }
        ],
        "buggy_line": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "fixed_line": "this(time, zone, Locale.getDefault());"
    },
    "Chart-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dataset = series;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dataset = series;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dataset = dataset;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dataset = dataset;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dataset = n;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dataset = n;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dataset = DEFAULT_DOMAIN_PAINT;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dataset = DEFAULT_DOMAIN_PAINT;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dataset = DialShape;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dataset = DialShape;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dataset = DEFAULT_START_ANGLE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dataset = DEFAULT_START_ANGLE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dataset = DEFAULT_START_PAINT;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dataset = DEFAULT_START_PAINT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dataset = pie;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dataset = pie;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dataset =pieChart;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dataset =pieChart;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dataset = DialShape.CIRCLE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dataset = DialShape.CIRCLE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dataset = r;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dataset = r;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dataset = label;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dataset = label;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dataset = key;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dataset = key;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dataset = DEFAULT_OUTLINE_PAINT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dataset = DEFAULT_OUTLINE_PAINT;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dataset = itemCount;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dataset = itemCount;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dataset = item;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dataset = item;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dataset =Dataset;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dataset =Dataset;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dataset = items;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dataset = items;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dataset = DEFAULT_START_RADIUS;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dataset = DEFAULT_START_RADIUS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dataset =dataset;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dataset =dataset;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dataset = DEFAULT_FILE_PAINT;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dataset = DEFAULT_FILE_PAINT;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dataset = seriesName;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dataset = seriesName;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dataset = clone;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dataset = clone;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dataset = last;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dataset = last;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dataset = DEFAULT_PAINT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dataset = DEFAULT_PAINT;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dataset = category;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dataset = category;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dataset = column;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dataset = column;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dataset = DEFAULT_START_TO_PAINT;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dataset = DEFAULT_START_TO_PAINT;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dataset = axis;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dataset = axis;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dataset = DEFAULT_BASE_RADIUS;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dataset = DEFAULT_BASE_RADIUS;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dataset = series1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dataset = series1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dataset = undataset;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dataset = undataset;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dataset = originalPlot;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dataset = originalPlot;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dataset = DEFAULT_ian_PAINT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dataset = DEFAULT_ian_PAINT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dataset = DEFAULT_BASE_PAINT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dataset = DEFAULT_BASE_PAINT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dataset = DEFAULT_ITEM_PAINT;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dataset = DEFAULT_ITEM_PAINT;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dataset = auto;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dataset = auto;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dataset = fill;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dataset = fill;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dataset = DialShape.BY_PAINT;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dataset = DialShape.BY_PAINT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dataset = top;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dataset = top;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dataset = section;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dataset = section;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dataset = series; // add the dataset with 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dataset = series; // add the dataset with 0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dataset = DEFAULT_AUTO_PAINT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dataset = DEFAULT_AUTO_PAINT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dataset = DialWidth;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dataset = DialWidth;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dataset = DEFAULT_START_OFFSET;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dataset = DEFAULT_START_OFFSET;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dataset = series; // the dataset with 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dataset = series; // the dataset with 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dataset = DEFAULT_RADIUS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dataset = DEFAULT_RADIUS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dataset = TimePeriod;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dataset = TimePeriod;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dataset =24;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dataset =24;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dataset = s;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dataset = s;",
                "identical": false
            }
        ],
        "buggy_line": "this.dataset = dataset;",
        "fixed_line": "setDataset(dataset);"
    },
    "Chart-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "PathIterator iterator2 = p1.getPathIterator;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "PathIterator iterator2 = p1.getPathIterator;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null);",
                "identical": true
            },
            {
                "k": 6,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null);",
                "identical": true
            },
            {
                "k": 7,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.getPath);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.getPath);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null2);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null2);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null)];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null)];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.value);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.value);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.ON);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "PathIterator iterator2 = p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "PathIterator iterator2 = p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null){",
                "identical": false
            },
            {
                "k": 30,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null){",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.parent);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.parent);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.oldName);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.oldName);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null != p2.getPath;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null != p2.getPath;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.parent)];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.parent)];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null != p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null != p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.n);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.n);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "PathIterator iterator2 = p2.getPathIterator(nullnull);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "PathIterator iterator2 = p2.getPathIterator(nullnull);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe - p1.getPath;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe - p1.getPath;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.null);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.null);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "PathIterator iterator2 = p1.getPathIterator != p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "PathIterator iterator2 = p1.getPathIterator != p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.map);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.map);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null, p1.getPath);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null, p1.getPath);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.show);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.show);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PathIterator iterator2 = p1.getPathIterator();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "PathIterator iterator2 = p1.getPathIterator();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.os);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.os);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, d2);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, d2);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "PathIterator iterator2 = p2.getPathIterator(nullSafe);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "PathIterator iterator2 = p2.getPathIterator(nullSafe);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null != p2.getPath);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null != p2.getPath);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null)];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null)];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null\" + p2.getPath;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null\" + p2.getPath;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullSafe;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullDone);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullDone);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "PathIterator iterator2 = p1.getPathIteratorIfNull;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "PathIterator iterator2 = p1.getPathIteratorIfNull;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull)];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull)];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.name);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.name);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull != p2.getPath;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull != p2.getPath;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull != p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull != p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.2.getPath);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.2.getPath);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.uri);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null, p2.uri);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull, p2.getPath);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull, p2.getPath);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null += p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null += p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullPath);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullPath);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullText);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullText);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull){",
                "identical": false
            },
            {
                "k": 98,
                "patch": "PathIterator iterator2 = p1.getPathIterator(nullnull){",
                "identical": false
            },
            {
                "k": 99,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null + p2.getPath;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null + p2.getPath;",
                "identical": false
            }
        ],
        "buggy_line": "PathIterator iterator2 = p1.getPathIterator(null);",
        "fixed_line": "PathIterator iterator2 = p2.getPathIterator(null);"
    },
    "Time-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "instantLocal, chrono, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "instantLocal, chrono, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "instantLocal = chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "instantLocal = chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "instantLocal = chrono, zone, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "instantLocal = chrono, zone, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "instantLocal, chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "instantLocal, chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "instantLocal = chrono, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "instantLocal = chrono, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "instantLocal, chrono, position);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "instantLocal, chrono, position);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "instantLocal, chrono, zone, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "instantLocal, chrono, zone, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "instantLocal = chrono, position, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "instantLocal = chrono, position, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "instantLocal, chrono, dayOfMonth, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "instantLocal, chrono, dayOfMonth, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "instantLocal, chrono,Offset, saveMillis);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "instantLocal, chrono,Offset, saveMillis);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "instantLocal, chrono,Start, iPivotYear);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "instantLocal, chrono,Start, iPivotYear);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "instantLocal, chrono, bucket = chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "instantLocal, chrono, bucket = chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "instantLocal, chrono, zone, iLocale);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "instantLocal, chrono, zone, iLocale);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "instantLocal = chrono, ctxt, chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "instantLocal = chrono, ctxt, chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "instantLocal, chrono, bucket, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "instantLocal, chrono, bucket, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "instantLocal = chrono, 0.0Year, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "instantLocal = chrono, 0.0Year, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "instantLocal = chrono, instantMillis, iPivotYear);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "instantLocal = chrono, instantMillis, iPivotYear);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "instantLocal = chrono,MarkerYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "instantLocal = chrono,MarkerYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "instantLocal = chrono, year, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "instantLocal = chrono, year, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "instantLocal = chrono, zone, iPivotYear);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "instantLocal = chrono, zone, iPivotYear);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "instantLocal = chrono, 0.0, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "instantLocal = chrono, 0.0, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "instantLocal = chrono, next, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "instantLocal = chrono, next, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "instantLocal = chrono, ctxt, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "instantLocal = chrono, ctxt, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "instantLocal = chrono, position, iOffset, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "instantLocal = chrono, position, iOffset, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "instantLocal = chrono, position, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "instantLocal = chrono, position, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "instantLocal, chrono,Offset, parsedChrono);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "instantLocal, chrono,Offset, parsedChrono);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "instantLocal, chrono, bucket, iLocale);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "instantLocal, chrono, bucket, iLocale);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "instantLocal = chrono, zone, iLocale, locale);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "instantLocal = chrono, zone, iLocale, locale);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "instantLocal, chrono, zone, iLocale;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "instantLocal, chrono, zone, iLocale;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "instantLocal = chrono, ctxt, chrono, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "instantLocal = chrono, ctxt, chrono, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "instantLocal = chrono, zone, iLocale, lineno, iPivotYear);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "instantLocal = chrono, zone, iLocale, lineno, iPivotYear);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "instantLocal, chrono, bucket = chrono;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "instantLocal, chrono, bucket = chrono;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "instantLocal = chrono, position, iOffset, 20;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "instantLocal = chrono, position, iOffset, 20;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "instantLocal, chrono,Offset, parsedZone);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "instantLocal, chrono,Offset, parsedZone);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "instantLocal = chrono, ctxt, chrono, iLocale);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "instantLocal = chrono, ctxt, chrono, iLocale);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "instantLocal = chrono, zone, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "instantLocal = chrono, zone, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "instantLocal = chrono,Offset, saveMillis);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "instantLocal = chrono,Offset, saveMillis);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "instantLocal, chrono, dayOfMonth, iLocale);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "instantLocal, chrono, dayOfMonth, iLocale);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "instantLocal, chrono, displayOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "instantLocal, chrono, displayOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "instantLocal = chrono, zone, iLocale;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "instantLocal = chrono, zone, iLocale;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "instantLocal, chrono, zone, iPivotYear);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "instantLocal, chrono, zone, iPivotYear);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "instantLocal, chrono, bucket, iOffset, parsedChrono);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "instantLocal, chrono, bucket, iOffset, parsedChrono);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "instantLocal = chrono, ctxt, chrono, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "instantLocal = chrono, ctxt, chrono, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "instantLocal, chrono, bucket, iOffset, parsedZone);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "instantLocal, chrono, bucket, iOffset, parsedZone);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "instantLocal = chrono, millis, bucket, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "instantLocal = chrono, millis, bucket, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "instantLocal, chrono, bucket, iLocale, locale);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "instantLocal, chrono, bucket, iLocale, locale);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "instantLocal = chrono, position, iOffset, parsedOffset = chrono;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "instantLocal = chrono, position, iOffset, parsedOffset = chrono;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "instantLocal = chrono, standardOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "instantLocal = chrono, standardOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "instantLocal, chrono, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "instantLocal, chrono, parsedOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "instantLocal = chrono, bucket, iLocale, locale);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "instantLocal = chrono, bucket, iLocale, locale);",
                "identical": false
            }
        ],
        "buggy_line": "instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);",
        "fixed_line": "instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));"
    },
    "JacksonCore-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (_currentSegment == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (_currentSegment == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (_currentSegment != null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (_currentSegment != null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (_currentSegment;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (_currentSegment;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (_currentSegment != N) return _currentSegment;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (_currentSegment != N) return _currentSegment;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (_currentSegment != NR_BIGDECIMAL) return _currentSegment;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (_currentSegment != NR_BIGDECIMAL) return _currentSegment;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (_currentSegment != N) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (_currentSegment != N) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_currentSegment != _currentSegment.length) return _currentSegment;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (_currentSegment != _currentSegment.length) return _currentSegment;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_currentSegment != NR_LONG) return _currentSegment;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (_currentSegment != NR_LONG) return _currentSegment;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (_currentSegment == NR_BIGDECIMAL) return _currentSegment;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (_currentSegment == NR_BIGDECIMAL) return _currentSegment;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (_currentSegment == NR_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (_currentSegment == NR_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_currentSegment != null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_currentSegment != null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (_currentSegment.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (_currentSegment.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (_currentSegment != NR_DOUBLE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_currentSegment != NR_DOUBLE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (_currentSegment != NR_BIGINT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_currentSegment != NR_BIGINT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (_currentSegment == NR_LONG) return _currentSegment;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (_currentSegment == NR_LONG) return _currentSegment;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (_currentSegment == NR_UNKNOWN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (_currentSegment == NR_UNKNOWN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_currentSegment != NR_UNKNOWN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_currentSegment != NR_UNKNOWN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (_currentSegment != NR_K) return _currentSegment;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (_currentSegment != NR_K) return _currentSegment;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (_inputStart >= 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (_inputStart >= 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (_currentSegment != _currentSegment.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (_currentSegment != _currentSegment.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_currentSegment != XML_END_ELEMENT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (_currentSegment != XML_END_ELEMENT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (_currentSegment = _currentSegment;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (_currentSegment = _currentSegment;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (_currentSegment == NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (_currentSegment == NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_currentSegment == N) return _currentSegment;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (_currentSegment == N) return _currentSegment;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (_currentSegment != NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_currentSegment != NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (_currentSegment == NR_NUMBER_FLOAT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_currentSegment == NR_NUMBER_FLOAT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (_currentSegment != N+1) return _currentSegment;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (_currentSegment != N+1) return _currentSegment;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (_currentSegment == NR_STRING) return _currentSegment;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (_currentSegment == NR_STRING) return _currentSegment;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (_currentSegment == NR_DOUBLE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (_currentSegment == NR_DOUBLE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (_currentSegment != NR_count) return _currentSegment;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (_currentSegment != NR_count) return _currentSegment;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (_currentSegment == NR_MONTH) return _currentSegment;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (_currentSegment == NR_MONTH) return _currentSegment;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_currentSegment != NR_NUMBER_FLOAT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (_currentSegment != NR_NUMBER_FLOAT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_currentSegment != NR_STRING) return _currentSegment;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_currentSegment != NR_STRING) return _currentSegment;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_currentSegment != NR_SE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (_currentSegment != NR_SE) return _currentSegment;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_currentSegment == NR_ segment) return _currentSegment;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (_currentSegment == NR_ segment) return _currentSegment;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (_currentSegment == NR_K) return _currentSegment;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (_currentSegment == NR_K) return _currentSegment;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_currentSegment != NR_MONTH) return _currentSegment;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_currentSegment != NR_MONTH) return _currentSegment;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (_currentSegment == NR_BIGINT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (_currentSegment == NR_BIGINT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (_currentSegment != NLen) return _currentSegment;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (_currentSegment != NLen) return _currentSegment;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (_currentSegment != N -= _currentSegment.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (_currentSegment != N -= _currentSegment.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (_currentSegment != NR_T) return _currentSegment;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (_currentSegment != NR_T) return _currentSegment;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (_currentSegment != NLen) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (_currentSegment != NLen) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (_currentSegment == null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (_currentSegment == null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (_currentSegment == NR_NUMBER_INT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (_currentSegment == NR_NUMBER_INT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (_currentSegment != NR_ base) return _currentSegment;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_currentSegment != NR_ base) return _currentSegment;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (_inputStart >= 0) return _currentSegment;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (_inputStart >= 0) return _currentSegment;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (_currentSegment != NR_SEGMENT_LEN) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (_currentSegment != N currentIndex) return _currentSegment;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (_currentSegment != N currentIndex) return _currentSegment;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (_currentSegment == NR_SEGMENT_LEN) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_currentSegment == NR_SEGMENT_LEN) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!_hasSegments)  return _currentSegment;",
        "fixed_line": "if (!_hasSegments && _currentSegment != null)  return _currentSegment;"
    },
    "Math-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "return mStyle * 31 + mLocale.doubleValue();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return mStyle * 31 + mLocale.doubleValue();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return mStyle * getNumberOfMargin / n;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return mStyle * getNumberOfMargin / n;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return n * mLocale.getSample() / 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return n * mLocale.getSample() / 2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return mStyle * 31 + mLocale.doubleValue() / 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return mStyle * 31 + mLocale.doubleValue() / 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return n * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return n * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return n * getNumberOfes +nopcode * N;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return n * getNumberOfes +nopcode * N;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return mStyle * mean + nopcode;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return mStyle * mean + nopcode;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return n * getNumberOfes +nopcode * 7;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return n * getNumberOfes +nopcode * 7;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return count * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return count * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return population * N1 - nopcode;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return population * N1 - nopcode;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return mStyle * getNumberOfes;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return mStyle * getNumberOfes;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return mStyle * 31 + mLocale.doubleValue / 2;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return mStyle * 31 + mLocale.doubleValue / 2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return mStyle * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return mStyle * getNumberOfes +nopcode;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return mStyle * getNumberOftypesSize / n;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return mStyle * getNumberOftypesSize / n;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return 4;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return 4;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return mStyle * getNumberOfattrsMargin / n;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return mStyle * getNumberOfattrsMargin / n;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return mStyle * 31 + mLocale.doubleValue() * N;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return mStyle * 31 + mLocale.doubleValue() * N;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return mStyle * getNumberOf goodSize - nopcode;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return mStyle * getNumberOf goodSize - nopcode;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return x * getNumberOfMillis / mLocale.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return x * getNumberOfMillis / mLocale.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return entry.getSampleSize() * N;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return entry.getSampleSize() * N;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return n * localsSize -nopcode;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return n * localsSize -nopcode;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return n * mLocale.getSample() / 7;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return n * mLocale.getSample() / 7;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return n * mLocale.getSample() / nopcode;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return n * mLocale.getSample() / nopcode;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return mStyle * 31 + mLocale.double) / 2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return mStyle * 31 + mLocale.double) / 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return mStyle * getNumberOfURI;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return mStyle * getNumberOfURI;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return mStyle * getNumberOf>nopcode + 7;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return mStyle * getNumberOf>nopcode + 7;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return value / getNumberOfParserCount;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return value / getNumberOfParserCount;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return n * getNumberOfes +nopcode * m;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return n * getNumberOfes +nopcode * m;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return mStyle * getNumberOf>nopcode + mLocale.doubleValue();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return mStyle * getNumberOf>nopcode + mLocale.doubleValue();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return mStyle * getNumberOfconstCount - nopcode;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return mStyle * getNumberOfconstCount - nopcode;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return value * getNumberOfes / n;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return value * getNumberOfes / n;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return mStyle * getNumberOfconstCount - n) / 2;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return mStyle * getNumberOfconstCount - n) / 2;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return mStyle * 31 + mLocale.doubleValue;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return mStyle * 31 + mLocale.doubleValue;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return n * mLocale.getSample() / 4;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return n * mLocale.getSample() / 4;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return n * getNumberOfes +nopcode * getPSize;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return n * getNumberOfes +nopcode * getPSize;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return mStyle * 31 + nopcode;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return mStyle * 31 + nopcode;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return mStyle * getNumberOfes +nopcode * 7;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return mStyle * getNumberOfes +nopcode * 7;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return mStyle * getNumberOfes +nopcode * getPSize;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return mStyle * getNumberOfes +nopcode * getPSize;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return mStyle * getNumberOftypesSize / nCols;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return mStyle * getNumberOftypesSize / nCols;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return mStyle * 31 + mLocale.doubleValue * 7;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return mStyle * 31 + mLocale.doubleValue * 7;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return mStyle * getNumberOfMargin / nCols;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return mStyle * getNumberOfMargin / nCols;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return mStyle * mean;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return mStyle * mean;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return mStyle * getNumberOfes + n;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return mStyle * getNumberOfes + n;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return n * getNumberOfes +nopcode * 3) / 2;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return n * getNumberOfes +nopcode * 3) / 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return n * getNumberOfes / n;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return n * getNumberOfes / n;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return mStyle * 31 + mLocale.doubleValue() * populationSize;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return mStyle * 31 + mLocale.doubleValue() * populationSize;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return n * distes + n;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return n * distes + n;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return mStyle * 31 + mLocale.doubleValue *nopcode;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return mStyle * 31 + mLocale.doubleValue *nopcode;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return mStyle * getNumberOfes +nopcode * N;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return mStyle * getNumberOfes +nopcode * N;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return n * mLocale.getSample() / 32;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return n * mLocale.getSample() / 32;",
                "identical": false
            }
        ],
        "buggy_line": "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
        "fixed_line": "return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());"
    },
    "JacksonDatabind-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "sb.append(';",
                "identical": false
            },
            {
                "k": 2,
                "patch": "sb.append(';",
                "identical": false
            },
            {
                "k": 3,
                "patch": "sb.append('; // if it's do sanity check",
                "identical": false
            },
            {
                "k": 4,
                "patch": "sb.append('; // if it's do sanity check",
                "identical": false
            },
            {
                "k": 5,
                "patch": "sb.append('; // sanity check",
                "identical": false
            },
            {
                "k": 6,
                "patch": "sb.append('; // sanity check",
                "identical": false
            },
            {
                "k": 7,
                "patch": "sb.append('_');",
                "identical": false
            },
            {
                "k": 8,
                "patch": "sb.append('_');",
                "identical": false
            },
            {
                "k": 9,
                "patch": "sb.append('; // sb",
                "identical": false
            },
            {
                "k": 10,
                "patch": "sb.append('; // sb",
                "identical": false
            },
            {
                "k": 11,
                "patch": "sb.append('[';",
                "identical": false
            },
            {
                "k": 12,
                "patch": "sb.append('[';",
                "identical": false
            },
            {
                "k": 13,
                "patch": "sb.append('; // to read it's do sanity check",
                "identical": false
            },
            {
                "k": 14,
                "patch": "sb.append('; // to read it's do sanity check",
                "identical": false
            },
            {
                "k": 15,
                "patch": "sb.append('$');",
                "identical": false
            },
            {
                "k": 16,
                "patch": "sb.append('$');",
                "identical": false
            },
            {
                "k": 17,
                "patch": "sb.append('; // if it.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "sb.append('; // if it.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "sb.append(' ? 1 : _class;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "sb.append(' ? 1 : _class;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "sb.append('; // property/ nulls as per it's do sanity check",
                "identical": false
            },
            {
                "k": 22,
                "patch": "sb.append('; // property/ nulls as per it's do sanity check",
                "identical": false
            },
            {
                "k": 23,
                "patch": "sb.append('; // new: \"+sb, _class",
                "identical": false
            },
            {
                "k": 24,
                "patch": "sb.append('; // new: \"+sb, _class",
                "identical": false
            },
            {
                "k": 25,
                "patch": "sb.append('; // 0 means should never occur: \"+sb, _class",
                "identical": false
            },
            {
                "k": 26,
                "patch": "sb.append('; // 0 means should never occur: \"+sb, _class",
                "identical": false
            },
            {
                "k": 27,
                "patch": "sb.append('; // wrapper: \"+sb, _class",
                "identical": false
            },
            {
                "k": 28,
                "patch": "sb.append('; // wrapper: \"+sb, _class",
                "identical": false
            },
            {
                "k": 29,
                "patch": "sb.append('_TYPE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "sb.append('_TYPE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "sb.append('; // 0 means 'raw'",
                "identical": false
            },
            {
                "k": 32,
                "patch": "sb.append('; // 0 means 'raw'",
                "identical": false
            },
            {
                "k": 33,
                "patch": "sb.append('; //: \"+sb, _class",
                "identical": false
            },
            {
                "k": 34,
                "patch": "sb.append('; //: \"+sb, _class",
                "identical": false
            },
            {
                "k": 35,
                "patch": "sb.append('; // if it's do implicit re-class",
                "identical": false
            },
            {
                "k": 36,
                "patch": "sb.append('; // if it's do implicit re-class",
                "identical": false
            },
            {
                "k": 37,
                "patch": "sb.append('$',');",
                "identical": false
            },
            {
                "k": 38,
                "patch": "sb.append('$',');",
                "identical": false
            },
            {
                "k": 39,
                "patch": "sb.append('; // expr, sb",
                "identical": false
            },
            {
                "k": 40,
                "patch": "sb.append('; // expr, sb",
                "identical": false
            },
            {
                "k": 41,
                "patch": "sb.append('; // to be negative",
                "identical": false
            },
            {
                "k": 42,
                "patch": "sb.append('; // to be negative",
                "identical": false
            },
            {
                "k": 43,
                "patch": "sb.append('; // property: \"+_class.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "sb.append('; // property: \"+_class.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "sb.append('; // to read it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 46,
                "patch": "sb.append('; // to read it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 47,
                "patch": "sb.append('; //ANT: \"+sb, _class",
                "identical": false
            },
            {
                "k": 48,
                "patch": "sb.append('; //ANT: \"+sb, _class",
                "identical": false
            },
            {
                "k": 49,
                "patch": "sb.append('; // 0 means '\"+sb, sb",
                "identical": false
            },
            {
                "k": 50,
                "patch": "sb.append('; // 0 means '\"+sb, sb",
                "identical": false
            },
            {
                "k": 51,
                "patch": "sb.append('; // 0 means should never happen but...",
                "identical": false
            },
            {
                "k": 52,
                "patch": "sb.append('; // 0 means should never happen but...",
                "identical": false
            },
            {
                "k": 53,
                "patch": "sb.append('; // if it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 54,
                "patch": "sb.append('; // if it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 55,
                "patch": "sb.append(_class;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "sb.append(_class;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "sb.append('; // no type: \"+sb, sb",
                "identical": false
            },
            {
                "k": 58,
                "patch": "sb.append('; // no type: \"+sb, sb",
                "identical": false
            },
            {
                "k": 59,
                "patch": "sb.append('8;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "sb.append('8;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "sb.append('; // wrapper: \"+_class.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "sb.append('; // wrapper: \"+_class.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 64,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 65,
                "patch": "sb.append('; // property/ nulls in, sb",
                "identical": false
            },
            {
                "k": 66,
                "patch": "sb.append('; // property/ nulls in, sb",
                "identical": false
            },
            {
                "k": 67,
                "patch": "sb.append('; // 0 means should never occur/after, sb",
                "identical": false
            },
            {
                "k": 68,
                "patch": "sb.append('; // 0 means should never occur/after, sb",
                "identical": false
            },
            {
                "k": 69,
                "patch": "sb.append(']');",
                "identical": false
            },
            {
                "k": 70,
                "patch": "sb.append(']');",
                "identical": false
            },
            {
                "k": 71,
                "patch": "sb.append('; // 0 means should never occur: \"+sb, sb",
                "identical": false
            },
            {
                "k": 72,
                "patch": "sb.append('; // 0 means should never occur: \"+sb, sb",
                "identical": false
            },
            {
                "k": 73,
                "patch": "sb.append('; // to read it's do implicit re-sb, sb",
                "identical": false
            },
            {
                "k": 74,
                "patch": "sb.append('; // to read it's do implicit re-sb, sb",
                "identical": false
            },
            {
                "k": 75,
                "patch": "sb.append('; //: \"+_class.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "sb.append('; //: \"+_class.",
                "identical": false
            },
            {
                "k": 77,
                "patch": "sb.append('; // if it's do implicit re-public, sb",
                "identical": false
            },
            {
                "k": 78,
                "patch": "sb.append('; // if it's do implicit re-public, sb",
                "identical": false
            },
            {
                "k": 79,
                "patch": "sb.append('; // _class: \"+sb, sb",
                "identical": false
            },
            {
                "k": 80,
                "patch": "sb.append('; // _class: \"+sb, sb",
                "identical": false
            },
            {
                "k": 81,
                "patch": "sb.append('; // property on negative",
                "identical": false
            },
            {
                "k": 82,
                "patch": "sb.append('; // property on negative",
                "identical": false
            },
            {
                "k": 83,
                "patch": "sb.append('; // can't run type?",
                "identical": false
            },
            {
                "k": 84,
                "patch": "sb.append('; // can't run type?",
                "identical": false
            },
            {
                "k": 85,
                "patch": "sb.append('; // property 'raw' nulls in, sb",
                "identical": false
            },
            {
                "k": 86,
                "patch": "sb.append('; // property 'raw' nulls in, sb",
                "identical": false
            },
            {
                "k": 87,
                "patch": "sb.append('; // false if it.",
                "identical": false
            },
            {
                "k": 88,
                "patch": "sb.append('; // false if it.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "sb.append('; // property on the sb",
                "identical": false
            },
            {
                "k": 90,
                "patch": "sb.append('; // property on the sb",
                "identical": false
            },
            {
                "k": 91,
                "patch": "sb.append('; // property/ nulls as per spec",
                "identical": false
            },
            {
                "k": 92,
                "patch": "sb.append('; // property/ nulls as per spec",
                "identical": false
            },
            {
                "k": 93,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re- ERROR",
                "identical": false
            },
            {
                "k": 94,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re- ERROR",
                "identical": false
            },
            {
                "k": 95,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re-class",
                "identical": false
            },
            {
                "k": 96,
                "patch": "sb.append('; // property/ nulls as per it's do implicit re-class",
                "identical": false
            },
            {
                "k": 97,
                "patch": "sb.append('; // property/ nulls as per it's do _class",
                "identical": false
            },
            {
                "k": 98,
                "patch": "sb.append('; // property/ nulls as per it's do _class",
                "identical": false
            },
            {
                "k": 99,
                "patch": "sb.append('; //ANT: \"+_class.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "sb.append('; //ANT: \"+_class.",
                "identical": false
            }
        ],
        "buggy_line": "sb.append(';');",
        "fixed_line": "sb.append(\">;\");"
    },
    "Lang-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "classes[i] = iTypes[i].getClass();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "classes[i] = iTypes[i].getClass();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "classes[i] = EMPTY_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "classes[i] = EMPTY_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "classes[i] = i[i].getClass();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "classes[i] = i[i].getClass();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "classes[i] = array[i].getClass;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "classes[i] = array[i].getClass;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "classes[i] = INDEX_NOT_FOUND[i].getClass();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "classes[i] = INDEX_NOT_FOUND[i].getClass();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "classes[i] = EMPTY_CLASS_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "classes[i] = EMPTY_CLASS_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "classes[i] = i;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "classes[i] = i;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "classes[i] = EMPTY_BOOLEAN_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "classes[i] = EMPTY_BOOLEAN_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "classes[i] = array[i].getClass() - 1].getClass();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "classes[i] = array[i].getClass() - 1].getClass();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "classes[i] = desc[i].getClass();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "classes[i] = desc[i].getClass();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "classes[i] = array[i].getClass().getClass();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "classes[i] = array[i].getClass().getClass();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "classes[i] = array[i - 1].getClass();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "classes[i] = array[i - 1].getClass();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "classes[i] = element[i].getClass();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "classes[i] = element[i].getClass();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "classes[i] = INDEX_NOT_FOUND[i].getClass;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "classes[i] = INDEX_NOT_FOUND[i].getClass;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "classes[i] = classes[i].getClass();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "classes[i] = classes[i].getClass();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "classes[i] = kv[i].getClass();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "classes[i] = kv[i].getClass();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "classes[i] = array[i].length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "classes[i] = array[i].length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "classes[i] =ceed_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "classes[i] =ceed_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "classes[i] = 1999_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "classes[i] = 1999_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "classes[i] = EMPTY_CLASS[i].getClass();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "classes[i] = EMPTY_CLASS[i].getClass();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "classes[i] = array[i].getClass() - 1];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "classes[i] = array[i].getClass() - 1];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "classes[i] =value[i].getClass();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "classes[i] =value[i].getClass();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "classes[i] = array[i].getClassgetClass();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "classes[i] = array[i].getClassgetClass();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "classes[i] =parseInt[i].getClass();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "classes[i] =parseInt[i].getClass();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "classes[i] = iIndices[i].getClass();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "classes[i] = iIndices[i].getClass();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "classes[i] = ordinal[i].getClass();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "classes[i] = ordinal[i].getClass();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "classes[i] =Current[i].getClass();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "classes[i] =Current[i].getClass();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "classes[i] = name[i].getClass();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "classes[i] = name[i].getClass();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "classes[i] = header[i].getClass();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "classes[i] = header[i].getClass();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "classes[i] = parsers[i].getClass();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "classes[i] = parsers[i].getClass();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "classes[i] = array[i].getClass()];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "classes[i] = array[i].getClass()];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "classes[i] = load[i].getClass();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "classes[i] = load[i].getClass();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "classes[i] = array[i].getClass() - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "classes[i] = array[i].getClass() - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "classes[i] =ceed[i].getClass();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "classes[i] =ceed[i].getClass();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "classes[i] = values[i].getClass();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "classes[i] = values[i].getClass();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "classes[i] =paint[i].getClass();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "classes[i] =paint[i].getClass();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "classes[i] =+1[i].getClass();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "classes[i] =+1[i].getClass();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "classes[i] =CAPACITY[i].getClass();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "classes[i] =CAPACITY[i].getClass();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "classes[i] =hi[i].getClass();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "classes[i] =hi[i].getClass();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "classes[i] =dep[i].getClass();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "classes[i] =dep[i].getClass();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "classes[i] =ITS[i].getClass();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "classes[i] =ITS[i].getClass();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "classes[i] = array[i].getClass()].getClass();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "classes[i] = array[i].getClass()].getClass();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "classes[i] = iTypes[i].getClass;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "classes[i] = iTypes[i].getClass;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "classes[i] = elements[i].getClass();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "classes[i] = elements[i].getClass();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "classes[i] = temp[i].getClass();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "classes[i] = temp[i].getClass();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "classes[i] = ArrayUtils[i].getClass();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "classes[i] = ArrayUtils[i].getClass();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "classes[i] = x[i].getClass();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "classes[i] = x[i].getClass();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "classes[i] = UN[i].getClass();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "classes[i] = UN[i].getClass();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "classes[i] = listener[i].getClass();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "classes[i] = listener[i].getClass();",
                "identical": false
            }
        ],
        "buggy_line": "classes[i] = array[i].getClass();",
        "fixed_line": "classes[i] = array[i] == null ? null : array[i].getClass();"
    },
    "Codec-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(DEFAULT_MAXS);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(DEFAULT_MAXS);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(true);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this(true);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this(DEFAULT_TABLE_SIZE);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(DEFAULT_TABLE_SIZE);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this(DEFAULT_IMAGINARY_SIZE);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this(DEFAULT_IMAGINARY_SIZE);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this(encoding);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(encoding);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, encoding;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, encoding;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this(DEFAULT_IMATE_OBJECTS);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this(DEFAULT_IMATE_OBJECTS);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(DEFAULT_MAXS) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(DEFAULT_MAXS) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this(DEFAULT_IMATE) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this(DEFAULT_IMATE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this(DEFAULT_IMAGINARY_SIZE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this(DEFAULT_IMAGINARY_SIZE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this(flags);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this(flags);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this(DEFAULT_IMATE_OBJECTS;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this(DEFAULT_IMATE_OBJECTS;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(DEFAULT_IMAGINARY_NODES);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(DEFAULT_IMAGINARY_NODES);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(DEFAULT_MAX_VALUE_SEGMENT_SIZE);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(DEFAULT_MAX_VALUE_SEGMENT_SIZE);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this(DEFAULT_IMAGINARY_CHAR);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this(DEFAULT_IMAGINARY_CHAR);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 4);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, 4);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this(DEFAULT_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this(DEFAULT_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this(DEFAULT_IMATE);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this(DEFAULT_IMATE);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this(DEFAULT_IMAGINARY_CAPACITY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this(DEFAULT_IMAGINARY_CAPACITY;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this(b64variant);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this(b64variant);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this(DEFAULT_USE_OBJECTS);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this(DEFAULT_USE_OBJECTS);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this(DEFAULT_IMAGINARY_inline_CHARACTER);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this(DEFAULT_IMAGINARY_inline_CHARACTER);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this(DEFAULT_IMAGINSETS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this(DEFAULT_IMAGINSETS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this(DEFAULT_IMAGINARY_NODE_CHARACTER);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this(DEFAULT_IMAGINARY_NODE_CHARACTER);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this(DEFAULT_IMAGINARY_ARRAY;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this(DEFAULT_IMAGINARY_ARRAY;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, fraction;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER, fraction;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this(canonicalize);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this(canonicalize);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this(DEFAULT_IMATE_MATCHER_OBJECTS);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this(DEFAULT_IMATE_MATCHER_OBJECTS);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this(DEFAULT_IMATE_MATCH) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this(DEFAULT_IMATE_MATCH) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this(DEFAULT_IMAGINSETS);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this(DEFAULT_IMAGINSETS);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this(DEFAULT_IMATE_MATCHER_OBJECTS;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this(DEFAULT_IMATE_MATCHER_OBJECTS;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this(DEFAULT_ON_MAXS);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this(DEFAULT_ON_MAXS);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this(DEFAULT_MAXIMUM_VALUE_SIZE);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this(DEFAULT_MAXIMUM_VALUE_SIZE);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this(DEFAULT_IMAGINUCTION_NODES);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this(DEFAULT_IMAGINUCTION_NODES);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this(DEFAULT_IMATEATE_OBJECTS);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this(DEFAULT_IMATEATE_OBJECTS);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this(DEFAULT_IMAGINARY_OBJECTS);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this(DEFAULT_IMAGINARY_OBJECTS);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this(DEFAULT_IMAGINARY_;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this(DEFAULT_IMAGINARY_;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this(field);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this(field);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this(DEFAULT_MAXIMUM_VALUE_EFFECTS);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this(DEFAULT_MAXIMUM_VALUE_EFFECTS);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this(DEFAULT_GMENT_ESCAPE_OBJECTS);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this(DEFAULT_GMENT_ESCAPE_OBJECTS);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(DEFAULT_MAX_VALUE_EFFECTS);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this(DEFAULT_MAX_VALUE_EFFECTS);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this(DEFAULT_IMATE_TO_OBJECTS);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this(DEFAULT_IMATE_TO_OBJECTS);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this(DEFAULT_IMATE_ARRAY;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this(DEFAULT_IMATE_ARRAY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this(DEFAULT_MAX_VALUE_GMENT_EFFECTS);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(DEFAULT_MAX_VALUE_GMENT_EFFECTS);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this(state);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this(state);",
                "identical": false
            }
        ],
        "buggy_line": "this(false);",
        "fixed_line": "this(0);"
    },
    "Lang-6": {
        "fixes": [
            {
                "k": 1,
                "patch": "pos += Character.charCount;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "pos += Character.charCount;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "pos += pt.charCount;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "pos += pt.charCount;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "pos += pt.charCount, pt);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "pos += pt.charCount, pt);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "pos += f.charCount;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "pos += f.charCount;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "pos +=RefPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "pos +=RefPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "pos += Character.charCount( pt, pt);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "pos += Character.charCount( pt, pt);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "pos += Character.charCount, pt);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "pos += Character.charCount, pt);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "pos += pt.charCount, pt.codePoint;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "pos += pt.charCount, pt.codePoint;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "pos += Character.charCount, pt.codePoint;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "pos += Character.charCount, pt.codePoint;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "pos += retain.codePoint(pt, pt);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "pos += retain.codePoint(pt, pt);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "pos += pt.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "pos += pt.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "pos += Character.charCount(pt, pt);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "pos += Character.charCount(pt, pt);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "pos += m.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "pos += m.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "pos += names.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "pos += names.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "pos += ASPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "pos += ASPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "pos += f.charCount( pt, pt);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "pos += f.charCount( pt, pt);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "pos += numPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "pos += numPoint.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "pos += Character.charCount(pt, pt.codePoint;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "pos += Character.charCount(pt, pt.codePoint;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "pos +=Direction.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "pos +=Direction.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "pos += Character.charCount, pt.codePointPtr;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "pos += Character.charCount, pt.codePointPtr;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "pos += param.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "pos += param.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "pos += pt.charCount( pt, pt);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "pos += pt.charCount( pt, pt);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "pos += Character.charCount + 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "pos += Character.charCount + 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "pos += m.charCount;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "pos += m.charCount;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "pos += m.codePointAt(pt, pos);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "pos += m.codePointAt(pt, pos);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "pos +=RefPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "pos +=RefPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "pos += Character.charCount; // we didn't really gets this.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "pos += Character.charCount; // we didn't really gets this.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "pos += emit.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "pos += emit.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "pos +=Final.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "pos +=Final.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "pos += Character.charCount(pt, pt.charPoint;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "pos += Character.charCount(pt, pt.charPoint;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "pos += pt.charCount + 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "pos += pt.charCount + 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "pos += Character.charCount, pt.codePointSideEffects;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "pos += Character.charCount, pt.codePointSideEffects;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "pos += m.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "pos += m.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "pos += numPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "pos += numPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "pos += Character.charCount; // if it't really gets this.",
                "identical": false
            },
            {
                "k": 70,
                "patch": "pos += Character.charCount; // if it't really gets this.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "pos += ASPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "pos += ASPoint.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "pos += pt.charCount, pt.codePointPtr;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "pos += pt.charCount, pt.codePointPtr;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "pos += Character.charCount(pt, pt.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "pos += Character.charCount(pt, pt.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "pos += Character.charCount, pt.codePointGood;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "pos += Character.charCount, pt.codePointGood;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "pos += new Character.charCount;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "pos += new Character.charCount;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "pos += Character.charCount( pt, pt.charPoint;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "pos += Character.charCount( pt, pt.charPoint;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "pos +=equals.charCount;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "pos +=equals.charCount;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "pos += Character.charCount, pt.codePoint_stream;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "pos += Character.charCount, pt.codePoint_stream;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "pos += param.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "pos += param.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "pos += Character.charCount( pt, pt.codePoint;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "pos += Character.charCount( pt, pt.codePoint;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "pos += Character.charCount, pt.codePoint : 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "pos += Character.charCount, pt.codePoint : 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "pos += Character.charCount, pt.codePointAt;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "pos += Character.charCount, pt.codePointAt;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "pos += Character.charCount; // if it't really need to Character.",
                "identical": false
            },
            {
                "k": 96,
                "patch": "pos += Character.charCount; // if it't really need to Character.",
                "identical": false
            },
            {
                "k": 97,
                "patch": "pos += pt.charCount(pt, pt);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "pos += pt.charCount(pt, pt);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "pos += Character.charCount, pt.codePoint);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "pos += Character.charCount, pt.codePoint);",
                "identical": false
            }
        ],
        "buggy_line": "pos += Character.charCount(Character.codePointAt(input, pos));",
        "fixed_line": "pos += Character.charCount(Character.codePointAt(input, pt));"
    },
    "Lang-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (str.startsWith(\"0x\") || str;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (str.startsWith(\"0x\") || str;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"/\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"/\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (str.startsWith(\"0x\") || strLen;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (str.startsWith(\"0x\") || strLen;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (str.startsWith(\"<x0 && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (str.startsWith(\"<x0 && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"[\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"[\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithFIRST\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithFIRST\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithScope\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithScope\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (str.startsWith(\"/x0 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (str.startsWith(\"/x0 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (str.startsWith(\"<x0 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (str.startsWith(\"<x0 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (str.startsWith(\"/x0e' && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (str.startsWith(\"/x0e' && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (str.startsWith(\"<x0e' && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (str.startsWith(\"<x0e' && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (str.startsWith(\"/x0 + str;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (str.startsWith(\"/x0 + str;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (str.startsWith(\"/x0e' && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (str.startsWith(\"/x0e' && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (str.startsWith(\"/x0;} && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (str.startsWith(\"/x0;} && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (str.startsWith(\"/x0e' && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (str.startsWith(\"/x0e' && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\",\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\",\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith AtomicBooleanx\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith AtomicBooleanx\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithStringLiteralDfa;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithStringLiteralDfa;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (str.startsWith(\"/\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (str.startsWith(\"/\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (str.startsWith(\"0x\") || str.length\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (str.startsWith(\"0x\") || str.length\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith('-\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith('-\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (str.startsWith(\"0x\") || str; // nope",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (str.startsWith(\"0x\") || str; // nope",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith attacks\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith attacks\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (str.startsWith(\"/x0 && str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithWidth\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithWidth\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (str.startsWith(\"<x || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (str.startsWith(\"<x || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (str.startsWith(\"<x0e' && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (str.startsWith(\"<x0e' && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithANK;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithANK;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (str.startsWith(\"<x0e' && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (str.startsWith(\"<x0e' && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (str.startsWithStringLiteralDfa || str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (str.startsWithStringLiteralDfa || str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithSetter\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithSetter\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith outer\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith outer\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (str.startsWith(\"<x0 && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (str.startsWith(\"<x0 && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithANK) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithANK) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith MILLIS;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith MILLIS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithstartsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (str.startsWith(\"0x\") || str.startsWithstartsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (str.startsWith(\"/x0;} && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (str.startsWith(\"/x0;} && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\".\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\".\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith oldx\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith oldx\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith 800x\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith 800x\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith threshold;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith threshold;",
                "identical": false
            }
        ],
        "buggy_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
        "fixed_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {"
    },
    "Chart-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "new Range[2] = this.rightBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "new Range[2] = this.rightBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "new Range[2] = c4 - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "new Range[2] = c4 - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "new Range[2] = c4 - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "new Range[2] = c4 - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "new Range[2] = constraint.getWidth2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "new Range[2] = constraint.getWidth2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "new Range[2] = c4 - w[2];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "new Range[2] = c4 - w[2];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "new Range[2] = this.rightBlock - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "new Range[2] = this.rightBlock - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "new Range[2] - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "new Range[2] - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "new Range[2] = size.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "new Range[2] = size.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "new Range[2] = constraint.getWidth;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "new Range[2] = constraint.getWidth;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "new Range[2] = this.leftBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "new Range[2] = this.leftBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "new Range[2] = c4 - w[2];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "new Range[2] = c4 - w[2];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "new Range[2] = this.rightBlock - w[2];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "new Range[2] = this.rightBlock - w[2];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "new Range.0, c4 - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "new Range.0, c4 - w[3] = size.getWidth2;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "new Range[2] = constraint.getWidthgetWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "new Range[2] = constraint.getWidthgetWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "new Range(0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "new Range(0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "new Range[2] = constraint.getWidthString - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "new Range[2] = constraint.getWidthString - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "new Range[2] = constraint.getWidth() - w[2];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "new Range[2] = constraint.getWidth() - w[2];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "new Range[2] = this.rightBlock.getWidth2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "new Range[2] = this.rightBlock.getWidth2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "new Range.getWidth2 = constraint.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "new Range.getWidth2 = constraint.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - h[2];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - h[2];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "new Range[2] = size.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "new Range[2] = size.getWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[3];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - w[3];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "new Range.getWidth2 = size.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "new Range.getWidth2 = size.getWidth() - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "new Range[2] = constraint.getWidth() - w[2] + w[3] - h[2];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "new Range[2] = constraint.getWidth() - w[2] + w[3] - h[2];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "new Range.0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "new Range.0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "new Range[2] = constraint.getWidthString - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "new Range[2] = constraint.getWidthString - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "new Range[2] = c4 - w[3];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "new Range[2] = c4 - w[3];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "new Range[2] = c4 - w[2] + w[3] - h[2];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "new Range[2] = c4 - w[2] + w[3] - h[2];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "new Range[2] - w[3] = size.getWidth();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "new Range[2] - w[3] = size.getWidth();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "new Range[2] = constraint.getWidthgetWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "new Range[2] = constraint.getWidthgetWidth() - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "new Range[2] = constraint.getWidthName - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "new Range[2] = constraint.getWidthName - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "new Range[2] = j2 - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "new Range[2] = j2 - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "new Range[2] = constraint.getWidth() - w[2] + w[3] - w[2];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "new Range[2] = constraint.getWidth() - w[2] + w[3] - w[2];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "new Range[2] = constraint.getWidth() - h[3] - w[2];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "new Range[2] = constraint.getWidth() - h[3] - w[2];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "new Range[2] = this.leftBlock - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "new Range[2] = this.leftBlock - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "new Range.0, c4 - w[2];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "new Range.0, c4 - w[2];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "new Range[2] = constraint.getWidth() - w[3] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "new Range[2] = constraint.getWidth();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "new Range[2] = constraint.getWidth();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "new Range[w.0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "new Range[w.0, c4 - w[3] = h[2];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "new Range[2] = this.rightBlock - w[1] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "new Range[2] = this.rightBlock - w[1] - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "new Range[2] = constraint.getWidth() - w[1] - w[3] - h[2];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "new Range[1] = this.rightBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "new Range[1] = this.rightBlock - w[3] - w[2];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "new Range[2] = this.rightBlock - w[2];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "new Range[2] = this.rightBlock - w[2];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - h[3] - w[2];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "new Range[2] = constraint.getWidth() - h[1] - h[3] - w[2];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "new Range[2] = c4 - h[1] - w[3];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "new Range[2] = c4 - h[1] - w[3];",
                "identical": false
            }
        ],
        "buggy_line": "new Range(0.0, constraint.getWidth() - w[2]),",
        "fixed_line": "new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),"
    },
    "Lang-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Calendar c = date;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Calendar c = date;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Calendar c = format;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Calendar c = format;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Calendar c = new GregorianCalendar;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Calendar c = new GregorianCalendar;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Calendar c = this.mTimeZone;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Calendar c = this.mTimeZone;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Calendar c = new GregorianCalendar(200;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Calendar c = new GregorianCalendar(200;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) + 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) + 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Calendar c = new GregorianCalendar: date;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Calendar c = new GregorianCalendar: date;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.mTimeZone;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.mTimeZone;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Calendar c = new GregorianCalendarLength;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Calendar c = new GregorianCalendarLength;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone)];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone)];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Calendar c = _mTimeZone;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Calendar c = _mTimeZone;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_MONTH;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_MONTH;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Calendar c = new GregorianCalendar(date, c) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Calendar c = new GregorianCalendar(date, c) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_DAY;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_DAY;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Calendar c = new GregorianCalendar precedenceTime;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Calendar c = new GregorianCalendar precedenceTime;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_DAYS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % MONTH_OF_DAYS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNewDate;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNewDate;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Calendar c = new GregorianCalendar().mTimeZone;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Calendar c = new GregorianCalendar().mTimeZone;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Calendar c = new GregorianCalendarPosition;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Calendar c = new GregorianCalendarPosition;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.mTimeZone) - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.mTimeZone) - 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNew;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNew;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Calendar c = new GregorianCalendar(_mTimeZone;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Calendar c = new GregorianCalendar(_mTimeZone;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Calendar c = new GregorianCalendar (0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Calendar c = new GregorianCalendar (0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.mTimeZone) + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.mTimeZone) + 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.mTimeZone;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.mTimeZone;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Calendar c = new GregorianCalendars;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Calendar c = new GregorianCalendars;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.millis;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.millis;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Calendar c = new GregorianCalendar",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Calendar c = new GregorianCalendar",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.millisecond);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.millisecond);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForDaylightS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForDaylightS_PER_MONTH;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Calendar c = new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Calendar c = new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForYear) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForYear) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate, this.mTimeZone) - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate, this.mTimeZone) - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Calendar c = new GregorianCalendar(dateStyle);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Calendar c = new GregorianCalendar(dateStyle);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.mTimeZone) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.mTimeZone) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate, this.millisecond);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate, this.millisecond);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.millisecond;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.millisecond;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNew);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForNew);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.m_PER_MONTH;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % this.m_PER_MONTH;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.millis;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneLengthEstimate, this.millis;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate, this.mTimeZone) + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate, this.mTimeZone) + 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % LONG_OF_MONTH;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone) % LONG_OF_MONTH;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Calendar c = date.mTimeZone;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Calendar c = date.mTimeZone;",
                "identical": false
            }
        ],
        "buggy_line": "Calendar c = new GregorianCalendar(mTimeZone);",
        "fixed_line": "Calendar c = new GregorianCalendar(mTimeZone, mLocale);"
    },
    "Closure-65": {
        "fixes": [
            {
                "k": 1,
                "patch": "case '\\0': sb.append(\"\\\\t; break;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case '\\0': sb.append(\"\\\\t; break;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case '\\0': sb.append(\"\\\\t;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case '\\0': sb.append(\"\\\\t;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case '\\0': sb.append(\"\\\\t = c; break;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case '\\0': sb.append(\"\\\\t = c; break;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case '\\0': sb.append(\"\\\\uslashEscape; break;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case '\\0': sb.append(\"\\\\uslashEscape; break;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case '\\0': sb = c; break;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case '\\0': sb = c; break;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 = c;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 = c;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0;}",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0;}",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case '\\0': sb = i;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case '\\0': sb = i;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case '\\0': sb.append(\"\\\\t = c;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case '\\0': sb.append(\"\\\\t = c;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case '\\0 = c; break;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case '\\0 = c; break;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case '\\0': sb.append(\"\\\\0;} break;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case '\\0': sb.append(\"\\\\0;} break;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case '\\0': sb.append(\"\\\\t; break L;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case '\\0': sb.append(\"\\\\t; break L;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case '\\0': sb.append(\",slashEscape; break;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case '\\0': sb.append(\",slashEscape; break;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case '\\0': sb.append(\"\\\\t0;} break;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case '\\0': sb.append(\"\\\\t0;} break;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 c;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 c;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 = s;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 = s;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case '\\0': sb.append(\"\\\\t': sb; break;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case '\\0': sb.append(\"\\\\t': sb; break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case '\\0': sb.append(\"\\\\u; break;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case '\\0': sb.append(\"\\\\u; break;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case '\\0': sb; break;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case '\\0': sb; break;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case '\\0': sb.append(\"\\\\uslashEscape;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case '\\0': sb.append(\"\\\\uslashEscape;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case '\\0': sb.append(\"\\\\t; break L = c;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case '\\0': sb.append(\"\\\\t; break L = c;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case '\\0': sb.append(\"\\\\uend; break;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case '\\0': sb.append(\"\\\\uend; break;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case '\\0 += sb.length; break;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case '\\0 += sb.length; break;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case '\\0': sb.append(\"\\\\0 c; break;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case '\\0': sb.append(\"\\\\0 c; break;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case '\\0': sb.append(\"\\\\uString; break;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case '\\0': sb.append(\"\\\\uString; break;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case '\\0': sb.append(\"\\\\u\", s;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case '\\0': sb.append(\"\\\\u\", s;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case '\\0': sb.append(\"\\\\s; break;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case '\\0': sb.append(\"\\\\s; break;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case '\\0': sb.append(\"\\\\tEscape; break;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case '\\0': sb.append(\"\\\\tEscape; break;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case '\\0': sb = s; break;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case '\\0': sb = s; break;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case '\\0': sb.append(\"\\\\t = c; break L;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case '\\0': sb.append(\"\\\\t = c; break L;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case '\\0': sb.append(\"\\\\uString;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case '\\0': sb.append(\"\\\\uString;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case '\\0': sb.length; break;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case '\\0': sb.length; break;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case '\\0': sb.append(\"\\\\t]\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case '\\0': sb.append(\"\\\\t]\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 c = s;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case '\\0': sb.append(\"\\\\t; break L0 c = s;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case '\\0': sb.append(\"\\\\t = s;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case '\\0': sb.append(\"\\\\t = s;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case '\\0': sb.append(\"\\\\u\" + s;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case '\\0': sb.append(\"\\\\u\" + s;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case '\\0': sb.append(\"\\\\uslash;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case '\\0': sb.append(\"\\\\uslash;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case '\\0': sb.append(\"\\\\quoteEscape; break;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case '\\0': sb.append(\"\\\\quoteEscape; break;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case '\\0': sb.append(\"\\\\uslash; break;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case '\\0': sb.append(\"\\\\uslash; break;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case '\\0': sb.append(\"\\\\t\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case '\\0': sb.append(\"\\\\t\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case '\\0': sb.append(\",slash; break;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case '\\0': sb.append(\",slash; break;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case '\\0': sb.append(\"\\\\uEOF;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case '\\0': sb.append(\"\\\\uEOF;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case '\\0': sb.append(\"\\\\ range; break;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case '\\0': sb.append(\"\\\\ range; break;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case '\\0': sb.append(\"\\\\t = i;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case '\\0': sb.append(\"\\\\t = i;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case '\\0': sb.append(\"\\\\u;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case '\\0': sb.append(\"\\\\u;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case '\\0': sb.append(\"\\\\ns; break;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case '\\0': sb.append(\"\\\\ns; break;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case '\\0': sb.append('; break;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case '\\0': sb.append('; break;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case '\\0': sb.append(\"\\\\t0 c; break;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case '\\0': sb.append(\"\\\\t0 c; break;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case '\\0': sb.append(\"\\\\tTYPE; break;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case '\\0': sb.append(\"\\\\tTYPE; break;",
                "identical": false
            }
        ],
        "buggy_line": "case '\\0': sb.append(\"\\\\0\"); break;",
        "fixed_line": "case '\\0': sb.append(\"\\\\000\"); break;"
    },
    "Time-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (diff >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (diff >= 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (nextLocal != nextAdjusted) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (nextLocal != nextAdjusted) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (nextLocal != 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (nextLocal != 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (nextLocal != offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (nextLocal != offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (nextLocal != plotAdjusted) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (nextLocal != plotAdjusted) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (instantLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (instantLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (diff > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (diff > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (nextLocal != instantLocal) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (nextLocal != instantLocal) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (diff < 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (diff < 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (nextLocal != end) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (nextLocal != end) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (nextLocal != paddingAdjusted) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (nextLocal != paddingAdjusted) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (diff == 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (diff == 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (nextLocal != e.instantLocal) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (nextLocal != e.instantLocal) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (nextLocal == 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (nextLocal == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (nextLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (nextLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (nextLocal != cAdjusted) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (nextLocal != cAdjusted) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (i <= 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (i <= 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (nextLocal != diff {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (nextLocal != diff {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (nextLocal != asAdjusted) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (nextLocal != asAdjusted) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (nextLocal != lastLocal) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (nextLocal != lastLocal) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (nextLocal != setAdjusted) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (nextLocal != setAdjusted) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (nextLocal > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (nextLocal > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (diff >= nextAdjusted) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (diff >= nextAdjusted) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (diff >= pointLocal) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (diff >= pointLocal) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (nextLocal != prev prevAdjusted) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (nextLocal != prev prevAdjusted) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (diff >=instantLocal) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (diff >=instantLocal) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (nextLocal != GAdjusted) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (nextLocal != GAdjusted) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (nextLocal != prevAdjusted) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (nextLocal != prevAdjusted) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (nextLocal != iAdjusted) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (nextLocal != iAdjusted) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (diff != 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (diff != 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (nextLocal != endAdjusted) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (nextLocal != endAdjusted) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (instantLocal - offsetLocal;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (instantLocal - offsetLocal;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (i <= maxLocal) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (i <= maxLocal) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (nextLocal != prev prevLocal) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (nextLocal != prev prevLocal) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (diff >= size) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (diff >= size) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (nextLocal != iLocal) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (nextLocal != iLocal) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (diff >=index;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (diff >=index;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (nextLocal != currentIndex) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (nextLocal != currentIndex) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if ( offsetAdjusted == 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if ( offsetAdjusted == 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (nextLocal !=OfYear) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (nextLocal !=OfYear) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (nextLocal != era) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (nextLocal != era) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (i >= 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (i >= 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (nextLocal != prev) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (nextLocal != prev) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (nextLocal != prev prev prevLocal) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (nextLocal != prev prev prevLocal) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (nextLocal < 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (nextLocal < 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (nextLocal != prev prev prevAdjusted) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (nextLocal != prev prev prevAdjusted) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (nextLocal != e) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (nextLocal != e) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (diff >= added;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (diff >= added;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (diff >= rhsValue) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (diff >= rhsValue) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (nextLocal != nextAdjusted && instantLocal;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (nextLocal != nextAdjusted && instantLocal;",
                "identical": false
            }
        ],
        "buggy_line": "} else if (offsetLocal > 0) {",
        "fixed_line": "} else if (offsetLocal >= 0) {"
    },
    "Closure-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type?",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type?",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type?",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type?",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type inference.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type inference.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we didn't run type?",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we didn't run type?",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never happen but...",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never happen but...",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type?",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type?",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run type?",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run type?",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we't run type?",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we't run type?",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type?",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type?",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we didn't run type;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we didn't run type;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we't run type?",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we't run type?",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we didn't run type?",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we didn't run type?",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if weNative't run type?",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if weNative't run type?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we't run type?",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we't run type?",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type = that't run type;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type = that't run type;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type; must be null if we't run type?",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type; must be null if we't run type?",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type; must be null if we didn't run type?",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type; must be null if we didn't run type?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type = that't run type;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run type = that't run type;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run type;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run type;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (resultType == null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (resultType == null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type inference.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type inference.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result = that't run type;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result = that't run type;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSerializers.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeSerializers.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we't run type;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we't run type;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if weNative't run type;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if weNative't run type;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type = that't run type;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type = that't run type;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run type = that't run type;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we didn't run type = that't run type;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type = that't run type;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type = that't run type;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type inference.",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type inference.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we didn't run type = that't run type;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we didn't run type = that't run type;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we't run type inference.",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't be null if we't run type inference.",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type back on stack and that't run type?",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run type back on stack and that't run type?",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we didn't run type;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run result and that't run type; must be null if we didn't run type;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type; must be null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type; must be null if we't run typeSer!",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we't run type inference.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we't run typeDesercing should never be null if we't run type inference.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type; must be null if we didn't run typeSer!",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (result == null) { // [JACKSON-314] skip entries with null if we didn't run result and that't run type; must be null if we didn't run typeSer!",
                "identical": false
            }
        ],
        "buggy_line": "if (result != null) {",
        "fixed_line": "if (!result.isNoType()) {"
    },
    "Closure-113": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (provided == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (provided == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (provided != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (provided != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( 5; != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( 5; != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (angle != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (angle != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (process != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (process != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (union != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (union != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (str != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (str != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (classOnly == null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (classOnly == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (Jprovided == null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Jprovided == null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (utes != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (utes != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (canonical != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (canonical != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (startsWith != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (startsWith != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (firstCode == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (firstCode == null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( \".\" != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( \".\" != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( tt != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( tt != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Converters != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (Converters != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( getParameter == null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( getParameter == null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (safe != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (safe != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( getParameter != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( getParameter != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (child != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (child != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (classOnly != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (classOnly != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (graph != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (graph != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (classCode != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (classCode != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( jsRoot != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( jsRoot != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( requiresParent == null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( requiresParent == null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (id != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (id != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (CONTEXT != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (CONTEXT != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( types != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( types != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (\u65c2 != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (\u65c2 != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( scaled != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( scaled != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (percent != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (percent != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (intern != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (intern != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (Outline != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Outline != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (indexed != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (indexed != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tz != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tz != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (DIR != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (DIR != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (instruction != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (instruction != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (pass == null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (pass == null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( sigma != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( sigma != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Row != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Row != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (col != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (col != null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (hour != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (hour != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( getF != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( getF != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (field != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (field != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (second != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (second != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( reader != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( reader != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (finally != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (finally != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( reader == null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( reader == null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (str == null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (str == null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (class != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (class != null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (provided != null) {",
        "fixed_line": "if (provided != null || requiresLevel.isOn()) {"
    },
    "Math-30": {
        "fixes": [
            {
                "k": 1,
                "patch": "final int n1 = n2 / (n1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final int n1 = n2 / (n1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final int n1 = n2 * (n1 - 1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final int n1 = n2 * (n1 - 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final int n1 = n2 / 2.0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final int n1 = n2 / 2.0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final int n1 = n2 * (n1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final int n1 = n2 * (n1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final int n1 = n2 / n2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final int n1 = n2 / n2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final int n1 = n2 / 2.0; // n-th element in the series",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final int n1 = n2 / 2.0; // n-th element in the series",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final int n1 = n2 / (n2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final int n1 = n2 / (n2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final int n1 = n1 * (n1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final int n1 = n1 * (n1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final int n2 = n1 * (n1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final int n2 = n1 * (n1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final int n1 = n2 / (n2; // the series",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final int n1 = n2 / (n2; // the series",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final int n1 = n2 / Four; // n-th element in the series",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final int n1 = n2 / Four; // n-th element in the series",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final int n1 = n2 * (n1 - n1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final int n1 = n2 * (n1 - n1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final int n1 = n2 / n2; // equator the n",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final int n1 = n2 / n2; // equator the n",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final int n1 = n2 * (n1 - 1) / n0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final int n1 = n2 * (n1 - 1) / n0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final int n1 = n2 * (n1 - 1) / 2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final int n1 = n2 * (n1 - 1) / 2;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final int n1 = n2 / (n1; // the series",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final int n1 = n2 / (n1; // the series",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final int n1 = n2 / (n2; // out twos",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final int n1 = n2 / (n2; // out twos",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final int n1 = n2 / (n1 - 1) * n0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final int n1 = n2 / (n1 - 1) * n0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final int n1 = n1 * (n2; // lower case",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final int n1 = n1 * (n2; // lower case",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final int n1 = n2 * (n1 - 1) / n2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final int n1 = n2 * (n1 - 1) / n2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final int n1 = n2 / (n2; // 1",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final int n1 = n2 / (n2; // 1",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final int n1 = n2 / (n1 - 1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final int n1 = n2 / (n1 - 1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final int n1 = n2 / (n2; // lower case",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final int n1 = n2 / (n2; // lower case",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-n",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-n",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final int n1 = n2 * (n1 - 1) * n0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final int n1 = n2 * (n1 - 1) * n0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final int n1 = n2 * (n1 - 1) / n;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final int n1 = n2 * (n1 - 1) / n;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final int n1 = n2 / (n1; // equator the n-empty",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final int n1 = n2 / (n1; // equator the n-empty",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final int n1 = n2 * (n1 - n1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final int n1 = n2 * (n1 - n1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final int n2 = n1 * (n0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final int n2 = n1 * (n0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final int n1 = n2 * (n2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final int n1 = n2 * (n2;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final int n1 = n1 * (n1 - n1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final int n1 = n1 * (n1 - n1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final int n1 = n2 / divisor; // n-th element in the series",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final int n1 = n2 / divisor; // n-th element in the series",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final int n2 = n1 * (n1 - 1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final int n2 = n1 * (n1 - 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final int n1 = n2 * (n1 - n1) / 2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final int n1 = n2 * (n1 - n1) / 2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final int n1 = n2 / n2; // 1900)",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final int n1 = n2 / n2; // 1900)",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final int n1 = n2 / (n1; //00000000000000 the series",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final int n1 = n2 / (n1; //00000000000000 the series",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final int n1 = n2 * (n1 - n1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final int n1 = n2 * (n1 - n1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final int n1 = n2 / (n2; // equator the n",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final int n1 = n2 / (n2; // equator the n",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final int n1 = n2 / getFieldValue2;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final int n1 = n2 / getFieldValue2;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-previous",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final int n1 = n2 / getFieldValue2; // equator the n-previous",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final int n1 = n1 * (n2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final int n1 = n1 * (n2;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final int n1 = n2 / (n1; // 1900)",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final int n1 = n2 / (n1; // 1900)",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final int n1 = n2 / (n2; // series",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final int n1 = n2 / (n2; // series",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final int n1 = n2 / (n1; // equator the n-th element in del",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final int n1 = n2 / (n1; // equator the n-th element in del",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final int n1 = n2 *prodn1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final int n1 = n2 *prodn1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final int n1 = n2 / (n1; // n-th element in the series",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final int n1 = n2 / (n1; // n-th element in the series",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final int n1 = n2 / getFieldValue2; // equator",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final int n1 = n2 / getFieldValue2; // equator",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final int n1 = n1 * 22; // equator",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final int n1 = n1 * 22; // equator",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final int n1 = n2 / n2; // the series",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final int n1 = n2 / n2; // the series",
                "identical": false
            }
        ],
        "buggy_line": "final int n1n2prod = n1 * n2;",
        "fixed_line": "final double n1n2prod = n1 * n2;"
    },
    "Lang-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return cAvailableLocaleSet.contains(locale;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return cAvailableLocaleSet.contains(locale;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return cAvailableLocaleSet.contains(locale)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return cAvailableLocaleSet.contains(locale)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return cAvailableLocaleSet.contains(locale) || cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return cAvailableLocaleSet.contains(locale) );",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return cAvailableLocaleSet.contains(locale) );",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return cAvailableLocaleSet.contains(locale) > 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return cAvailableLocaleSet.contains(locale) > 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return cAvailableLocaleSet.contains(locale) return cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return cAvailableLocaleSet.contains(locale) return cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return cAvailableLocaleSet.contains(locale, locale);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return cAvailableLocaleSet.contains(locale, locale);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return cAvailableLocaleSet.contains(locale) > cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return cAvailableLocaleSet.contains(locale) > cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return cAvailableLocaleSet.contains(locale) || cAvailableLocale;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return cAvailableLocaleSet.contains(locale) || cAvailableLocale;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return cAvailableLocaleSet.contains(locale) >= 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return cAvailableLocaleSet.contains(locale) >= 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return cAvailableLocaleSet.contains(locale) < locale;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return cAvailableLocaleSet.contains(locale) < locale;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return cAvailableLocaleSet.contains(locale) locale;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return cAvailableLocaleSet.contains(locale) locale;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return cAvailableLocaleSet.contains(locale) != 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return cAvailableLocaleSet.contains(locale) != 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return cAvailableLocaleSet.contains(locale)CHARS;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return cAvailableLocaleSet.contains(locale)CHARS;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return cAvailableLocaleSet.contains(locale) != locale;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return cAvailableLocaleSet.contains(locale) != locale;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return cAvailableLocaleSet.contains(locale)[0];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return cAvailableLocaleSet.contains(locale)[0];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return cAvailableLocaleSet.contains(locale).locale;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return cAvailableLocaleSet.contains(locale).locale;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return cAvailableLocaleSet.contains(locale) };",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return cAvailableLocaleSet.contains(locale) };",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return cAvailableLocaleSet.contains(localelocale;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return cAvailableLocaleSet.contains(localelocale;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return cAvailableLocaleSet.contains(locale) return cAvailableLocale;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return cAvailableLocaleSet.contains(locale) return cAvailableLocale;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return cAvailableLocaleSet.contains(locale) != cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return cAvailableLocaleSet.contains(locale) != cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return cAvailableLocaleSet.contains(locale) directLocaleSet;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return cAvailableLocaleSet.contains(locale) directLocaleSet;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return cAvailableLocaleSet.contains(locale)}",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return cAvailableLocaleSet.contains(locale)}",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return cAvailableLocaleSet.contains(locale.LocaleSet);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return cAvailableLocaleSet.contains(locale.LocaleSet);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return cAvailableLocaleSet.contains(locale) != cAvailableLocale;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return cAvailableLocaleSet.contains(locale) != cAvailableLocale;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return cAvailableLocaleSet.contains(locale) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return cAvailableLocaleSet.contains(locale) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_VALUE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return cAvailableLocaleSet.contains(locale)Method;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return cAvailableLocaleSet.contains(locale)Method;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return cAvailableLocaleSet.contains(locale)];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return cAvailableLocaleSet.contains(locale)];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return cAvailableLocaleSet.contains(locale)AvailableLocale;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return cAvailableLocaleSet.contains(locale)AvailableLocale;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return cAvailableLocaleSet.contains(locale) > cAvailableLocale;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return cAvailableLocaleSet.contains(locale) > cAvailableLocale;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return cAvailableLocaleSet.contains(locale != locale;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return cAvailableLocaleSet.contains(locale != locale;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return cAvailableLocaleSet ? locale.contains(locale) : cAvailableLocale;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return cAvailableLocaleSet ? locale.contains(locale) : cAvailableLocale;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return cAvailableLocaleSet.contains(locale)AvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return cAvailableLocaleSet.contains(locale)AvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return cAvailableLocaleSet.contains(locale );",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return cAvailableLocaleSet.contains(locale );",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return cAvailableLocaleSet.contains(locale)e;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return cAvailableLocaleSet.contains(locale)e;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return cAvailableLocaleSet.contains(locale) available;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return cAvailableLocaleSet.contains(locale) available;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return cAvailableLocaleSet.contains(locale)locale;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return cAvailableLocaleSet.contains(locale)locale;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return cAvailableLocaleSet ? locale.contains(locale) : cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return cAvailableLocaleSet ? locale.contains(locale) : cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return cAvailableLocaleSet.contains(locale) directLocale;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return cAvailableLocaleSet.contains(locale) directLocale;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_ else if cAvailableLocaleSet);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_ else if cAvailableLocaleSet);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return cAvailableLocaleSet.containsKey(locale);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return cAvailableLocaleSet.containsKey(locale);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_ else if cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_ else if cAvailableLocaleSet;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_ else if cAvailableLocaleSet) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return cAvailableLocaleSet.contains(localeURAL_ else if cAvailableLocaleSet) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return cAvailableLocaleSet.contains(locale)List;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return cAvailableLocaleSet.contains(locale)List;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return cAvailableLocaleSet.contains(locale)-1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return cAvailableLocaleSet.contains(locale)-1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return cAvailableLocaleSet.contains(locale) return false;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return cAvailableLocaleSet.contains(locale) return false;",
                "identical": false
            }
        ],
        "buggy_line": "return cAvailableLocaleSet.contains(locale);",
        "fixed_line": "return availableLocaleList().contains(locale);"
    },
    "Closure-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "jsDocParameter.getJSType(), false;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "jsDocParameter.getJSType(), false;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "jsDocParameter.getJSType(), true;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "jsDocParameter.getJSType(), true;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "jsDocParameter.getJSType mutParameterType(), false;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "jsDocParameter.getJSType mutParameterType(), false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "jsDocParameter.getJSType(), false);",
                "identical": true
            },
            {
                "k": 8,
                "patch": "jsDocParameter.getJSType(), false);",
                "identical": true
            },
            {
                "k": 9,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameter;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "jsDocParameter.getJSType(), falseParameters;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "jsDocParameter.getJSType(), falseParameters;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "jsDocParameter.getJSDocParameterType(), false;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "jsDocParameter.getJSDocParameterType(), false;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "jsDocParameter.getJSType(), jsDocParameter;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "jsDocParameter.getJSType(), jsDocParameter;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "jsDocParameter.getJSTypeCONSTANTParameterType(), false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "jsDocParameter.getJSTypeCONSTANTParameterType(), false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "jsDocParameter.getJSType != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "jsDocParameter.getJSType != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "jsDocParameter.getJSTypeHandlerNode != jsDocParameter;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "jsDocParameter.getJSTypeHandlerNode != jsDocParameter;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "jsDocParameter.getJSType(0)Parameter_PROPERTY_FUNCTION_TYPE != jsDocParameter;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "jsDocParameter.getJSType(0)Parameter_PROPERTY_FUNCTION_TYPE != jsDocParameter;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "jsDocParameter.getJSType(), true);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "jsDocParameter.getJSType(), true);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "jsDocParameter.getJSType != jsDocParameter;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "jsDocParameter.getJSType != jsDocParameter;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "jsDocParameter.getJSType(), falseNode;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "jsDocParameter.getJSType(), falseNode;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "jsDocParameter.getJSTypelongDocParameterType(), false;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "jsDocParameter.getJSTypelongDocParameterType(), false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "jsDocParameter.getJSType\": != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "jsDocParameter.getJSType\": != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "jsDocParameter.getJSType\": != jsDocParameter;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "jsDocParameter.getJSType\": != jsDocParameter;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameterType) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "jsDocParameter.getJSType(0) != jsDocParameterType) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "jsDocParameter.getJSTypeCONST != jsDocParameter;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "jsDocParameter.getJSTypeCONST != jsDocParameter;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "jsDocParameter.getJSTypeCONSTANTParameterType(), true;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "jsDocParameter.getJSTypeCONSTANTParameterType(), true;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "jsDocParameter.getJSType(2);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "jsDocParameter.getJSType(2);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "jsDocParameter.getJSType mutParameter(astParameter) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "jsDocParameter.getJSType(0)Parameter_PROPERTY_FUNCTION_TYPE = false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "jsDocParameter.getJSType(0)Parameter_PROPERTY_FUNCTION_TYPE = false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "jsDocParameter.getJSType mutParameter(jsDocParameter) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "jsDocParameter.getJSType mutParameter(jsDocParameter) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameter(jsDocParameter);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameter(jsDocParameter);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "jsDocParameter.getJSType mutParameterType(), true;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "jsDocParameter.getJSType mutParameterType(), true;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameter(jsDocParameter;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameter(jsDocParameter;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "jsDocParameter.getJSType(), falseParameter;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "jsDocParameter.getJSType(), falseParameter;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "jsDocParameter.getJSTypeidxParameterType(), false;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "jsDocParameter.getJSTypeidxParameterType(), false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "jsDocParameter.getJSType mutParameter(astParameterName);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "jsDocParameter.getJSType mutParameter(astParameterName);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "jsDocParameter.getJSTypeParameters(), false;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "jsDocParameter.getJSTypeParameters(), false;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameterFnNode != jsDocParameter;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameterFnNode != jsDocParameter;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "jsDocParameter.getJSType(0)ParameterType(), false;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "jsDocParameter.getJSType(0)ParameterType(), false;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameterType(), false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameterType(), false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameter(jsDocParameter) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameter(jsDocParameter) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "jsDocParameter.getJSType\":Parameter(astParameter) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "jsDocParameter.getJSType\":Parameter(astParameter) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "jsDocParameter.getJSType insertParameterType(), false;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "jsDocParameter.getJSType insertParameterType(), false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "jsDocParameter.getJSType mutParameterType(), false);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "jsDocParameter.getJSType mutParameterType(), false);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameter(astParameter);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "jsDocParameter.getJSTypeCONSTANT_JSDocParameter(astParameter);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "jsDocParameter.getJSTypeinaryType(), false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "jsDocParameter.getJSTypeinaryType(), false;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "jsDocParameter.getJSTypeHandlerNode != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "jsDocParameter.getJSTypeHandlerNode != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "jsDocParameter.getJSType != jsDocParameterType) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "jsDocParameter.getJSType != jsDocParameterType) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "jsDocParameter.getJSType MinParameterType(), false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "jsDocParameter.getJSType MinParameterType(), false;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "jsDocParameter.getJSType() != jsDocParameter;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "jsDocParameter.getJSType() != jsDocParameter;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "jsDocParameter.getJSType(0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "jsDocParameter.getJSType(0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "jsDocParameter.getJSTypeArguments(), false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "jsDocParameter.getJSTypeArguments(), false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "jsDocParameter.getJSType(0)Parameter_PROPERTY_FUNCTION_TYPE != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "jsDocParameter.getJSType(0)Parameter_PROPERTY_FUNCTION_TYPE != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "jsDocParameter.getJSTypeCONSTANTParameter(jsDocParameter) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "jsDocParameter.getJSTypeCONSTANTParameter(jsDocParameter) {",
                "identical": false
            }
        ],
        "buggy_line": "jsDocParameter.getJSType(), true);",
        "fixed_line": "jsDocParameter.getJSType(), false);"
    },
    "Closure-130": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (name.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (name.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (name.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (name.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (name.globalSets == 0 && name.localSets > 0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (name.globalSets == 0 && name.localSets > 0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (name.globalSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (name.globalSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (ref.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (ref.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (name.globalSets == 0 && localSets == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (name.globalSets == 0 && localSets == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (ref.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (ref.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (name.globalSets == 0 && localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (name.globalSets == 0 && localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (ref.globalSets == 0 && localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (ref.globalSets == 0 && localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (name.globalSets == 0 && localSets == 0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (name.globalSets == 0 && localSets == 0);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (name.globalSets == 0 && name.newSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (name.globalSets == 0 && name.newSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (name.globalSets == 0 && name.localSets == 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (name.globalSets == 0 && name.localSets == 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (declaration != 0 && name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (declaration != 0 && name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (name.globalSets == 0 && name.declarationSets > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (name.globalSets == 0 && name.declarationSets > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (name.globalSets == 0 && name.newSets == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (name.globalSets == 0 && name.newSets == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (name.globalSets == 0 && name.localSets == 1 && localSets > 0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (name.globalSets == 0 && name.localSets == 1 && localSets > 0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (name.globalSets == 0 && name.declarationSets == 0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (name.globalSets == 0 && name.declarationSets == 0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (class != 0 && name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (class != 0 && name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (name.globalSets == 0 && name.declarationSets == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (name.globalSets == 0 && name.declarationSets == 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (name.globalSets == 1 && localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (name.globalSets == 1 && localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (global.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (global.globalSets == 0 && name.localSets == 0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (name.globalSets == 0 && localSets == 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (name.globalSets == 0 && localSets == 1 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (name.globalSets == 1 && localSets != 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (name.globalSets == 1 && localSets != 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (name.globalSets == 0 && name.localSets == 0, 0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (name.globalSets == 0 && name.localSets == 0, 0);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (global.globalSets == 0 && localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (global.globalSets == 0 && localSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (name.globalSets == 0 && name.localSets == name;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (name.globalSets == 0 && name.localSets == name;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (global.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (global.globalSets == 0 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (class == 0 && name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (class == 0 && name.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (name.globalSets == 0 && name.getSets == 0);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (name.globalSets == 0 && name.getSets == 0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (ref.globalSets == 0 && i.localSets == 0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (ref.globalSets == 0 && i.localSets == 0);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (name.globalSets == 0 && name.localSets == null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (name.globalSets == 0 && name.localSets == null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (name.globalSets == 0 && name.localSets == h) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (name.globalSets == 0 && name.localSets == h) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (name.globalSets == 0 && localSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (name.globalSets == 0 && localSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.localSets > 0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.localSets > 0);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (ref.globalSets == 0 && localSets == 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (ref.globalSets == 0 && localSets == 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (ref.globalSets == 0 && localSets == 0);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (ref.globalSets == 0 && localSets == 0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && localSets > 0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && localSets > 0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.localSets || localSets != 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.localSets || localSets != 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (name.globalSets == 0 && name.newSets > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (name.globalSets == 0 && name.newSets > 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (name.globalSets == 0 && name.localSets == ianSets - 1) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (name.globalSets == 0 && name.localSets == ianSets - 1) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (name.globalSets == 0 && name.newSets == 0);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (name.globalSets == 0 && name.newSets == 0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (name.globalSets == 0 && name.localSets == canSets || localSets != 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (name.globalSets == 0 && name.localSets == canSets || localSets != 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.ETCount - 1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (name.globalSets == 0 && name.localSets == ref.ETCount - 1) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (name.globalSets == 0 && name.getSets > 0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (name.globalSets == 0 && name.getSets > 0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (name.globalSets == 0 && name.localSets == type) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (name.globalSets == 0 && name.localSets == type) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (name.globalSets == 0 && name.localSets == wanted) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (name.globalSets == 0 && name.localSets == wanted) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (global.globalSets == 0 && localSets > 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (global.globalSets == 0 && localSets > 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (name.globalSets == 1 && name.localSets == 0 &&",
        "fixed_line": "if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&"
    },
    "Closure-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (type != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (type != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (fnType == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (fnType == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (type == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (type == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (fnType != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (fnType != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (restrictByNotNull != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (restrictByNotNull != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (restrictBy != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (restrictBy != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type inference.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = n;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = n;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of type;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnType",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnType",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (objType != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (objType != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnTypeFlags isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnTypeFlags isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type provided;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type provided;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnName;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnName;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't really modify it't run type;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't really modify it't run type;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type inference;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type inference;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns slot, fnType = fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns slot, fnType = fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null we didn't run type There isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null we didn't run type There isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType = fnNode;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType = fnNode;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnName - fnType",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnName - fnType",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnType, fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnType, fnNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnType;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnType;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type we didn't run type;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type we didn't run type;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnSlot;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnSlot;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnTypeFlags isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnTypeFlags isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type?",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type?",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType = fnType;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType = fnType;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNameNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNameNode isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns, fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with = fnType-407] -- allow disabling of t isExterns, fnType we didn't run type;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnName - n;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnName - n;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns slot, fnType = fnType",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns slot, fnType = fnType",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnNode;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnNode;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type...",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we didn't run type...",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null values?",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null values?",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of t isExterns non-public, fnType = fnType",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we't run type;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns non-public, fnType = fnNode isExterns when we't run type;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnType = fnType isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (fnType != null) { // [JACKSON-407] -- allow disabling of type There isExterns non-public, fnType = fnType isExterns when we didn't run type;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns FunctionType",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run type There isExterns FunctionType",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnType;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't run typeSerifNode, fnType = fnType;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType = fnName;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (fnType == null) { // [JACKSON-314] skip entries with null if we didn't really modify it't run type There isExterns non-public, fnType = fnName;",
                "identical": false
            }
        ],
        "buggy_line": "if (fnType != null) {",
        "fixed_line": "if (fnType != null && fnType.hasInstanceType()) {"
    },
    "Mockito-29": {
        "fixes": [
            {
                "k": 1,
                "patch": "description.appendText = description;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "description.appendText = description;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "description.appendText;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "description.appendText;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "description.appendText = description.toString();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "description.appendText = description.toString();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "description.appendText = description.toString());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "description.appendText = description.toString());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "description.appendText = descriptionInfo.toString();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "description.appendText = descriptionInfo.toString();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "description.appendText = descriptionText;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "description.appendText = descriptionText;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "description.appendText = descriptionTo.toString();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "description.appendText = descriptionTo.toString();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "description.appendText -= description;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "description.appendText -= description;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "description.appendText = descriptionTo;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "description.appendText = descriptionTo;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "description.appendText = description);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "description.appendText = description);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "description.appendText(wanted.toString());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "description.appendText(wanted.toString());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "description.appendText = descriptionToQu;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "description.appendText = descriptionToQu;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "description.appendTextElement.toString());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "description.appendTextElement.toString());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "description.appendText(wanted.toString);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "description.appendText(wanted.toString);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "description.appendTextElement = description.toString();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "description.appendTextElement = description.toString();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "description.appendText = descriptionToEvaluate;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "description.appendText = descriptionToEvaluate;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "description.appendText = descriptionInfo.toString());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "description.appendText = descriptionInfo.toString());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "description.appendText != description.toString());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "description.appendText != description.toString());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "description.appendText).appendText;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "description.appendText).appendText;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "description.appendTextItems.toString());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "description.appendTextItems.toString());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "description.appendTextItems.toString();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "description.appendTextItems.toString();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "description.appendText(false);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "description.appendText(false);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "description.appendTextExterns.toString();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "description.appendTextExterns.toString();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "description.appendText = descriptionInfo.toString;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "description.appendText = descriptionInfo.toString;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "description.appendText = descriptionToText;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "description.appendText = descriptionToText;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "description.appendText -= description.toString();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "description.appendText -= description.toString();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "description.appendTextSize = description.toString();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "description.appendTextSize = description.toString();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "description.appendText = description.toString;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "description.appendText = description.toString;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "description.appendTextLiteral(wanted.toString);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "description.appendTextLiteral(wanted.toString);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "description.appendText(wanted.toStringID;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "description.appendText(wanted.toStringID;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "description.appendTextExterns.toString());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "description.appendTextExterns.toString());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "description.appendTextTo.toString();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "description.appendTextTo.toString();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "description.appendText = description_VALUE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "description.appendText = description_VALUE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "description.appendText = descriptionIf.toString();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "description.appendText = descriptionIf.toString();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "description.appendTextnewText = description;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "description.appendTextnewText = description;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "description.appendTextElement(description);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "description.appendTextElement(description);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "description.appendTextElement = description.toString());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "description.appendTextElement = description.toString());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "description.appendText.toString());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "description.appendText.toString());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "description.appendTextsaveText = description;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "description.appendTextsaveText = description;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "description.appendText = descriptionParser.toString();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "description.appendText = descriptionParser.toString();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "description.appendText = descriptionParent;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "description.appendText = descriptionParent;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "description.appendText = descriptionIf;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "description.appendText = descriptionIf;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "description.appendText(wanted.toStringtoString);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "description.appendText(wanted.toStringtoString);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "description.appendText: description.toString();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "description.appendText: description.toString();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "description.appendText).toString();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "description.appendText).toString();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "description.appendText(wanted.toStringID_').);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "description.appendText(wanted.toStringID_').);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "description.appendText = description, description.toString();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "description.appendText = description, description.toString();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "description.appendTextIsText = description;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "description.appendTextIsText = description;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "description.appendText(wanted.toStringtoString());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "description.appendText(wanted.toStringtoString());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "description.appendText = descriptionIfNull;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "description.appendText = descriptionIfNull;",
                "identical": false
            }
        ],
        "buggy_line": "description.appendText(wanted.toString());",
        "fixed_line": "description.appendText(wanted == null ? \"null\" : wanted.toString());"
    },
    "Jsoup-45": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (name instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (name instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (name instanceof \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (name instanceof \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (name instanceoftd\".equals(name)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (name instanceoftd\".equals(name)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (name.equals(\"td\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (name.equals(\"td\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (name.equals(\"parent\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (name.equals(\"parent\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (name.equals(\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (name.equals(\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (name.equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (name.equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (name.equals(name) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (name.equals(name) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (name.equals(name) && \" \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (name.equals(name) && \" \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (name !=(\"td\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (name !=(\"td\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (name !=(\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (name !=(\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !name;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !name;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (name.equals(node.name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (name.equals(node.name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (name.equals(\"parent\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (name.equals(\"parent\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (name !=(\"td\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (name !=(\"td\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !last\".equals(name;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !last\".equals(name;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (name.equals(\"td\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (name.equals(\"td\".equals(name) && !last\".equals(name);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (name !=(\"td\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (name !=(\"td\".equals(name) && !last\".equals(name;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (name instanceof \"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (name instanceof \"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (name.equals(node instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (name.equals(node instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"in\".equals(name);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"in\".equals(name);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (name.equals(\"parent\".equals(name) && \"parent;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (name.equals(\"parent\".equals(name) && \"parent;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (name.equals(name) && \" \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (name.equals(name) && \" \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"undefined\".equals(name);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"undefined\".equals(name);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (name.equals(node.name) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (name.equals(node.name) && \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (\"td\".equals(name) || \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (\"td\".equals(name) || \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (name.equals(\"td\".equals(name) && \" \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (name.equals(\"td\".equals(name) && \" \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (name.equals(node.name) && \" \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (name.equals(node.name) && \" \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (name.equals(\"td\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (name.equals(\"td\".equals(name) || !last\".equals(name);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (\"td\".equals(name) || \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (\"td\".equals(name) || \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (\"td\".equals(name) || !last\".equals(name;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (\"td\".equals(name) || \" \"td\".equals(name;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (\"td\".equals(name) || \" \"td\".equals(name;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"undefined\".equals(name);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"undefined\".equals(name);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (name.equals(nodeType instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (name.equals(nodeType instanceoftd\".equals(name) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent\".equals(name;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent\".equals(name;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (\"td\".equals(name) || \"td\".equals(name;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (\"td\".equals(name) || \"td\".equals(name;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (\"td\".equals(name) || \"parent\".equals(name;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (\"td\".equals(name) || \"parent\".equals(name;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"in\".equals(name;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"in\".equals(name;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (name.equals(node.name) && \" \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (name.equals(node.name) && \" \"parent\".equals(name);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !last\".equals(name);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (name.equals(\"td\".equals(name) || \"parent !last\".equals(name);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (name.equals(methodName) && \" \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (name.equals(methodName) && \" \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (\"td\".equals(name) || \" \"parent\".equals(name;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (\"td\".equals(name) || \" \"parent\".equals(name;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (\"td\".equals(name) || \" \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (\"td\".equals(name) || \" \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent !name;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (name.equals(\"td\".equals(name) && \"parent !name;",
                "identical": false
            }
        ],
        "buggy_line": "} else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {",
        "fixed_line": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {"
    },
    "JacksonDatabind-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "paramName = param.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paramName = param.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paramName = param.findImplicitName(0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paramName = param.findImplicitName(0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paramName = param.findImplicitProperty(paramName);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paramName = param.findImplicitProperty(paramName);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paramName = param.findImplicitParam(paramName);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paramName = param.findImplicitParam(paramName);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paramName = ctor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paramName = ctor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paramName = param.findImplicitParamBy(paramName);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paramName = param.findImplicitParamBy(paramName);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paramName = _properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paramName = _properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paramName = param.findImplicitParamKeys(paramName);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paramName = param.findImplicitParamKeys(paramName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paramName = param.findImplicitParamTypes(0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paramName = param.findImplicitParamTypes(0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paramName = properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paramName = properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paramName = param.findImplicitParamTypes(paramName);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paramName = param.findImplicitParamTypes(paramName);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paramName = param.findImplicitProperty(paramName, param paramParam);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paramName = param.findImplicitProperty(paramName, param paramParam);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paramName = param.findImplicitParamCreatorProperty(paramName);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paramName = param.findImplicitParamCreatorProperty(paramName);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paramName = param.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paramName = param.findImplicitParamName(paramName);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paramName = param.findImplicitINDENT_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paramName = param.findImplicitINDENT_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paramName = param.findImplicitProperty(paramName, param paramNode);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paramName = param.findImplicitProperty(paramName, param paramNode);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paramName = param.findImplicitProperty(paramName, beanDesc);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paramName = param.findImplicitProperty(paramName, beanDesc);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paramName = candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paramName = candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paramName = param.findImplicitParam(0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paramName = param.findImplicitParam(0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paramName = param.findImplicitProperty(paramName, param param param);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paramName = param.findImplicitProperty(paramName, param param param);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paramName = param.findImplicitProperty(paramName, param param);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paramName = param.findImplicitProperty(paramName, param param);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paramName = param.findImplicitParamINDENT_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paramName = param.findImplicitParamINDENT_EXPR_TYPE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paramName = param.findImplicitProperty(paramName, param param paramParam);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paramName = param.findImplicitProperty(paramName, param param paramParam);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paramName = param.findImplicitProperty(paramName, param param paramNode);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paramName = param.findImplicitProperty(paramName, param param paramNode);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paramName = param.findImplicitParamAtName(0);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paramName = param.findImplicitParamAtName(0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paramName = param.findImplicitParamCreatorProperty(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paramName = param.findImplicitParamCreatorProperty(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParamTypes);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParamTypes);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paramName = provider.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paramName = provider.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paramName = param.findImplicitParam++] = param;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paramName = param.findImplicitParam++] = param;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paramName = param.findImplicitINParam(0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paramName = param.findImplicitINParam(0);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paramName = param.findImplicitGenerator(paramName);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paramName = param.findImplicitGenerator(paramName);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParamName);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParamName);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paramName = param.findImplicitINDENT_UnknownProperty(paramName);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paramName = param.findImplicitINDENT_UnknownProperty(paramName);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paramName = param.findImplicitParam(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paramName = param.findImplicitParam(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paramName = param.findImplicitProperty(paramName, param paramParamTypes);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paramName = param.findImplicitProperty(paramName, param paramParamTypes);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paramName = param.findImplicitParamINDENT_UnknownProperty(paramName);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paramName = param.findImplicitParamINDENT_UnknownProperty(paramName);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paramName = instant.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paramName = instant.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paramName = param.findImplicitProperty(paramName, param param param;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paramName = param.findImplicitProperty(paramName, param param param;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paramName = param.findImplicitINDENT_PROPERTY;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paramName = param.findImplicitINDENT_PROPERTY;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paramName = param.findImplicitProperty(paramName, param param param param);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paramName = param.findImplicitProperty(paramName, param param param param);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paramName = param.findImplicitParamINDENT_ZERO_PROPERTY;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paramName = param.findImplicitParamINDENT_ZERO_PROPERTY;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paramName = candidateParam.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paramName = candidateParam.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paramName = param.findImplicitIN(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paramName = param.findImplicitIN(paramName, paramParam);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paramName = param.findImplicitParamINDENT_PROPERTY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paramName = param.findImplicitParamINDENT_PROPERTY;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paramName = param.findImplicitParam++][1];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paramName = param.findImplicitParam++][1];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParam;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParam;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paramName = param.findImplicitClearParam(0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paramName = param.findImplicitClearParam(0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paramName = param.findImplicitIdName(0);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paramName = param.findImplicitIdName(0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParam++);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paramName = param.findImplicitProperty(paramName, paramParam++);",
                "identical": false
            }
        ],
        "buggy_line": "paramName = candidate.findImplicitParamName(0);",
        "fixed_line": "paramName = candidate.paramName(0);"
    },
    "Math-75": {
        "fixes": [
            {
                "k": 1,
                "patch": "return getCumPct<?> vts;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return getCumPct<?> vts;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return getCumPct<?> v;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return getCumPct<?> v;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return getCumPct;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return getCumPct;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return getCumPct && vts;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return getCumPct && vts;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return getCumPct<?> v=2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return getCumPct<?> v=2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return getCumPct && v.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return getCumPct && v.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return getCumPct && v instanceofdeprecated;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return getCumPct && v instanceofdeprecated;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return getCumPct<?> vlipse2Pct",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return getCumPct<?> vlipse2Pct",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return getCumPct<?> v return 2;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return getCumPct<?> v return 2;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return getCumPct<?> v = v;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return getCumPct<?> v = v;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return getCumPct instanceof getCumPct<?>;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return getCumPct instanceof getCumPct<?>;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return getCumPct<?> vct",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return getCumPct<?> vct",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return getCumPct && v;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return getCumPct && v;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return getCumPct instanceof getCumPct) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return getCumPct instanceof getCumPct) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return getCumPct && vCOMMAND;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return getCumPct && vCOMMAND;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return getCumPct instanceof getCumPct;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return getCumPct instanceof getCumPct;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return getCumPct<?> vJct;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return getCumPct<?> vJct;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return getCumPct<?> vTYPE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return getCumPct<?> vTYPE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return getCumPct && v return 2;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return getCumPct && v return 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return getCumPct && v return 2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return getCumPct && v return 2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return getCumPct instanceof getCumPct",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return getCumPct instanceof getCumPct",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return getCumPct<?> vlipse2;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return getCumPct<?> vlipse2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return getCumPct<?> vdataset;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return getCumPct<?> vdataset;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return getCumPct<?> vCOMMAND;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return getCumPct<?> vCOMMAND;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return getCumPct instanceof getCComparable<?>;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return getCumPct instanceof getCComparable<?>;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return getCumPct<?> vURI;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return getCumPct<?> vURI;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return getCumPct && vlipse2P;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return getCumPct && vlipse2P;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return getCumPct<?> vappendPct",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return getCumPct<?> vappendPct",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return getCumPct<?> vSerialization instanceof getCumPct",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return getCumPct<?> vSerialization instanceof getCumPct",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return getCumPct && vts instanceofdeprecated;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return getCumPct && vts instanceofdeprecated;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return getCumPct<?> vd;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return getCumPct<?> vd;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return getCumPct<?> vct instanceof getCumPct",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return getCumPct<?> vct instanceof getCumPct",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return getCumPctTransform<?> vts;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return getCumPctTransform<?> vts;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return getCumPct<?> v throwsPct",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return getCumPct<?> v throwsPct",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return getCumPct<?> v55Pct",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return getCumPct<?> v55Pct",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return getCumPct",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return getCumPct",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return getCumPct && v return 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return getCumPct && v return 2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return getCumPct<?> vPtr;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return getCumPct<?> vPtr;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return getCumPct && vors;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return getCumPct && vors;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return getCumPct<?> vverify;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return getCumPct<?> vverify;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return getCumPct && v return v;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return getCumPct && v return v;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return getCumPctID<?> vts;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return getCumPctID<?> vts;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return getCumPct && v return v;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return getCumPct && v return v;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return getCumPct instanceof getCumPct) v;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return getCumPct instanceof getCumPct) v;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return getCumPct mut<?> vts;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return getCumPct mut<?> vts;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return getCumPct<?> vct;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return getCumPct<?> vct;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return getCumPct instanceof getCumPct mut<?>;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return getCumPct instanceof getCumPct mut<?>;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return getCumPct && v instanceof help<?>) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return getCumPct && v instanceof help<?>) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return getCumPct<?> v1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return getCumPct<?> v1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return getCumPct<?> vText;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return getCumPct<?> vText;",
                "identical": false
            }
        ],
        "buggy_line": "return getCumPct((Comparable<?>) v);",
        "fixed_line": "return getPct((Comparable<?>) v);"
    },
    "Jsoup-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static String nullString = name;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static String nullString = name;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static String nullString = String.valueOf(type);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static String nullString = String.valueOf(type);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static String nullString = t;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static String nullString = t;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static String nullString = String.valueOf(typeId);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static String nullString = String.valueOf(typeId);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static String nullString = String.valueOf(tId);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static String nullString = String.valueOf(tId);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static String nullString = String.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static String nullString = String.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static String nullString = String.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static String nullString = String.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static String nullString = String.valueOf(tTYPEFIELD_0000;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static String nullString = String.valueOf(tTYPEFIELD_0000;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static String nullString = name.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static String nullString = name.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static String nullString = String.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static String nullString = String.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static String nullString = String.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static String nullString = String.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static String nullString = String.valueOf(tclass);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static String nullString = String.valueOf(tclass);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static String nullString = String.valueOf(towner);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static String nullString = String.valueOf(towner);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static String nullString = val;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static String nullString = val;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static String nullString = Name.valueOf(tId);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static String nullString = Name.valueOf(tId);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static String nullString = String.valueOf(t == JsonToken.VALUE_0000;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static String nullString = String.valueOf(t == JsonToken.VALUE_0000;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static String nullString = impl.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static String nullString = impl.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static String nullString = String.valueOf(tLocalsx0000;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static String nullString = String.valueOf(tLocalsx0000;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static String nullString = String.valueOf(tTYPE_0000;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static String nullString = String.valueOf(tTYPE_0000;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static String nullString = Name.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static String nullString = Name.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static String nullString = String.valueOf(typex0000;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static String nullString = String.valueOf(typex0000;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static String nullString = name.valueOf(tId);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static String nullString = name.valueOf(tId);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static String nullString = c.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static String nullString = c.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static String nullString = String.valueOf(tOperationx0000;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static String nullString = String.valueOf(tOperationx0000;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static String nullString = String.valueOf(t.class;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static String nullString = String.valueOf(t.class;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static String nullString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static String nullString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static String nullString = String.valueOf;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static String nullString = String.valueOf;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static String nullString = DEFAULT_0000_VALUE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static String nullString = DEFAULT_0000_VALUE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static String nullString = instance.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static String nullString = instance.valueOf(tx0000;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static String nullString = Node.valueOf;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static String nullString = Node.valueOf;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static String nullString = impl.valueOf(tId);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static String nullString = impl.valueOf(tId);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static String nullString = String.valueOf(10x0000;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static String nullString = String.valueOf(10x0000;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static String nullString = String.valueOf(t0000;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static String nullString = String.valueOf(t0000;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static String nullString = name.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static String nullString = name.valueOf(t[]0000;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static String nullString = c;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static String nullString = c;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static String nullString = Name.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static String nullString = Name.valueOf(tcv);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static String nullString = property;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static String nullString = property;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static String nullString = name.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static String nullString = name.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static String nullString = String.valueOf(t == JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static String nullString = String.valueOf(t == JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static String nullString = instance.valueOf(tId);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static String nullString = instance.valueOf(tId);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static String nullString = COUNT_0000;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static String nullString = COUNT_0000;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static String nullString = Name.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static String nullString = Name.valueOf(tclass;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static String nullString = name.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static String nullString = name.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static String nullString = String.valueOf(t 16;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static String nullString = String.valueOf(t 16;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static String nullString = String.valueOf(t str;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static String nullString = String.valueOf(t str;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static String nullString = String.valueOf(tcv;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static String nullString = String.valueOf(tcv;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static String nullString = String.valueOf(t actionsx0000;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static String nullString = String.valueOf(t actionsx0000;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static String nullString = Name.valueOf;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static String nullString = Name.valueOf;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static String nullString = instance.valueOf;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static String nullString = instance.valueOf;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static String nullString = property.valueOf(tId);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static String nullString = property.valueOf(tId);",
                "identical": false
            }
        ],
        "buggy_line": "private static String nullString = String.valueOf(0x0000);",
        "fixed_line": "private static String nullString = String.valueOf('\\u0000');"
    },
    "Jsoup-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i + 1 < length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i + 1 < length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (length < limit) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (length < limit) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (i + lastChar < length) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i + lastChar < length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i < length) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i < length) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (length == limit) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (length == limit) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i + length < lastChar) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i + length < lastChar) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i + startChar < length) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i + startChar < length) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (length < lastChar) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (length < lastChar) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i + length > lastChar) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i + length > lastChar) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i + offset < length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i + offset < length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i + charLength > lastChar) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i + charLength > lastChar) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i + len > lastChar) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i + len > lastChar) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (pos + length > lastChar) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (pos + length > lastChar) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (pos + lastChar < length) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (pos + lastChar < length) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i + char[offset + lastChar] = 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i + char[offset + lastChar] = 0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i + startChar < length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i + startChar < length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i + offset > lastChar) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i + offset > lastChar) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (i = 0; i < length; i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (i = 0; i < length; i++) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i + lastChar < length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i + lastChar < length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i + charLength < length) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i + charLength < length) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (length < length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (length < length) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (length + lastChar < length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (length + lastChar < length) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i + charIndex < length) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i + charIndex < length) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i + length < length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i + length < length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i + offset > length) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i + offset > length) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i + charCount < length) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i + charCount < length) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (length == startChar) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (length == startChar) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i + char[offset] = 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i + char[offset] = 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i + lastChar <= lastChar) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i + lastChar <= lastChar) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i + char[offset++] = 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i + char[offset++] = 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i + charLength > length) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i + charLength > length) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i + MODEChar < length) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i + MODEChar < length) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (length - startChar >= lastChar) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (length - startChar >= lastChar) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i + startChar < lastChar) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i + startChar < lastChar) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (length == lastChar) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (length == lastChar) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i + 1 < length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i + 1 < length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (length > lastChar) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (length > lastChar) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i + charLength > start.length) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i + charLength > start.length) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (pos + lastChar == lastChar) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (pos + lastChar == lastChar) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i + position < length) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i + position < length) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i + lastChar == length) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i + lastChar == length) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (length < start.length) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (length < start.length) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i + char.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (i + char.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (length == startPropertyIndex) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (length == startPropertyIndex) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (offset < length) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (offset < length) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (length < len) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (length < len) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (pos + lastChar == length) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (pos + lastChar == length) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (length > limit) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (length > limit) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (length - lastChar >= 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (length - lastChar >= 0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i + char[offset] != lastChar) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i + char[offset] != lastChar) {",
                "identical": false
            }
        ],
        "buggy_line": "if (offset < length) {",
        "fixed_line": "if (offset < length && last <= length) {"
    },
    "Closure-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return NO_STRING;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return NO_STRING;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return propertyResultsLimit;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return propertyResultsLimit;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return propertyResultsLimit, n) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return propertyResultsLimit, n) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return newResultsMatch;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return newResultsMatch;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return allResultsMatch;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return allResultsMatch;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return newResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return newResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return propertyResultsLimit(allIndexes, n) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return propertyResultsLimit(allIndexes, n) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return REPLAY_STRING;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return REPLAY_STRING;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return NO_ANNOTATION_STRING;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return NO_ANNOTATION_STRING;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return propertyResultsLimit, n;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return propertyResultsLimit, n;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return NO_MATCH;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return NO_MATCH;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return newResultsMatch(n, toResults;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return newResultsMatch(n, toResults;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return propertyResultsLimit, n == MAY;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return propertyResultsLimit, n == MAY;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return NO_UNREAD_STRING;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return NO_UNREAD_STRING;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return newResultsMatch(recNode, n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return newResultsMatch(recNode, n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return allResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return allResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return propertyResultsLimit(allURI, n, recurse);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return propertyResultsLimit(allURI, n, recurse);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return newResultsMatch(recNode, n) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return newResultsMatch(recNode, n) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return newResultsMatch(recNode, n, recurse) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return newResultsMatch(recNode, n, recurse) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return newResultsMatch(n, toResultsDUPPER_STRING;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return newResultsMatch(n, toResultsDUPPER_STRING;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return propertyResultsLimit(allIndexes, n, recurse);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return propertyResultsLimit(allIndexes, n, recurse);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return propertyResultsLimit, n == NO_STRING;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return propertyResultsLimit, n == NO_STRING;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return propertyResultsLimit, n);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return propertyResultsLimit, n);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return newResultsMatch(recType, n) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return newResultsMatch(recType, n) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return newResultsMatch(n, toResultsD_STRING;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return newResultsMatch(n, toResultsD_STRING;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return propertyResultsVE_STRING;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return propertyResultsVE_STRING;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return propertyResultsLimit(allIndexes, n);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return propertyResultsLimit(allIndexes, n);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return propertyResultsLimit, ncontaining_STRING;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return propertyResultsLimit, ncontaining_STRING;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return newResultsMatch(recBlock, recurse) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return newResultsMatch(recBlock, recurse) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return propertyResultsVE_STRING, recurse;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return propertyResultsVE_STRING, recurse;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return propertyResultsLimit(allURI, n) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return propertyResultsLimit(allURI, n) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return NO_EXTENDS_NAME, recurse;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return NO_EXTENDS_NAME, recurse;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return newResultsMatch(rec, n, recurse) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return newResultsMatch(rec, n, recurse) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return propertyResultsLimit, nGroups;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return propertyResultsLimit, nGroups;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return allResultsMatch(n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return allResultsMatch(n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return newResultsMatch(n, toHashCode_STRING;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return newResultsMatch(n, toHashCode_STRING;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return newResultsMatch(rec, n) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return newResultsMatch(rec, n) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return REPLAY_STRING, recurse;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return REPLAY_STRING, recurse;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return newResultsMatch(recType, recurse) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return newResultsMatch(recType, recurse) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return propertyResultsLimit, n == 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return propertyResultsLimit, n == 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return propertyResultsLimit(allURI, n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return propertyResultsLimit(allURI, n, recurse_STRING);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return NO_EXTENDS_NAME, recurse) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return NO_EXTENDS_NAME, recurse) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return newResultsMatch(n, toResultsToMatch, n);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return newResultsMatch(n, toResultsToMatch, n);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return newResultsMatch(recNode, recurse) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return newResultsMatch(recNode, recurse) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return newResultsMatch(recBlock, n) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return newResultsMatch(recBlock, n) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return newResultsMatch(n, toResultsXTENDS_STRING;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return newResultsMatch(n, toResultsXTENDS_STRING;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return REPLAY_STRING_ARRAY;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return REPLAY_STRING_ARRAY;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return newResultsMatch(n, toResultsToMatch;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return newResultsMatch(n, toResultsToMatch;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "returnControlFlowMatch;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "returnControlFlowMatch;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return propertyResultsLimit(allURI, n);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return propertyResultsLimit(allURI, n);",
                "identical": false
            }
        ],
        "buggy_line": "return allResultsMatch(n, MAY_BE_STRING_PREDICATE);",
        "fixed_line": "return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);"
    },
    "Closure-114": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (n.isDepScope) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (n.isDepScope) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (isDepScope) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (isDepScope) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (n.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (n.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (parent) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (parent) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (n;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (n;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (lhs.recordDepScope) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (lhs.recordDepScope) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (lhs.isDepScope) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (lhs.isDepScope) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (lhs.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (lhs.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (nNode;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (nNode;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (n == node){",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (n == node){",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (parent.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (parent.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (isExterns) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (isExterns) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (nNode.isDepScope) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (nNode.isDepScope) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (n.S_PER_PROPERTY) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (n.S_PER_PROPERTY) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (rhsVar.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (rhsVar.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (lhs.inExterns) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (lhs.inExterns) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (ns.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (ns.onlyAffectsClassDef) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (n.isExterns) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (n.isExterns) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (n.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (n.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (n == parent) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (n == parent) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (n == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (n == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (lhs.recordDepScope == n) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (lhs.recordDepScope == n) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (n.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (n.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (ns.isDepScope) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (ns.isDepScope) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (nNode) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (nNode) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (rhsVar.nameNode == n) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (rhsVar.nameNode == n) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (lhs.recordDepScope == rhs) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (lhs.recordDepScope == rhs) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (n.isDeclaration) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (n.isDeclaration) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (lhs.parent) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (lhs.parent) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (rhsVar.parent) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (rhsVar.parent) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (inExterns) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (inExterns) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (lhs.recordDepScope;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (lhs.recordDepScope;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (lhs.inNode != rhs) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (lhs.inNode != rhs) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (n.getType() == Token.GETELEM) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (n.getType() == Token.GETELEM) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (n.getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (n.getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (rhs > parent) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (rhs > parent) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (lhs.n == rhs) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (lhs.n == rhs) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (n.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (n.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (lhs != rhs) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (lhs != rhs) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (rhsVar.nameNode == rhs) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (rhsVar.nameNode == rhs) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (n.sideEffects) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (n.sideEffects) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (n == node) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (n == node) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (n.isDepScope(lhs)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (n.isDepScope(lhs)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (lhs.isExterns) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (lhs.isExterns) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (lhs.isDepScope;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (lhs.isDepScope;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (rhsVarArgs) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (rhsVarArgs) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (rhs > rhs) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (rhs > rhs) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (lhs.inNode) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (lhs.inNode) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (n.isEquals) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (n.isEquals) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (!(parent.isCall() && parent.getFirstChild() == n)) {"
    },
    "Math-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "int sum = 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int sum = 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int sum = 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int sum = 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int sum = 0; // let's do a sanity check",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int sum = 0; // let's do a sanity check",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a sanity check",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a sanity check",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int sum = 0; // let's do a start tag after the polygon for impls do a sanity check",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int sum = 0; // let's do a start tag after the polygon for impls do a sanity check",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int sum = 0; // let's do a digit after the polygon for next a sanity check",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int sum = 0; // let's do a digit after the polygon for next a sanity check",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int sum = 0; // let's do a value",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int sum = 0; // let's do a value",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int sum = 0; // let's do a start tag after the polygon for next a sanity check",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int sum = 0; // let's do a start tag after the polygon for next a sanity check",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a start a sanity check",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a start a sanity check",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is even",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is even",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p isABSOLUTE = 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p isABSOLUTE = 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int sum = 0; // map, don't really modify",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int sum = 0; // map, don't really modify",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start lineno = 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start lineno = 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int sum = 0; // let's do a start tag after the polygon for next one",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int sum = 0; // let's do a start tag after the polygon for next one",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int sum = 0; // map, don't really need to a marker forcenter",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int sum = 0; // map, don't really need to a marker forcenter",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a start is a value",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a start is a value",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start is a value",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start is a value",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int sum = 0; // map, don't be a value",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int sum = 0; // map, don't be a value",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is no need to",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is no need to",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int sum = 0; // map, don't do a value",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int sum = 0; // map, don't do a value",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a value",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a value",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p is even",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p is even",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon for next a sanity check",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon for next a sanity check",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start lineno = 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start lineno = 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start is even",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start is even",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon forcenter",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the polygon forcenter",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be in deliberately",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be in deliberately",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p isABSOLUTE = 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p isABSOLUTE = 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int sum = 0; // map, don't really need to a value",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int sum = 0; // map, don't really need to a value",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p is a marker to",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p is a marker to",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int sum = 0; // map, don't really need to a digit after the p",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int sum = 0; // map, don't really need to a digit after the p",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int sum = 0; // let's do a start tag after the polygon for impls do a start a sanity check",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int sum = 0; // let's do a start tag after the polygon for impls do a start a sanity check",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p is a marker for next one",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p is a marker for next one",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int sum = 0; // map, don't be a sanity check",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int sum = 0; // map, don't be a sanity check",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a start is a sanity check",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a start is a sanity check",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int sum = 0; // map, don't do a sanity check",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int sum = 0; // map, don't do a sanity check",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be a start a value",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't be a start a value",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int sum = 0; // let's do a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int sum = 0; // let's do a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a value",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a value",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a start value",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int sum = 0; // let's do a digit after the polygon for impls do a start value",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int sum = 0; // let's do a start tag after the polygon for impls do a marker to",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int sum = 0; // let's do a start tag after the polygon for impls do a marker to",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the polygon for impls do a sanity check",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the polygon for impls do a sanity check",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start is a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int sum = 0; // Integer.MAX_VALUE can do a digit after the p is a start is a digit after the polygon for next one",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int sum = 0; // let's do a start tag after the polygon for impls do a value",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int sum = 0; // let's do a start tag after the polygon for impls do a value",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p isABSOLUTE = 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int sum = 0; // Integer.MAX_VALUE can't really need to a digit after the p isABSOLUTE = 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int sum = 0; // map, don't reallyvo",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int sum = 0; // map, don't reallyvo",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int sum = 0; // let's do a digit after the polygon for next a start lineno, x.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int sum = 0; // let's do a digit after the polygon for next a start lineno, x.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int sum = 0; // let's do a digit after the polygon for next a start is a sanity check",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int sum = 0; // let's do a digit after the polygon for next a start is a sanity check",
                "identical": false
            }
        ],
        "buggy_line": "int sum = 0;",
        "fixed_line": "double sum = 0;"
    },
    "Csv-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "public static final CSVFormat EXCEL = 360;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final CSVFormat EXCEL = 360;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final CSVFormat EXCEL = format;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final CSVFormat EXCEL = format;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public static final CSVFormat EXCEL = classNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public static final CSVFormat EXCEL = classNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public static final CSVFormat EXCEL = daFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public static final CSVFormat EXCEL = daFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public static final CSVFormat EXCEL = access;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public static final CSVFormat EXCEL = access;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public static final CSVFormat EXCEL =customFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final CSVFormat EXCEL =printNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final CSVFormat EXCEL =printNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public static final CSVFormat EXCEL =Cache.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public static final CSVFormat EXCEL =Cache.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public static final CSVFormat EXCEL =Cache.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public static final CSVFormat EXCEL =Cache.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public static final CSVFormat EXCEL =UTEFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public static final CSVFormat EXCEL =UTEFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyExpr(true);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyExpr(true);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final CSVFormat EXCEL =OptionalFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public static final CSVFormat EXCEL =OptionalFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public static final CSVFormat EXCEL = this.DurationFormat;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public static final CSVFormat EXCEL = this.DurationFormat;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyNames;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyNames;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public static final CSVFormat EXCEL =ActiveEmpty.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final CSVFormat EXCEL =ActiveEmpty.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public static final CSVFormat EXCEL = iNames.withIgnoreEmpty()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public static final CSVFormat EXCEL = 255.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final CSVFormat EXCEL = 255.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final CSVFormat EXCEL = 1.0Format.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final CSVFormat EXCEL = 1.0Format.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyTypes(true);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyTypes(true);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final CSVFormat EXCEL =Object.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final CSVFormat EXCEL =Object.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyBorder;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyBorder;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public static final CSVFormat EXCEL =ActiveEmptyNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final CSVFormat EXCEL =ActiveEmptyNames.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public static final CSVFormat EXCEL = 31.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final CSVFormat EXCEL = 31.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final CSVFormat EXCEL =Object.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final CSVFormat EXCEL =Object.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final CSVFormat EXCEL = parent.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public static final CSVFormat EXCEL = parent.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyNames;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public static final CSVFormat EXCEL = InternalFormat.withIgnoreEmptyNames;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public static final CSVFormat EXCEL = this. EXCEL;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public static final CSVFormat EXCEL = this. EXCEL;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final CSVFormat EXCEL = year.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final CSVFormat EXCEL = year.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final CSVFormat EXCEL = 1.0Format.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final CSVFormat EXCEL = 1.0Format.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public static final CSVFormat EXCEL = 1.0Format.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public static final CSVFormat EXCEL = 1.0Format.withIgnoreEmpty) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public static final CSVFormat EXCEL = 1.0Format.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public static final CSVFormat EXCEL = 1.0Format.withIgnoreEmptyLines(true);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyLines) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final CSVFormat EXCEL = i.withIgnoreEmptyLines) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public static final CSVFormat EXCEL = daFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public static final CSVFormat EXCEL = daFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public static final CSVFormat EXCEL =dep.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public static final CSVFormat EXCEL =dep.withIgnoreEmpty;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmptyTypes;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final CSVFormat EXCEL = rhFormat.withIgnoreEmptyTypes;",
                "identical": false
            }
        ],
        "buggy_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
        "fixed_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames(true);"
    },
    "Math-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final double DEFAULT_EPSILON = 10e;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final double DEFAULT_EPSILON = 10e;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final double DEFAULT_EPSILON = 9;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final double DEFAULT_EPSILON = 9;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final double DEFAULT_EPSILON = 255;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final double DEFAULT_EPSILON = 255;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final double DEFAULT_EPSILON = 32;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final double DEFAULT_EPSILON = 32;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final double DEFAULT_EPSILON = 255e;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final double DEFAULT_EPSILON = 255e;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final double DEFAULT_EPSILON = 10eLINE_EPSILON;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final double DEFAULT_EPSILON = 10eLINE_EPSILON;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final double DEFAULT_EPSILON = 10eDesc;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final double DEFAULT_EPSILON = 10eDesc;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final double DEFAULT_EPSILON = 10e_EPSILON;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final double DEFAULT_EPSILON = 10e_EPSILON;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final double DEFAULT_EPSILON = 8;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final double DEFAULT_EPSILON = 8;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final double DEFAULT_EPSILON = File;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final double DEFAULT_EPSILON = File;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final double DEFAULT_EPSILON = 255e_EPSILON;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final double DEFAULT_EPSILON = 255e_EPSILON;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final double DEFAULT_EPSILON = 11;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final double DEFAULT_EPSILON = 11;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final double DEFAULT_EPSILON = 9PER_EPSILON;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final double DEFAULT_EPSILON = 9PER_EPSILON;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final double DEFAULT_EPSILON = EOF_EPSILON;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final double DEFAULT_EPSILON = EOF_EPSILON;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final double DEFAULT_EPSILON = 9_EPSILON;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final double DEFAULT_EPSILON = 9_EPSILON;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final double DEFAULT_EPSILON = 10eCss_EPSILON;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final double DEFAULT_EPSILON = 10eCss_EPSILON;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final double DEFAULT_EPSILON = 10eiling;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final double DEFAULT_EPSILON = 10eiling;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final double DEFAULT_EPSILON = 10e1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final double DEFAULT_EPSILON = 10e1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final double DEFAULT_EPSILON = 1e;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final double DEFAULT_EPSILON = 1e;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final double DEFAULT_EPSILON = EVAL_EPSILON;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final double DEFAULT_EPSILON = EVAL_EPSILON;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final double DEFAULT_EPSILON = 1 << 10;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final double DEFAULT_EPSILON = 1 << 10;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final double DEFAULT_EPSILON = 10e][0];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final double DEFAULT_EPSILON = 10e][0];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final double DEFAULT_EPSILON =-1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final double DEFAULT_EPSILON =-1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final double DEFAULT_EPSILON = cachede;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final double DEFAULT_EPSILON = cachede;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final double DEFAULT_EPSILON = 10e getKey;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final double DEFAULT_EPSILON = 10e getKey;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final double DEFAULT_EPSILON = 6;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final double DEFAULT_EPSILON = 6;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final double DEFAULT_EPSILON = 10eLINE_PAINT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final double DEFAULT_EPSILON = 10eLINE_PAINT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final double DEFAULT_EPSILON = 9GMENT_SIZE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final double DEFAULT_EPSILON = 9GMENT_SIZE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final double DEFAULT_EPSILON = EASTER_EPSILON;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final double DEFAULT_EPSILON = EASTER_EPSILON;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final double DEFAULT_EPSILON = 8 * rval;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final double DEFAULT_EPSILON = 8 * rval;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final double DEFAULT_EPSILON = 9_CODE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final double DEFAULT_EPSILON = 9_CODE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final double DEFAULT_EPSILON = ONE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final double DEFAULT_EPSILON = ONE;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final double DEFAULT_EPSILON = 10e cmp;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final double DEFAULT_EPSILON = 10e cmp;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final double DEFAULT_EPSILON = 8 * propCount;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final double DEFAULT_EPSILON = 8 * propCount;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final double DEFAULT_EPSILON = 10e high;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final double DEFAULT_EPSILON = 10e high;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final double DEFAULT_EPSILON = 9 mode;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final double DEFAULT_EPSILON = 9 mode;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final double DEFAULT_EPSILON = 9PER_ALPHA_SIZE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final double DEFAULT_EPSILON = 9PER_ALPHA_SIZE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final double DEFAULT_EPSILON = 9 greateste;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final double DEFAULT_EPSILON = 9 greateste;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final double DEFAULT_EPSILON =:'e;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final double DEFAULT_EPSILON =:'e;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final double DEFAULT_EPSILON = 10e80;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final double DEFAULT_EPSILON = 10e80;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final double DEFAULT_EPSILON = 9e;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final double DEFAULT_EPSILON = 9e;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final double DEFAULT_EPSILON = 10eLINE_STROKE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final double DEFAULT_EPSILON = 10eLINE_STROKE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final double DEFAULT_EPSILON = 10e[0];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final double DEFAULT_EPSILON = 10e[0];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final double DEFAULT_EPSILON = 8 * val2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final double DEFAULT_EPSILON = 10e\u2b05;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final double DEFAULT_EPSILON = 10e\u2b05;",
                "identical": false
            }
        ],
        "buggy_line": "private static final double DEFAULT_EPSILON = 10e-9;",
        "fixed_line": "private static final double DEFAULT_EPSILON = 10e-15;"
    },
    "Lang-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "str.getChars(0, strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "str.getChars(0, strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "str.getChars(0, strLen, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "str.getChars(0, strLen, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "str.getChars(0, strLen, buffer, size;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "str.getChars(0, strLen, buffer, size;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "str.getChars(0, strLen, buffer, size + padLen);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "str.getChars(0, strLen, buffer, size + padLen);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "str.getChars(0, strLen, buffer, size - width;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "str.getChars(0, strLen, buffer, size - width;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "str.getChars(0, strLen, buffer, size - padLen;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "str.getChars(0, strLen, buffer, size - padLen;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "str.getChars(0, strLen, buffer, size + width;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "str.getChars(0, strLen, buffer, size + width;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "str.getChars(0, strLen, buffer, size = padLen;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "str.getChars(0, strLen, buffer, size = padLen;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "str.getChars(0, width, strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "str.getChars(0, width, strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "str.getChars(0, strLen, buffer, size];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "str.getChars(0, strLen, buffer, size];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "str.getChars(0, strLen, buffer, size] = padChar;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "str.getChars(0, strLen, buffer, size] = padChar;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "str.getChars(0, strLen, buffer, size size);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "str.getChars(0, strLen, buffer, size size);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "str.getChars(0, strLen, buffer, size > padLen;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "str.getChars(0, strLen, buffer, size > padLen;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "str.getChars(0, width, strLen, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "str.getChars(0, width, strLen, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "str.getChars(0, strLen, buffer, size > width;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "str.getChars(0, strLen, buffer, size > width;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "str.getChars(0, strLen, buffer, size1 + padLen;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "str.getChars(0, strLen, buffer, size1 + padLen;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "str.getChars(0, width, buffer, size);",
                "identical": true
            },
            {
                "k": 34,
                "patch": "str.getChars(0, width, buffer, size);",
                "identical": true
            },
            {
                "k": 35,
                "patch": "str.getChars(0, strLen, buffer, size += width;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "str.getChars(0, strLen, buffer, size += width;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "str.getChars(0, strLen, buffer, size : padLen;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "str.getChars(0, strLen, buffer, size : padLen;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "str.getChars(0, strLen, buffer, size + i);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "str.getChars(0, strLen, buffer, size + i);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "str.getChars(0, strLen, buffer, sizeChar);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "str.getChars(0, strLen, buffer, sizeChar);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "str.getChars(0, strLen, buffer, size % padLen;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "str.getChars(0, strLen, buffer, size % padLen;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "str.getChars(0, strLen, buffer, size-1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "str.getChars(0, strLen, buffer, size-1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "str.getChars(0, strLen, buffer, size] = padLen;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "str.getChars(0, strLen, buffer, size] = padLen;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "str.getChars(0, strLen, buffer, size makeLen;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "str.getChars(0, strLen, buffer, size makeLen;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "str.getChars(0, strLen, buffer[size - 1];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "str.getChars(0, strLen, buffer[size - 1];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "str.getChars(0, strLen, buffer, size % width;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "str.getChars(0, strLen, buffer, size % width;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "str.getChars(0, strLen, buffer, size -= padLen;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "str.getChars(0, strLen, buffer, size -= padLen;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "str.getChars(0, strLen, buffer, size + padLen] = padChar;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "str.getChars(0, strLen, buffer, size + padLen] = padChar;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "str.getChars(0, strLen, buffer, size+1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "str.getChars(0, strLen, buffer, size+1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "str.getChars(0, strLen, buffer, size SegmentLen;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "str.getChars(0, strLen, buffer, size SegmentLen;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "str.getChars(0, strLen, buffer, sizeVarsLen;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "str.getChars(0, strLen, buffer, sizeVarsLen;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "str.getChars(0, strLen, buffer, size--) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "str.getChars(0, strLen, buffer, size--) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "str.getChars(0, strLen, buffer, size + replaceLen;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "str.getChars(0, strLen, buffer, size + replaceLen;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "str.getChars(0, strLen, buffer, size+1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "str.getChars(0, strLen, buffer, size+1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "str.getChars(0, strLen, buffer, size / size;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "str.getChars(0, strLen, buffer, size / size;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "str.getChars(0, strLen, buffer, size });",
                "identical": false
            },
            {
                "k": 74,
                "patch": "str.getChars(0, strLen, buffer, size });",
                "identical": false
            },
            {
                "k": 75,
                "patch": "str.getChars(0, strLen, buffer, size) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "str.getChars(0, strLen, buffer, size) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "str.getChars(0, strLen, buffer, size + padLen] = padLen;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "str.getChars(0, strLen, buffer, size + padLen] = padLen;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "str.getChars(0, strLen, buffer, sizeEOF;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "str.getChars(0, strLen, buffer, sizeEOF;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "str.getChars(0, strLen, buffer, size + i;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "str.getChars(0, strLen, buffer, size + i;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "str.getChars(0, strLen, buffer, sizeEmitterLen;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "str.getChars(0, strLen, buffer, sizeEmitterLen;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "str.getChars(0, strLen;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "str.getChars(0, strLen;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "str.getChars(0, width, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "str.getChars(0, width, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "str.getChars(0, strLen, buffer, startIndex);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "str.getChars(0, strLen, buffer, startIndex);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "str.getChars(0, strLen, buffer, sizequoteLen;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "str.getChars(0, strLen, buffer, sizequoteLen;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "str.getChars(0, width, strLen, buffer, size + padLen);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "str.getChars(0, width, strLen, buffer, size + padLen);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "str.getChars(0, strLen, buffer, size + padLen = padLen;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "str.getChars(0, strLen, buffer, size + padLen = padLen;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "str.getChars(0, strLen, buffer, sizepopupLen;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "str.getChars(0, strLen, buffer, sizepopupLen;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "str.getChars(0, padLen, buffer, size);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "str.getChars(0, padLen, buffer, size);",
                "identical": false
            }
        ],
        "buggy_line": "str.getChars(0, strLen, buffer, size);",
        "fixed_line": "str.getChars(0, width, buffer, size);"
    },
    "Closure-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (target != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (target != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (target == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (target == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (qualifiedName != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (qualifiedName != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (callee != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (callee != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (targetName != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (targetName != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (paramName != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (paramName != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (functionName != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (functionName != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (target.newName != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (target.newName != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (ownerName != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (ownerName != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (elements != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (elements != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (qName != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (qName != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (seconds != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (seconds != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (LEGName != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (LEGName != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( author != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( author != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (ANGE != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (ANGE != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (fName != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (fName != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( Info != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( Info != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (fsName != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (fsName != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (callee != null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (callee != null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (callName != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (callName != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (currName != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (currName != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (FEATUREName != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (FEATUREName != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( 6, 8 != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( 6, 8 != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( timesName != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( timesName != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( verticalName != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( verticalName != null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( us != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( us != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (HourName != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (HourName != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( vertical != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( vertical != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (calculated != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (calculated != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Freq != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Freq != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( 0),Name != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( 0),Name != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (OrdinalName != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (OrdinalName != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( id != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( id != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (\u2b05 != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (\u2b05 != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ({\" != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ({\" != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( currentToken != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( currentToken != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (cost != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (cost != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (target != null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (target != null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( eq != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( eq != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Constants != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Constants != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (SPACE != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (SPACE != null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( pojo != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( pojo != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (DLE != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (DLE != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (\u2cd0 != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (\u2cd0 != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Expressions != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Expressions != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (rhs != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (rhs != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( El != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( El != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (collection != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (collection != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( m != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( m != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (target == null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (target == null;",
                "identical": false
            }
        ],
        "buggy_line": "if (target != null) {",
        "fixed_line": "if (target != null && target.getType() == Token.STRING) {"
    },
    "Mockito-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return BasicValue.UNINITIALIZED_VALUE;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return BasicValue.UNINITIALIZED_VALUE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return BasicValue.REFERENCE_VALUE;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return BasicValue.REFERENCE_VALUE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return JsonToken.VALUE_EMBEDDED_MATCH;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return JsonToken.VALUE_EMBEDDED_MATCH;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS_ARRAY;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS_ARRAY;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT_ARRAY;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT_ARRAY;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return BasicValue.S_PER_SECOND;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return BasicValue.S_PER_SECOND;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_ARRAY;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_ARRAY;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BasicValue.UNINITPES_VALUE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return BasicValue.UNINITPES_VALUE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return BasicValue.ALIAS_UNINIT_VALUE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return BasicValue.ALIAS_UNINIT_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return 2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return 2;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return EMPTY_BYTE_ARRAY;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return EMPTY_BYTE_ARRAY;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_MATCH;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_MATCH;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, other;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, other;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return JsonToken.VALUE_EMBEDDED_ANNOTATION;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return JsonToken.VALUE_EMBEDDED_ANNOTATION;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return JsonToken.VALUE_ESCAPE_ARRAY;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return JsonToken.VALUE_ESCAPE_ARRAY;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return BasicValue.UNINITIALIZED;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return BasicValue.UNINITIALIZED;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return 0; //desc, but do a marker for next one not happen",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return 0; //desc, but do a marker for next one not happen",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return BasicValue.REFERENCE_UNINIT_VALUE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return BasicValue.REFERENCE_UNINIT_VALUE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return 0; //desc, but do a non-emptyArray.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return 0; //desc, but do a non-emptyArray.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return 0; //desc, but do a marker for each.",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return 0; //desc, but do a marker for each.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return BasicValue.UNINITIALIZED_FLAG;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return BasicValue.UNINITIALIZED_FLAG;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return 0; //desc, but do a marker for previous",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return 0; //desc, but do a marker for previous",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return JsonToken.VALUE_ESCAPE_OBJECTS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return JsonToken.VALUE_ESCAPE_OBJECTS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS.EMPTY;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS.EMPTY;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return BasicValue.ALIAS_UNINIT_SIGNATURES;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return BasicValue.ALIAS_UNINIT_SIGNATURES;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return JsonToken.VALUE_EMBEDDED_SIZE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return JsonToken.VALUE_EMBEDDED_SIZE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return 0; // throw away the string not, but do a marker for method",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return 0; // throw away the string not, but do a marker for method",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS.REF;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS.REF;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return BasicValue.EMPTY_ZERO_TYPE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return BasicValue.EMPTY_ZERO_TYPE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return BasicValue.ALIAS_UNINIT_AS_ZERO;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return BasicValue.ALIAS_UNINIT_AS_ZERO;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_FALSE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_FALSE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_NAMES;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return JsonToken.VALUE_EMBEDDED_WRAPPER_NAMES;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return BasicValue.ALIAS_UNINIT_AS_ZERO_INFO;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return BasicValue.ALIAS_UNINIT_AS_ZERO_INFO;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return 0; //desc, but do a marker for handler is this right?",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return 0; //desc, but do a marker for handler is this right?",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return BasicValue.DAYS_VALUE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return BasicValue.DAYS_VALUE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return BasicValue.ALIAS_UNINIT_AS_ZERO_MATCH;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return BasicValue.ALIAS_UNINIT_AS_ZERO_MATCH;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return 0; // throw away the current, but do a marker for method",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return 0; // throw away the current, but do a marker for method",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return 0; //desc, but do a non-empty collection",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return 0; //desc, but do a non-empty collection",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return BasicValue.ALIAS_UNINIT_ZERO_TYPE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return BasicValue.ALIAS_UNINIT_ZERO_TYPE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return 0; //desc, but do a marker to do a marker for each.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return 0; //desc, but do a marker to do a marker for each.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return 0; //desc, but do a marker for next is this right?",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return 0; //desc, but do a marker for next is this right?",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return 0; // throw away the current,, but do a marker for method",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return 0; // throw away the current,, but do a marker for method",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return 0; //desc, but do a marker for next one_1",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return 0; //desc, but do a marker for next one_1",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return 0; //desc, but do a marker for each array",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return 0; //desc, but do a marker for each array",
                "identical": false
            }
        ],
        "buggy_line": "return 1;",
        "fixed_line": "return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;"
    },
    "Cli-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "nextLineTabStop = width - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "nextLineTabStop = width - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "nextLineTabStop = width / nextLineTabStop - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "nextLineTabStop = width / nextLineTabStop - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "nextLineTabStop = pos - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "nextLineTabStop = pos - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "nextLineTabStop = nextLineTabStop - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "nextLineTabStop = nextLineTabStop - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "nextLineTabStop = width / pos;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "nextLineTabStop = width / pos;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "nextLineTabStop = width / nextLineTabStop;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "nextLineTabStop = width / nextLineTabStop;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "nextLineTabStop = width / pos + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "nextLineTabStop = width / pos + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "nextLineTabStop = width / nextLineTabStop + 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "nextLineTabStop = width / nextLineTabStop + 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "nextLineTabStop = width - pos + 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "nextLineTabStop = width - pos + 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "nextLineTabStop = width / 2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "nextLineTabStop = width / 2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "nextLineTabStop = width - nextLineTabStop;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "nextLineTabStop = width - nextLineTabStop;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "nextLineTabStop =spectTabStop - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "nextLineTabStop =spectTabStop - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "nextLineTabStop = maxLine - 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "nextLineTabStop = maxLine - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "nextLineTabStop = width - nextLineTabStop + 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "nextLineTabStop = width - nextLineTabStop + 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "nextLineTabStop = s.substring(pos - 1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "nextLineTabStop = s.substring(pos - 1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "nextLineTabStop = width / width;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "nextLineTabStop = width / width;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "nextLineTabStop = width - column;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "nextLineTabStop = width - column;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "nextLineTabStop = width - pos;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "nextLineTabStop = width - pos;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "nextLineTabStop = height - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "nextLineTabStop = height - 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "nextLineTabStop = pos - width;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "nextLineTabStop = pos - width;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "nextLineTabStop = padding + width - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "nextLineTabStop = padding + width - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "nextLineTabStop = width / 4;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "nextLineTabStop = width / 4;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "nextLineTabStop = width / pos - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "nextLineTabStop = width / pos - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "nextLineTabStop = padding + width / 2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "nextLineTabStop = padding + width / 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "nextLineTabStop = width / 10;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "nextLineTabStop = width / 10;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "nextLineTabStop = casesTabStop - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "nextLineTabStop = casesTabStop - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "nextLineTabStop = c - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "nextLineTabStop = c - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "nextLineTabStop = width / 2.0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "nextLineTabStop = width / 2.0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "nextLineTabStop = s.substring(0, pos - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "nextLineTabStop = s.substring(0, pos - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "nextLineTabStop = text - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "nextLineTabStop = text - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "nextLineTabStop = width - str;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "nextLineTabStop = width - str;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "nextLineTabStop = width / LOG_10_VALUE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "nextLineTabStop = width / LOG_10_VALUE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "nextLineTabStop = width /TabStop - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "nextLineTabStop = width /TabStop - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "nextLineTabStop = lineGuess - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "nextLineTabStop = lineGuess - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "nextLineTabStop = width - nextLineTabStop - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "nextLineTabStop = width - nextLineTabStop - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "nextLineTabStop = width / pos pos + 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "nextLineTabStop = width / pos pos + 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "nextLineTabStop = width / 100;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "nextLineTabStop = width / 100;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "nextLineTabStop = padding + width / nextLineTabStop;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "nextLineTabStop = padding + width / nextLineTabStop;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "nextLineTabStop = width /TabStop;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "nextLineTabStop = width /TabStop;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "nextLineTabStop =bits - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "nextLineTabStop =bits - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "nextLineTabStop =getBytes - pos + 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "nextLineTabStop =getBytes - pos + 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "nextLineTabStop = s.substring(pos - 1, width;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "nextLineTabStop = s.substring(pos - 1, width;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "nextLineTabStop = width / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "nextLineTabStop = width / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "nextLineTabStop = width /condition;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "nextLineTabStop = width /condition;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "nextLineTabStop = width / pos pos;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "nextLineTabStop = width / pos pos;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "nextLineTabStop =angle - width;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "nextLineTabStop =angle - width;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "nextLineTabStop = width / LOG_10_COUNT;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "nextLineTabStop = width / LOG_10_COUNT;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "nextLineTabStop = nextLineTabStop - pos + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "nextLineTabStop = nextLineTabStop - pos + 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "nextLineTabStop = width / LOG_10_Ce - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "nextLineTabStop = width / LOG_10_Ce - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "nextLineTabStop = d - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "nextLineTabStop = d - 1;",
                "identical": false
            }
        ],
        "buggy_line": "nextLineTabStop = width - 1;",
        "fixed_line": "nextLineTabStop = 1;"
    },
    "Csv-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (current == '\\n') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (current == '\\n') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (current == '\\n') { currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (current == '\\n') { currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (current == '\\n') { currentChar; break;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (current == '\\n') { currentChar; break;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (current == '\\n') { currentChar; in currentChar;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (current == '\\n') { currentChar; in currentChar;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (current == '\\n') { currentChar; in currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (current == '\\n') { currentChar; in currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (current == '\\n') { currentChar;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (current == '\\n') { currentChar;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (current == '\\n') { currentChar; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (current == '\\n') { currentChar; }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (current == '\\n') { currentChar; lastChar;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (current == '\\n') { currentChar; lastChar;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (current == '\\n') { currentChar; in currentChar; }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (current == '\\n') { currentChar; in currentChar; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (current == '\\n') { currentChar = lastChar; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (current == '\\n') { currentChar = lastChar; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (current == '\\n') { currentChar; inParent = lastChar;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (current == '\\n') { currentChar; inParent = lastChar;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (current == '\\n') { currentChar; in currentChar; in currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (current == '\\n') { currentChar; in currentChar; in currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (current == '\\n') { currentChar; in currentChar; lastChar = lastChar;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (current == '\\n') { currentChar; in currentChar; lastChar = lastChar;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (current == '\\n') { currentChar; in 8 = lastChar;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (current == '\\n') { currentChar; in 8 = lastChar;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (current == '\\n') { currentChar; lastChar] = lastChar;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (current == '\\n') { currentChar; lastChar] = lastChar;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (current == '\\n') { currentChar = i == '\\r't;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (current == '\\n') { currentChar = i == '\\r't;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (current == '\\n') { currentChar = lastChar; break;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (current == '\\n') { currentChar = lastChar; break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (current == '\\n') { currentChar; in currentChar; in currentChar;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (current == '\\n') { currentChar; in currentChar; in currentChar;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (current == '\\n') { currentChar] = lastChar;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (current == '\\n') { currentChar] = lastChar;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (current == '\\n') { currentChar; currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (current == '\\n') { currentChar; currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (current == '\\n') { currentChar = i == '\\r's;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (current == '\\n') { currentChar = i == '\\r's;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_STREAM; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (current == '\\n') { currentChar; inOUT_OF_STREAM; }",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (current == '\\n') { currentChar; in currentChar] = lastChar;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (current == '\\n') { currentChar; in currentChar] = lastChar;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (current == '\\n') { currentChar; : lastChar;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (current == '\\n') { currentChar; : lastChar;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (current == '\\n') { currentChar = lastChar; in currentChar;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (current == '\\n') { currentChar = lastChar; in currentChar;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar; }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar; }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (current == '\\n') { currentChar; inbednode = lastChar;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (current == '\\n') { currentChar; inbednode = lastChar;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (current == '\\n') { currentChar; in currentChar; break;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (current == '\\n') { currentChar; in currentChar; break;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (current == '\\n') { currentChar; in int = lastChar;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (current == '\\n') { currentChar; in int = lastChar;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r' = lastChar;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r' = lastChar;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (current == '\\n') { currentChar; return lastChar;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (current == '\\n') { currentChar; return lastChar;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (current == '\\n') { currentChar; lastChar; in currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (current == '\\n') { currentChar; lastChar; in currentChar = lastChar;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (current == '\\n') { currentChar;Body = lastChar;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (current == '\\n') { currentChar;Body = lastChar;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (current == '\\n') { currentChar; in atts",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (current == '\\n') { currentChar; in atts",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (current == '\\n') { currentChar; in currentChar; : lastChar;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (current == '\\n') { currentChar; in currentChar; : lastChar;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (current == '\\n') { currentChar; must lastChar;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (current == '\\n') { currentChar; must lastChar;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (current == '\\n') { currentChar; in currentChar; inParent = lastChar;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (current == '\\n') { currentChar; in currentChar; inParent = lastChar;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (current == '\\n') { currentChar = i == '\\r')) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (current == '\\n') { currentChar = i == '\\r')) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (current == '\\n') { currentChar; in int -= lastChar;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (current == '\\n') { currentChar; in int -= lastChar;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (current == '\\n') { current = lastChar;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (current == '\\n') { current = lastChar;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (current == '\\n') { currentChar; iterannotated = lastChar;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (current == '\\n') { currentChar; iterannotated = lastChar;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (current == '\\n') { currentChar; iterannotatedIndex = lastChar;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (current == '\\n') { currentChar; iterannotatedIndex = lastChar;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (current == '\\n') { currentChar; in currentChar; lastChar;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (current == '\\n') { currentChar; in currentChar; lastChar;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (current == '\\n') { currentChar; size = lastChar;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (current == '\\n') { currentChar; size = lastChar;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (current == '\\n') { currentChar; must be = lastChar;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (current == '\\n') { currentChar; must be = lastChar;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar; in currentChar;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (current == '\\n') { currentChar; lastChar = lastChar; in currentChar;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (current == '\\n') { currentChar = i == '\\r' {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (current == '\\n') { currentChar = i == '\\r' {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (current == '\\n') { currentChar; in at most currentChar;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (current == '\\n') { currentChar; in at most currentChar;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r't = lastChar;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (current == '\\n') { currentChar; lastChar != '\\r't = lastChar;",
                "identical": false
            }
        ],
        "buggy_line": "if (current == '\\n') {",
        "fixed_line": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {"
    },
    "JacksonDatabind-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "return previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return previous != null && previous.equals(_currentState);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return previous != null && previous.equals(_currentState);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return previous != null && previous.equals(_attributeCount;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return previous != null && previous.equals(_attributeCount;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return previous != null && previous.equals(_value;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return previous != null && previous.equals(_value;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return previous != null && previous.equals(_value);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return previous != null && previous.equals(_value);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return previous != null && previous.equals(_currentSegment.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return previous != null && previous.equals(_currentSegment.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return previous != null && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return previous != null && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return previous != null && previous.equals(_methodName);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return previous != null && previous.equals(_methodName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return previous != null && previous.equals(_attributeCount);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return previous != null && previous.equals(_attributeCount);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return previous != null && previous.equals(ann) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return previous != null && previous.equals(ann) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return previous != null && previous.equals(_type);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return previous != null && previous.equals(_type);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return previous != null && previous.equals(_value) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return previous != null && previous.equals(_value) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return previous != null && previous.equals(_string;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return previous != null && previous.equals(_string;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return previous != null && previous.equals(_attributeCount - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return previous != null && previous.equals(_attributeCount - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return previous != null && previous.equals(_names;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return previous != null && previous.equals(_names;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return previous != null && previous.equals(_timezone",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return previous != null && previous.equals(_timezone",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return previous != null && previous.equals(_expType);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return previous != null && previous.equals(_expType);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return previous != null && previous.equals(_name;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return previous != null && previous.equals(_name;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return previous != null && previous.equals(_currentName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return previous != null && previous.equals(_currentName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return previous != null && previous.equals(_annotations;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return previous != null && previous.equals(_annotations;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return previous != null && previous.equals(_cfg;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return previous != null && previous.equals(_cfg;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return previous != null && previous.equals(_name);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return previous != null && previous.equals(_name);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return previous != null && previous.equals(_currentState;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return previous != null && previous.equals(_currentState;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return previous != null && previous.equals(_last;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return previous != null && previous.equals(_last;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return previous != null && previous.equals(_wrapperName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return previous != null && previous.equals(_wrapperName);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return previous != null && previous.equals(_next;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return previous != null && previous.equals(_next;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return previous != null && previous.equals(_method) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return previous != null && previous.equals(_method) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return previous != null && previous.equals(_previous;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return previous != null && previous.equals(_previous;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return previous != null && previous.equals(_FIRST);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return previous != null && previous.equals(_FIRST);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return previous != null && previous.equals(_current);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return previous != null && previous.equals(_current);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return previous != null && previous.equals(_buckets.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return previous != null && previous.equals(_buckets.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return previous != null && previous.equals(_method);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return previous != null && previous.equals(_method);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return previous != null && previous.equals(_loop) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return previous != null && previous.equals(_loop) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return previous != null && previous.equals(ann) >= 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return previous != null && previous.equals(ann) >= 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return previous != null && previous.equals(_attributeCount == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return previous != null && previous.equals(_attributeCount == 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return previous != null && previous.equals(\"\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return previous != null && previous.equals(\"\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return previous != null && _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return previous != null && _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return previous != null && previous.equals(_attributeCount == 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return previous != null && previous.equals(_attributeCount == 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return previous != null && previous.equals(_ label;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return previous != null && previous.equals(_ label;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return previous != null && previous.equals(_construct.value) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return previous != null && previous.equals(_construct.value) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return previous != null && previous.equals(_cfgName);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return previous != null && previous.equals(_cfgName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return previous != null && previous.equals(_Sym;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return previous != null && previous.equals(_Sym;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return previous != null && previous.equals(_currentNode);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return previous != null && previous.equals(_currentNode);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return previous != null && previous.equals(_exp);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return previous != null && previous.equals(_exp);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return previous != null && previous.equals(_loop);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return previous != null && previous.equals(_loop);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return previous != null && previous.equals(ann));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return previous != null && previous.equals(ann));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return previous != null && previous.equals(_currentSegment);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return previous != null && previous.equals(_currentSegment);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "returnprevious != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "returnprevious != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return previous != null && previous.equals(_methodName;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return previous != null && previous.equals(_methodName;",
                "identical": false
            }
        ],
        "buggy_line": "return (previous != null) && previous.equals(ann);",
        "fixed_line": "return (previous == null) || !previous.equals(ann);"
    },
    "Closure-62": {
        "fixes": [
            {
                "k": 1,
                "patch": "&& charno < 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "&& charno < 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& 0 <= charno && c >= 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "&& 0 <= charno && c >= 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& 0 <= charno && charno < end;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "&& 0 <= charno && charno < end;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "&& 0 <= charno && c < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "&& 0 <= charno && c < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "&& 0 <= charno && charno < 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "&& 0 <= charno && charno < 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "&& 0 <= charno && charno < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "&& 0 <= charno && charno < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "&& 0 <= charno && charno < endExcer;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "&& 0 <= charno && charno < endExcer;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "&& 0 <= charno && c < endExcerBytes.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "&& 0 <= charno && c < endExcerBytes.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "&& 0 <= charno && charno < endLiteral.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "&& 0 <= charno && charno < endLiteral.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "&& 0 <= charno && charno < endExcerBytes.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "&& 0 <= charno && charno < endExcerBytes.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "&& 0 <= charno && c < end;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "&& 0 <= charno && c < end;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "&& 0 <= charno && c >= 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "&& 0 <= charno && c >= 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "&& 0 <= charno && c < endNode.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "&& 0 <= charno && c < endNode.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "&& 0 <= charno && charno < endExcer {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "&& 0 <= charno && charno < endExcer {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "&& 0 <= charno && c < endLiteral.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "&& 0 <= charno && c < endLiteral.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "&& 0 <= charno && c < endExcer = sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "&& 0 <= charno && c < endExcer = sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "&& 0 <= charno && charno < endBuf.length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "&& 0 <= charno && charno < endBuf.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "&& charno < endExcer && charno.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "&& charno < endExcer && charno.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "&& 0 <= charno && c = sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "&& 0 <= charno && c = sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "&& charno < endExcer && i.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "&& charno < endExcer && i.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "&& 0 <= charno && c < endExcerpt.length + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "&& 0 <= charno && c < endExcerpt.length + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "&& 0 <= charno && c < endHandler.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "&& 0 <= charno && c < endHandler.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "&& 0 <= charno && c < endBuf.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "&& 0 <= charno && c < endBuf.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "&& 0 <= charno && charno < end other.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "&& 0 <= charno && charno < end other.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "&& 0 <= charno && c < endExcera.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "&& 0 <= charno && c < endExcera.length;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "&& 0 <= charno && charno < endHandler.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "&& 0 <= charno && charno < endHandler.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "&& 0 <= charno && charno < endDoc.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "&& 0 <= charno && charno < endDoc.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "&& 0 <= charno && charno < endEscapes.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "&& 0 <= charno && charno < endEscapes.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "&& 0 <= charno && charno < endNode.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "&& 0 <= charno && charno < endNode.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "&& charno < endExcer && charno < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "&& charno < endExcer && charno < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "&& sourceExcerpt && i < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "&& sourceExcerpt && i < endExcerpt.length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "&& charno < endExcer && i;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "&& charno < endExcer && i;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "&& 0 <= charno && c < endExcer -= charno;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "&& 0 <= charno && c < endExcer -= charno;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "&& charno < endExcer && i != endExcerpt;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "&& charno < endExcer && i != endExcerpt;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "&& charno < endExcer && i != end;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "&& charno < endExcer && i != end;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "&& 0 <= charno && charno < endExcer -= charno;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "&& 0 <= charno && charno < endExcer -= charno;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "&& 0 <= charno && c < endEscapes.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "&& 0 <= charno && c < endEscapes.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "&& 0 <= charno && c < end other.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "&& 0 <= charno && c < end other.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "&& 0 <= charno && c < endDoc.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "&& 0 <= charno && c < endDoc.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "&& charno < endExcer && i != endExcerpt.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "&& charno < endExcer && i != endExcerpt.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "&& 0 <= charno && charno < endPosition;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "&& 0 <= charno && charno < endPosition;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "&& 0 <= charno && charno < endName.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "&& 0 <= charno && charno < endName.length;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "&& 0 <= charno && c < endValue.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "&& 0 <= charno && c < endValue.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "&& 0 <= charno && charno < endExcerdepends.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "&& 0 <= charno && charno < endExcerdepends.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "&& charno < endExcer && i != endName.length;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "&& charno < endExcer && i != endName.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "&& 0 <= charno && charno < endExcer = sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "&& 0 <= charno && charno < endExcer = sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "&& 0 <= charno && c < endExcerdepends.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "&& 0 <= charno && c < endExcerdepends.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "&& charno < endExcer && charno < end;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "&& charno < endExcer && charno < end;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "&& 0 <= charno && charno < endExcer ca;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "&& 0 <= charno && charno < endExcer ca;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "&& 0 <= charno && c < endName.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "&& 0 <= charno && c < endName.length;",
                "identical": false
            }
        ],
        "buggy_line": "&& 0 <= charno && charno < sourceExcerpt.length()) {",
        "fixed_line": "&& 0 <= charno && charno <= sourceExcerpt.length()) {"
    },
    "Jsoup-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this == o;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return this == o;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this != o;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this != o;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.o == o;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return this.o == o;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return this == o; // the default null if it's do this",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return this == o; // the default null if it's do this",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this == o; // the default null if it's do this may be null or: return true;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this == o; // the default null if it's do this may be null or: return true;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this == o; // the default null if it's do this is",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return this == o; // the default null if it's do this is",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for output",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for output",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this == o; // the default null if it's do this if it's do this may be null or: return true;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this == o; // the default null if it's do this if it's do this may be null or: return true;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return this == o; // the default null if it's do this if it's do this",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return this == o; // the default null if it's do this if it's do this",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this == o; // the default null if it's do this if it's do a marker for output",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this == o; // the default null if it's do this if it's do a marker for output",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return this == o; // the default null if it's do this may be null if it's do this may be null or: return true;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this == o; // the default null if it's do this may be null if it's do this may be null or: return true;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this == o; // the default null if it's do this may be null if it's do zero",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this == o; // the default null if it's do this may be null if it's do zero",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return this == o; // the default null if it's do this may be null if it's do this",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return this == o; // the default null if it's do this may be null if it's do this",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this == o; // the default null if it's do this the o;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this == o; // the default null if it's do this the o;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for mock",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for mock",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return this == o; // the default null if it's do this may be null if it's do this is",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return this == o; // the default null if it's do this may be null if it's do this is",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return this == o; // the default null if it's do this if it's do zero",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this == o; // the default null if it's do this if it's do zero",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for o;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for o;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return this == o; // the default null if it's do this may be null if it's do aElement.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this == o; // the default null if it's do this may be null if it's do aElement.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return this == o; // the default null if it's do this may be null if it's do implicit re",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this == o; // the default null if it's do this may be null if it's do implicit re",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return this == o; // the default null if it's do this is 16, the",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this == o; // the default null if it's do this is 16, the",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this == o; // the default null if it's do this may be null if it's do!",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return this == o; // the default null if it's do this may be null if it's do!",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return this == o; // the default null if it's do this if it's do a marker for mock",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this == o; // the default null if it's do this if it's do a marker for mock",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return this == o; // the default null if it's do this may be null",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this == o; // the default null if it's do this may be null",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this == o; // the default null if it's do a marker for output",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return this == o; // the default null if it's do a marker for output",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this == o; // the default null if it's do this may be null if it's do this the o;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return this == o; // the default null if it's do this may be null if it's do this the o;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return this == o; // the default null if it's do this if it's do!",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return this == o; // the default null if it's do this if it's do!",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return this == o; // the default null if it's do this may be null if it's do it's do a marker for output",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this == o; // the default null if it's do this may be null if it's do it's do a marker for output",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this == o; // the default null if it's do this if it's non-empty",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return this == o; // the default null if it's do this if it's non-empty",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this == o; // the default null if it's do this represents the o;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this == o; // the default null if it's do this represents the o;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a non-empty",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a non-empty",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this == o; // the default null if it's do this if it's do this is",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this == o; // the default null if it's do this if it's do this is",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this == o; // the default null if it's do!",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this == o; // the default null if it's do!",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for \"+o;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for \"+o;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for next",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for next",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this == o; // the default null if it's do this may be null if it's non-empty",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this == o; // the default null if it's do this may be null if it's non-empty",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this == o; // the default null if it's do this may be null if it's do it't really modify",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this == o; // the default null if it's do this may be null if it's do it't really modify",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this == o; // the default null if it's do this if it' nulls in the o;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this == o; // the default null if it's do this if it' nulls in the o;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this == o; // the default null if it's do this tag",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this == o; // the default null if it's do this tag",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this == o; // the default null if it's do this if it's do implicit re-empty",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this == o; // the default null if it's do this if it's do implicit re-empty",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker the o;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker the o;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return this == o; // the default null if it's do this if it't really modify",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this == o; // the default null if it's do this if it't really modify",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this == o; // the default null if it's do this may be null if it's do implicit it's do a marker for output",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this == o; // the default null if it's do this may be null if it's do implicit it's do a marker for output",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return this == o; // the default null if it's do this may be null if it' nulls in the o;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return this == o; // the default null if it's do this may be null if it' nulls in the o;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this == o; // the default null if it's do this may be null if it't really modify",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this == o; // the default null if it's do this may be null if it't really modify",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return this == o; // the default null if it's do this if it's do a marker for o;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this == o; // the default null if it's do this if it's do a marker for o;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for curr = element;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for curr = element;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this == o; // the default null if it's do this may be null if it's do sanity check",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this == o; // the default null if it's do this may be null if it's do sanity check",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this == o; // the default null if it's do this if it's do implicit o;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return this == o; // the default null if it's do this if it's do implicit o;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for it's do this",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return this == o; // the default null if it's do this may be null if it's do a marker for it's do this",
                "identical": false
            }
        ],
        "buggy_line": "return this == o;",
        "fixed_line": "return tag.equals(element.tag);"
    },
    "Math-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "return a == b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return a == b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return a == b ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return a == b ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return a == b ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return a == b ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return a == b ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return a == b ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return a == b ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return a == b ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return a == b ? Float.valueOf : b;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return a == b ? Float.valueOf : b;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return a < b ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return a < b ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return a == b ? Float.isNaN(a + b : b) ? Float.NaN;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return a == b ? Float.isNaN(a + b : b) ? Float.NaN;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return a == b ? Float.isNaN(a + b : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return a == b ? Float.isNaN(a + b : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return a < b ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return a < b ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return a == b ? Float.isNaN : a;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return a == b ? Float.isNaN : a;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return a == b ? Float.isNaN(b : b;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return a == b ? Float.isNaN(b : b;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return a < b ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return a < b ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return a == b ? Float.MIN_VALUE : b;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return a == b ? Float.MIN_VALUE : b;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return a == b ? b : b;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return a == b ? b : b;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return a == b ? Float.isNaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return a == b ? Float.isNaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return a < b ? Float.isNaN : a;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return a < b ? Float.isNaN : a;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return a < b ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return a < b ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return a == b ? Float.NaN : a + b;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return a == b ? Float.NaN : a + b;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return b == 0 ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return b == 0 ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return a == b ? Float.isNaN : a + b;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return a == b ? Float.isNaN : a + b;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return a == b ? Float.isNaN + b : b;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return a == b ? Float.isNaN + b : b;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return a == b ? Float.isNaN : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return a == b ? Float.isNaN : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return a == b ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return a == b ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return a < b ? Float.isNaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return a < b ? Float.isNaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return a == b ? Float.isNaN(a + b) : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return a == b ? Float.isNaN(a + b) : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return a == b ? Float.isNaN(a + b : b + b;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return a == b ? Float.isNaN(a + b : b + b;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return a == b ? Float.isNaN(b : a + b;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return a == b ? Float.isNaN(b : a + b;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return a == b ? Float.isNaN(b) : b;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return a == b ? Float.isNaN(b) : b;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return a == b ? Float.efficient : b;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return a == b ? Float.efficient : b;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return a < a ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return a < a ? Float.isNaN : b;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return a < b ? Float.isNaN + b : b;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return a < b ? Float.isNaN + b : b;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return a == b ? Float.isNaN(a + b : a;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return a == b ? Float.isNaN(a + b : a;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return a == b ? Float.floatValue : b;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return a == b ? Float.floatValue : b;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return a == b ? Float.isNaN(a + b : b +1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return a == b ? Float.isNaN(a + b : b +1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return b == 0 ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return b == 0 ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return a < a ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return a < a ? Float.isNaN(a) : b;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return a < b ? Float.isNaN : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return a < b ? Float.isNaN : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "returna == b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "returna == b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return a == b ? Float.valueOf : a;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return a == b ? Float.valueOf : a;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return a == b ? Float.Java : b;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return a == b ? Float.Java : b;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return a == b ? Float.isNaN(a + b : b + a;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return a == b ? Float.isNaN(a + b : b + a;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return a < b ? Float.isNaN(a + b ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return a < b ? Float.isNaN(a + b ? Float.NaN : a;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return a < a ? Float.isNaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return a < a ? Float.isNaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return a == b ? Float.Exception : b;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return a == b ? Float.Exception : b;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return a == b ? Float.isNaN(a + b : b + min;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return a == b ? Float.isNaN(a + b : b + min;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return a < a ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return a < a ? Float.isNaN(a + b) : b;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return a < b ? Float.isNaN(a + b) : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return a < b ? Float.isNaN(a + b) : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return a < b ? Float.isNaN(a + b : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return a < b ? Float.isNaN(a + b : b + Float.NaN;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return a < a ? Float.isNaN(a + b : b;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return a < a ? Float.isNaN(a + b : b;",
                "identical": false
            }
        ],
        "buggy_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);",
        "fixed_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);"
    },
    "JacksonDatabind-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (ext.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (ext.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_externallyPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (_externallyPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (_externs.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (_externs.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (externs.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (externs.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (_externallyProp = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_externallyProp = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (_anyProp = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_anyProp = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (_externs, ctxt, beanDesc, propName);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (_externs, ctxt, beanDesc, propName);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != _creatorProp);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != _creatorProp);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (externs, ctxt, beanDesc, propName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (externs, ctxt, beanDesc, propName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (ext.handlePropertyValue(buffer, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (ext.handlePropertyValue(buffer, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_contextClassReader.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (_contextClassReader.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (_externs = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (_externs = creator.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, ctxt);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, ctxt);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (_externPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_externPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, beanDesc);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, beanDesc);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (_externs, ctxt, beanDesc);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (_externs, ctxt, beanDesc);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (ext.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (ext.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, bufferCount);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, bufferCount);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_extern = creator.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (_extern = creator.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_extern = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (extern.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (extern.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_contextType.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (_contextType.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (_objectIdReader.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (_objectIdReader.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_beanProperties.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_beanProperties.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (_externallyPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (_externallyPropertyHandler.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (_externs.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (_externs.handlePropertyValue(ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (_externs.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if_ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if_ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (_externallyProp = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (_externallyProp = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer != 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer buffer)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer buffer)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (_anyProp = creator.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_anyProp = creator.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (_extern = creator.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (_extern = creator.handlePropertyValue(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (externs.handlePropertyValue(jp, ctxt, propName, buffer;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer, creatorProp);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer, creatorProp);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (_anyProp = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_anyProp = creator.handlePropertyValue(jp, ctxt, propName, bean);",
                "identical": false
            }
        ],
        "buggy_line": "if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {",
        "fixed_line": "if (ext.handlePropertyValue(p, ctxt, propName, null)) {"
    },
    "Chart-20": {
        "fixes": [
            {
                "k": 1,
                "patch": "super(paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "super(paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "super(paint, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": true
            },
            {
                "k": 4,
                "patch": "super(paint, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": true
            },
            {
                "k": 5,
                "patch": "super(paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "super(paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "super(paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "super(paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "super(paint, stroke, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "super(paint, stroke, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "super(paint, stroke, alpha, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "super(paint, stroke, alpha, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "super(paint, stroke, outlinePaint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "super(paint, stroke, outlinePaint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "super(paint, stroke, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "super(paint, stroke, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "super(paint, stroke, outlinePaint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "super(paint, stroke, outlinePaint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "super(paint, stroke, paint, stroke, stroke, alpha);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "super(paint, stroke, paint, stroke, stroke, alpha);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "super(paint, stroke, alpha, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "super(paint, stroke, alpha, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "super(paint, stroke, alpha, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "super(paint, stroke, alpha, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "super(paint, stroke, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "super(paint, stroke, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "super(paint, stroke, outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "super(paint, stroke, outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "super(paint, stroke, alpha, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "super(paint, stroke, alpha, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "super(paint, stroke, alpha, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "super(paint, stroke, alpha, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "super(paint, stroke, outlinePaint, paint, alpha);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "super(paint, stroke, outlinePaint, paint, alpha);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "super(paint, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "super(paint, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "super(paint, stroke, alpha, alpha, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "super(paint, stroke, alpha, alpha, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "super(value, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "super(value, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "super(paint, alpha, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "super(paint, alpha, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "super(paint, stroke, alpha, alpha);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "super(paint, stroke, alpha, alpha);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "super(value, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "super(value, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "super(paint, stroke, outlinePaint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "super(paint, stroke, outlinePaint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, paint, alpha);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, paint, alpha);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "super(paint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "super(paint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "super(paint, stroke, alpha, paint, alpha);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "super(paint, stroke, alpha, paint, alpha);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "super(paint, stroke, paint, stroke, alpha;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "super(paint, stroke, paint, stroke, alpha;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "super(paint, stroke, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "super(paint, stroke, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "super(paint, stroke, alpha, outlinePaint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "super(paint, stroke, alpha, outlinePaint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "super(paint, stroke, alpha, alpha, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "super(paint, stroke, alpha, alpha, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "super(paint, stroke, outlinePaint, this.paint, alpha);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "super(paint, stroke, outlinePaint, this.paint, alpha);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "super(paint, stroke, alpha, stroke, outlinePaint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "super(paint, stroke, paint, this.paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "super(paint, stroke, paint, this.paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "super(paint, stroke, stroke, alpha);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "super(paint, stroke, stroke, alpha);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "super(paint, stroke,paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "super(paint, stroke,paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "super(paint, stroke, paint, low, stroke, alpha);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "super(paint, stroke, paint, low, stroke, alpha);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "super(paint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "super(paint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "super(paint, stroke, alpha, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "super(paint, stroke, alpha, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "super(paint, stroke, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "super(paint, stroke, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "super(stroke, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "super(stroke, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "super(paint, stroke,paint, alpha);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "super(paint, stroke,paint, alpha);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "super(alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "super(alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "super(paint, stroke, alpha, outlinePaint, stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "super(paint, stroke, alpha, outlinePaint, stroke, outlineStroke, alpha);",
                "identical": false
            }
        ],
        "buggy_line": "super(paint, stroke, paint, stroke, alpha);",
        "fixed_line": "super(paint, stroke, outlinePaint, outlineStroke, alpha);"
    },
    "Gson-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (value < 0 || negative.length == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (value < 0 || negative.length == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (value < 0 || negative != Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (value < 0 || negative != Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (offset == 0 && last == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (offset == 0 && last == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (value == 0 && pattern == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (value == 0 && pattern == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (offset == 0 && first == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (offset == 0 && first == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (value == NUMBER_CHAR && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (value == NUMBER_CHAR && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && token == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && token == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && !value != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && !value != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && token != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i == SHORT_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i == SHORT_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && !value != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && !value != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (value == 0 && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (value == 0 && negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (value == NUMBER_C_value || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (value == NUMBER_C_value || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && try_VALUE) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (value == NUMBER_DIG || negative != Long.MIN_VALUE && try_VALUE) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (last == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (last == NUMBER_CHAR || negative != Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (pos == NUMBER_DIG || negative != Long.MIN_VALUE && value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (value == NUMBER_C_value || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (value == NUMBER_C_value || negative != Long.MIN_VALUE && value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || instant == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (offset == 0 && i == Long.MIN_VALUE || instant == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (value < 0 || negative.length == Long.MIN_VALUE || ivalue != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (value < 0 || negative.length == Long.MIN_VALUE || ivalue != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (value < 0 || negative != Long.MIN_VALUE || ivalue != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (value < 0 || negative != Long.MIN_VALUE || ivalue != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c == NUMBER_DIG || negative != Long.MIN_VALUE && i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (value == NUMBER_Sibling || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (value == NUMBER_Sibling || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i == 0 && peek_CHAR || i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i == 0 && peek_CHAR || i == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && token != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (value == NUMBER_CHAR || negative != Long.MIN_VALUE && token != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (pos == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (pos == NUMBER_CHAR || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (value == NUMBER_MILLIS || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (value == NUMBER_MILLIS || negative != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (last == -1 || negative.length == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (last == -1 || negative.length == Long.MIN_VALUE) {",
                "identical": false
            }
        ],
        "buggy_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {",
        "fixed_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {"
    },
    "Codec-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringUtils.newStringUtf8Data, false;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringUtils.newStringUtf8Data, false;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringUtils.newStringUtf8Data, true;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringUtils.newStringUtf8Data, true;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringUtils.newString(TokenData, false;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringUtils.newString(TokenData, false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringUtils.newString(TokenData, false, false;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringUtils.newString(TokenData, false, false;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringUtils.newString(TokenData, false * binaryData.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringUtils.newString(TokenData, false * binaryData.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false, false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false, false;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringUtils.newString(TokenData, true;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringUtils.newString(TokenData, true;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringUtils.newString(TokenData, true, false);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringUtils.newString(TokenData, true, false);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringUtils.newStringUtf8Data(Token.encodeBase64Data, false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringUtils.newStringUtf8Data(Token.encodeBase64Data, false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, true, false);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, true, false);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringUtils.newString(binaryData, false, false;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringUtils.newString(binaryData, false, false;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringUtils.newStringUtf8Data(this.binaryData, false;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return StringUtils.newStringUtf8Data(this.binaryData, false;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringUtils.newStringUtf8Data(Token.encodeBase64Data, true;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringUtils.newStringUtf8Data(Token.encodeBase64Data, true;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringUtils.newStringUtf8Data, false, false;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return StringUtils.newStringUtf8Data, false, false;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false, false);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false, false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringUtils.newString(\"-Data, false;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringUtils.newString(\"-Data, false;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return StringUtils.newString(TokenData, false * binaryData;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringUtils.newString(TokenData, false * binaryData;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false, false;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false, false;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, true;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, true;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringUtils.newStringUtf8Base64(binaryData, false;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringUtils.newStringUtf8Base64(binaryData, false;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringUtils.newStringUtf8Data(this.base64Data, false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringUtils.newStringUtf8Data(this.base64Data, false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringUtils.newString(TokenData, true, false));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringUtils.newString(TokenData, true, false));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringUtils.newString(\"-\" + binaryData.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringUtils.newString(\"-\" + binaryData.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringUtils.newStringUtf8Data, false * binaryData.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringUtils.newStringUtf8Data, false * binaryData.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringUtils.newString(binaryData, false;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringUtils.newString(binaryData, false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringUtils.newStringUtf8Data(Constants.binaryData, false, false;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringUtils.newStringUtf8Data(Constants.binaryData, false, false;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringUtils.newString(TokenData, false, false);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringUtils.newString(TokenData, false, false);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringUtils.newString(binaryData, true, false);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringUtils.newString(binaryData, true, false);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringUtils.newString(\"-\" + binaryData, false;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringUtils.newString(\"-\" + binaryData, false;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringUtils.newString(\"-\" + binaryData;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringUtils.newString(\"-\" + binaryData;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringUtils.newStringUtf8Base64Data, false;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringUtils.newStringUtf8Base64Data, false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false * binaryData.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringUtils.newStringUtf8Data(binaryData, false * binaryData.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringUtils.newString(TokenData, false);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringUtils.newString(TokenData, false);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringUtils.newString(TokenData, false, true);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringUtils.newString(TokenData, false, true);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringUtils.newString(Token.binaryData, false;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringUtils.newString(Token.binaryData, false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringUtils.newString(Token.binaryData, false, false;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringUtils.newString(Token.binaryData, false, false;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringUtils.newStringUtf8Data(Token.STRING, false);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringUtils.newStringUtf8Data(Token.STRING, false);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringUtils.newStringUtf8Data(Constants.binaryData, false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringUtils.newStringUtf8Data(Constants.binaryData, false;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringUtils.newStringUtf8Data, false * binaryData;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringUtils.newStringUtf8Data, false * binaryData;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringUtils.newString(this.binaryData, false;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringUtils.newString(this.binaryData, false;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringUtils.newStringUtf8Base64(TokenData, false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringUtils.newStringUtf8Base64(TokenData, false;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringUtils.newString(TokenData, true, false;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringUtils.newString(TokenData, true, false;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_NULL, false);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringUtils.newStringUtf8Data(Token.BASE64_VALUE_NULL, false);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringUtils.newString(b64variant, false);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringUtils.newString(b64variant, false);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false, false);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringUtils.newStringUtf8Data(Token.binaryData, false, false);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringUtils.newString(TokenData, false * binaryData);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringUtils.newString(TokenData, false * binaryData);",
                "identical": false
            }
        ],
        "buggy_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
        "fixed_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));"
    },
    "Jsoup-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "accum.append(c);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "accum.append(c);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "accum.append(c;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "accum.append(c;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "accum.append('$');",
                "identical": false
            },
            {
                "k": 6,
                "patch": "accum.append('$');",
                "identical": false
            },
            {
                "k": 7,
                "patch": "accum.append('c;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "accum.append('c;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "accum.append(in;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "accum.append(in;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "accum.append(\",\":) break;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "accum.append(\",\":) break;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "accum.append(\",\").append(escape);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "accum.append(\",\").append(escape);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "accum.append(escape);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "accum.append(escape);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "accum.append(\", 7,Externs.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "accum.append(\", 7,Externs.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "accum.append(\",\").append(c;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "accum.append(\",\").append(c;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "accum.append(cPath;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "accum.append(cPath;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "accum.append(\",\").append(encapsulator;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "accum.append(\",\").append(encapsulator;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "accum.append(\",\").append(encapsulator) break;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "accum.append(\",\").append(encapsulator) break;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "accum.append(\"\\n;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "accum.append(\"\\n;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "accum.append(\", 7,Externs;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "accum.append(\", 7,Externs;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "accum.append(c == '<') break;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "accum.append(c == '<') break;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "accum.append(\",Dom;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "accum.append(\",Dom;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "accum.append(\",\").append(escapeMode;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "accum.append(\",\").append(escapeMode;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "accum.append(\",\").append(in);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "accum.append(\",\").append(in);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "accum.appendWeekc;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "accum.appendWeekc;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "accum.append(\",\").append(opcode;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "accum.append(\",\").append(opcode;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "accum.append(clazz;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "accum.append(clazz;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "accum.append(\".c;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "accum.append(\".c;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "accum.append(cPath.uend;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "accum.append(cPath.uend;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "accum.append(\",\").append(in;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "accum.append(\",\").append(in;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "accum.append('0';",
                "identical": false
            },
            {
                "k": 52,
                "patch": "accum.append('0';",
                "identical": false
            },
            {
                "k": 53,
                "patch": "accum.append(\",md;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "accum.append(\",md;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "accum.append(c.objectMode;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "accum.append(c.objectMode;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "accum.append(cPath.TYPEFIELD_;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "accum.append(cPath.TYPEFIELD_;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "accum.appendintern(c);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "accum.appendintern(c);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "accum.append(cPath.empty;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "accum.append(cPath.empty;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "accum.append(cPath.DONE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "accum.append(cPath.DONE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "accum.append(\",\":: \").append(c;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "accum.append(\",\":: \").append(c;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "accum.append(cPath.canRemove;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "accum.append(cPath.canRemove;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "accum.append(\",\"::\").append(c;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "accum.append(\",\"::\").append(c;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "accum.append('0' <= 0) break;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "accum.append('0' <= 0) break;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "accum.append(\",ERROR;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "accum.append(\",ERROR;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "accum.append(\", 7,Externs.append(c;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "accum.append(\", 7,Externs.append(c;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "accum.append(c == '<.;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "accum.append(c == '<.;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "accum.append(\",md.in;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "accum.append(\",md.in;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "accum.append(c, '<;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "accum.append(c, '<;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "accum.append(\",\").append(inMode;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "accum.append(\",\").append(inMode;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "accum.append(';",
                "identical": false
            },
            {
                "k": 86,
                "patch": "accum.append(';",
                "identical": false
            },
            {
                "k": 87,
                "patch": "accum.append(cPath.u;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "accum.append(cPath.u;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "accum.append(\",\":: \").append(in;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "accum.append(\",\":: \").append(in;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "accum.append(\", 7,Externs.append(c);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "accum.append(\", 7,Externs.append(c);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "accum.append(\",\":: \").append;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "accum.append(\",\":: \").append;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "accum.append(c.intValue;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "accum.append(c.intValue;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "accum.append(cParameters);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "accum.append(cParameters);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "accum.append(\",\").append(empty;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "accum.append(\",\").append(empty;",
                "identical": false
            }
        ],
        "buggy_line": "accum.append(c);",
        "fixed_line": "accum.append(\"&#xa0;\");"
    },
    "JacksonDatabind-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = propName;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = propName;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = propNameNode.getIgnored;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = propNameNode.getIgnored;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELit.getIgnored;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELit.getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELTA;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELTA;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = node.getIgnored;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = node.getIgnored;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = dataShadow.getIgnored;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = dataShadow.getIgnored;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored =content.getIgnored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored =content.getIgnored;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = data;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = data;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = Array.getIgnored;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = Array.getIgnored;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = getProp != ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = getProp != ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PUTEFFECTS;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PUTEFFECTS;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = names.getIgnored;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = names.getIgnored;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = referenceInfo.getIgnored;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = referenceInfo.getIgnored;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_EFFECTS;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_EFFECTS;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_AFTER_EFFECTS;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_AFTER_EFFECTS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = NO_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = NO_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEFINE_TO_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEFINE_TO_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_EFFECTS;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_EFFECTS;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PUTEFFECTS.getIgnored;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_PUTEFFECTS.getIgnored;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PUTEFFECTS;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PUTEFFECTS;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEFINE_TO_DUPPER_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEFINE_TO_DUPPER_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_AFTER_EFFECTS;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_AFTER_EFFECTS;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELIMIT;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DELIMIT;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERIALIZER;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERIALIZER;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = props.getIgnored;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = props.getIgnored;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = parent.getIgnored;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = parent.getIgnored;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_gn;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_gn;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = propNameNode;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = propNameNode;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_EXPECT_TO_DUPPER_VALUE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_EXPECT_TO_DUPPER_VALUE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEFINE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DEFINE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_getIgnored;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_getIgnored;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = context.getIgnored;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = context.getIgnored;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_ fit;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_ fit;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_DUPPER_PROPERTY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DECIMAL;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DECIMAL;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_gn;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_gn;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_ZERO;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_ZERO;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_ON;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_ON;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_NODE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_DUPPER_NODE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_gn;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_gn;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PRINTER;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = NO_PROTOTYPE_MEMBER_DESERVE_TO_DUPPER_PRINTER;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Codec-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new String[] {\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new String[] {\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new String[] { outside, bytes_1});",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new String[] { outside, bytes_1});",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new String[] {fraction, bytes;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new String[] {fraction, bytes;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new String;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new String;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new String[] {Unit, bytes;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new String[] {Unit, bytes;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new String[] { match, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new String[] { match, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new String[] { changes, bytes_1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new String[] { changes, bytes_1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new String[] { outside, bytes_1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new String[] { outside, bytes_1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new String[] { outside, bytes",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new String[] { outside, bytes",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new String[] {Unit, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new String[] {Unit, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new String[] { changes, bytes",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new String[] { changes, bytes",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new String[] { match, bytes.ISO_1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new String[] { match, bytes.ISO_1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new String[] { Frame.ISO, bytes_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new String[] {fun_1, bytes_1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new String[] {fun_1, bytes_1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new String[] {fun_1, bytes_1});",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new String[] {fun_1, bytes_1});",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new String[] {fraction, bytes",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new String[] {fraction, bytes",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new String[] { lineno, bytes_1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new String[] { lineno, bytes_1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new String[] { one, bytes",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new String[] { one, bytes",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new String[] {\");}",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new String[] {\");}",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new String[] { elementType, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new String[] { elementType, bytes.ISO_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new String[] { lineno, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new String[] { lineno, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new String[] {Char, bytes.ISO_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new String[] { elementType, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new String[] { elementType, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new String[] { changes, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new String[] { changes, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new String[] {Not_1, bytes",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new String[] {Not_1, bytes",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new String[] {fraction, bytes_1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new String[] {fraction, bytes_1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new String[] {fraction,bytes.before_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new String[] {fraction,bytes.before_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new String[] { Frame.ISO, bytes_1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new String[] { Frame.ISO, bytes_1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new String[] { changes, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new String[] { changes, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new String[] { one, bytes_1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new String[] { one, bytes_1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new String[] {fraction,bytes.before_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new String[] {fraction,bytes.before_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new String[] { _bytes, bytes_1});",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new String[] { _bytes, bytes_1});",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new String[] { changes, bytes_1});",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new String[] { changes, bytes_1});",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new String[] { match, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new String[] { match, bytes.ISO_1_8859_FLAG;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new String[] { outside, bytes;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new String[] { outside, bytes;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new String[] { elementType, bytes_1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new String[] { elementType, bytes_1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new String[] {fraction,bytes.before_1_8859_ class_1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new String[] {fraction,bytes.before_1_8859_ class_1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new String[] { one, bytes_1});",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new String[] { one, bytes_1});",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new String[] { match, bytes.ISO_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new String[] { match, bytes.ISO_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new String[] { null, bytes_1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new String[] { null, bytes_1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new String[] {fun_1, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new String[] {fun_1, bytes_1_8859_ inject_1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new String[] { heads, bytes",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new String[] { heads, bytes",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new String[] {fun_1, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new String[] {fun_1, bytes_1_8859_TO_1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new String[] {fun_1, bytes_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new String[] {fun_1, bytes_1_8859_FACTOR;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new String[] { Charsets_FLAG, bytes_1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new String[] { er_1, bytes_1});",
                "identical": false
            }
        ],
        "buggy_line": "return new String(bytes, Charsets.ISO_8859_1);",
        "fixed_line": "return newString(bytes, Charsets.ISO_8859_1);"
    },
    "JacksonDatabind-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (rawType == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (rawType == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || raw == Object.class) return Object.class;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == Object.class) return Object.class;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (class == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (rawraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (rawraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || raw.class == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || raw.class == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || raw == short.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || raw == short.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class ||Range == Object.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class ||Range == Object.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || raw == Object.class) return Object.class == Object.class;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class) return Object.class == Object.class;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == Object.class) Kit.class;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || raw == Object.class) Kit.class;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class || case == Object.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class || case == Object.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || out == Object.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || out == Object.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw ==Object.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw ==Object.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class ||Raw == Object.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class ||Raw == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == float.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == float.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || with == Object.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || with == Object.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || raw == byte.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || raw == byte.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class)msg == Object.class;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class)msg == Object.class;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || cls == Object.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || cls == Object.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || _raw == Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || _raw == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || raw == Object.class) { // p't be Object",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == Object.class) { // p't be Object",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Stringraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Stringraw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || sat == Object.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || sat == Object.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] = Object.class",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] = Object.class",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || Class == Object.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || Class == Object.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || length == Object.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || length == Object.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw != String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw != String.class && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class ||matched == Object.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class ||matched == Object.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == arguments.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == arguments.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class ||Error == Object.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class ||Error == Object.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || fixed == Object.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || fixed == Object.class) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class ||Local == Object.class) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class ||Local == Object.class) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw ==Style.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || raw ==Style.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || raw == Std.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || raw == Std.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) { // p's not store 'raw' || raw.class",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // p's not store 'raw' || raw.class",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || false == Object.class) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || false == Object.class) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class ||Weight == Object.class) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class ||Weight == Object.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw'",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw'",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || String == Object.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || String == Object.class) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == long.class) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || raw == long.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || b == Object.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || b == Object.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' || raw.class",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' || raw.class",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || \"0 == Object.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || \"0 == Object.class) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] be Object",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] be Object",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] skip",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || raw == Object.class) { // as per [JACKSON-314] skip",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "JacksonCore-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "char c = input.charAt;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "char c = input.charAt;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "char c = input_stream.charAt;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "char c = input_stream.charAt;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "char c = text.charAt(i++;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "char c = text.charAt(i++;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "char c = input;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "char c = input;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "char c = str.charAt;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "char c = str.charAt;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "char c = text.charAt(i++] - '0')];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "char c = text.charAt(i++] - '0')];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "char c = text.charAt(i++);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "char c = text.charAt(i++);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "char c = input.charAt(0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "char c = input.charAt(0);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "char c = value.charAt;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "char c = value.charAt;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "char c = buf.charAt;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "char c = buf.charAt;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "char c = space.charAt;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "char c = space.charAt;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "char c = text.charAt(i++];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "char c = text.charAt(i++];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "char c = text.charAt(i++] - '0';",
                "identical": false
            },
            {
                "k": 26,
                "patch": "char c = text.charAt(i++] - '0';",
                "identical": false
            },
            {
                "k": 27,
                "patch": "char c = text.charAt(i++] - '0');",
                "identical": false
            },
            {
                "k": 28,
                "patch": "char c = text.charAt(i++] - '0');",
                "identical": false
            },
            {
                "k": 29,
                "patch": "char c = input.charAt(0);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "char c = input.charAt(0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "char c = text.charAt(i++++i++;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "char c = text.charAt(i++++i++;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "char c = inputLocals.charAt;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "char c = inputLocals.charAt;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "char c = part.charAt;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "char c = part.charAt;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "char c = LE.charAt;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "char c = LE.charAt;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "char c = text.charAt(i++i++;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "char c = text.charAt(i++i++;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "char c = text.charAt(i++] - '0') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "char c = text.charAt(i++] - '0') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "char c = input.charAt(i++;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "char c = input.charAt(i++;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "char c = text.charAt(i++count++];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "char c = text.charAt(i++count++];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "char c = text.charAt(i++++;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "char c = text.charAt(i++++;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "char c = text.charAt(i++] - '0') * 4;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "char c = text.charAt(i++] - '0') * 4;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "char c = value.charAt(i++;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "char c = value.charAt(i++;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "char c = text.charAt(i++];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "char c = text.charAt(i++];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "char c = input.charAt -= 2 * i;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "char c = input.charAt -= 2 * i;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "char c = part.charAt(i++;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "char c = part.charAt(i++;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "char c = text.charAt(i++count++];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "char c = text.charAt(i++count++];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "char c = str.charAt(i++;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "char c = str.charAt(i++;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "char c = str.charAt(0);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "char c = str.charAt(0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "char c = value.charAt(i++];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "char c = value.charAt(i++];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "char c = but.charAt;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "char c = but.charAt;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "char c = text.charAt(i++++] - '0')];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "char c = text.charAt(i++++] - '0')];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "char c = text.charAt(i++++i++];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "char c = text.charAt(i++++i++];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "char c = text.charAt(i++count++);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "char c = text.charAt(i++count++);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "char c = text.charAt(i++] - '0') % 4;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "char c = text.charAt(i++] - '0') % 4;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "char c = buffer.charAt;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "char c = buffer.charAt;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "char c = inputArray.charAt;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "char c = inputArray.charAt;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "char c = text.charAt(i++] - i;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "char c = text.charAt(i++] - i;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "char c = text.charAt(i++++i++] - '0')];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "char c = text.charAt(i++++i++] - '0')];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "char c = text.charAt(i++ HashMap.length++i++];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "char c = text.charAt(i++ HashMap.length++i++];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "char c = text.charAt(i++ < len;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "char c = text.charAt(i++ < len;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "char c = text.charAt(i++] - '0') {}",
                "identical": false
            },
            {
                "k": 90,
                "patch": "char c = text.charAt(i++] - '0') {}",
                "identical": false
            },
            {
                "k": 91,
                "patch": "char c = text.charAt(i++] - '0') % len;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "char c = text.charAt(i++] - '0') % len;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "char c = buf.charAt(0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "char c = buf.charAt(0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "char c = str.charAt(i++];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "char c = str.charAt(i++];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "char c = text.charAt(i++++i++] - '0');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "char c = text.charAt(i++++i++] - '0');",
                "identical": false
            },
            {
                "k": 99,
                "patch": "char c = this.str.charAt;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "char c = this.str.charAt;",
                "identical": false
            }
        ],
        "buggy_line": "char c = str.charAt(i++);",
        "fixed_line": "char c = str.charAt(i);"
    },
    "Codec-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4f);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4f);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "25,VEN(0, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "25,VEN(0, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "25, = -1, 0, 4);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "25, = -1, 0, 4);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "25, = -1, 0, encodedData.length - 1, 4);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "25, = -1, 0, encodedData.length - 1, 4);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, -1, 4f);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, -1, 4f);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "25, = -1, 0, 5);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "25, = -1, 0, 5);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "25,Moments(0, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "25,Moments(0, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "25, = -1, 0, values.length - 1, 4);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "25, = -1, 0, values.length - 1, 4);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "25,VEN(0, 0, 0, 5);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "25,VEN(0, 0, 0, 5);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "25, = -1, 0, encodedData.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "25, = -1, 0, encodedData.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "25,Moments(0, 0, 0, 5);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "25,Moments(0, 0, 0, 5);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "25, = -1, 0, encodedData.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "25, = -1, 0, encodedData.length - 1, 4) % 4;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "25, = -1, 0, values.length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "25, = -1, 0, values.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4f);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4f);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "25, = -1, 0, values.length - 1, 4, 4);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "25, = -1, 0, values.length - 1, 4, 4);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "25, = -1, 1, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "25, = -1, 1, 0, 0, -1, 9);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "25, = -1, 0, values.length - 4, 4f;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "25, = -1, 0, values.length - 4, 4f;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 2f);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 2f);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "25, = -1, 0,Divisor - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "25, = -1, 0,Divisor - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "25, = -1, 0, values.length - 1, 9);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "25, = -1, 0, values.length - 1, 9);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4)];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4)];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4) % 2];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "25,VEN(0, 0, 0, encodedType.length - 1, 4) % 2];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, -1, msg);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, -1, msg);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4)f);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4)f);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "25,VEN(0, 0, 0, encodedData.length, 4);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "25,VEN(0, 0, 0, encodedData.length, 4);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1 ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1 ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "25,VEN(0, 0, 0, encodedData.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "25,VEN(0, 0, 0, encodedData.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "25, = -1, 0, values.length - 3;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "25, = -1, 0, values.length - 3;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1Type;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1Type;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "25,parameterTypes(3 = -1, 8;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "25,parameterTypes(3 = -1, 8;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "25, = -1, 0, values.length - 4 4f;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "25, = -1, 0, values.length - 4 4f;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4f;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4f;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, \" zz\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, \" zz\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "25,VEN(0, 0, 0, -1, 4);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "25,VEN(0, 0, 0, -1, 4);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "25, = -1, 0, encodedData.length - 1, 48, \"oved\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "25, = -1, 0, encodedData.length - 1, 48, \"oved\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "25, = -1, 0, values.length - 4, 4 4f;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "25, = -1, 0, values.length - 4, 4 4f;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 48, 2) + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "25, = -1, 0, lower - -1, 0, 4);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "25, = -1, 0, lower - -1, 0, 4);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 2];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "25,VEN(0, 0, 0, encodedData.length - 1, 4) % 2];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, 0f);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, 0f);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, 4f);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, 4f);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, -1, 4f;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "25,parameterTypes(3 = -1, 1, 0, 0, -1, 4f;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "25, = -1, 0, values.length - 4f;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "25, = -1, 0, values.length - 4f;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "25, = -1, 0, values.length);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "25, = -1, 0, values.length);",
                "identical": false
            }
        ],
        "buggy_line": "25, 26, 27, 28, 29, 30, 31, 32,",
        "fixed_line": "25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V"
    },
    "Closure-52": {
        "fixes": [
            {
                "k": 1,
                "patch": "return len - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return len - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return c > 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return c > 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.index > 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return this.index > 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new char[index - 1];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new char[index - 1];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return offset > 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return offset > 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return start > 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return start > 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return index % 2 == 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return index % 2 == 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new charno > 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new charno > 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return k + 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return k + 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return s > 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return s > 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return char > 0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return char > 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return c == 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return c == 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return len > 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return len > 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return charno > 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return charno > 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return num % 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return num % 0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return len == 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return len == 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return k > 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return k > 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return end - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return end - 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return amount > 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return amount > 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return len - str;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return len - str;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return this.index - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.index - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return amount - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return amount - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return i > 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return i > 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new char[c - 1];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new char[c - 1];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return index % 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return index % 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return lastNumber > 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return lastNumber > 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return 10;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return 10;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return index % 2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return index % 2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return limit > 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return limit > 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return js > 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return js > 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return i != 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return i != 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return ch - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return ch - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return current - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return current - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return VOID;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return VOID;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new char[c - '0')];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new char[c - '0')];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new charno % 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new charno % 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new char[len - 1];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new char[len - 1];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return now - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return now - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return size > 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return size > 0;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return i == 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return i == 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return back > 0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return back > 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return c == 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return c == 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return num == 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return num == 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return buffer == 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return buffer == 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new charno + 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new charno + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new char[128 - 1];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new char[128 - 1];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return instance > 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return instance > 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return length > 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return length > 0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return types > 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return types > 0;",
                "identical": false
            }
        ],
        "buggy_line": "return len > 0;",
        "fixed_line": "return len > 0 && s.charAt(0) != '0';"
    },
    "JacksonCore-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i <= maxCode) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i <= maxCode) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (i < maxCode) {",
                "identical": true
            },
            {
                "k": 4,
                "patch": "if (i < maxCode) {",
                "identical": true
            },
            {
                "k": 5,
                "patch": "if (i <= maxCode) { // yes, but do we have room for output",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i <= maxCode) { // yes, but do we have room for output",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i <= maxCode) break;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i <= maxCode) break;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i <= maxCode) { // yes, but do we have room for output?",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i <= maxCode) { // yes, but do we have room for output?",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i <= maxCode) { // yes, match!",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i <= maxCode) { // yes, match!",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i <= maxCode) { // yes, but do implicit re-parse",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i <= maxCode) { // yes, but do implicit re-parse",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i <= maxCode) { // yes, but do a number",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i <= maxCode) { // yes, but do a number",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i <= maxCode && i < maxCode) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i <= maxCode && i < maxCode) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i <= maxCode) { // yes, let's do implicit re-parse",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i <= maxCode) { // yes, let's do implicit re-parse",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i <= maxCode) { // yes, but do we have room for now",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i <= maxCode) { // yes, but do we have room for now",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i <= maxCode) { // if it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i <= maxCode) { // if it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (i <= maxCode) { // yes, match",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i <= maxCode) { // yes, match",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i == maxCode) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i == maxCode) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i <= maxCode) { // yes, but do we't really need 6",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i <= maxCode) { // yes, but do we't really need 6",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify it't really need 6",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify it't really need 6",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i <= maxCode && i != 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i <= maxCode && i != 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i <= maxCode) { // yes, but do we't really need the end?",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i <= maxCode) { // yes, but do we't really need the end?",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i <= maxCode) { // yes, but do we have room forint i; i",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i <= maxCode) { // yes, but do we have room forint i; i",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer, i; i",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer, i; i",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer[i];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer[i];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer; i",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputBuffer; i",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputPtr",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i <= maxCode) { // yes, but do we have room for outputPtr",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify it't really need 6 bytes",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify it't really need 6 bytes",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i <= maxCode) { // yes, but do if it't really need to do implicit re-parse",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i <= maxCode) { // yes, but do if it't really need to do implicit re-parse",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify it't really modify",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify it't really modify",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i <= maxCode) { // reached the end, fair and square?",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i <= maxCode) { // reached the end, fair and square?",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next; i",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next; i",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i <= maxCode) { // yes, but do we have room for impls; i",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i <= maxCode) { // yes, but do we have room for impls; i",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i <= maxCode) { // yes, match...",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i <= maxCode) { // yes, match...",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i <= maxCode) { // yes, but do a non-parse",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i <= maxCode) { // yes, but do a non-parse",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i <= maxCode) { // yes, but do we have room for full triplets",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i <= maxCode) { // yes, but do we have room for full triplets",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i <= maxCode) { // yes, but do we have room for next",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i <= maxCode) { // yes, but do a non-input",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i <= maxCode) { // yes, but do a non-input",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i <= maxCode) { // yes, fraction",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i <= maxCode) { // yes, fraction",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify it't really need 6;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i <= maxCode) { // yes, but do we't really modify it't really need 6;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i <= maxCode) { // yes, but do we have room the end?",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i <= maxCode) { // yes, but do we have room the end?",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i <= maxCode) { // yes, but do if it't really need 6",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i <= maxCode) { // yes, but do if it't really need 6",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i <= maxCode) { // yes, but do we't really need 6 bytes",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i <= maxCode) { // yes, but do we't really need 6 bytes",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i < maxCode) { // identifier, and not a number",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (i < maxCode) { // identifier, and not a number",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i <= maxCode) { // yes, but do we have room for n-int i; i",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i <= maxCode) { // yes, but do we have room for n-int i; i",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i <= maxCode) { // yes, but do we't really need a number",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i <= maxCode) { // yes, but do we't really need a number",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i <= maxCode) { // yes, but do not a number",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i <= maxCode) { // yes, but do not a number",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i <= maxCode) { // yes,buffer[_inputPtr++]",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (i <= maxCode) { // yes,buffer[_inputPtr++]",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i <= maxCode) { // yes, but do we have room for 'raw't really modify; i",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i <= maxCode) { // yes, but do we have room for 'raw't really modify; i",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i <= maxCode) { // yes, but do we have room for full",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (i <= maxCode) { // yes, but do we have room for full",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i <= maxCode) { // yes,buffer[_inputPtr",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i <= maxCode) { // yes,buffer[_inputPtr",
                "identical": false
            }
        ],
        "buggy_line": "if (i <= maxCode) {",
        "fixed_line": "if (i < maxCode) {"
    },
    "Codec-3": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (index == 0 && contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (index == 0 && contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (index == 0 && charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (index == 0 && charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (index == 0 && contains(value, index + 1, 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (index == 0 && contains(value, index + 1, 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (index == 0 && !contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (index == 0 && !contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (index == value.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (index == value.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\")) {",
                "identical": true
            },
            {
                "k": 16,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\")) {",
                "identical": true
            },
            {
                "k": 17,
                "patch": "} else if (index == 0 && index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (index == 0 && index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (index == 0 && local.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (index == 0 && local.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { //value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { //value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (index == 0 &&contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (index == 0 &&contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do a, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do a, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // correction, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // correction, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (index == WHOLE_COLLECTION, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (index == WHOLE_COLLECTION, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (index == 1 && contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (index == 1 && contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // Michael",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // Michael",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // MJACKSON-number, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // MJACKSON-number, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (index == value.length() - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (index == value.length() - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (index == 0 && position + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (index == 0 && position + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (index == 0 && name.charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (index == 0 && name.charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (index == 0 &&sign(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (index == 0 &&sign(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // \"IER\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // \"IER\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do we have name, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do we have name, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do \"IER\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do \"IER\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do not, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can do not, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can't be enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can't be enough room, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else ifBranch.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else ifBranch.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (index == 0 && chunk, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (index == 0 && chunk, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can't, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // can't, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // MJACKSON-314, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // MJACKSON-314, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (contains(value, index + 1, 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (contains(value, index + 1, 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // very \"IER\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // very \"IER\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (contains(value, index + 1, 4, \"I\", \"IER\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (contains(value, index + 1, 4, \"I\", \"IER\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (Feature.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (Feature.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else ifcontains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else ifcontains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (charAt(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index \"IER\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index \"IER\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // correction, index - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // correction, index - 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (index == 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (index == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // checks, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 2;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // enough room, index + 2;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // correction, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { // correction, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { //value, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) { //value, index + 1, 4, \"AGGI\", \"OGGI\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (contains(value, index + 1, 4, \"IER\")) {",
        "fixed_line": "} else if (contains(value, index + 1, 3, \"IER\")) {"
    },
    "Lang-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOUR;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOUR;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) != cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) != cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal1.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal1.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal_HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal_HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && cal2.get(cal);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getCalendar.HOUR;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getCalendar.HOUR;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_HOUR;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_HOUR;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(Calendar.HOUR_OF_HOUR);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(Calendar.HOUR_OF_HOUR);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOUR;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOUR;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal)];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal)];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calculated);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calculated);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_PER_HOUR;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_PER_HOUR;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calDeclared);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calDeclared);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal2.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal2.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY = cal2.get(cal1 + cal1.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY = cal2.get(cal1 + cal1.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal );",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal );",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY = cal2.get(cal1 + cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY = cal2.get(cal1 + cal2.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOURS;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_HOURS;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY = cal2.get(cal1 + cal2.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY = cal2.get(cal1 + cal2.getCalendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_IN_DAY;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_IN_DAY;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getCalendar.HOUR_PER_DAY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getCalendar.HOUR_PER_DAY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_IN_DAY;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_IN_DAY;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal1) != cal2.HOUR_OF_HOUR_DAY;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal1.getCalendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cal1.getCalendar.HOUR_OF_DAY = cal2.get(cal1 + cal1.getCalendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cal1.getCalendar.HOUR_Calendar.HOUR_OF_DAY && cal2.get(cal) != cal2.HOUR_OF_DAY) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getCalendar.HOUR_PER;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) + cal2.getCalendar.HOUR_PER;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calm);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calm);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calculated);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cal1.getCalendar.HOUR_OF_DAY && cal2.get(calculated);",
                "identical": false
            }
        ],
        "buggy_line": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&",
        "fixed_line": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&"
    },
    "Mockito-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "primitiveValues.put(primitive.class, 0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "primitiveValues.put(primitive.class, 0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "primitiveValues.put(primitive.class,primitiveValues, 0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "primitiveValues.put(primitive.class,primitiveValues, 0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "primitiveValues.put(primitive, 0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "primitiveValues.put(primitive, 0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "primitiveValues.put(primitive.class, primitiveValues, 0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "primitiveValues.put(primitive.class, primitiveValues, 0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "primitiveValues.put(primitive.class, am)[0];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "primitiveValues.put(primitive.class, am)[0];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "primitiveValues.put(primitive_class, 0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "primitiveValues.put(primitive_class, 0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "primitiveValues.put(primitive.class,primitive.class, 0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "primitiveValues.put(primitive.class,primitive.class, 0);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "primitiveValues.put(primitive.class, append, primitiveValues);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "primitiveValues.put(primitive.class, append, primitiveValues);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "primitiveValues.put(primitive.class,STRING);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "primitiveValues.put(primitive.class,STRING);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "primitiveValues.put(primitive.class, ruleValues, iValues);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "primitiveValues.put(primitive.class, ruleValues, iValues);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "primitiveValues.put(primitive.class, Constants.class, primitiveValues);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "primitiveValues.put(primitive.class, Constants.class, primitiveValues);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "primitiveValues.put(primitive_class,primitive.class, 0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "primitiveValues.put(primitive_class,primitive.class, 0);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "primitiveValues.put(primitive.class,primitiveValues);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "primitiveValues.put(primitive.class,primitiveValues);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "primitiveValues.put(primitive.class,toValues, value);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "primitiveValues.put(primitive.class,toValues, value);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "primitiveValues.put(primitive.class,primitiveValues)[0];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "primitiveValues.put(primitive.class,primitiveValues)[0];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "primitiveValues.put(primitive.class,primitiveValues, map);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "primitiveValues.put(primitive.class,primitiveValues, map);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "primitiveValues.put(primitive.class, printer);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "primitiveValues.put(primitive.class, printer);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "primitiveValues.put(primitive.class, throwsValues, value);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "primitiveValues.put(primitive.class, throwsValues, value);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "primitiveValues.put(primitive.class, value);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "primitiveValues.put(primitive.class, value);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_ON_TYPE, primitiveValues);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_ON_TYPE, primitiveValues);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "primitiveValues.put(primitive.class, height, primitiveValues);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "primitiveValues.put(primitive.class, height, primitiveValues);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "primitiveValues.put(primitive.class, hm, value);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "primitiveValues.put(primitive.class, hm, value);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "primitiveValues.put(primitive.class, childValues, value);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "primitiveValues.put(primitive.class, childValues, value);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "primitiveValues.put(primitive.class,LeastTypes, 0);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "primitiveValues.put(primitive.class,LeastTypes, 0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "primitiveValues.put(primitive.class,primitive_TYPE, 0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "primitiveValues.put(primitive.class,primitive_TYPE, 0);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "primitiveValues.put(primitive.class, primitiveValues)[0];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "primitiveValues.put(primitive.class, primitiveValues)[0];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "primitiveValues.put(primitive.class,OTEDValues, 0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "primitiveValues.put(primitive.class,OTEDValues, 0);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "primitiveValues.put(primitive.class, map);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "primitiveValues.put(primitive.class, map);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "primitiveValues.put(primitive.class,OTEDValues);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "primitiveValues.put(primitive.class,OTEDValues);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "primitiveValues.put(primitive.class, Constants.class, primitiveValues)[0];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "primitiveValues.put(primitive.class, Constants.class, primitiveValues)[0];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "primitiveValues.put(primitive.class, primitiveValues, value);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "primitiveValues.put(primitive.class, primitiveValues, value);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "primitiveValues.put(primitive.class, QName.class, value);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "primitiveValues.put(primitive.class, QName.class, value);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "primitiveValues.put(primitive.class,free.class, 0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "primitiveValues.put(primitive.class,free.class, 0);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "primitiveValues.put(primitive.class, ruleValues, iValues.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "primitiveValues.put(primitive.class, ruleValues, iValues.length);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "primitiveValues.put(primitive.class, height)[0];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "primitiveValues.put(primitive.class, height)[0];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "primitiveValues.put(primitive.class, Boolean.TYPEFIELD_NAME, primitiveValues);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "primitiveValues.put(primitive.class, Boolean.TYPEFIELD_NAME, primitiveValues);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "primitiveValues.put(primitive.class,BINARYValues);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "primitiveValues.put(primitive.class,BINARYValues);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_TYPE, primitiveValues);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "primitiveValues.put(primitive.class, APPROTOTYPE_TYPE, primitiveValues);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "primitiveValues.put(primitive.class,primitiveValues, value);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "primitiveValues.put(primitive.class,primitiveValues, value);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "primitiveValues.put(primitive.class,STRING)[0];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "primitiveValues.put(primitive.class,STRING)[0];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "primitiveValues.put(primitive.class,BINARYValues, primitiveValues);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "primitiveValues.put(primitive.class,BINARYValues, primitiveValues);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "primitiveValues.put(primitive.class, NEW_TYPE, primitiveValues);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "primitiveValues.put(primitive.class, NEW_TYPE, primitiveValues);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "primitiveValues.put(primitive.class,9Values, value);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "primitiveValues.put(primitive.class,9Values, value);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "primitiveValues.put(primitive.class,ORYValues);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "primitiveValues.put(primitive.class,ORYValues);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "primitiveValues.put(primitive.class,primitive_TYPE, primitiveValues);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "primitiveValues.put(primitive.class,primitive_TYPE, primitiveValues);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "primitiveValues.put(primitive.class,primitiveValues, primitiveValues);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "primitiveValues.put(primitive.class,primitiveValues, primitiveValues);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "primitiveValues.put(primitive.class, allValues, value);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "primitiveValues.put(primitive.class, allValues, value);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "primitiveValues.put(primitive.class, ruleValues, iValues.class);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "primitiveValues.put(primitive.class, ruleValues, iValues.class);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "primitiveValues.put(primitive.class, primitiveValues);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "primitiveValues.put(primitive.class, primitiveValues);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "primitiveValues.put(primitive.class,free.class)[0];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "primitiveValues.put(primitive.class,free.class)[0];",
                "identical": false
            }
        ],
        "buggy_line": "primitiveValues.put(double.class, 0);",
        "fixed_line": "primitiveValues.put(double.class, 0D);"
    },
    "Math-80": {
        "fixes": [
            {
                "k": 1,
                "patch": "int j = k * 4;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int j = k * 4;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int j = weight * 4;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int j = weight * 4;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int j = k * 3;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int j = k * 3;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int j = 1 - n;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int j = 1 - n;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int j = array.length - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int j = array.length - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int j = k * 2 - 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int j = k * 2 - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int j = weight[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int j = weight[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int j = k - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int j = k - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int j = weight[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int j = weight[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int j = weight[n - 1 + i - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int j = weight[n - 1 + i - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int j = bbSize - k * 4;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int j = bbSize - k * 4;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int j = weight[n - 1 + k * n - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int j = weight[n - 1 + k * n - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int j = 1 - n * 4;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int j = 1 - n * 4;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int j = k / 4;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int j = k / 4;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int j = k * n - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int j = k * n - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int j = n / 4;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int j = n / 4;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int j = weight[n - 1];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int j = weight[n - 1];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int j = (k * 4 - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int j = (k * 4 - 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int j = weight[n - 1 + 1] * n);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int j = weight[n - 1 + 1] * n);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int j = n / 3;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int j = n / 3;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int j = bbits * n - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int j = bbits * n - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int j = weight[n - 1 + j - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int j = weight[n - 1 + j - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int j =args[n - 1 + k * n - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int j =args[n - 1 + k * n - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int j = weight[n - 1 + 2 * n;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int j = weight[n - 1 + 2 * n;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int j =args[n - 1];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int j =args[n - 1];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int j =args[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int j =args[n - 1 + k * n;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int j = weight[n - 1][j] * n;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int j = weight[n - 1][j] * n;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int j =end - start + 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int j =end - start + 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int j = weight / 4;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int j = weight / 4;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int j = bbits * i - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int j = bbits * i - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int j = k >> 4;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int j = k >> 4;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int j =args[n - 1 + i - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int j =args[n - 1 + i - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int j = bbSize - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int j = bbSize - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int j =args[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int j =args[n - 1 + 1] * n;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int j = weight[n - 1 + 1] * n - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int j = weight[n - 1 + 1] * n - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int j = weight[n - 1 + k * n);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int j = weight[n - 1 + k * n);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int j = weight[n - 1 + 2 * n - 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int j = weight[n - 1 + 2 * n - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int j = bbits.length - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int j = bbits.length - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int j =args[n - k * 2 - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int j =args[n - k * 2 - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int j = k * 4 - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int j = k * 4 - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int j =args[n - 1 + j - 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int j =args[n - 1 + j - 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int j = weight[n - 1 + 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int j = weight[n - 1 + 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int j = weight[n - 1 - k * n;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int j = weight[n - 1 - k * n;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int j = supported * j - 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int j = supported * j - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int j = weight[n - 1 + k * n -1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int j = weight[n - 1 + k * n -1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int j = weight[n - 1 + 1] * v;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int j = weight[n - 1 + 1] * v;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int j = weight[n - 1 + k * nDev;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int j = weight[n - 1 + k * nDev;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int j = weight[n - 1 + len - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int j = weight[n - 1 + len - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int j = weight[n - 1 + 1] * nDev;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int j = weight[n - 1 + 1] * nDev;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int j =args[n - 1 + 2 * n - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int j =args[n - 1 + 2 * n - 1;",
                "identical": false
            }
        ],
        "buggy_line": "int j = 4 * n - 1;",
        "fixed_line": "int j = 4 * (n - 1);"
    },
    "Math-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "return iterator;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return iterator;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return iterator.iterator;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return iterator.iterator;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return iterator.iterator();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return iterator.iterator();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return chromos.iterator();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return chromos.iterator();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this. chromos.iterator;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this. chromos.iterator;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return chromos.iterator;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return chromos.iterator;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "returnizesos.iterator();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "returnizesos.iterator();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this. chromos.iterator();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this. chromos.iterator();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return runningos.iterator();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return runningos.iterator();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "returnizesos.iterator;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "returnizesos.iterator;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return ZipEntry.iterator;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return ZipEntry.iterator;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "returnvoos.iterator();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returnvoos.iterator();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return beforeos.iterator();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return beforeos.iterator();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return\ud855\udf71os.iterator;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return\ud855\udf71os.iterator;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return friendsos.iterator();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return friendsos.iterator();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "returnitingos.iterator;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "returnitingos.iterator;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "returnMINos.iterator();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "returnMINos.iterator();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "returnintroos.iterator;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "returnintroos.iterator;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return getConfigos.iterator;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return getConfigos.iterator;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return Navigableos.iterator();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return Navigableos.iterator();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return mPattern.iterator;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return mPattern.iterator;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "returnPRECos.iterator;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "returnPRECos.iterator;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return bisos.iterator();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return bisos.iterator();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return\u8578os.iterator();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return\u8578os.iterator();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return\ud855\udf71os.iterator();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return\ud855\udf71os.iterator();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return friendsos.iterator;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return friendsos.iterator;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return leavingos.iterator;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return leavingos.iterator;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return<?.iterator;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return<?.iterator;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return beforeos.iterator;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return beforeos.iterator;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return center.iterator;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return center.iterator;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "returnEaros.iterator();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "returnEaros.iterator();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return getArgos.iterator();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return getArgos.iterator();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return iterator.iterator2;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return iterator.iterator2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this.\u2e4fos.iterator;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this.\u2e4fos.iterator;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this.imenos.iterator();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this.imenos.iterator();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this. Principalos.iterator;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this. Principalos.iterator;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "returnEaros.iterator;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "returnEaros.iterator;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "returnitingos.iterator();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "returnitingos.iterator();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this.imenos.iterator;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this.imenos.iterator;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.\u5197os.iterator();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this.\u5197os.iterator();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return runningos.iterator;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return runningos.iterator;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return getArgos.iterator;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return getArgos.iterator;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this.\u745eos.iterator;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this.\u745eos.iterator;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return leavingos.iterator();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return leavingos.iterator();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this.\u2c66os.iterator();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.\u2c66os.iterator();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return items.iterator;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return items.iterator;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "returnMINos.iterator;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returnMINos.iterator;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this.ActionPerformedos.iterator;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this.ActionPerformedos.iterator;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "returnvoos.iterator;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "returnvoos.iterator;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return this.CharFieldos.iterator;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return this.CharFieldos.iterator;",
                "identical": false
            }
        ],
        "buggy_line": "return chromosomes.iterator();",
        "fixed_line": "return getChromosomes().iterator();"
    },
    "Math-69": {
        "fixes": [
            {
                "k": 1,
                "patch": "out[i][j] -= 2d * t;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "out[i][j] -= 2d * t;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "out[i][j] -= 2 * t;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "out[i][j] -= 2 * t;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "out[i][j] -= 2 * r;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "out[i][j] -= 2 * r;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "out[i][j] -= 2d * r;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "out[i][j] -= 2d * r;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "out[i][j] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "out[i][j] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "out[i][j] = t * (1 - t;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "out[i][j] = t * (1 - t;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "out[i][0] = 2d * r;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "out[i][0] = 2d * r;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "out[i][j] = 2d * t;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "out[i][j] = 2d * t;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "out[i][j] -= 2d * t - r;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "out[i][j] -= 2d * t - r;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "out[i][j] = 2d * r;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "out[i][j] = 2d * r;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "out[i][j] -= 2d * r, t;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "out[i][j] -= 2d * r, t;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "out[i][0] = 2d * t - r;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "out[i][0] = 2d * t - r;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "out[i][0] = 2 * r;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "out[i][0] = 2 * r;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "out[i][j] -= 2 * r, t;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "out[i][j] -= 2 * r, t;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "out[i][j] -= t * (1 - r;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "out[i][j] -= t * (1 - r;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "out[i][j] -= 2 * t - r;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "out[i][j] -= 2 * t - r;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "out[i] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "out[i] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "out[i][j] = t * (1 - t[i-1];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "out[i][j] = t * (1 - t[i-1];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "out[i][j] = 2d * t - r;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "out[i][j] = 2d * t - r;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "out[i][j] = t * w;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "out[i][j] = t * w;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "out[i][j] = t * w - r;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "out[i][j] = t * w - r;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "out[i][j] = t * 60 * t;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "out[i][j] = t * 60 * t;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "out[i][j] = t * r;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "out[i][j] = t * r;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "out[i][j] = 2d * r, t;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "out[i][j] = 2d * r, t;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "out[i][j] -= 2d * coefficients[i][];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "out[i][j] -= 2d * coefficients[i][];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "out[i][j] -= i * t - r;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "out[i][j] -= i * t - r;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "out[i][j] = t * w - t;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "out[i][j] = t * w - t;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "out[i][j] -= j * t;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "out[i][j] -= j * t;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "out[i][0] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "out[i][0] = t * (1 - r;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "out[i][0] = 2d * r, t;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "out[i][0] = 2d * r, t;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "out[i][j] = t * h;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "out[i][j] = t * h;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "out[i][j] = t * depth;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "out[i][j] = t * depth;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "out[i][j] = t * (1 - t[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "out[i][j] = t * (1 - t[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "out[i][j] -= i * t[n-1];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "out[i][j] -= i * t[n-1];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "out[i][0] = 2d * r, t - r;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "out[i][0] = 2d * r, t - r;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "out[i][j] -= 2 * t[i-1];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "out[i][j] -= 2 * t[i-1];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "out[i][0] = 2d * t;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "out[i][0] = 2d * t;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "out[i][0] = 2d * r * t;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "out[i][0] = 2d * r * t;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "out[i][j] = t * (1 - t[n];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "out[i][j] = t * (1 - t[n];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "out[i][j] -= 2d * t[i][Buff;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "out[i][j] -= 2d * t[i][Buff;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "out[i][0] = 2d * r - t;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "out[i][0] = 2d * r - t;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "out[i][j] -= i * t;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "out[i][j] -= i * t;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "out[i][j] -= i * t[n];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "out[i][j] -= i * t[n];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "out[i][j] -= 2d * t.cumulativeProbability;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "out[i][j] -= 2d * t.cumulativeProbability;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "out[i][j] = t * mock;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "out[i][j] = t * mock;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "out[i][j] = t * maxWidth - t;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "out[i][j] = t * maxWidth - t;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "out[i][j] -= 2d * r * t;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "out[i][j] -= 2d * r * t;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "out[i][j] -= t * r;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "out[i][j] -= t * r;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "out[i][j] = t * A;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "out[i][j] = t * A;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "out[i][j] -= 2d * coefficients[i][10];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "out[i][j] -= 2d * coefficients[i][10];",
                "identical": false
            }
        ],
        "buggy_line": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
        "fixed_line": "out[i][j] = 2 * tDistribution.cumulativeProbability(-t);"
    },
    "Math-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (lhs > rhs, 1, rhs.length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (lhs > rhs, 1, rhs.length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (lhs > rhs, 0, 1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (lhs > rhs, 0, 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (lhs > rhs, 0, epsilon) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (lhs > rhs, 0, epsilon) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (lhs > rhs, 0, epsilon = 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (lhs > rhs, 0, epsilon = 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (MathUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (MathUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (lhs.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (lhs.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (nextUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (nextUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (lhs > rhs, 1, i) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (lhs > rhs, 1, i) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (this.MathUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (this.MathUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (lhs, 1, rhs.length - 1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (lhs, 1, rhs.length - 1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (nextUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (nextUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (MathUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (MathUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (lhs > rhs, 0, epsilon = table.length) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (lhs > rhs, 0, epsilon = table.length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (lhs.compareTo(ar, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (lhs.compareTo(ar, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (lhs > rhs.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (lhs > rhs.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (lhs > rhs, 1, rhs.length - 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (lhs > rhs, 1, rhs.length - 1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (m.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (m.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (lhs.compareTo(rhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (lhs.compareTo(rhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (lhs.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (lhs.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (lhs > rhs, 1, rhs.length - 1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (lhs > rhs, 1, rhs.length - 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (MathUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (MathUtils.compareTo(min, 1, i) > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (BagUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (BagUtils.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (this.MathUtils.compareTo(min, 1, subinterval) > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (this.MathUtils.compareTo(min, 1, subinterval) > 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (MathUtils.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (MathUtils.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) % 2 == 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs) % 2 == 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (nextUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (nextUtils.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (MathUtils.compareTo(lhs, 1, rhs) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (MathUtils.compareTo(lhs, 1, rhs) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (lhs.compareTo(rhs, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (lhs.compareTo(rhs, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (fixed.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (fixed.compareTo(lhs, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (frame.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (frame.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) % 2 == 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) % 2 == 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (lhs > rhs, 1, subinterval) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (lhs > rhs, 1, subinterval) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (this.MathUtils.compareTo(ar, 0, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (this.MathUtils.compareTo(ar, 0, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (m.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (m.compareTo(min, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) % max;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (this.MathUtils.compareTo(min, 1, rhs) % max;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (m.compareTo(lhs, 0, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (m.compareTo(lhs, 0, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (this.MathUtils.compareTo(lhs, 1, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (lhs > rhs, 0, epsilon = table.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (lhs > rhs, 0, epsilon = table.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (lhs.compareTo(ar, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (lhs.compareTo(ar, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (++i < min) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (++i < min) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (lhs > rhs, 0, epsilon = table.length - 1) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (m.compareTo(lhs, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (m.compareTo(lhs, 0, rhs.length) > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (fixed.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (fixed.compareTo(min, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (this.MathUtils.compareTo(min, 1, i) == 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (this.MathUtils.compareTo(min, 1, i) == 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
        "fixed_line": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {"
    },
    "Closure-67": {
        "fixes": [
            {
                "k": 1,
                "patch": ") {",
                "identical": false
            },
            {
                "k": 2,
                "patch": ") {",
                "identical": false
            },
            {
                "k": 3,
                "patch": ") assignPropertyedLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": ") assignPropertyedLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "&& assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "while (assignLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "while (assignLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": ") assignPropertyedLhs.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ") assignPropertyedLhs.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ") assignPropertyedVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": ") assignPropertyedVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "knownedPropertyHandler.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "knownedPropertyHandler.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": ") assignPropertyedLhs.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": ") assignPropertyedLhs.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "(assignedProperty) assignVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "(assignedProperty) assignVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "hookhookedVar = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "hookhookedVar = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Convention.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Convention.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "hookhookedVar = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "hookhookedVar = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": ") assignPropertyed = assignVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ") assignPropertyed = assignVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "switch (n.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "switch (n.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "(assignedLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "(assignedLhs.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": ") assignPropertyedLhs.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ") assignPropertyedLhs.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ") assignPropertyedLhsVar = assign;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ") assignPropertyedLhsVar = assign;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ") assignPropertyed = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ") assignPropertyed = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ") assignPropertyed = assignVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": ") assignPropertyed = assignVar.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "hookedVar = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "hookedVar = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": ") assignPropertyedVar.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ") assignPropertyedVar.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ") assignPropertyedLhs.isVar(assignContext)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": ") assignPropertyedLhs.isVar(assignContext)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": ") assignPropertyedLhs.get(assignLhs)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": ") assignPropertyedLhs.get(assignLhs)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": ") assignPropertyed = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": ") assignPropertyed = assign.isVar(assignLhs)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": ") assignPropertyedLhsVar = assign.inExterns;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ") assignPropertyedLhsVar = assign.inExterns;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ") assignPropertyedLhsVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ") assignPropertyedLhsVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (; assign.inExterns) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (; assign.inExterns) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "&& assign.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "&& assign.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (n = assign; assign.isVar()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (n = assign; assign.isVar()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs);",
                "identical": false
            },
            {
                "k": 63,
                "patch": ") assignPropertyed = assign.inExterns;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ") assignPropertyed = assign.inExterns;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ") assignPropertyedVar.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": ") assignPropertyedVar.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "(assignedProperty) assignVar.inExterns;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "(assignedProperty) assignVar.inExterns;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ") assignPropertyedVar = assign.inExterns;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ") assignPropertyedVar = assign.inExterns;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "&& assign.inExterns) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "&& assign.inExterns) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": ") assignPropertyedVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ") assignPropertyedVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Convention.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Convention.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": ") assignPropertyedAbout.get(assignLhs)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": ") assignPropertyedAbout.get(assignLhs)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "(assigned) assign.inExterns;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "(assigned) assign.inExterns;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Convention.isPrototypeProperty(assignLhs)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Convention.isPrototypeProperty(assignLhs)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": ") assignPropertyedVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ") assignPropertyedVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (n = assign; assign.isVar) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (n = assign; assign.isVar) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": ") assignPropertyedLhsVar = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": ") assignPropertyedLhsVar = assign.inExterns) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": ") assignPropertyedLhs.get(assignLhs);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ") assignPropertyedLhs.get(assignLhs);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ") assignPropertyedLhsVar.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ") assignPropertyedLhs.isVar(assign);",
                "identical": false
            },
            {
                "k": 96,
                "patch": ") assignPropertyedLhs.isVar(assign);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "hookhookedVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "hookhookedVar = assign.isVar(assignLhs;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "switch (n.isVar(assignLhs) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "switch (n.isVar(assignLhs) {",
                "identical": false
            }
        ],
        "buggy_line": ") {",
        "fixed_line": "&& assign.getParent().getType() == Token.EXPR_RESULT) {"
    },
    "Math-94": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (u * v == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (u * v == 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (u * v == 0 && ianns.abs(u + 1) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (u * v == 0 && ianns.abs(u + 1) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (u * v == 0 && ianns.abs(u + v == data.denominator) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (u * v == 0 && ianns.abs(u + v == data.denominator) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (u * v == 0 && ianns.abs(u + 11;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (u * v == 0 && ianns.abs(u + 11;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (u * v == 0 && ianns.abs(u - v == 0)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (u * v == 0 && ianns.abs(u - v == 0)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (u * v == 0 && ianns.abs(u * v == 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (u * v == 0 && ianns.abs(u * v == 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (u * v == 0 && ianns.abs(v - iUnitMillis) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (u * v == 0 && ianns.abs(v - iUnitMillis) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (u * v == 0 && ianns.abs(u + 31) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (u * v == 0 && ianns.abs(u + 31) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahend) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahend) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (u * v == 0 && ianns.abs(u + 13) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (u * v == 0 && ianns.abs(u + 13) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (u * v == 0 && ianns.abs(u + v == 0)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (u * v == 0 && ianns.abs(u + v == 0)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (u * v == 0 && ianns.abs(u -u) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (u * v == 0 && ianns.abs(u -u) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (u * v == 0 && ianns.abs(v - v == 0)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (u * v == 0 && ianns.abs(v - v == 0)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (u * v == 0 && ianns.abs(u - v == 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (u * v == 0 && ianns.abs(u - v == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (u * v == 0 && ianns.abs(v - 31) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (u * v == 0 && ianns.abs(v - 31) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (u * v == 0 && ianns.abs(u + 32) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (u * v == 0 && ianns.abs(u + 32) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (u * v == 0 && ianns.abs(v -u) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (u * v == 0 && ianns.abs(v -u) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (u * v == 0 && ianns.abs(u + v == 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (u * v == 0 && ianns.abs(u + v == 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (u * v == 0 && ianns.abs(v - v == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (u * v == 0 && ianns.abs(v - v == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (u * v == 0 && ianns.abs(u - v == negative) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (u * v == 0 && ianns.abs(u - v == negative) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahairCount) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (u * v == 0 && ianns.abs(v - subtrahairCount) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (u * v == 0 && ianns.abs(v - u) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (u * v == 0 && ianns.abs(v - u) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (u * v == 0 && ianns.abs(u + v == ian) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (u * v == 0 && ianns.abs(u + v == ian) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (u * v == 0 && ianns.abs(u + v == data.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (u * v == 0 && ianns.abs(u + v == data.length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (u * v == 0 && ianns.abs(v - i;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (u * v == 0 && ianns.abs(v - i;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (u * v == 0 && ianns.abs(u - subtrahend) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (u * v == 0 && ianns.abs(u - subtrahend) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (u * v == 0 && ianns.abs(v - 32) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (u * v == 0 && ianns.abs(v - 32) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (u * v == 0 && ianns.abs(u + 11) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (u * v == 0 && ianns.abs(u + 11) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (u * v == 0 && ianns.abs(v - 1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (u * v == 0 && ianns.abs(v - 1) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (u * v == 0 && ianns.abs(v -u>0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (u * v == 0 && ianns.abs(v -u>0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (u * v == 0 && ianns.abs(u + 11 {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (u * v == 0 && ianns.abs(u + 11 {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (u * v == 0 && ianns.abs(v - ian) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (u * v == 0 && ianns.abs(v - ian) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (u * v == 0 && ianns.abs(u + 20) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (u * v == 0 && ianns.abs(u + 20) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (u * v == 0 && ianns.abs(u -v == 0)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (u * v == 0 && ianns.abs(u -v == 0)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (u * v == 0 && ianns.abs(v - olds) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (u * v == 0 && ianns.abs(v - olds) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (u * v == 0 && ianns.abs(u>0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (u * v == 0 && ianns.abs(u>0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (u * v == 0 && ianns.abs(uSize) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (u * v == 0 && ianns.abs(uSize) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (u * v == 0 && ianns.abs(u - v == i.denominator) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (u * v == 0 && ianns.abs(u - v == i.denominator) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (u * v == 0 && ianns.abs(v - 354) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (u * v == 0 && ianns.abs(v - 354) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (u * v == 0 && ianns.abs(u - subtrahairCount) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (u * v == 0 && ianns.abs(u - subtrahairCount) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (u * v == 0 && ianns.abs(u + v == iMinPrinted) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (u * v == 0 && ianns.abs(u + v == iMinPrinted) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (u * v == 0 && ianns.abs(u - v == delegate) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (u * v == 0 && ianns.abs(u - v == delegate) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (u * v == 0 && ianns.abs(u + v == positive) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (u * v == 0 && ianns.abs(u + v == positive) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (u * v == 0 && ianns.abs(u - v == escape) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (u * v == 0 && ianns.abs(u - v == escape) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (u * v == 0 && ianns.abs(u - v == 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (u * v == 0 && ianns.abs(u - v == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (u * v == 0 && ianns.abs(u -d) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (u * v == 0 && ianns.abs(u -d) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (u * v == 0 && ianns.abs(v - positive) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (u * v == 0 && ianns.abs(v - positive) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (u * v == 0 && ianns.abs(u + v == negative) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (u * v == 0 && ianns.abs(u + v == negative) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (u * v == 0 && ianns.abs(v - v == 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (u * v == 0 && ianns.abs(v - v == 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (u * v == 0 && ianns.abs(u - v == active) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (u * v == 0 && ianns.abs(u - v == active) {",
                "identical": false
            }
        ],
        "buggy_line": "if (u * v == 0) {",
        "fixed_line": "if ((u == 0) || (v == 0)) {"
    },
    "Math-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (vSize == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (vSize == 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (vSize) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (vSize) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (vSize == tree) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (vSize == tree) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (vSize;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (vSize;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (numerator == 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (numerator == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (vSize > MAX_INT_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (vSize > MAX_INT_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (v>0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (v>0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (vTree.getAttributeTotal) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (vTree.getAttributeTotal) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (vSize > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (vSize > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (vTree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (vTree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (vSize > MAX_INT_AS_DOUBLE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (vSize > MAX_INT_AS_DOUBLE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (vSize > MAX_DOUBLE_SIZE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (vSize > MAX_DOUBLE_SIZE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (vSize < 1) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (vSize < 1) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (vSize > MAX_INT_AS_LONG_SIZE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (vSize > MAX_INT_AS_LONG_SIZE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (vSize > MAX_INT_AS_LONG) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (vSize > MAX_INT_AS_LONG) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_SIZE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_SIZE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (vSize > MAX_COLON) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (vSize > MAX_COLON) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (vTree.getAttributeExpression == tree) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (vTree.getAttributeExpression == tree) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (vTree.getAttribute Need;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (vTree.getAttribute Need;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_AS_SIZE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (vSize > MAX_DOUBLE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (vSize > MAX_DOUBLE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (vSize > MAX_DOUBLE_ESCAPE_SIZE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (vSize > MAX_DOUBLE_ESCAPE_SIZE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (vTree.getAttributeValue) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (vTree.getAttributeValue) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (vTree.getAttributeWidth == tree) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (vTree.getAttributeWidth == tree) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (vSize > MAX_DOUBLE_EFFESCAPE_SIZE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (vSize > MAX_DOUBLE_EFFESCAPE_SIZE) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (vSize == BZip2Constants.TOP) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (vSize == BZip2Constants.TOP) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (vSize > MAX_INT_AS_LONG_DOUBLE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (vSize > MAX_INT_AS_LONG_DOUBLE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (vTree.getAttribute) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (vTree.getAttribute) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (vTree.getAttribute;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (vTree.getAttribute;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (vSize == BZip2D.getAttribute;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (vSize == BZip2D.getAttribute;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (vSize == BZip2Constants.MIDDLE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (vSize == BZip2Constants.MIDDLE) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (vSize > MAX_DOUBLE_EFFECTS_SIZE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (vSize > MAX_DOUBLE_EFFECTS_SIZE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (vSize > MAX_INT_AS_EFFECTS) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (vSize > MAX_INT_AS_EFFECTS) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (vSize > MAX_INT_AS_LENGTH) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (vSize > MAX_INT_AS_LENGTH) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (vSize > MAX_DOUBLE_EFFEMBEDDED_SIZE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (vSize > MAX_DOUBLE_EFFEMBEDDED_SIZE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (numerator>0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (numerator>0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (vTree.getAttribute Need <= 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (vTree.getAttribute Need <= 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (vSize > MAX_INT_SIZE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (vSize > MAX_INT_SIZE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (vSize == BZip2Constants.getAttribute) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (vSize == BZip2Constants.getAttribute) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_ tree) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_ tree) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (v>incMoment) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (v>incMoment) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (vSize > MAX_INT_AS_NULL) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (vSize > MAX_INT_AS_NULL) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (vSize > MAX_INT_AS_FACTOR) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (vSize > MAX_INT_AS_FACTOR) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (vSize > MAX_DOUBLE_EFFELE_SIZE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (vSize > MAX_DOUBLE_EFFELE_SIZE) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (LTreeBOTH) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (LTreeBOTH) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (v>EntityTree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (v>EntityTree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (LSize == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (LSize == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_OBJECTS) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (vSize > MAX_DOUBLE_EMBEDDED_OBJECTS) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (vSize > 1) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (vSize > 1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (vTree.getAttributeWidth == 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (vTree.getAttributeWidth == 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if ((Boolean) tree.getAttribute()) {",
        "fixed_line": "if (tree.getCut() == null && (Boolean) tree.getAttribute()) {"
    },
    "JacksonXml-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "_rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "_rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "_rootNameLookup = rootNameLookup;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "_rootNameLookup = rootNameLookup;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_rootNameLookup = root._rootNameLookup;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "_rootNameLookup = root._rootNameLookup;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "_rootNameLookup = link._rootNameLookup;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "_rootNameLookup = link._rootNameLookup;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "_rootNameLookup = src._rootNameLookup;for._rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "_rootNameLookup = src._rootNameLookup;for._rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "_rootNameLookup = rootNames;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_rootNameLookup = rootNames;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "_rootNameLookup = name;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "_rootNameLookup = name;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 16,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 17,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 18,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 19,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- src._rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- src._rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check",
                "identical": false
            },
            {
                "k": 22,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 24,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 25,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should checknewNameLookup",
                "identical": false
            },
            {
                "k": 28,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should checknewNameLookup",
                "identical": false
            },
            {
                "k": 29,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it",
                "identical": false
            },
            {
                "k": 30,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it",
                "identical": false
            },
            {
                "k": 31,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 35,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never",
                "identical": false
            },
            {
                "k": 36,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never",
                "identical": false
            },
            {
                "k": 37,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 39,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 42,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 43,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should checknewNameLookup",
                "identical": false
            },
            {
                "k": 46,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should checknewNameLookup",
                "identical": false
            },
            {
                "k": 47,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really gets this",
                "identical": false
            },
            {
                "k": 48,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really gets this",
                "identical": false
            },
            {
                "k": 49,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 50,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 51,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 52,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 54,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check",
                "identical": false
            },
            {
                "k": 56,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check",
                "identical": false
            },
            {
                "k": 57,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 58,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 59,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 65,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 66,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 67,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really need 6",
                "identical": false
            },
            {
                "k": 68,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really need 6",
                "identical": false
            },
            {
                "k": 69,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should checknewNameLookup",
                "identical": false
            },
            {
                "k": 72,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should checknewNameLookup",
                "identical": false
            },
            {
                "k": 73,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should checknewNameLookup",
                "identical": false
            },
            {
                "k": 74,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should checknewNameLookup",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 77,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 78,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 79,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it",
                "identical": false
            },
            {
                "k": 80,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 82,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never",
                "identical": false
            },
            {
                "k": 86,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never",
                "identical": false
            },
            {
                "k": 87,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSer",
                "identical": false
            },
            {
                "k": 88,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSer",
                "identical": false
            },
            {
                "k": 89,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't run typeSerializers;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 92,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 93,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 94,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen name and src._rootNameLookup",
                "identical": false
            },
            {
                "k": 95,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit re",
                "identical": false
            },
            {
                "k": 96,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit re",
                "identical": false
            },
            {
                "k": 97,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should check event typeSerializers;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            },
            {
                "k": 100,
                "patch": "_rootNameLookup = src._rootNameLookup; // root as per [JACKSON-407] -- allow disabling of current if it't really modify it't really need to t isActive't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't really modify it't do implicit renamercing should never happen?",
                "identical": false
            }
        ],
        "buggy_line": "_rootNameLookup = src._rootNameLookup;",
        "fixed_line": "_rootNameLookup = new XmlRootNameLookup();"
    },
    "Mockito-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "return arg.toString;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return arg.toString;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return m.toString;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return m.toString;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return m.toString.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return m.toString.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return m.toString.equals(argName);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return m.toString.equals(argName);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return m.toString.equals(arg);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return m.toString.equals(arg);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return m.toString.equals(arg).equals(argName;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return m.toString.equals(arg).equals(argName;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return m.toString.equals(arg).m;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return m.toString.equals(arg).m;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringDescription.toString;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringDescription.toString;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return m.toString.equals(argName;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return m.toString.equals(argName;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return m.toString.equals(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return m.toString.equals(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return arg.toString.equals(m;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return arg.toString.equals(m;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return m.toString.equals(arg).value;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return m.toString.equals(arg).value;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return arg.toString.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return arg.toString.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return arg.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return arg.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return m.toString.equals(arg).).equals(argName;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return m.toString.equals(arg).).equals(argName;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return m.toString.equals(arg).i.toString;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return m.toString.equals(arg).i.toString;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return arg.equals(m.toString;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return arg.equals(m.toString;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return m.toString.equals(arg.toString;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return m.toString.equals(arg.toString;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return m.toString.equals(arg).equals;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return m.toString.equals(arg).equals;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return current.toString.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return current.toString.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return current.toString.equals(argName);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return current.toString.equals(argName);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringDescription.toString.equals(argName);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringDescription.toString.equals(argName);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return m.toString.equals(argName, arg);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return m.toString.equals(argName, arg);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return m.toString.equals(arg).toString.count;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return m.toString.equals(arg).toString.count;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return m.toString.equals(argName, arg;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return m.toString.equals(argName, arg;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return m.toString.equals(arg).length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return m.toString.equals(arg).length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return m.toString.equals(argRenderingOrder.toString()+\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return m.toString.equals(argRenderingOrder.toString()+\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return m.toString.equals(arg).equals(argName);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return m.toString.equals(arg).equals(argName);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return m.toString.equals(arg, arg)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return m.toString.equals(arg, arg)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return m.toString.equals(arg).m.toString;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return m.toString.equals(arg).m.toString;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return arg.equals(m;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return arg.equals(m;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return current.toString.equals(m;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return current.toString.equals(m;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringDescription.toString.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringDescription.toString.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return m.toString.equals(argName).toString;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return m.toString.equals(argName).toString;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return m.toString.equals(arg).toString.toString;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return m.toString.equals(arg).toString.toString;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return m.toString.equals(arg).equals(arg;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return m.toString.equals(arg).equals(arg;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return m.toString != arg;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return m.toString != arg;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return m.toString.equals(arg).).equals(arg);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return m.toString.equals(arg).).equals(arg);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return current.toString.equals(argName;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return current.toString.equals(argName;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return m.toString.equals(argName).equals(argName;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return m.toString.equals(argName).equals(argName;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return m.toString.equals(arg.toString()+\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return m.toString.equals(arg.toString()+\";",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return arg.equals(argName).toString;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return arg.equals(argName).toString;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return arg.toString.equals(argName);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return arg.toString.equals(argName);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return m.toString.equals(arg).).toString;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return m.toString.equals(arg).).toString;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this.m.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.m.equals(arg).toString;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringDescription.toString.equals(argName, arg);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringDescription.toString.equals(argName, arg);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return current.toString.equals(arg).equals(argName;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return current.toString.equals(arg).equals(argName;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return m.toString.equals(argValue;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return m.toString.equals(argValue;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return m.toString.equals(argName).m;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return m.toString.equals(argName).m;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return m.toString.equals(arg.toString, arg)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return m.toString.equals(arg.toString, arg)) {",
                "identical": false
            }
        ],
        "buggy_line": "return StringDescription.toString(m).equals(arg.toString());",
        "fixed_line": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());"
    },
    "Closure-92": {
        "fixes": [
            {
                "k": 1,
                "patch": "int indexOfDot = nameNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int indexOfDot = nameNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int indexOfDot = modules.indexOf('.');",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int indexOfDot = modules.indexOf('.');",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int indexOfDot = def.indexOf('.');",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int indexOfDot = def.indexOf('.');",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int indexOfDot = name.indexOf('.');",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int indexOfDot = name.indexOf('.');",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int indexOfDot = module.indexOf('.');",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int indexOfDot = module.indexOf('.');",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int indexOfDot = ns.indexOf('.');",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int indexOfDot = ns.indexOf('.');",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int indexOfDot = getPosNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int indexOfDot = getPosNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int indexOfDot = nameNode.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int indexOfDot = nameNode.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int indexOfDot = minimumNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int indexOfDot = minimumNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int indexOfDot = next.indexOf('.');",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int indexOfDot = next.indexOf('.');",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int indexOfDot = RuntimeNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int indexOfDot = RuntimeNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int indexOfDot =HOUR.indexOf('.');",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int indexOfDot =HOUR.indexOf('.');",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int indexOfDot = getPos.indexOf('.');",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int indexOfDot = getPos.indexOf('.');",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int indexOfDot = ordinal.indexOf('.');",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int indexOfDot = ordinal.indexOf('.');",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int indexOfDot = size.indexOf('.');",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int indexOfDot = size.indexOf('.');",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int indexOfDot = i.indexOf('.');",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int indexOfDot = i.indexOf('.');",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int indexOfDot = input.indexOf('.');",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int indexOfDot = input.indexOf('.');",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int indexOfDot =Value.indexOf('.');",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int indexOfDot =Value.indexOf('.');",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int indexOfDot = modulesNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int indexOfDot = modulesNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int indexOfDot = reducedDot.indexOf('.');",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int indexOfDot = reducedDot.indexOf('.');",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int indexOfDot = nameNode.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int indexOfDot = nameNode.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int indexOfDot =AsNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int indexOfDot =AsNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int indexOfDot = newIndexNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int indexOfDot = newIndexNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int indexOfDot = standardNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int indexOfDot = standardNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int indexOfDot = defNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int indexOfDot = defNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int indexOfDot = secondNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int indexOfDot = secondNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int indexOfDot = argument.indexOf('.');",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int indexOfDot = argument.indexOf('.');",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int indexOfDot =Frames.indexOf('.');",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int indexOfDot =Frames.indexOf('.');",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int indexOfDot = old.indexOf('.');",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int indexOfDot = old.indexOf('.');",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int indexOfDot = name.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int indexOfDot = name.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int indexOfDot = properties.indexOf('.');",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int indexOfDot = properties.indexOf('.');",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int indexOfDot = c.indexOf('.');",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int indexOfDot = c.indexOf('.');",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int indexOfDot = link.indexOf('.');",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int indexOfDot = link.indexOf('.');",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int indexOfDot =ARD.indexOf('.');",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int indexOfDot =ARD.indexOf('.');",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int indexOfDot = 1000.indexOf('.');",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int indexOfDot = 1000.indexOf('.');",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int indexOfDot = AtomicIntegerNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int indexOfDot = AtomicIntegerNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int indexOfDot = minimum.indexOf('.');",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int indexOfDot = minimum.indexOf('.');",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int indexOfDot = curr.indexOf('.');",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int indexOfDot = curr.indexOf('.');",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int indexOfDot =Wrap.indexOf('.');",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int indexOfDot =Wrap.indexOf('.');",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int indexOfDot = set.indexOf('.');",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int indexOfDot = set.indexOf('.');",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int indexOfDot = Calendar.indexOf('.');",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int indexOfDot = Calendar.indexOf('.');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int indexOfDot =lu.indexOf('.');",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int indexOfDot =lu.indexOf('.');",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int indexOfDot =Opt.indexOf('.');",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int indexOfDot =Opt.indexOf('.');",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int indexOfDot = stage.indexOf('.');",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int indexOfDot = stage.indexOf('.');",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int indexOfDot = at.indexOf('.');",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int indexOfDot = at.indexOf('.');",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int indexOfDot =LID.indexOf('.');",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int indexOfDot =LID.indexOf('.');",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int indexOfDot =es.indexOf('.');",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int indexOfDot =es.indexOf('.');",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int indexOfDot =!.indexOf('.');",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int indexOfDot =!.indexOf('.');",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int indexOfDot =ias.indexOf('.');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int indexOfDot =ias.indexOf('.');",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int indexOfDot = name.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int indexOfDot = name.indexOf('.') + 1;",
                "identical": false
            }
        ],
        "buggy_line": "int indexOfDot = namespace.indexOf('.');",
        "fixed_line": "int indexOfDot = namespace.lastIndexOf('.');"
    },
    "Closure-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cfaNode.createEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cfaNode.createEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cfa.createEdge(parent, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cfa.createEdge(parent, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cfa.createEdge(last, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cfa.createEdge(last, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cfa.createEdge(cfgNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cfa.createEdge(cfgNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cfa.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cfa.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cfa.createEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cfa.createEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cfaNode.createEdge(parent, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cfaNode.createEdge(parent, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cfaNode.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cfaNode.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cfaNode.createEdge(last, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cfaNode.createEdge(last, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cfaNode.createEdge(cfgNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cfaNode.createEdge(cfgNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cfa.createEdge(parent, finallyNode, cfaNode);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cfa.createEdge(parent, finallyNode, cfaNode);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode != cfaNode);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode != cfaNode);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cfa.createEdge(parent, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cfa.createEdge(parent, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cfaNode.createEdge( finally, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cfaNode.createEdge( finally, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cfaNode.createEdge(parent, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cfaNode.createEdge(parent, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cfa.createEdge(fromNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cfa.createEdge(fromNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cfaNode.createEdge(fromNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cfaNode.createEdge(fromNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cfa.createEdge(parent, finallyNode, cfaNode, parent);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cfa.createEdge(parent, finallyNode, cfaNode, parent);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode, cfaNode);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode, cfaNode);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cfa.createEdge( finally, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cfa.createEdge( finally, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cfa.createEdge(parent, finallyNode, cfaNode, finallyNode);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cfa.createEdge(parent, finallyNode, cfaNode, finallyNode);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cfaMap.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cfaMap.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cfa.createEdge(Left, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cfa.createEdge(Left, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cfaNode.createEdge = finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cfaNode.createEdge = finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cfa.createEdge = finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cfa.createEdge = finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cfaNode.createEdge(parent, finallyNode, cfaNode, parent);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cfaNode.createEdge(parent, finallyNode, cfaNode, parent);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode != cfaNode);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cfaNode.createEdge(fromNode, Branch.UNCOND, finallyNode != cfaNode);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode, parent, cfaNode);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cfaNode.createEdge(parent, finallyNode, cfaNode, finallyNode);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cfaNode.createEdge(parent, finallyNode, cfaNode, finallyNode);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cfa.createEdge(Cache, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cfa.createEdge(Cache, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, cfa);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, cfa);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, cfaNode);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, cfaNode);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cfaNode.createEdge(Left, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cfaNode.createEdge(Left, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cfaNode.createEdge(parent, finallyNode, cfaNode);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cfaNode.createEdge(parent, finallyNode, cfaNode);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cfaNode.createEdge(next, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cfaNode.createEdge(next, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cfa.createEdge(fromNode, parent, finallyNode);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cfa.createEdge(fromNode, parent, finallyNode);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cfa.createEdge(next, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cfa.createEdge(next, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cfa.createEdge(testNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cfa.createEdge(testNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cfaNode.createEdge(parent, finallyNode, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cfa.createEdge(parent, finallyNode, finallyNode, finallyNode);",
                "identical": false
            }
        ],
        "buggy_line": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
        "fixed_line": "cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);"
    },
    "Math-105": {
        "fixes": [
            {
                "k": 1,
                "patch": "return sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return sumYY - sumYY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return sumYY - sumYY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return sumYY - sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return sumYY - sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return sumYY - sumXX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return sumYY - sumXX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "returnsum / sumXX - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "returnsum / sumXX - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return sumYY - sumX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return sumYY - sumX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_DAY;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_DAY;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return sumYY - sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return sumYY - sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return sumYY - sumXY * sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return sumYY - sumXY * sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "returnsum / sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "returnsum / sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return sumXY - sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return sumXY - sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return sumXX - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return sumXX - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return sumYY - sumXY * sumXY / (double) sumXX;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return sumYY - sumXY * sumXY / (double) sumXX;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return sumYY - sumXY * sumXY / sumYY;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return sumYY - sumXY * sumXY / sumYY;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return sumYY -sum * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return sumYY -sum * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return sumXY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return sumXY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return sumYY -sumX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return sumYY -sumX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "returnsum - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "returnsum - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return sumYY - sumXY * sumY / sumXX;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return sumYY - sumXY * sumY / sumXX;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "returnsum / sumXX - sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "returnsum / sumXX - sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return sumYY - sum_1 * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return sumYY - sum_1 * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "returnsumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "returnsumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return sumYY -sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return sumYY -sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return sumYY - sumY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return sumYY - sumY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // the sumXX",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // the sumXX",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // normalize it't really",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // normalize it't really",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // we didn't really modify it't really",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // we didn't really modify it't really",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return sumYY - sumXY * sumYY;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return sumYY - sumXY * sumYY;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // enough room or: sumXX",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // enough room or: sumXX",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1 or: sum",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1 or: sum",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // we didn't really",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // we didn't really",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return sumYY - sumXY * sumXY / DateTimeConstants.MILLIS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // normalize zero.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // normalize zero.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return sumYY - sumXY * sumXY /Externs;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return sumYY - sumXY * sumXY /Externs;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // it't really",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // it't really",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // the quote",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // the quote",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return sumYY - sumSystem * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return sumYY - sumSystem * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return sumXX - sumYY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return sumXX - sumYY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return sumYY - sumXY * sumXY / sumY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return sumYY - sumXY * sumXY / sumY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1 or: sumXX;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 1 or: sumXX;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // enough room or: sumXX)",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // enough room or: sumXX)",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return sumS - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return sumS - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX)",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX)",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return sumYY - sum cons * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return sumYY - sum cons * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // or: sumXX;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // delta > 0;",
                "identical": false
            }
        ],
        "buggy_line": "return sumYY - sumXY * sumXY / sumXX;",
        "fixed_line": "return Math.max(0d, sumYY - sumXY * sumXY / sumXX);"
    },
    "Lang-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return foundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return foundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return foundDigit && !hasExp; // need to '+' because' && foundDigit",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return foundDigit && !hasExp; // need to '+' because' && foundDigit",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return foundDigit && !hasExp; // need to '+'u' && foundDigit",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return foundDigit && !hasExp; // need to '+'u' && foundDigit",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is negative",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is negative",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return foundDigit && !hasExp; // need a '+' because' && found",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return foundDigit && !hasExp; // need a '+' because' && found",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return foundDigit && !hasExp; // so '+' because' && foundDigit",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return foundDigit && !hasExp; // so '+' because' && foundDigit",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return foundDigit && !hasExp; // need a '+' because' && foundDigit",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return foundDigit && !hasExp; // need a '+' because' && foundDigit",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return foundDigit && !hasExp; // need to 'w' && foundDigit",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return foundDigit && !hasExp; // need to 'w' && foundDigit",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return foundDigit && !hasExp; // need to '+' because' && found",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return foundDigit && !hasExp; // need to '+' because' && found",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because' && found",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because' && found",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return foundDigit && !hasExp; // need to '+'u' && found",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return foundDigit && !hasExp; // need to '+'u' && found",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return foundDigit && !hasExp; // we need a digit after the end from 'l' && found",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return foundDigit && !hasExp; // we need a digit after the end from 'l' && found",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for' && found",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is valid for' && found",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return foundDigit && !hasExp; // we need a '+' because' && found",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return foundDigit && !hasExp; // we need a '+' because' && found",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return foundDigit && !hasExp; // so '+' because' && found",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return foundDigit && !hasExp; // so '+' because' && found",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a' && found",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a' && found",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return foundDigit && !hasExp; // need to 'w't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return foundDigit && !hasExp; // need to 'w't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return foundDigit && !hasExp; // need a '+'u' && foundDigit",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return foundDigit && !hasExp; // need a '+'u' && foundDigit",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return foundDigit && !hasExp; // we need a '+'u' && found",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return foundDigit && !hasExp; // we need a '+'u' && found",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return foundDigit && !hasExp; //At or '+' because' && found",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return foundDigit && !hasExp; //At or '+' because' && found",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return foundDigit && !hasExp; // we need a digit after the E",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return foundDigit && !hasExp; // we need a digit after the E",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return foundDigit && !hasExp; // need to '+' because the matrix is",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return foundDigit && !hasExp; // need to '+' or: found",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return foundDigit && !hasExp; // need to '+' or: found",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return foundDigit && !hasExp; // functionName '+' because' && found",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return foundDigit && !hasExp; // functionName '+' because' && found",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return foundDigit && !hasExp; //] '+' because' && foundDigit",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return foundDigit && !hasExp; //] '+' because' && foundDigit",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return foundDigit && !hasExp; // need to '+' because v is negative",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return foundDigit && !hasExp; // need to '+' because v is negative",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return foundDigit && !hasExp; // need a '+'u' && found",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return foundDigit && !hasExp; // need a '+'u' && found",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return foundDigit && !hasExp; // need to 's't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return foundDigit && !hasExp; // need to 's't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+'u' && found",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+'u' && found",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a' && found",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a' && found",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a sanity check",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a sanity check",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return foundDigit && !hasExp; // need to 'default' && foundDigit",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return foundDigit && !hasExp; // need to 'default' && foundDigit",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return foundDigit && !hasExp; // need to '+' because't do a't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return foundDigit && !hasExp; // we didn't really need a digit after the E",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return foundDigit && !hasExp; // we didn't really need a digit after the E",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a't do a sanity check",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return foundDigit && !hasExp; // need to '+'u't do a't do a sanity check",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return foundDigit && !hasExp; // need to 'w't do a't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return foundDigit && !hasExp; // need to 'w't do a't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return foundDigit && !hasExp; // need to 'l' && foundDigit",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return foundDigit && !hasExp; // need to 'l' && foundDigit",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return foundDigit && !hasExp; // we need a '+'u' && foundDigit",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return foundDigit && !hasExp; // we need a '+'u' && foundDigit",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because't do a sanity check",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because't do a sanity check",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return foundDigit && !hasExp; // we need a '+' because't really need a' && found",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return foundDigit && !hasExp; // we need a '+' because't really need a' && found",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because't do a' && foundDigit",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return foundDigit && !hasExp; // or '+' because' && found",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return foundDigit && !hasExp; // or '+' because' && found",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because't do a[i]",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return foundDigit && !hasExp; // we didn't really need a '+' because't do a[i]",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return foundDigit && !hasExp; // we need a '+' because't do a' && found",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return foundDigit && !hasExp; // we need a '+' because't do a' && found",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return foundDigit && !hasExp; // we need a digit after the end from '+'",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return foundDigit && !hasExp; // we need a digit after the end from '+'",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return foundDigit && !hasExp; // need to '+' || found",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return foundDigit && !hasExp; // need to '+' || found",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return foundDigit && !hasExp; // need to 's' && found",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return foundDigit && !hasExp; // need to 's' && found",
                "identical": false
            }
        ],
        "buggy_line": "return foundDigit && !hasExp;",
        "fixed_line": "return foundDigit && !hasExp && !hasDecPoint;"
    },
    "Closure-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean isOverride = parent.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean isOverride = parent.inGlobalScope() || t;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean isOverride = parent.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean isOverride = parent.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean isOverride = t.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean isOverride = t.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectType;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectType;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean isOverride = addGlobalScope || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean isOverride = addGlobalScope || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean isOverride = parent.inGlobalScope() || anparent;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean isOverride = parent.inGlobalScope() || anparent;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean isOverride = addGlobalScope instanceofinGlobalScope;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean isOverride = addGlobalScope instanceofinGlobalScope;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean isOverride = n.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean isOverride = n.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean isOverride = parent.inGlobalScope() || anns.inGlobalScope;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean isOverride = parent.inGlobalScope() || anns.inGlobalScope;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean isOverride = t.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean isOverride = t.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean isOverride = t.inGlobalScope() || anparent;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean isOverride = t.inGlobalScope() || anparent;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean isOverride = n.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean isOverride = n.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean isOverride = anclazz || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean isOverride = anclazz || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean isOverride = getGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean isOverride = getGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean isOverride = parent.inGlobalScope() || toGlobalScope;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean isOverride = parent.inGlobalScope() || toGlobalScope;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectIdScope;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectIdScope;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean isOverride = getGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean isOverride = getGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean isOverride = an.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean isOverride = an.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean isOverride = n.inGlobalScope() || t.objectType;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean isOverride = n.inGlobalScope() || t.objectType;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean isOverride = property != 0 && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean isOverride = property != 0 && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean isOverride = addGlobalScope && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean isOverride = addGlobalScope && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean isOverride = n.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean isOverride = n.inGlobalScope() || parent;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean isOverride = parent && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean isOverride = parent && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean isOverride = result || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean isOverride = result || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectConstType;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectConstType;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean isOverride = src.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean isOverride = src.inGlobalScope() || t.objectScope;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean isOverride = t.inGlobalScope() || toGlobalScope;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean isOverride = t.inGlobalScope() || toGlobalScope;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean isOverride = anc != 0 && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean isOverride = anc != 0 && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean isOverride = parent.inGlobalScope() || an object;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean isOverride = parent.inGlobalScope() || an object;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean isOverride = an.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean isOverride = an.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean isOverride = parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean isOverride = parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectNode;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectNode;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean isOverride = parent.inGlobalScope() || toKey;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean isOverride = parent.inGlobalScope() || toKey;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean isOverride = anclazz && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean isOverride = anclazz && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean isOverride = this.inGlobalScope;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean isOverride = this.inGlobalScope;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean isOverride = parent.inGlobalScope() || propertyType;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean isOverride = parent.inGlobalScope() || propertyType;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean isOverride = anparent && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean isOverride = anparent && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean isOverride = t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean isOverride = t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean isOverride = t.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean isOverride = t.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean isOverride = parent.inGlobalScope() || name;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean isOverride = parent.inGlobalScope() || name;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean isOverride = anc || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean isOverride = anc || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectConst;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean isOverride = parent.inGlobalScope() || t.objectConst;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean isOverride = parent.inGlobalScope() || anobjectType;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean isOverride = parent.inGlobalScope() || anobjectType;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean isOverride = t.inGlobalScope() || t.objectType;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean isOverride = t.inGlobalScope() || t.objectType;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean isOverride = r || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean isOverride = r || parent.inGlobalScope;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean isOverride = t.inGlobalScope() || anns.inGlobalScope;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean isOverride = t.inGlobalScope() || anns.inGlobalScope;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean isOverride = parent.inGlobalScope() || to anparent;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean isOverride = parent.inGlobalScope() || to anparent;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean isOverride = anc.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean isOverride = anc.inGlobalScope() || t.inGlobalScope;",
                "identical": false
            }
        ],
        "buggy_line": "boolean isOverride = t.inGlobalScope() &&",
        "fixed_line": "boolean isOverride = parent.getJSDocInfo() != null &&"
    },
    "Closure-73": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c > 0x1f && c < 0x7f) {",
                "identical": true
            },
            {
                "k": 2,
                "patch": "if (c > 0x1f && c < 0x7f) {",
                "identical": true
            },
            {
                "k": 3,
                "patch": "if (c < 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c < 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c > 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c > 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c < 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c < 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c < 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c < 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c < 0x1f && c > 0x7f) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c < 0x1f && c > 0x7f) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c > 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c > 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c > 0x1f && c < 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c > 0x1f && c < 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c < 0x1f && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c < 0x1f && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c < 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c < 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c <= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c <= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c >= 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c >= 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c <= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c <= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c < 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c < 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c > 0x1F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c > 0x1F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c < 0x20 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c < 0x20 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c < 0x1f && c <= 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c < 0x1f && c <= 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c >= 0x20 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c >= 0x20 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c1 > 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c1 > 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c < 0x1f && c c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c < 0x1f && c c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c >= 0x07f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c >= 0x07f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c < 0x1f && c <= 0x7f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c < 0x1f && c <= 0x7f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c >= 0x0f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c >= 0x0f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c < 0x0f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c < 0x0f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c < 0x1f && c7f <= 0x7f) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c < 0x1f && c7f <= 0x7f) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (escape >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (escape >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c < 0x1f && c c < 0x7f) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c < 0x1f && c c < 0x7f) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c > 0x1f && c < 0x7f || c7f) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c > 0x1f && c < 0x7f || c7f) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c > 0x1f && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c > 0x1f && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c >= 0x BYTEf && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c >= 0x BYTEf && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (escape >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (escape >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ('x >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ('x >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c < 0x1F && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c < 0x1F && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c < 0x800 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c < 0x800 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c < 0x1 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c < 0x1 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ('x >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ('x >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c < 0x800f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c < 0x800f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (ch > 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (ch > 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (0x >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (0x >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (0x >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (0x >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c > 0x1f && c == 0x7f) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c > 0x1f && c == 0x7f) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c < 0x BYTEf || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c < 0x BYTEf || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c > 0x1f && c < 0x7f) { // should never happen but...",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c > 0x1f && c < 0x7f) { // should never happen but...",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c > 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c > 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c > 0x1f && c < 0x7f) { // needs quoting",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c > 0x1f && c < 0x7f) { // needs quoting",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c < 0x800 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c < 0x800 || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c < 0x1F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c < 0x1F && c < 0x7f) {",
                "identical": false
            }
        ],
        "buggy_line": "if (c > 0x1f && c <= 0x7f) {",
        "fixed_line": "if (c > 0x1f && c < 0x7f) {"
    },
    "JacksonDatabind-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new SimpleType(_class, _type, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new SimpleType(_class, _type, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new SimpleType(_class, _type, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass,",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass,",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass,",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass,",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass,",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass,",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass,",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass,",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass,",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass,",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superType, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass,",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass,",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass, _superClass,",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass,",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass,",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass,",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new SimpleType(_class, _superClass, _superClass, _superClass, _superclass, _superType, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superClass, _superclass,",
                "identical": false
            }
        ],
        "buggy_line": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
        "fixed_line": "return new SimpleType(subclass, _bindings, this, _superInterfaces,"
    },
    "Chart-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "int g = this.upperBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int g = this.upperBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int g = this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int g = this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int g = this.upperBound - this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int g = this.upperBound - this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int g = this.lowerBound - this.upperBound / 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int g = this.lowerBound - this.upperBound / 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int g = this.lowerBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int g = this.lowerBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int g = this.lowerBound - this.upperBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int g = this.lowerBound - this.upperBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int g = this.lowerBound - this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int g = this.lowerBound - this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int g = this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int g = this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int g = this.upperBound - this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int g = this.upperBound - this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int g = this.upperBound - this.lowerBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int g = this.upperBound - this.lowerBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int g = v / this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int g = v / this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int g = v / this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int g = v / this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int g = v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int g = v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int g = this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int g = this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int g = this.lowerBound - this.upperBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int g = this.lowerBound - this.upperBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int g = this.lowerBound - this.upperBound / this.lowerBound;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int g = this.lowerBound - this.upperBound / this.lowerBound;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int g = this.lowerBound - this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int g = this.lowerBound - this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int g = -value / this.lowerBound;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int g = -value / this.lowerBound;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int g = this.lowerBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int g = this.lowerBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int g = this.upperBound - this.lowerBound / 2.0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int g = this.upperBound - this.lowerBound / 2.0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int g = this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int g = this.lowerBound / total;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int g = this.lowerBound - this.lowerBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int g = this.lowerBound - this.lowerBound * this.upperBound;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int g = this.lowerBound - this.lowerBound / + this.upperBound;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int g = this.lowerBound - this.lowerBound / + this.upperBound;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int g = this.lowerBound - this.upperBound * this.lowerBound;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int g = this.lowerBound - this.upperBound * this.lowerBound;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int g = this.upperBound - this.lowerBound / + this.upperBound;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int g = this.upperBound - this.lowerBound / + this.upperBound;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int g = this.upperBound - this.lowerBound / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int g = this.upperBound - this.lowerBound / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int g = 2 * this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int g = 2 * this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int g = this.lowerBound - this.lowerBound / 2.0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int g = this.lowerBound - this.lowerBound / 2.0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int g = this.lowerBound - this.upperBound / total;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int g = this.lowerBound - this.upperBound / total;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int g = this.lowerBound - v / this.upperBound;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int g = this.lowerBound - v / this.upperBound;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int g = (this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int g = (this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int g = (this.upperBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int g = (this.upperBound - this.lowerBound / 2;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int g = (this.lowerBound / this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int g = (this.lowerBound / this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int g = this.lowerBound - this.lowerBound / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int g = this.lowerBound - this.lowerBound / LOG10_VALUE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int g = this.upperBound -value / this.lowerBound;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int g = this.upperBound -value / this.lowerBound;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int g = this.upperBound - this.lowerBound / this.lowerBound;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int g = this.upperBound - this.lowerBound / this.lowerBound;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int g = (this.lowerBound / this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int g = (this.lowerBound / this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int g = this.upperBound - this.lowerBound / range;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int g = this.upperBound - this.lowerBound / range;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int g = v / this.lowerBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int g = v / this.lowerBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int g = 2 * this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int g = 2 * this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int g = this.upperBound - this.lowerBound / i;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int g = this.upperBound - this.lowerBound / i;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int g = this.lowerBound - this.upperBound / + this.upperBound;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int g = this.lowerBound - this.upperBound / + this.upperBound;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int g = this.lowerBound -value / this.upperBound;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int g = this.lowerBound -value / this.upperBound;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int g = this.upperBound - this.lowerBound / + 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int g = this.upperBound - this.lowerBound / + 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int g = this.upperBound - this.lowerBound / s;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int g = this.upperBound - this.lowerBound / s;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int g = this.upperBound - this.lowerBound * v;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int g = this.upperBound - this.lowerBound * v;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int g = pos - this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int g = pos - this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int g = this.lowerBound - this.upperBound / 2.0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int g = this.lowerBound - this.upperBound / 2.0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int g = this.lowerBound - this.lowerBound / LOG_10;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int g = this.lowerBound - this.lowerBound / LOG_10;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int g = this.upperBound - this.lowerBound / LOG_10;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int g = this.upperBound - this.lowerBound / LOG_10;",
                "identical": false
            }
        ],
        "buggy_line": "int g = (int) ((value - this.lowerBound) / (this.upperBound",
        "fixed_line": "int g = (int) ((v - this.lowerBound) / (this.upperBound"
    },
    "JacksonDatabind-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _bindAndReadValues.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _bindAndReadValues.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _bindAndReadValues.createParser(src, offset);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _bindAndReadValues.createParser(src, offset);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormat.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormat.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders, offset);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders, offset);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return _bindAndReadValues;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _bindAndReadValues;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0 || _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0 || _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._bind;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._bind;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != DISABLED;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != DISABLED;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonFormatReaders.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != JsonFormatReaders.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormatReaders.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != JsonFormatReaders.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders[0];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders[0];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _bindAndReadValues.createParsers(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _bindAndReadValues.createParsers(_jsonFactory.createParser(src), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _bindAndReadValues.createParser(_dataFormatReaders;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _bindAndReadValues.createParser(_dataFormatReaders;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _bindAndReadValues.createParsers(_dataFormatReaders;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _bindAndReadValues.createParsers(_dataFormatReaders;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _bindAndReadValues.createParser(src), _value);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return _bindAndReadValues.createParser(src), _value);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0 || _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0 || _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _bindAndReadValues.createParser(srcsrc), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _bindAndReadValues.createParser(srcsrc), _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return _bindAndReadValues.createParser(src), _valueReaders;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _bindAndReadValues.createParser(src), _valueReaders;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != JsonFormatReaders.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != JsonFormatReaders.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders != JsonFormatReaders;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _bindAndReadValues.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _bindAndReadValues.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders, offset;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders, offset;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != i;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != i;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _bindAndReadValues.createParser(src, offset;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _bindAndReadValues.createParser(src, offset;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != _valueFormatReaders;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _bindAndReadValues.createParser(_jsonFactory.createParser(src), _valueToUpdate;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != src._length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders != src._length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _bindAndReadValues.createParser(_parser, offset;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _bindAndReadValues.createParser(_parser, offset;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != srcFormatReaders;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != srcFormatReaders;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _bindAndReadValues.createParsers(_parser, offset;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _bindAndReadValues.createParsers(_parser, offset;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _bindAndReadValues.createParser(dataFormatReaders !=src;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._dataFormatReaders;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _bindAndReadValues.createParser(src), _valueFormatReaders != src._dataFormatReaders;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _bindAndReadValues.createParser(src;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _bindAndReadValues.createParser(src;",
                "identical": false
            }
        ],
        "buggy_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),",
        "fixed_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),"
    },
    "Lang-61": {
        "fixes": [
            {
                "k": 1,
                "patch": "int len = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int len = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int len = str.length - strLen;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int len = str.length - strLen;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int len = size - strLen;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int len = size - strLen;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int len = strLen - thisBuf.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int len = strLen - thisBuf.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int len = strLen - strLen;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int len = strLen - strLen;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int len = this.str.length - strLen;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int len = this.str.length - strLen;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int len = str.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int len = str.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int len = buffer.length - strLen;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int len = buffer.length - strLen;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int len = strLen - 1 + thisBuf.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int len = strLen - 1 + thisBuf.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int len = this.length - strLen;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int len = this.length - strLen;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int len = str.length - startIndex;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int len = str.length - startIndex;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int len = strLen - startIndex;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int len = strLen - startIndex;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int len = strLen - this.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int len = strLen - this.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int len = str.length - 1 + thisBuf.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int len = str.length - 1 + thisBuf.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int len = str.length - 2 * thisBuf.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int len = str.length - 2 * thisBuf.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int len = strLen - '0');",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int len = strLen - '0');",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int len = str.length - len;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int len = str.length - len;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int len = str.length - size;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int len = str.length - size;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int len =Stream.length - strLen;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int len =Stream.length - strLen;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int len = strLen - this.str.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int len = strLen - this.str.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int len = strLen - buffer.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int len = strLen - buffer.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int len = strLen - 2 * thisBuf.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int len = strLen - 2 * thisBuf.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int len = strLen - str.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int len = strLen - str.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int len = strLen - '0';",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int len = strLen - '0';",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int len = str.length - buffer.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int len = str.length - buffer.length;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int len = strBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int len = strBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int len = sourceBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int len = sourceBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int len = fullBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int len = fullBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int len = buf.length - strLen;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int len = buf.length - strLen;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int len = isBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int len = isBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int len = strLen - '0Buf.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int len = strLen - '0Buf.length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int len = strLen - 1 + strLen;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int len = strLen - 1 + strLen;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int len = searchBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int len = searchBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int len = strLen - start.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int len = strLen - start.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int len = str.length - start;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int len = str.length - start;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int len = minimum.length - strLen;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int len = minimum.length - strLen;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int len = this.str.length - startIndex;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int len = this.str.length - startIndex;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int len =ByDefault.length - strLen;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int len =ByDefault.length - strLen;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int len = searchLen - strLen;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int len = searchLen - strLen;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int len = str.length - 1 + strLen;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int len = str.length - 1 + strLen;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int len = strLen - size;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int len = strLen - size;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int len = str.length - '0');",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int len = str.length - '0');",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int len = str.length -3;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int len = str.length -3;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int len = strLen - 0, j;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int len = strLen - 0, j;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int len = j - strLen;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int len = j - strLen;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int len = max - strLen;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int len = max - strLen;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int len = size - str.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int len = size - str.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int len = strLen - start;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int len = strLen - start;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int len = strLen - len;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int len = strLen - len;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int len = this.str.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int len = this.str.length - thisBuf.length;",
                "identical": false
            }
        ],
        "buggy_line": "int len = thisBuf.length - strLen;",
        "fixed_line": "int len = size - strLen + 1;"
    },
    "Math-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "return FastMath.pow * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return FastMath.pow * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return FastMath.pow * HOUR.PI / FOURR2_LAST;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return FastMath.pow * HOUR.PI / FOURR2_LAST;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return FastMath.pow(10, -(2 * dim +Altern * 2) * 1000;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return FastMath.pow(10, -(2 * dim +Altern * 2) * 1000;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 2) * dim;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 2) * dim;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * dim;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * dim;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return FastMath.pow * HOUR.PI / r * 1000;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return FastMath.pow * HOUR.PI / r * 1000;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return FastMath.pow * HOUR.PI /registry.length - 1) * 4;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return FastMath.pow * HOUR.PI /registry.length - 1) * 4;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return FastMath.pow * HOUR.PI, - r * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return FastMath.pow * HOUR.PI, - r * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return FastMath.pow * HOUR.PI / 3.0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return FastMath.pow * HOUR.PI / 3.0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return FastMath.pow(2 * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return FastMath.pow(2 * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim / 7;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim / 7;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return FastMath.pow * HOUR.PI / FOURR2_LASTS.length - 2) * 1000;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return FastMath.pow * HOUR.PI / FOURR2_LASTS.length - 2) * 1000;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return FastMath.pow * HOUR.length, -pow * dim + 2) * dim;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return FastMath.pow * HOUR.length, -pow * dim + 2) * dim;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim * 2) / 7;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim * 2) / 7;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 3.0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 3.0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 7;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 7;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return FastMath.pow * HOUR.PI /HasSideEffects * 1000;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return FastMath.pow * HOUR.PI /HasSideEffects * 1000;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return FastMath.pow(10, - language * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return FastMath.pow(10, - language * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * dim + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) * dim + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 31 * dim / 7;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 31 * dim / 7;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * 2) / 7;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * 2) / 7;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim + 2) * dim;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim + 2) * dim;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 7 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 7 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return FastMath.pow(10, -(2 * dim +Altern * 2) / 7;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return FastMath.pow(10, -(2 * dim +Altern * 2) / 7;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 2) * dim + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 60 * dim / 2) * dim + 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return FastMath.pow(10, -(2 * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return FastMath.pow(10, -(2 * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return FastMath.pow *Secondary * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return FastMath.pow *Secondary * HOUR.PI / 7;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * 2) / 7;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * 2) / 7;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * 2) / 7;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * 2) / 7;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return FastMath.pow(2 *tem.PI / 7;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return FastMath.pow(2 *tem.PI / 7;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim / 3.0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim / 3.0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return FastMath.pow(2 * lowest, - 60 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return FastMath.pow(2 * lowest, - 60 * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim + 2) * 1000;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim + 2) * 1000;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return FastMath.pow *corre.PI / 7;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return FastMath.pow *corre.PI / 7;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim * 2) / 7;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return FastMath.pow(2 * HOUR.PI, -Assignments * dim * 2) / 7;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return FastMath.pow(10, -(2 * fraction.PI / 7;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return FastMath.pow(10, -(2 * fraction.PI / 7;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r / 2) * 1000;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r / 2) * 1000;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 31 * dim / 3.0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return FastMath.pow(2 * HOUR.PI, - 31 * dim / 3.0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return FastMath.pow * HOUR.length, -pow * dim + 2) * 1000;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return FastMath.pow * HOUR.length, -pow * dim + 2) * 1000;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return FastMath.pow(2 * coefficients.length - 1) * 4;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return FastMath.pow(2 * coefficients.length - 1) * 4;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return FastMath.pow * HOUR.PI / FOURR2_LAST) * s;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return FastMath.pow * HOUR.PI / FOURR2_LAST) * s;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return FastMath.pow * lowest, -log.PI / 7;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return FastMath.pow * lowest, -log.PI / 7;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * dim / 7;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return FastMath.pow(2 * HOUR.PI, - NaN * dim / 7;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return FastMath.pow * HOUR.PI, -oo * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return FastMath.pow * HOUR.PI, -oo * dim / 2) * 1000;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * 1000;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * 1000;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return FastMath.pow * HOUR.PI / FOURR_PER_DAY;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return FastMath.pow * HOUR.PI / FOURR_PER_DAY;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) *ERROR;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return FastMath.pow(2 * HOUR.PI, - r * dim / 2) *ERROR;",
                "identical": false
            }
        ],
        "buggy_line": "return FastMath.pow(2 * FastMath.PI, -dim / 2) *",
        "fixed_line": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *"
    },
    "JxPath-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return args[0].computeValue;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return args[0].computeValue;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return compute[0].computeValue;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return compute[0].computeValue;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return context[0].computeValue;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return context[0].computeValue;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return arguments[0].computeValue;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return arguments[0].computeValue;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return compute[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return compute[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return args[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return args[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return args[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return args[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return args[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return args[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return compute == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return compute == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return compute[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return compute[0].computeValue(context, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return compute[0].computeValue(context == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return compute[0].computeValue(context == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return args[0].computeValue(context, args[0].computeValue;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return args[0].computeValue(context, args[0].computeValue;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return args[0].computeValue(context, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return args[0].computeValue(context, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return compute[0].computeValue(context5, args[0].computeValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return compute[0].computeValue(context5, args[0].computeValue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return compute[0].computeValue(context, args[0].computeValue;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return compute[0].computeValue(context, args[0].computeValue;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return args[0].computeValue(context[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return args[0].computeValue(context[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return compute[0].computeValue(context[0].computeValue;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return compute[0].computeValue(context[0].computeValue;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return args[0].computeValue(context, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return args[0].computeValue(context, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return compute[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return compute[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return context[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return context[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return compute[0].computeValue(context ? 1 : 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return compute[0].computeValue(context ? 1 : 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return compute[0].computeValue(context || args[0].computeValue;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return compute[0].computeValue(context || args[0].computeValue;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return compute[0].computeValue(context5, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return compute[0].computeValue(context5, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return args[0].computeValue(context, args[1].computeValue[0].computeValue;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return args[0].computeValue(context, args[1].computeValue[0].computeValue;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return args[0].computeValue(context == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return args[0].computeValue(context == args[0].computeValue;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return compute[0].computeValue(context[0].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return compute[0].computeValue(context[0].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return args[0].computeValue(context, args[1].computeValue + \"computeValue\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return args[0].computeValue(context, args[1].computeValue + \"computeValue\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return args[0].computeValue(context ? 1 : 2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return args[0].computeValue(context ? 1 : 2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return args[0].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return args[0].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return compute[0].computeValue(context[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return compute[0].computeValue(context[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return compute[0].computeValue(context, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return compute[0].computeValue(context, args[1].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return arg[0].computeValue;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return arg[0].computeValue;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return computeF[0].computeValue;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return computeF[0].computeValue;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return args[0].computeValue(context ? 1 : 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return args[0].computeValue(context ? 1 : 0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return context[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return context[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return args[0].computeValue(context) ? 1 : 2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return args[0].computeValue(context) ? 1 : 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return args[0].computeValue(context5, args[0].computeValue;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return args[0].computeValue(context5, args[0].computeValue;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return args[0].computeValue(context5, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return args[0].computeValue(context5, args[1].computeValue;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return context[0].computeValue(args[1].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return context[0].computeValue(args[1].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return args[0].computeValue(context, args[0].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return args[0].computeValue(context, args[0].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return arguments[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return arguments[0].computeValue(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return args[0].computeValue(context, args[0].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return args[0].computeValue(context, args[0].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return compute[0].computeValue(context, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return compute[0].computeValue(context, args[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return compute[0].computeValue(context ? args[0].computeValue : args;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return compute[0].computeValue(context ? args[0].computeValue : args;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return computeCfg[0].computeValue;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return computeCfg[0].computeValue;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return arguments[0].computeValue(context[0].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return arguments[0].computeValue(context[0].computeValue ? 1 : 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return compute[0].computeValue(context, args[1].computeValue + \"computeValue\";",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return compute[0].computeValue(context, args[1].computeValue + \"computeValue\";",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return context[0].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return context[0].computeValue()[0].computeValue;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return compute[0].computeValue(context[1].computeValue;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return compute[0].computeValue(context[1].computeValue;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return args[0].computeValue(context[1].computeValue ? 1 : 2;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return args[0].computeValue(context[1].computeValue ? 1 : 2;",
                "identical": false
            }
        ],
        "buggy_line": "return compute(args[0].computeValue(context), args[1].computeValue(context))",
        "fixed_line": "return compute(args[0].compute(context), args[1].compute(context))"
    },
    "Chart-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (this.dataset != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (this.dataset != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (dataset != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (dataset != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (dataset == null) {",
                "identical": true
            },
            {
                "k": 6,
                "patch": "if (dataset == null) {",
                "identical": true
            },
            {
                "k": 7,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (this.dataset == null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (this.dataset == null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (renderer == null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (renderer == null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (this.dataset != null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (this.dataset != null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (this.dataset != nullTextdataset != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (this.dataset != nullTextdataset != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (this.dataset != nullFieldType.datasetIndex) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (this.dataset != nullFieldType.datasetIndex) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (index == null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (index == null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (this.dataset != nullS.datasetIndex) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (this.dataset != nullS.datasetIndex) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (this.dataset != nullTextdatasetIndex) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (this.dataset != nullTextdatasetIndex) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (existing != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (existing != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (removed == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (removed == null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (this.dataset != null) { // can this.dataset, series...",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (this.dataset != null) { // can this.dataset, series...",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (this.dataset != null) { // dataset to this.dataset, series...",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (this.dataset != null) { // dataset to this.dataset, series...",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (this.dataset != nullTextdataset.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (this.dataset != nullTextdataset.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (this.dataset != null) return 0;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (this.dataset != null) return 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (this.dataset != null) return index;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (this.dataset != null) return index;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (this.dataset != nullRenderingOrder.START) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (this.dataset != nullRenderingOrder.START) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (this.dataset != nullState.datasetIndex) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (this.dataset != nullState.datasetIndex) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (this.dataset != nullinitializationCount) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (this.dataset != nullinitializationCount) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (other.dataset != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (other.dataset != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (this.dataset != null) { // dataset to this.dataset; can't be null if we't the series",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (this.dataset != null) { // dataset to this.dataset; can't be null if we't the series",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (this.dataset != null) { // dataset to v is this.dataset, series...",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (this.dataset != null) { // dataset to v is this.dataset, series...",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (this.dataset != nullRenderingOrder.length) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (this.dataset != nullRenderingOrder.length) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (this.dataset != null) { // this.dataset, series...",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (this.dataset != null) { // this.dataset, series...",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (this.dataset != nullOutputStream.datasetIndex) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (this.dataset != nullOutputStream.datasetIndex) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (this.dataset != nullRenderingOrder.ASCENDING) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (this.dataset != nullRenderingOrder.ASCENDING) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (this.dataset != nullFieldType.seriesCount) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (this.dataset != nullFieldType.seriesCount) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (this.dataset != null) { // dataset to do this.dataset; can't be null if we't the series",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (this.dataset != null) { // dataset to do this.dataset; can't be null if we't the series",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (ivaluesShift != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (ivaluesShift != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (this.dataset != null) { // dataset to be null if we're looking up the series...",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (this.dataset != null) { // dataset to be null if we're looking up the series...",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (this.dataset != nullbuilderDataset.length) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (this.dataset != nullbuilderDataset.length) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (this.dataset != null) { // dataset to handle up the series...",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (this.dataset != null) { // dataset to handle up the series...",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (this.dataset != null) { // dataset to be null if we't the series",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (this.dataset != null) { // dataset to be null if we't the series",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (this.dataset != null) { // dataset to do this.dataset, series...",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (this.dataset != null) { // dataset to do this.dataset, series...",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (this.dataset != null) { // dataset to be null if we't this.dataset, series...",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (this.dataset != null) { // dataset to be null if we't this.dataset, series...",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (seriesCount != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (seriesCount != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (this.dataset != nullS.length) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (this.dataset != nullS.length) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (this.dataset != null) { // dataset to be null if we didn't really modify it't the series",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (this.dataset != null) { // dataset to be null if we didn't really modify it't the series",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (this.dataset != null) { // dataset to be null if we't the dataset is this.dataset",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (this.dataset != null) { // dataset to be null if we't the dataset is this.dataset",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (this.dataset != nullOrder.START_AS_VALUE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (this.dataset != nullOrder.START_AS_VALUE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (removed != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (removed != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (index != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (index != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (this.dataset != null) { // dataset to this.dataset; can't the series",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (this.dataset != null) { // dataset to this.dataset; can't the series",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (this.dataset != nullTextdatasetdataset != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (this.dataset != nullTextdatasetdataset != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (this.dataset != null) { // dataset to be null if we't really modify it't the series",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (this.dataset != null) { // dataset to be null if we't really modify it't the series",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (this.dataset != null) { // dataset to be null if we't the dataset is this.renderers;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (this.dataset != null) { // dataset to be null if we't the dataset is this.renderers;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (this.dataset != null) { // dataset to this.dataset; can't be null if we't the series...",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (this.dataset != null) { // dataset to this.dataset; can't be null if we't the series...",
                "identical": false
            }
        ],
        "buggy_line": "if (dataset != null) {",
        "fixed_line": "if (dataset == null) {"
    },
    "Codec-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (lineLength == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (lineLength == 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (lineLength > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (lineLength > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (lineLength == 0) { // first spill over?",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (lineLength == 0) { // first spill over?",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (lineLength == 0) { // first spill over iff ascii value",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (lineLength == 0) { // first spill over iff ascii value",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (lineLength == 0) { // first spill over't really need to check",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (lineLength == 0) { // first spill over't really need to check",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (lineLength == 0) { // If we didn't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (lineLength == 0) { // If we didn't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (lineLength == 0) { // note: can't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (lineLength == 0) { // note: can't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append,pos",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append,pos",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (lineLength == 0) { // first spill over't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (lineLength == 0) { // first spill over't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (lineLength == 0) { // If we didn't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (lineLength == 0) { // If we didn't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (lineLength == 0) { // first spill index",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (lineLength == 0) { // first spill index",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (lineIndex == -1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (lineIndex == -1) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (lineLength == 0) { // note: can't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (lineLength == 0) { // note: can't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (lineLength == 0) { // If we didn't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (lineLength == 0) { // If we didn't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, bufpos",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, bufpos",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't really modify it't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't really modify it't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (lineLength == 0) { // first spill over if we didn't really need to check",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (lineLength == 0) { // first spill over if we didn't really need to check",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do a sanity check",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do a sanity check",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't really modify it't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't really modify it't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (lineLength == 0) { // first spill over if we didn't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (lineLength == 0) { // first spill over if we didn't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really need to check",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really need to check",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (lineLength == 0) { // no longer belongs to be skipped between triplets",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (lineLength == 0) { // no longer belongs to be skipped between triplets",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (lineLength == 0) { // no done with't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (lineLength == 0) { // no done with't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (lineLength == 0) { // no attributes,pos",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (lineLength == 0) { // no attributes,pos",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (lineLength == 0) { // first spill over if we didn't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (lineLength == 0) { // first spill over if we didn't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (lineLength == 0) { // first spill overBuffer,pos",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (lineLength == 0) { // first spill overBuffer,pos",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's 2^",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's 2^",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (lineLength == 0) { // first spill over if we't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (lineLength == 0) { // first spill over if we't really need to be skipped between triplets",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really gets this class, 0, buf.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really gets this class, 0, buf.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't append,pos",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't append,pos",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (lineIndex == 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (lineIndex == 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't append, bufpos",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't append, bufpos",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't really modify it's do we't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't really modify it's do we't append, 0, bufpos",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't really modify it's do implicit re-parse",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't really modify it's do we't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it't really modify it's do we't append, 0, buf.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really need to check, just a sanity_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really need to check, just a sanity_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't append, 0, buf[pos];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't really modify it's do we't append, 0, buf[pos];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (lineLength == 0) { // first spill over if we't really need to check",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (lineLength == 0) { // first spill over if we't really need to check",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, 0, buf.length; col a sanity_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, 0, buf.length; col a sanity_TABLE_SIZE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, pos + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (lineLength == 0) { // If we didn't really modify it't append, pos + 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (lineLength == 0) { // If we didn't really modify it's do a sanity check",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (lineLength == 0) { // If we didn't really modify it's do a sanity check",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (lineLength == 0) { // first spill overdesc,pos",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (lineLength == 0) { // first spill overdesc,pos",
                "identical": false
            }
        ],
        "buggy_line": "if (lineLength > 0) {",
        "fixed_line": "if (lineLength > 0 && pos > 0) {"
    },
    "Codec-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "long len = getEncodeLengthEstimate, binaryData.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "long len = getEncodeLengthEstimate, binaryData.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "long len = getEncodeLength(data, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "long len = getEncodeLength(data, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "long len = getEncodeLengthEstimate, binaryData.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "long len = getEncodeLengthEstimate, binaryData.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "long len = getEncodeLength(data, binaryData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "long len = getEncodeLength(data, binaryData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "long len = getEncodeLength( header, binaryData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "long len = getEncodeLength( header, binaryData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "long len = getEncodeLengthEstimate, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "long len = getEncodeLengthEstimate, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "long len = getEncodeLengthData, binaryData.length);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "long len = getEncodeLengthData, binaryData.length);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "long len = getEncodeLength(ptr, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "long len = getEncodeLength(ptr, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "long len = getEncodeLengthData, binaryData.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "long len = getEncodeLengthData, binaryData.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "long len = getEncodeLength(KEY, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "long len = getEncodeLength(KEY, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "long len = getEncodeLength(buffer, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "long len = getEncodeLength(buffer, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "long len = getEncodeBOTTOM_CHUNK_SIZE, binaryData.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "long len = getEncodeBOTTOM_CHUNK_SIZE, binaryData.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "long len = getEncodeLength( caller, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "long len = getEncodeLength( caller, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "long len = getEncodeLengthEstimate, hashIndex, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "long len = getEncodeLengthEstimate, hashIndex, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "long len = getEncodeLength(ptrData, binaryData.length);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "long len = getEncodeLength(ptrData, binaryData.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "long len = getEncodeLength(relativeData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "long len = getEncodeLength(relativeData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "long len = getEncode( header, binaryData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "long len = getEncode( header, binaryData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "long len = getEncodeLength(inData, binaryData.length, maxLocals);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "long len = getEncodeLength(inData, binaryData.length, maxLocals);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "long len = getEncodeLength(ptrData, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "long len = getEncodeLength(ptrData, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "long len = getEncode(ptrData, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "long len = getEncode(ptrData, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "long len = getEncodeLength( header, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "long len = getEncodeLength( header, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "long len = getEncodeLengthData, hash, binaryData.length);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "long len = getEncodeLengthData, hash, binaryData.length);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "long len = getEncodeLength(lastData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "long len = getEncodeLength(lastData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "long len = getEncodeBOTTOM_CHUNK_SIZE, binaryData.length);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "long len = getEncodeBOTTOM_CHUNK_SIZE, binaryData.length);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "long len = getEncodeLength(relativeData, binaryData.length);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "long len = getEncodeLength(relativeData, binaryData.length);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "long len = getEncodeLengthEstimate, hashIndex, CHUNK_SEPARATOR.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "long len = getEncodeLengthEstimate, hashIndex, CHUNK_SEPARATOR.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "long len = getEncodeLengthData, hashIndex, CHUNK_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "long len = getEncodeLengthData, hashIndex, CHUNK_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "long len = getEncodeLength(ptrData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "long len = getEncodeLength(ptrData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "long len = getEncodeLength(implData, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "long len = getEncodeLength(implData, binaryData, maximalIterationCount);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxStackSize);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxStackSize);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "long len = getEncodeLength(Keys, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "long len = getEncodeLength(Keys, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "long len = getEncodeLength(NEWData, binaryData.length);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "long len = getEncodeLength(NEWData, binaryData.length);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "long len = getEncodeedLengthEstimate, binaryData.length);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "long len = getEncodeedLengthEstimate, binaryData.length);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "long len = getEncodeLength(Data, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "long len = getEncodeLength(Data, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "long len = getEncode(startData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "long len = getEncode(startData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "long len = getEncode(startData, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "long len = getEncode(startData, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "long len = getEncodeLength(dfData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "long len = getEncodeLength(dfData, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "long len = getEncodeLength(maxData, binaryData.length);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "long len = getEncodeLength(maxData, binaryData.length);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "long len = getEncodeLength(ptrData, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "long len = getEncodeLength(ptrData, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "long len = getEncodeLengthData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "long len = getEncodeLengthData, 0, binaryData.length);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "long len = getEncodeLength(outData, binaryData.length, maxLocals);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "long len = getEncodeLength(outData, binaryData.length, maxLocals);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "long len = getEncodeLength(inData, binaryData.length, maxCode);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "long len = getEncodeLength(inData, binaryData.length, maxCode);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "long len = getEncodeedLength(ptr, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "long len = getEncodeedLength(ptr, binaryData, maxLocals);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "long len = getEncodeLength(lastData, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "long len = getEncodeLength(lastData, binaryData, maxResult);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "long len = getEncodeLengthEstimateData, binaryData.length);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "long len = getEncodeLengthEstimateData, binaryData.length);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxLen);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "long len = getEncodeLength(ptr, binaryData, maxLen);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "long len = getEncode(ptrData, binaryData, maxCode);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "long len = getEncode(ptrData, binaryData, maxCode);",
                "identical": false
            }
        ],
        "buggy_line": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "fixed_line": "long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);"
    },
    "Math-58": {
        "fixes": [
            {
                "k": 1,
                "patch": "return guess;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return guess;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return rawClassetric(), guess;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return rawClassetric(), guess;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return raw.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return raw.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return rawParent.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return rawParent.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return rawClassetricLit.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return rawClassetricLit.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return rawClassetricLit.new Gaussian = guess;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return rawClassetricLit.new Gaussian = guess;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return raw.new Gaussian;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return raw.new Gaussian;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return rawClassetric*/.new Gaussian;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return rawClassetric*/.new Gaussian;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return DEFAULT_INTERIOR_GAP;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return DEFAULT_INTERIOR_GAP;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return rawClassetric.new Gaussian;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return rawClassetric.new Gaussian;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return fit.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return fit.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return rawClassetric1_.new Gaussian;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return rawClassetric1_.new Gaussian;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return rawClassetricLit.new Gaussian;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return rawClassetricLit.new Gaussian;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return Main.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return Main.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return raw.new Gaussianing;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return raw.new Gaussianing;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return rawClassetricToString.new Gaussian;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return rawClassetricToString.new Gaussian;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return raw.new Gaussian % guess;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return raw.new Gaussian % guess;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return rawClassInfo.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return rawClassInfo.new Gaussianetric(), guess;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return raw.new Gaussian % written;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return raw.new Gaussian % written;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return raw.new Gaussian %Out;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return raw.new Gaussian %Out;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return raw.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return raw.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return raw.new GaussianBounds;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return raw.new GaussianBounds;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return rawClassetric*/.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return rawClassetric*/.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return rawClassetricLit.new Gaussian(), guess",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return rawClassetricLit.new Gaussian(), guess",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return rawClassetricLit.new Gaussian =lbetric(), guess;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return rawClassetricLit.new Gaussian =lbetric(), guess;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return rawClassetricLit.new Gaussian(), guess);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return rawClassetricLit.new Gaussian(), guess);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return rawClassetricLit.new Gaussian_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return rawClassetricLit.new Gaussian_PROTOTYPE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return rawClassetricToString.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return rawClassetricToString.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return rawClassetricLin.new Gaussian;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return rawClassetricLin.new Gaussian;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return rawClassetricStep.new Gaussianing;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return rawClassetricStep.new Gaussianing;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return Main.new Gaussian_;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return Main.new Gaussian_;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return rawClassetric1_.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return rawClassetric1_.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return rawClassetric.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return rawClassetric.new Gaussian(), guess;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return rawParent.new Gaussian",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return rawParent.new Gaussian",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return rawClassetricLit.new Gaussianing;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return rawClassetricLit.new Gaussianing;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return rawClassInfo.new Gaussianing;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return rawClassInfo.new Gaussianing;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return rawClassetric.new Gaussianing;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return rawClassetric.new Gaussianing;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return raw.new Gaussian % 23, 52;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return raw.new Gaussian % 23, 52;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return rawClassArray.new Gaussian;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return rawClassArray.new Gaussian;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return raw.new Gaussian %class;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return raw.new Gaussian %class;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return rawParent.new Gaussian % guess;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return rawParent.new Gaussian % guess;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return rawParent.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return rawParent.new Gaussian % 4;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return rawClassetricLit.new Gaussian = instanceType;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return rawClassetricLit.new Gaussian = instanceType;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return raw.new Gaussian % border;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return raw.new Gaussian % border;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return rawParent.new Gaussianing;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return rawParent.new Gaussianing;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return rawClassetricStep.new GaussianBounds;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return rawClassetricStep.new GaussianBounds;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return rawClassetric.new Gaussian = guess;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return rawClassetric.new Gaussian = guess;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return Main.new Gaussianing;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return Main.new Gaussianing;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return rawClassetricLit.new GaussianS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return rawClassetricLit.new GaussianS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return rawClassetricLit.new Gaussian);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return rawClassetricLit.new Gaussian);",
                "identical": false
            }
        ],
        "buggy_line": "return fit(new Gaussian.Parametric(), guess);",
        "fixed_line": "return fit(guess);"
    },
    "Cli-40": {
        "fixes": [
            {
                "k": 1,
                "patch": "return str;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return str;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return property;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return property;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.maximumURL;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return this.maximumURL;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this.maxURL;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.maxURL;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return toURL;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return toURL;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return NO_TOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return NO_TOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return isURL;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return isURL;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return NO_TOTYPE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return NO_TOTYPE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.toURL;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this.toURL;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return this.emptyURL;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this.emptyURL;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return EMPTY_TOTYPE_AND_TOTYPE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return EMPTY_TOTYPE_AND_TOTYPE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return NO_TOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return NO_TOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return NO_TOTYPE_AND_TOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return NO_TOTYPE_AND_TOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return NO_TOTYPE_VALUE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return NO_TOTYPE_VALUE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return NO_TOTYPE_AND_TOTYPE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return NO_TOTYPE_AND_TOTYPE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return NO_TOTYPE_AND_TOTYPE_EFFECTS;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return NO_TOTYPE_AND_TOTYPE_EFFECTS;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return fromURL;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return fromURL;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return NO_TOTYPE_EFFECTS;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return NO_TOTYPE_EFFECTS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return EMPTY_TOTYPE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return EMPTY_TOTYPE;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return defURL;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return defURL;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this.defaultURL;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return this.defaultURL;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return NO_TOTYPE_AND_TOTYPE_VALUE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return NO_TOTYPE_AND_TOTYPE_VALUE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return propertyURL;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return propertyURL;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return NO_TOTYPE_MEMBER_DELTA;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return NO_TOTYPE_MEMBER_DELTA;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return this.null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return EMPTY_TOTYPE_AND_TOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return EMPTY_TOTYPE_AND_TOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return NO_TOTYPE_MEMBER_DEFINE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return NO_TOTYPE_MEMBER_DEFINE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return EMPTY_TOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return EMPTY_TOTYPE_EFF;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return NO_TOTYPE_ESCAPE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return NO_TOTYPE_ESCAPE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return this.rawURL;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return this.rawURL;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return createURL;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return createURL;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return str; // returns to create object the it's do to create object.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return str; // returns to create object the it's do to create object.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return str; // returns original String when the default is to create object?",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return str; // returns original String when the default is to create object?",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return NO_TOTYPE_AND_TOTYPE_PRINT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return NO_TOTYPE_AND_TOTYPE_PRINT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return NO_TOTYPE_EOL;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return NO_TOTYPE_EOL;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return EMPTY_TOTYPE_AND_TOTYPE_EFFECTS;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return EMPTY_TOTYPE_AND_TOTYPE_EFFECTS;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return NO_TOTYPE_STATIC;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NO_TOTYPE_STATIC;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return NO_TOTYPE_MEMBER_EFF;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return NO_TOTYPE_MEMBER_EFF;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return NO_TOTYPE_MEMBER_DELEGATE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return NO_TOTYPE_MEMBER_DELEGATE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return NO_TOTYPE_AND_TOTYPE_DEPRECATED;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return NO_TOTYPE_AND_TOTYPE_DEPRECATED;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return NO_TOTYPE_AND_TOTYPE_ECTS;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return NO_TOTYPE_AND_TOTYPE_ECTS;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return str; // returns original String when possible",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return str; // returns original String when possible",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return str; // returns original String when the",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return str; // returns original String when the",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return EMPTY_TOTYPE_AND_TOTYPE_VALUE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return EMPTY_TOTYPE_AND_TOTYPE_VALUE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return NO_TOTYPE_AND_TOTYPE_EOL;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return NO_TOTYPE_AND_TOTYPE_EOL;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return NO_TOTYPE_AND_TOTYPE_ESCAPE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return NO_TOTYPE_AND_TOTYPE_ESCAPE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "returnstr;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "returnstr;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return EMPTY_TOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return EMPTY_TOTYPE_MEMBER_DEPRECATED;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return NO_TOTYPE_MASK;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return NO_TOTYPE_MASK;",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "throw new ParseException(\"Unable to handle the class: \" + clazz);"
    },
    "Collections-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "private Object readResolve() {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private Object readResolve() {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private Object readResolveS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private Object readResolveS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private Object readResolveSing {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private Object readResolveSing {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private Object readResolveS = _hashSeed;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private Object readResolveS = _hashSeed;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private Object readResolveJsDoc = _hashSeed;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private Object readResolveJsDoc = _hashSeed;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private Object readResolveS_hours;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private Object readResolveS_hours;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private Object readResolveS_IMATE_MATCH;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private Object readResolveS_IMATE_MATCH;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private Object readResolveS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private Object readResolveS_PER_SECOND;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private Object readResolveS_IMATE_EFFECTS_MATCH;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private Object readResolveS_IMATE_EFFECTS_MATCH;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private Object readResolveSing { // no longer belongs to an InsnList",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private Object readResolveSing { // no longer belongs to an InsnList",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private Object readResolveS = this.keys;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private Object readResolveS = this.keys;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private Object readResolveloader;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private Object readResolveloader;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private Object readResolveS = 31;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private Object readResolveS = 31;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private Object readResolveS_IMATE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private Object readResolveS_IMATE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private Object readResolveS_IMATE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private Object readResolveS_IMATE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private Object readResolveS_FORMAT_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private Object readResolveS_FORMAT_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private Object readResolveS_FORMAT_EFF;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private Object readResolveS_FORMAT_EFF;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private Object readResolveS = 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private Object readResolveS = 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private Object readResolveJsDoc;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private Object readResolveJsDoc;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private Object readResolveSESTIMATE_MATCH;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private Object readResolveSESTIMATE_MATCH;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private Object readResolveS_WITHOUT_CONSTRUCTOR;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private Object readResolveS_WITHOUT_CONSTRUCTOR;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private Object readResolveS_IMATE_EFFECTS_ARRAY;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private Object readResolveS_IMATE_EFFECTS_ARRAY;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private Object readResolveS_IMATE_EMBEDDED;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private Object readResolveS_IMATE_EMBEDDED;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private Object readResolveS_IMATE_EFFECTS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private Object readResolveS_IMATE_EFFECTS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private Object readResolveS = _bufferedEnd;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private Object readResolveS = _bufferedEnd;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private Object readResolveS_1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private Object readResolveS_1) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private Object readResolveTOTYPE_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private Object readResolveTOTYPE_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private Object readResolveS = systemHashCode;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private Object readResolveS = systemHashCode;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private Object readResolveS_FORMAT_EFFECTS_ARRAY;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private Object readResolveS_FORMAT_EFFECTS_ARRAY;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private Object readResolveS_FORMAT_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private Object readResolveS_FORMAT_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private Object readResolveTOTYPE_EFFECTS;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private Object readResolveTOTYPE_EFFECTS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_PER_SIZE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_PER_SIZE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private Object readResolveSESTIMATE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private Object readResolveSESTIMATE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private Object readResolveS_IMATE_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private Object readResolveS_IMATE_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private Object readResolve() { keys.length; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private Object readResolve() { keys.length; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private Object readResolveS = 6;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private Object readResolveS = 6;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private Object readResolveS_IMATE_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private Object readResolveS_IMATE_EFFECTS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private Object readResolveSESTIMATE_EFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private Object readResolveSESTIMATE_MATCHEFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private Object readResolveSESTIMATE_MATCHEFFECTS_SIZE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_COMMA;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_COMMA;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private Object readResolveS = systemMoments;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private Object readResolveS = systemMoments;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private Object readResolveS_FORMAT_EFFECTS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private Object readResolveS_FORMAT_EFFECTS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_SEPARATOR;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private Object readResolveTOTYPE_AND_EFFECTS_SEPARATOR;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private Object readResolveS_FORMAT_EFFECTS.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private Object readResolveS_FORMAT_EFFECTS.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private Object readResolveS_IMATE_EMBEDDED_MATCH;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private Object readResolveS_IMATE_EMBEDDED_MATCH;",
                "identical": false
            }
        ],
        "buggy_line": "private Object readResolve() {",
        "fixed_line": "protected Object readResolve() {"
    },
    "Jsoup-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "clone.classNames = clone;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "clone.classNames = clone;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "clone.classNames;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "clone.classNames;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "clone.classNames.classNames;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "clone.classNames.classNames;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "clone.classNames != INDEX_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "clone.classNames != INDEX_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "clone.classNames.classNames = clone;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "clone.classNames.classNames = clone;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "clone.classNames) clone.classNames;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "clone.classNames) clone.classNames;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "clone.classNames != Long.class;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "clone.classNames != Long.class;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "clone.classNamesOffset = clone;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "clone.classNamesOffset = clone;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "clone.classNames != prev.class;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "clone.classNames != prev.class;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "clone.classNames != prev.classNames;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "clone.classNames != prev.classNames;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "clone.classNamesFor(this.class);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "clone.classNamesFor(this.class);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "clone.classNames = clone.classNames;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "clone.classNames = clone.classNames;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "clone.classNamesing = clone;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "clone.classNamesing = clone;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "clone.classNames.classNamesFor(this.class);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "clone.classNames.classNamesFor(this.class);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "clone.classNames != prev;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "clone.classNames != prev;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "clone.classNamesout = clone;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "clone.classNamesout = clone;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "clone.classNamesFor current = clone;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "clone.classNamesFor current = clone;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "clone.classNames = clone.class;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "clone.classNames = clone.class;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "clone.classNames != had.class;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "clone.classNames != had.class;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "clone.classNames != parent.class;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "clone.classNames != parent.class;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "clone.classNames.classNames(this.classNames;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "clone.classNames.classNames(this.classNames;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "clone.classNames.classNames(this.class);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "clone.classNames.classNames(this.class);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "clone.classNames.classNames(clone.classNames;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "clone.classNames.classNames(clone.classNames;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "clone.classNames != Timestamp.class;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "clone.classNames != Timestamp.class;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "clone.classNames !=Parameters.class;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "clone.classNames !=Parameters.class;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "clone.classNames != VALUE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "clone.classNames != VALUE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "clone.classNames.classNames(clone.classNames);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "clone.classNames.classNames(clone.classNames);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "clone.classNamesShared = clone;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "clone.classNamesShared = clone;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "clone.classNames != null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "clone.classNames != null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "clone.classNamesForDayNames.classNames;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "clone.classNamesForDayNames.classNames;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "clone.classNamesShared -= clone;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "clone.classNamesShared -= clone;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "clone.classNames6 = clone;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "clone.classNames6 = clone;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "clone.classNames[0] = clone;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "clone.classNames[0] = clone;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "clone.classNames != clone;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "clone.classNames != clone;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "clone.classNames.classNames) current = clone;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "clone.classNames.classNames) current = clone;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "clone.classNames.classNamesForDay(this.class);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "clone.classNames.classNamesForDay(this.class);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "clone.classNamesForDayNames.class;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "clone.classNamesForDayNames.class;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "clone.classNamesForDayNames;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "clone.classNamesForDayNames;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "clone.classNames != superNames;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "clone.classNames != superNames;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "clone.classNames.classNames(this.classNames);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "clone.classNames.classNames(this.classNames);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "clone.classNames !=Delta;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "clone.classNames !=Delta;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "clone.classNames != pos;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "clone.classNames != pos;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "clone.classNames.classNames != Long.class;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "clone.classNames.classNames != Long.class;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "clone.classNamescurr = clone;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "clone.classNamescurr = clone;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "clone.classNames != VALUE_TYPE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "clone.classNames != VALUE_TYPE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "clone.classNames) clone;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "clone.classNames) clone;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "clone.classNamesOffset = clone.class;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "clone.classNamesOffset = clone.class;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "clone.classNamesOffset = clone.classNames;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "clone.classNamesOffset = clone.classNames;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "clone.classNames = classNames;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "clone.classNames = classNames;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "clone.classNames.classNames( clone);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "clone.classNames.classNames( clone);",
                "identical": false
            }
        ],
        "buggy_line": "clone.classNames();",
        "fixed_line": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames"
    },
    "JacksonDatabind-97": {
        "fixes": [
            {
                "k": 1,
                "patch": "gen.writeObject(_value);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "gen.writeObject(_value);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "gen.writeObject(_value;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "gen.writeObject(_value;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "gen.writeObject(_valueType);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "gen.writeObject(_valueType);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "gen.writeObject(_valueInstantiator;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "gen.writeObject(_valueInstantiator;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "gen.writeObject(_value != _value;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "gen.writeObject(_value != _value;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "gen.writeObject(_valueType != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "gen.writeObject(_valueType != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "gen.writeObject(_valueType != _value;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "gen.writeObject(_valueType != _value;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "gen.writeObject(_value != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "gen.writeObject(_value != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "gen.writeObject(_valueInstantiator, _value;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "gen.writeObject(_valueInstantiator, _value;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "gen.writeObject(_valueType != JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "gen.writeObject(_valueType != JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "gen.writeObject(_value != JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "gen.writeObject(_value != JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "gen.writeObject(_valueInstantiator, _value);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "gen.writeObject(_valueInstantiator, _value);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "gen.writeObject(_valueName);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "gen.writeObject(_valueName);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "gen.writeObject(_valueToEvaluate);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "gen.writeObject(_valueToEvaluate);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "gen.writeObject(_value != JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "gen.writeObject(_valueInstantiator);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "gen.writeObject(_valueInstantiator);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "gen.writeObject(_valueToSkip);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "gen.writeObject(_valueToSkip);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s",
                "identical": false
            },
            {
                "k": 52,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s",
                "identical": false
            },
            {
                "k": 53,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw'",
                "identical": false
            },
            {
                "k": 54,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw'",
                "identical": false
            },
            {
                "k": 55,
                "patch": "gen.writeObject(_valueSerializers;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "gen.writeObject(_valueSerializers;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "gen.writeObject(_value != JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "gen.writeObject(_value != JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 60,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 61,
                "patch": "gen.writeObject(_value, type);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "gen.writeObject(_value, type);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "gen.writeObject(_value, _value;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "gen.writeObject(_value, _value;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do implicit re-parse",
                "identical": false
            },
            {
                "k": 66,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do implicit re-parse",
                "identical": false
            },
            {
                "k": 67,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_OBJECT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_OBJECT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "gen.writeObject(_value, cc;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "gen.writeObject(_value, cc;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "gen.writeObject(_valueHandler != _value;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "gen.writeObject(_valueHandler != _value;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 74,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 75,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls do not store 'raw'",
                "identical": false
            },
            {
                "k": 76,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls do not store 'raw'",
                "identical": false
            },
            {
                "k": 77,
                "patch": "gen.writeObject(_valueType != JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "gen.writeObject(_valueType != JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "gen.writeObject(_value != JsonEncoding.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "gen.writeObject(_value != JsonEncoding.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "gen.writeObject(_value != _valueType);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "gen.writeObject(_value != _valueType);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "gen.writeObject(_valueName;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "gen.writeObject(_valueName;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NAME;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NAME;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "gen.writeObject(_valueType != JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls not store 'raw'",
                "identical": false
            },
            {
                "k": 90,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling wrapping for impls not store 'raw'",
                "identical": false
            },
            {
                "k": 91,
                "patch": "gen.writeObject(_valueBuffer);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "gen.writeObject(_valueBuffer);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "gen.writeObject(_valueToWrap);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "gen.writeObject(_valueToWrap);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "gen.writeObject(_valueType != JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "gen.writeObject(_valueType != JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "gen.writeObject(_value, _value);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "gen.writeObject(_value, _value);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw' bytes",
                "identical": false
            },
            {
                "k": 100,
                "patch": "gen.writeObject(_value) { // [JACKSON-407] -- allow disabling of s's do not store 'raw' bytes",
                "identical": false
            }
        ],
        "buggy_line": "gen.writeObject(_value);",
        "fixed_line": "ctxt.defaultSerializeValue(_value, gen);"
    },
    "JacksonDatabind-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) {}",
                "identical": false
            },
            {
                "k": 10,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) {}",
                "identical": false
            },
            {
                "k": 11,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) break;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) break;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "|| TreeNode.class.isAssignableFrom(list.getRawClass()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "|| TreeNode.class.isAssignableFrom(list.getRawClass()));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)-3;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)-3;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[0];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[0];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "|| TreeNode.class.isAssignableFrom(rhs.getRawClass()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "|| TreeNode.class.isAssignableFrom(rhs.getRawClass()));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) || t.getRawClass();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) || t.getRawClass();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "|| TreeNode.class.isAssignableFrom(parentType.getRawClass()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "|| TreeNode.class.isAssignableFrom(parentType.getRawClass()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.getRawClass()));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.getRawClass()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) {}",
                "identical": false
            },
            {
                "k": 32,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) {}",
                "identical": false
            },
            {
                "k": 33,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.OBJECTLIT;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.OBJECTLIT;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.START_OBJECT;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[t.getRawClass()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[t.getRawClass()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) || t.getRawClass;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) || t.getRawClass;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) break;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) break;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) sb;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) sb;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "|| TreeNode.class.isAssignableFrom( halfType.getRawClass()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "|| TreeNode.class.isAssignableFrom( halfType.getRawClass()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) hClass;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) hClass;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.ARRAY;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.ARRAY;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.OBJECT;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.OBJECT;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.NAME;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.NAME;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == ConcreteType.class;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == ConcreteType.class;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.getRawClass()));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.getRawClass()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.class;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.class;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) != t.class;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) != t.class;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class).getRawClass()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class).getRawClass()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) != parent.getRawClass;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) != parent.getRawClass;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "|| TreeNode.class.isAssignableFrom(superClass;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "|| TreeNode.class.isAssignableFrom(superClass;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "|| TreeNode.class.isAssignableFrom(superClass, t.getRawClass()));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "|| TreeNode.class.isAssignableFrom(superClass, t.getRawClass()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[t.getRawClassHasSideEffects];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)[t.getRawClassHasSideEffects];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)Type.getRawClass();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)Type.getRawClass();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "|| TreeNode.class.isAssignableFrom(doc.getRawClass()));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "|| TreeNode.class.isAssignableFrom(doc.getRawClass()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)edType.getRawClass();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)edType.getRawClass();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) || t.getRawClassHasSideEffects;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) || t.getRawClassHasSideEffects;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) || t.getRawClass()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) || t.getRawClass()));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "|| TreeNode.class.isAssignableFrom(callNode.getRawClass()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "|| TreeNode.class.isAssignableFrom(callNode.getRawClass()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "|| TreeNode.class.isAssignableFrom(parent.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)endar",
                "identical": false
            },
            {
                "k": 96,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class)endar",
                "identical": false
            },
            {
                "k": 97,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) == JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) !=LECT_.getRawClass;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "|| TreeNode.class.isAssignableFrom(t.class) !=LECT_.getRawClass;",
                "identical": false
            }
        ],
        "buggy_line": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
        "fixed_line": "&& !TreeNode.class.isAssignableFrom(t.getRawClass()));"
    },
    "Gson-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (value || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (value || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (value instanceof Double || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (value instanceof Double || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (this.isNaN || value.isInfinite;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (this.isNaN || value.isInfinite;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (value instanceof Double || this.value;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (value instanceof Double || this.value;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (this.isNaN || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (this.isNaN || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (this.value instanceof Double || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (this.value instanceof Double || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (value || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (value || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (this.value != Double.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (this.value != Double.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (this.value == Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (this.value == Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || value.isInfinite;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || value.isInfinite;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || value;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || value;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (value instanceof Double || this.value) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (value instanceof Double || this.value) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (this.valueType == Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (this.valueType == Double.NEGATIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (this.valueType == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (this.valueType == Double.POSITIVE_INFINITY || this.value;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (value < this.value || Double.isInfinite)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (value < this.value || Double.isInfinite)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (this.value != Double.POSITIVE_INFINITY && value;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (this.value != Double.POSITIVE_INFINITY && value;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY && value;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY && value;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (value < this.maximumValue || value.isInfinite;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (value < this.maximumValue || value.isInfinite;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || value.isInfinite;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || value.isInfinite;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (this.value != Double.MIN_VALUE || this.value;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (this.value != Double.MIN_VALUE || this.value;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (value < this.value || Double.isInfinite;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (value < this.value || Double.isInfinite;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (this.value != Double.MIN_VALUE && value;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (this.value != Double.MIN_VALUE && value;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (this.value instanceof Double || value.isInfinite;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (this.value instanceof Double || value.isInfinite;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (value < this.value || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (value < this.value || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || value;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || value;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (value.isNaN || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (value.isNaN || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (this.value && value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (this.value && value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.value) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || this.value) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (value < this.value || Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (value < this.value || Double.isInfinite) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (value < this.maximumValue || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (value < this.maximumValue || value.isInfinite) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (this.valueNaN || Double.isInfinite;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (this.valueNaN || Double.isInfinite;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (this.value instanceof Double) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (this.value instanceof Double) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (this.value != Double.NEGATIVE_INFINITY || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (value instanceof Double || value.isInfinite;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (value instanceof Double || value.isInfinite;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (this.value && value.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (this.value && value.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (this.value != Double.POSITIVE_INFINITY || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (value.isNaN || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (value.isNaN || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (value.isNaN || value;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (value.isNaN || value;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (this.value == Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (this.value == Double.NEGATIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (this.value != Double.POSITIVE_INFINITY && value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (this.value != Double.POSITIVE_INFINITY && value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (value.isNaN || value.isInfinite_VALUE) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (value.isNaN || value.isInfinite_VALUE) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (this.valueType == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (this.valueType == Double.POSITIVE_INFINITY || this.isInfinite;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || value.isInfinite;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (this.value == Double.POSITIVE_INFINITY || value.isInfinite;",
                "identical": false
            }
        ],
        "buggy_line": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
        "fixed_line": "if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {"
    },
    "Csv-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c >= '0' && c <= '9') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c >= '0' && c <= '9') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c <= '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c <= '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c <= 'z') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c <= 'z') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c <= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c <= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c < '0' || c > '9') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c < '0' || c > '9') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c > '9' || c < 'A' || c > '9') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c > '9' || c < 'A' || c > '9') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c <= 'A' || c > '9') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c <= 'A' || c > '9') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c >= 'A' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c >= 'A' && c <= 'Z') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c <= 'A' || c > 'Z' || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c <= 'A' || c > 'Z' || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c >= '0' && c <= 'A' || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c <= 'Z' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c <= 'Z' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c <= 'A' && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c <= 'A' && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c < '0' || c > '9' || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c < '0' || c > '9' || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c <= 'Z' || c > '9') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c <= 'Z' || c > '9') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > '9') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > '9') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c <= '0' && c <= '9') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c <= '0' && c <= '9') || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c <= '0' && c <= '9') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c <= '0' && c <= '9') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c < '0' || c > '9') || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c < '0' || c > '9') || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c >= '0' && c <= '9') || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c >= '0' && c <= '9') || c < 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c > '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c > '0' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c <= 'A' || c > 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c <= 'A' || c > 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c > '9' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c > '9' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > 'a' || c > 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > 'a' || c > 'a' || c > '9') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c <= '0' && c <= 'A' || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c <= '0' && c <= 'A' || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c >= '0' && c <= '9') && c <= 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c >= '0' && c <= '9') && c <= 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c <= '9' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c <= '9' && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= '9') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c <= 'A' || c > 'Z' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c <= 'A' || c > 'Z' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c >= '0' && c <= '9') || c > 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c >= '0' && c <= '9') || c > 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c >= '0' && c <= '9') || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c <= 'A' || c >= 'Z' && c <= 'a' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c > '9' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c > '9' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c < '0' || c > '9') && c <= 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c < '0' || c > '9') && c <= 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c >= '0' && c <= '9') continue;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c >= '0' && c <= '9') continue;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > 'a' || c > 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c > '9' || c < 'A' || c > 'Z' || c > 'a' || c > 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c <= 'A' && c <= 'Z') || c >= 'a' && c <= 'z')) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c <= 'A' || c >= 'Z') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c <= 'A' || c >= 'Z') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c >= '0' && c <= '9') || c >= '0' && c <= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c >= '0' && c <= '9') || c >= '0' && c <= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c <= 'Z && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c <= 'Z && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            }
        ],
        "buggy_line": "if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {",
        "fixed_line": "if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {"
    },
    "Closure-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (options.closurePass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (options.closurePass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (options.closurePass && options.needsPass) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (options.closurePass && options.needsPass) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (options.closurePass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (options.closurePass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (options.closurePass && options.closurePass;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (options.closurePass && options.closurePass;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (options.closures && options.closurePass) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (options.closures && options.closurePass) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (options.closuresRoot || options.closurePass) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (options.closuresRoot || options.closurePass) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (options.closurePass && options.needsPass;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (options.closurePass && options.needsPass;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (options.closuresRoot && options.closurePass) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (options.closuresRoot && options.closurePass) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (options.closurePass && options.closuresRoot;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (options.closurePass && options.closuresRoot;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (options.closurePass && options.closurees;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (options.closurePass && options.closurees;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (options.closurePass && options.closurePrimitives == options.needsPass) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (options.closurePass && options.closurePrimitives == options.needsPass) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (options.closurePass && options.closurePrimitives) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (options.closurePass && options.closurePrimitives) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (options.closurePass && options.closurePoint.needsPass) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (options.closurePass && options.closurePoint.needsPass) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (options.removePass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (options.removePass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (options.closuresRoot && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (options.closuresRoot && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (options.closurePass && options.closurees) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (options.closurePass && options.closurees) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (options.closuresRoot || options.closurePass;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (options.closuresRoot || options.closurePass;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (options.closurePass && options.closure) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (options.closurePass && options.closure) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (options.closurePass && options.referPass) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (options.closurePass && options.referPass) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (options.closurePass && options.closureNames) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (options.closurePass && options.closureNames) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (options.closurees && options.needsPass) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (options.closurees && options.needsPass) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (options.closurePass && options.closurePrPass) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (options.closurePass && options.closurePrPass) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (options.closurePass && options.closure ROUND) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (options.closurePass && options.closure ROUND) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (options.closures && options.closurePass;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (options.closures && options.closurePass;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (options.closurePass && options.closurePrimitives.needsPass) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (options.closurePass && options.closurePrimitives.needsPass) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (options.aliasOptions && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (options.aliasOptions && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (options.closurePass && options.closuresRoot != options.closurePass) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (options.closurePass && options.closuresRoot != options.closurePass) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (options.aliasOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (options.aliasOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (options.needsPass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (options.needsPass && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (options.checkInputs && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (options.checkInputs && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (options.needsPass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (options.needsPass && options.closurePass) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (options.closuresRoot && options.closurePass;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (options.closuresRoot && options.closurePass;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (options.closures && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (options.closures && options.closuresRoot) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (options.closurees && options.closurePass) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (options.closurees && options.closurePass) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (options.parseOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (options.parseOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (options.aliasOptions || options.needsPass) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (options.aliasOptions || options.needsPass) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (options.closurePass && options.closure namespaces) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (options.closurePass && options.closure namespaces) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (options.closurePass && options.closurePass)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (options.closurePass && options.closurePass)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (options.closurePass && options.closureStrings) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (options.closurePass && options.closureStrings) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (options.closures && options.needsPass) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (options.closures && options.needsPass) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (options.closurePass && options.closure STR) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (options.closurePass && options.closure STR) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (options.closurePass && options.closure\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (options.closurePass && options.closure\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (options.closurePass && options.closurePrimitives;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (options.closurePass && options.closurePrimitives;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (options.closurePass && options.noPass) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (options.closurePass && options.noPass) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (options.closurePass && options.gridPass) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (options.closurePass && options.gridPass) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (options.closurePass && options.closure spec) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (options.closurePass && options.closure spec) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (options.closurePass && options.closureated) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (options.closurePass && options.closureated) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (options.removePass || options.closurePass) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (options.removePass || options.closurePass) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (options.closurePass && options.loadPass) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (options.closurePass && options.loadPass) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (options.closurePass && options.closureFactor) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (options.closurePass && options.closureFactor) {",
                "identical": false
            }
        ],
        "buggy_line": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
        "fixed_line": "if (options.dependencyOptions.needsManagement()) {"
    },
    "Mockito-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (typeParameterTypeParameters.iParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (typeParameterTypeParameters.iParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (typeParameterTypeParameters.ENUM) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (typeParameterTypeParameters.ENUM) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (typeParameterTypeParameters.typeParameter) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (typeParameterTypeParameters.typeParameter) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (typeParameterTypeParameters.TYPE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (typeParameterTypeParameters.TYPE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (typeParameterTypeArgument) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (typeParameterTypeArgument) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (typeParameterTypeParameters.MI) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (typeParameterTypeParameters.MI) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (typeParameterTypeParameters.refParameter) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (typeParameterTypeParameters.refParameter) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (typeParameterTypeParameters.scope) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (typeParameterTypeParameters.scope) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (typeParameterTypeParameters.ALL) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (typeParameterTypeParameters.ALL) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (typeParameterTypeParameters.instanceTypeParameters) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (typeParameterTypeParameters.instanceTypeParameters) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (typeParameterTypeParameters.SIGNATURES) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (typeParameterTypeParameters.SIGNATURES) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (typeParameterTypeParameters. /= 2;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (typeParameterTypeParameters. /= 2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (typeParameterTypeParameters.FUNCTION) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (typeParameterTypeParameters.FUNCTION) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (typeParameterTypeParameters.MODE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (typeParameterTypeParameters.MODE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (typeParameterTypeParameters.aints) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (typeParameterTypeParameters.aints) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (typeParameterTypeParameters.iParameterType(0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (typeParameterTypeParameters.iParameterType(0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (typeParameterTypeParameters.forceTypeParameters) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (typeParameterTypeParameters.forceTypeParameters) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (typeParameterType(0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (typeParameterType(0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (typeParameterTypeParameters. remainder != type) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (typeParameterTypeParameters. remainder != type) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (typeParameterTypeParameters.Border) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (typeParameterTypeParameters.Border) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (typeParameterTypeParameters.TransformTypeParameters) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (typeParameterTypeParameters.TransformTypeParameters) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (typeParameterTypeParameters.class) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (typeParameterTypeParameters.class) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (typeParameterTypeParameters.bytes) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (typeParameterTypeParameters.bytes) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (typeParameterTypeParameters. wait) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (typeParameterTypeParameters. wait) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (typeParameterTypeParameters.able) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (typeParameterTypeParameters.able) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (typeParameterTypeParameters.tooltips) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (typeParameterTypeParameters.tooltips) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (typeParameterTypeParameters.prototypeParameter) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (typeParameterTypeParameters.prototypeParameter) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (typeParameterTypeParameters.iParameterTypeParameters != type) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (typeParameterTypeParameters.iParameterTypeParameters != type) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (typeParameterTypeParameters.refParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (typeParameterTypeParameters.refParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (typeParameterTypeParameters.MI_ENUM) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (typeParameterTypeParameters.MI_ENUM) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (typeParameterTypeParameters.NONE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (typeParameterTypeParameters.NONE) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (typeParameterTypeParameters.piParameter) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (typeParameterTypeParameters.piParameter) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (typeParameterTypeParameters.STRING) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (typeParameterTypeParameters.STRING) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (typeParameterTypeParameters.iParameter",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (typeParameterTypeParameters.iParameter",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (typeParameterTypeParameters.ArcTypeParameters) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (typeParameterTypeParameters.ArcTypeParameters) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (typeParameterTypeParameters.iParameter) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (typeParameterTypeParameters.iParameter) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (typeParameterTypeParameters.pi) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (typeParameterTypeParameters.pi) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (typeParameterTypeParameters.NO_TYPE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (typeParameterTypeParameters.NO_TYPE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (typeParameterTypeParameters.ALL_TYPE) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (typeParameterTypeParameters.ALL_TYPE) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (typeParameterTypeParameters.LEN) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (typeParameterTypeParameters.LEN) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (typeParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (typeParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (typeParameterTypeParameters.ENUM = type) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (typeParameterTypeParameters.ENUM = type) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (typeParameterTypeParameters.typeParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (typeParameterTypeParameters.typeParameterTypeParameters) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (typeParameterTypeParameters.Horizontal {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (typeParameterTypeParameters.Horizontal {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (typeParameterTypeParameters.EN) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (typeParameterTypeParameters.EN) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (typeParameterTypeParameters != 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (typeParameterTypeParameters != 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (typeParameterTypeParameters.UserParameter) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (typeParameterTypeParameters.UserParameter) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (typeParameterTypeParameters. 29Parameter) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (typeParameterTypeParameters. 29Parameter) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (typeParameterTypeParameters. fallback) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (typeParameterTypeParameters. fallback) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (typeParameterTypeParameters.value) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (typeParameterTypeParameters.value) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (typeParameter != actualTypeArgument) {"
    },
    "Math-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "return multiply.doubleValue();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return multiply.doubleValue();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return multiply;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return multiply;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this. percentageValue.doubleValue();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return this. percentageValue.doubleValue();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return this.un(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return this.un(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this.un(100Value;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.un(100Value;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this.percent(100Value;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return this.percent(100Value;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return this.percent(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this.percent(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this.ModulesValue.doubleValue();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this.ModulesValue.doubleValue();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "returnAnnotations.doubleValue();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnAnnotations.doubleValue();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.unmodifiableValue.doubleValue();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this.unmodifiableValue.doubleValue();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return multiply(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return multiply(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this.visitorValue.doubleValue();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this.visitorValue.doubleValue();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return multiply percentageValue.doubleValue();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return multiply percentageValue.doubleValue();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this. percentageValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this. percentageValue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this.insValue.doubleValue();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this.insValue.doubleValue();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return delegate.doubleValue();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return delegate.doubleValue();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return this.pieValue.doubleValue();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this.pieValue.doubleValue();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return multiplyMinValue.doubleValue();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return multiplyMinValue.doubleValue();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return this.Rule.doubleValue();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this.Rule.doubleValue();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return this.xFFValue.doubleValue();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this.xFFValue.doubleValue();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return multiplyStatValue.doubleValue();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return multiplyStatValue.doubleValue();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this.fractionValue.doubleValue();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return this.fractionValue.doubleValue();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return this.YYValue.doubleValue();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this.YYValue.doubleValue();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return multiplyYValue.doubleValue();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return multiplyYValue.doubleValue();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this.ptypeValue.doubleValue();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return this.ptypeValue.doubleValue();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return multiplyNamespace.doubleValue();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return multiplyNamespace.doubleValue();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return multiplyCollection.doubleValue();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return multiplyCollection.doubleValue();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return multiplyUtil.doubleValue();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return multiplyUtil.doubleValue();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this.c(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return this.c(100Value.doubleValue();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this.YYValue;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this.YYValue;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return this.unmodifiableValue;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return this.unmodifiableValue;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this.anchorValue;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this.anchorValue;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return multiplyEnd.doubleValue();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return multiplyEnd.doubleValue();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this. 2001Value;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this. 2001Value;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this.fractionValue;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this.fractionValue;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this.ModulesValue;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this.ModulesValue;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this.percentAtValue.doubleValue();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this.percentAtValue.doubleValue();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this.c(100Value;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this.c(100Value;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return multiply(100Value;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return multiply(100Value;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.percentAtValue;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this.percentAtValue;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this.endValue;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return this.endValue;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return this.pieValue;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this.pieValue;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this.insValue;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this.insValue;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return this. percentageValue();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return this. percentageValue();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this.visitorValue;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.visitorValue;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return this.updatedValue;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this.updatedValue;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return this.RuleValue;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this.RuleValue;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this.xFFValue;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this.xFFValue;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.verboseValue;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return this.verboseValue;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return multiply.doubleValue;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return multiply.doubleValue;",
                "identical": false
            }
        ],
        "buggy_line": "return multiply(100).doubleValue();",
        "fixed_line": "return 100 * doubleValue();"
    },
    "Math-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (dialps > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (dialps > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (entry.compareTo(i, max, 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (entry.compareTo(i, max, 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (entry.compareTo(i, 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (entry.compareTo(i, 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (kdialps > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (kdialps > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (entry.compareTo(loopEntry, i, 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (entry.compareTo(loopEntry, i, 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (entry.compareTo(i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (entry.compareTo(i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (entry.compareTo(i, 0) == 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entry.compareTo(i, 0) == 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (entry.compareTo(i, max, 0);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (entry.compareTo(i, max, 0);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (this.dialps > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (this.dialps > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (Offsets.compareTo(i, max, 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (Offsets.compareTo(i, max, 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (entry.compareTo(loopEntry, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (entry.compareTo(loopEntry, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (entry.compareTo(i, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (entry.compareTo(i, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (entry.compareTo(sibling, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry.compareTo(sibling, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (entry.compareTo(Pointialps, i > 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry.compareTo(Pointialps, i > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( this.dialps > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( this.dialps > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry.compareTo( selectialps, 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (entry.compareTo( selectialps, 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (entry.compareTo(Pointialps, 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (entry.compareTo(Pointialps, 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Offsets.compareTo(i, max, 0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (Offsets.compareTo(i, max, 0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (entry.compareTo(loopEntry, i, maximalIterationCount > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (entry.compareTo(loopEntry, i, maximalIterationCount > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (entry.compareTo(increment, 0) >= 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (entry.compareTo(increment, 0) >= 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (entry.compareTo( this.dialps, 0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (entry.compareTo( this.dialps, 0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (entry.compareTo(kd, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (entry.compareTo(kd, entryOffset > 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (entry.compareTo( Spreadsheet, i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (entry.compareTo( Spreadsheet, i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (entry.compareTo(Point, i > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (entry.compareTo(Point, i > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (entry.compareTo(loopvar, i, max, 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (entry.compareTo(loopvar, i, max, 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (entry.compareTo(loopvar, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (entry.compareTo(loopvar, i, max) > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (entry.compareTo(Point, i) > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (entry.compareTo(Point, i) > 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (classesTodialps.compareTo(x, y) > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (classesTodialps.compareTo(x, y) > 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (entry.compareTo( language, i, 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (entry.compareTo( language, i, 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (entry.compareTo(bt, i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (entry.compareTo(bt, i, 0) > 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (entry.compareTo(Annotations, i, 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (entry.compareTo(Annotations, i, 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (entry.compareTo(loop, 0) > 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (entry.compareTo(loop, 0) > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Offsets.compareTo(i, 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Offsets.compareTo(i, 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry.compareTo(args, i >= 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (entry.compareTo(args, i >= 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (entry.compareTo(loopEntry, i, max, 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (entry.compareTo(loopEntry, i, max, 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (entry.compareTo( this.dialps, 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (entry.compareTo( this.dialps, 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (entry.compareTo(FIXialps, 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (entry.compareTo(FIXialps, 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (classesTodialps.compareTo(x, y, i) > 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (classesTodialps.compareTo(x, y, i) > 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (classesTodialps.compareTo(x, i) > 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (classesTodialps.compareTo(x, i) > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (entry.compareTo(Offsets, i, 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (entry.compareTo(Offsets, i, 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (entry.compareTo( Spreadsheet, i, 0) == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (entry.compareTo( Spreadsheet, i, 0) == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (entry.compareTo( (! (! (! (! (! (! (! (! (! (! (! positive, i >= 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (entry.compareTo(loopEntry, i, maxElements) > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry.compareTo(loopEntry, i, maxElements) > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (entry.compareTo(x, 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (entry.compareTo(x, 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "fixed_line": "if (Precision.compareTo(entry, 0d, epsilon) > 0) {"
    },
    "JacksonDatabind-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "return ctxt;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return ctxt;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return t;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return t;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return defaultType;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return defaultType;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return deser;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return deser;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return actualType;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return actualType;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return .deser;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return .deser;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return NOT_A_CONSTRUCTOR;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return NOT_A_CONSTRUCTOR;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return VALUE_TYPE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return VALUE_TYPE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _defaultValue;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _defaultValue;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return NOT_A_NUMBER;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return NOT_A_NUMBER;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return ser;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return ser;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return NOT_A_NAME;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return NOT_A_NAME;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return NOT_A_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return NOT_A_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return NOT_A_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return NOT_A_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _deser;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _deser;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return NOT_A_NUMBER_AS_NODE_TYPE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return NOT_A_NUMBER_AS_NODE_TYPE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't be parametri but do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't be parametri but do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return NO_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return NO_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return NOT_A_ URL_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return NOT_A_ URL_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] to do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] to do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-desercing should never happen but do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-desercing should never happen but do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't be parametri but do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't be parametri but do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return result;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return result;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't run but do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't run but do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return NONE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return NONE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return NOT_A_ITEM_ARRAY;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return NOT_A_ITEM_ARRAY;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] to do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] to do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return NO_VALUE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return NO_VALUE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return NO_FASTRACT_TYPE; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of \"+ctxt, can't be parametri of current value",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return NO_FASTRACT_TYPE; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of \"+ctxt, can't be parametri of current value",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-desercing should never happen but do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-desercing should never happen but do implicit re-407] -- allow disabling of current value first",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return ret;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return ret;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_FASTRACT_TYPE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_ITEM_AS_ARRAY;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_ITEM_AS_ARRAY;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return NOT_A_TYPE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return NOT_A_TYPE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of \"+ctxt, can't be parametri of current value",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return NOT_A_CONSTRUCTOR; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of \"+ctxt, can't be parametri of current value",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-parse",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-parse",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return NO_FASTRACT_TYPE; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of \"+ctxt, can't be parametri of current value first",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return NO_FASTRACT_TYPE; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of \"+ctxt, can't be parametri of current value first",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _valueType;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _valueType;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return NO_FASTRACT_TYPE; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of \"+ctxt, can't do implicit re-parse",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return NO_FASTRACT_TYPE; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of \"+ctxt, can't do implicit re-parse",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_FASTRACT_ITEM_AS_ARRAY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_FASTRACT_ITEM_AS_ARRAY;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] to do implicit re-parse",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] to do implicit re-parse",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_AS_NODE_TYPE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return NOT_A_TO_ANNOTATION_DUPPER_FASTRACT_AS_NODE_TYPE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value set",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-407] -- allow disabling of current value set",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return NO_FASTRACT_TYPE; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return NO_FASTRACT_TYPE; // to do implicit re-hi 'default't do implicit re-407] -- allow disabling of current value",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-desercing should never happen but do implicit re-407] to do implicit re-parse",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return NOT_A_CONSTRUCTOR; // to be parametri, can't do implicit re-desercing should never happen but do implicit re-407] to do implicit re-parse",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "return NullifyingDeserializer.instance;"
    },
    "Time-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "Partial newPartial = new Partial, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Partial newPartial = new Partial, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Partial newPartial = new Partial;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Partial newPartial = new Partial;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Partial newPartial = new Partial(0, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Partial newPartial = new Partial(0, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Partial newPartial = new Partial, iChronology, newTypes;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Partial newPartial = new Partial, iChronology, newTypes;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Partial newPartial = new Partial, newTypes, _length - iValues.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Partial newPartial = new Partial, newTypes, _length - iValues.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Partial newPartial = new Partial, newTypes, iValues);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Partial newPartial = new Partial, newTypes, iValues);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Partial newPartial = new Partial, newTypes, newValues;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Partial newPartial = new Partial, newTypes, newValues;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Partial newPartial = newPartial, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Partial newPartial = newPartial, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - iValues.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - iValues.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Partial newPartial = new Partial, newTypes, this.length - iValues.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Partial newPartial = new Partial, newTypes, this.length - iValues.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Partial newPartial = new Partial[iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Partial newPartial = new Partial[iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Partial newPartial = new Partial, newTypes, this.iChronology);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Partial newPartial = new Partial, newTypes, this.iChronology);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Partial newPartial = new Partial, iChronology, newTypes);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Partial newPartial = new Partial, iChronology, newTypes);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Partial newPartial = new PartialSIF, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Partial newPartial = new PartialSIF, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - iValues;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - iValues;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Partial newPartial = new Partial(0, iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Partial newPartial = new Partial(0, iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Partial newPartial = new Partial>(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Partial newPartial = new Partial>(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Partial newPartial = new Partial, iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Partial newPartial = new Partial, iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Partial newPartial = iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Partial newPartial = iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1, newValues.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length + 1, newValues.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - iValues);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - iValues);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Partial newPartial = new Partial; //, newTypes, newValues",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Partial newPartial = new Partial; //, newTypes, newValues",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Partial newPartial = new Partial(1, iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Partial newPartial = new Partial(1, iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Partial newPartial = new Partial, newTypes, 0, iValues.length);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Partial newPartial = new Partial, newTypes, 0, iValues.length);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Partial newPartial = new PartialThreshold, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Partial newPartial = new PartialThreshold, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Partial newPartial = new Partial(0, newTypes, iValues, newValues);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Partial newPartial = new Partial(0, newTypes, iValues, newValues);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Partial newPartial = newTypes, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Partial newPartial = newTypes, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Partial newPartial = new Partial, newTypes, this.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Partial newPartial = new Partial, newTypes, this.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Partial newPartial = new PartialChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Partial newPartial = new PartialChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1, newValues.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - 1, newValues.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Partial newPartial = new Partial, newTypes, iValuesCount + 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Partial newPartial = new Partial, newTypes, iValuesCount + 1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Partial newPartial = new Partial, newTypes, isValues);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Partial newPartial = new Partial, newTypes, isValues);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Partial newPartial = new PartialKey, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Partial newPartial = new PartialKey, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Partial newPartial = new Partial desc, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Partial newPartial = new Partial desc, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - iValuesCount;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Partial newPartial = new Partial, newTypes, iValues.length - iValuesCount;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Partial newPartial = new Partial(1, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Partial newPartial = new Partial(1, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Partial newPartial = new Partial, newTypes, this.length);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Partial newPartial = new Partial, newTypes, this.length);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Partial newPartial = new Partial, newTypes, this.length - iValues;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Partial newPartial = new Partial, newTypes, this.length - iValues;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Partial newPartial = new PartialPrinter, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Partial newPartial = new PartialPrinter, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length - iValues.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Partial newPartial = new PartialSIF, newTypes, iValues.length - iValues.length;",
                "identical": false
            }
        ],
        "buggy_line": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
        "fixed_line": "Partial newPartial = new Partial(newTypes, newValues, iChronology);"
    },
    "Closure-86": {
        "fixes": [
            {
                "k": 1,
                "patch": "return false;",
                "identical": true
            },
            {
                "k": 2,
                "patch": "return false;",
                "identical": true
            },
            {
                "k": 3,
                "patch": "return false; // Definitely a read.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return false; // Definitely a read.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return false; // P P1_GT_PMD",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return false; // P P1_GT_PMD",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return false; // null or: can't really modify it should be from here.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return false; // null or: can't really modify it should be from here.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return false; // can't be but we'll set",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return false; // can't be but we'll set",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return false; // P1_GT_PMD",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return false; // P1_GT_PMD",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return false; // can't be null if it'll set",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return false; // can't be null if it'll set",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return false; // normalize it'll set on the pre, value",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return false; // normalize it'll set on the pre, value",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_ARRAY",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_ARRAY",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return false; // null or: can't be null if it'll set",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return false; // null or: can't be null if it'll set",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return false; // can't do sanity check",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return false; // can't do sanity check",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return false; // null or: can't run type",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return false; // null or: can't run type",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_ARRAY",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_ARRAY",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return false; // can't be but we'll set on the pre, null",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return false; // can't be but we'll set on the pre, null",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return false; // normalize it't the pre, value",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return false; // normalize it't the pre, value",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return false; // can't be null if it'll set:",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return false; // can't be null if it'll set:",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return false; // can't be valid for now on the pre, null",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return false; // can't be valid for now on the pre, null",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return false; // null or: can't really modify it'll set on the pre, null",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return false; // null or: can't really modify it'll set on the pre, null",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return false; // can't be but we't run type",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return false; // can't be but we't run type",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return false; // null or: can't really modify it should be null if it' ) return false;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return false; // null or: can't really modify it should be null if it' ) return false;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_OBJECTLIT",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_OBJECTLIT",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return false; // null or: can't really modify it'll set",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return false; // null or: can't really modify it'll set",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_Local",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_Local",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return false; // null or: can't really modify it should be from",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return false; // null or: can't really modify it should be from",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return false; // null or: can't really modify it should be from here",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return false; // null or: can't really modify it should be from here",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return false; // null or: can't really modify it should be null if there.",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return false; // null or: can't really modify it should be null if there.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return false; // null or: can't really modify it should be null if there are extra elements;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return false; // null or: can't really modify it should be null if there are extra elements;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return false; // can't be for now on the pre, null",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return false; // can't be for now on the pre, null",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return false; // null or: can't be null if it'll set:",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return false; // null or: can't be null if it'll set:",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return false; // note: can't be from here.",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return false; // note: can't be from here.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return false; // null or: can't really modify it should be null if it should be from here.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return false; // null or: can't really modify it should be null if it should be from here.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return false; // can't be but raw the pre, value",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return false; // can't be but raw the pre, value",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return false; // null or: can't really modify it should check",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return false; // null or: can't really modify it should check",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_OBJECTLIT",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_OBJECTLIT",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return false; // can't be valid for now on the pre, value",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return false; // can't be valid for now on the pre, value",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_AFTER_ARRAY",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_AFTER_ARRAY",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_Local",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_Local",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_OBJECT",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_OBJECT",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_TO",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_TO",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_AFTER_ARRAY",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_AFTER_ARRAY",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return false; // null or: can't be null if it't run type",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return false; // null or: can't be null if it't run type",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return false; // null or: can't the first value",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return false; // null or: can't the first value",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_OBJECT",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return false; // can't be valid for now on the pre, null if hasJSDOC_EXPR_OBJECT",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPECT_VALUE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return false; // can't be valid for now on the pre, null if has matrix is passed in deliberately",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return false; // can't be valid for now on the pre, null if has matrix is passed in deliberately",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return false; // null or: can't be from here.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return false; // null or: can't be from here.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_NAME;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_NAME;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_AFTER_NAME;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return false; // can't be for now on the pre, null if hasJSDOC_EXPR_AFTER_NAME;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return false; // can't be null if it't the pre, to check",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return false; // can't be null if it't the pre, to check",
                "identical": false
            }
        ],
        "buggy_line": "return true;",
        "fixed_line": "return false;"
    },
    "Codec-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "txt = txt.replaceAll(\"m2\");\", txt);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "txt = txt.replaceAll(\"m2\");\", txt);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "txt = txt.replaceAll(\"m2\");\",secondary);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "txt = txt.replaceAll(\"m2\");\",secondary);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "txt = txt.replaceAll(\"m2\");\", n);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "txt = txt.replaceAll(\"m2\");\", n);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "txt = txt.replaceAll(\"m2\");\", getScope);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "txt = txt.replaceAll(\"m2\");\", getScope);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "txt = txt.replaceAll\", \"m2\");Gap;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "txt = txt.replaceAll\", \"m2\");Gap;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "txt = txt.replaceAll(\"m\"))\", el);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "txt = txt.replaceAll(\"m\"))\", el);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\"););",
                "identical": false
            },
            {
                "k": 20,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\"););",
                "identical": false
            },
            {
                "k": 21,
                "patch": "txt = txt.replaceAll(\"m2\");\", from;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "txt = txt.replaceAll(\"m2\");\", from;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\"););",
                "identical": false
            },
            {
                "k": 24,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\"););",
                "identical": false
            },
            {
                "k": 25,
                "patch": "txt = txt.replaceAll(\"m\"))\", getScope);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "txt = txt.replaceAll(\"m\"))\", getScope);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "txt = txt.replaceAll(\"mlo\",2\"););",
                "identical": false
            },
            {
                "k": 28,
                "patch": "txt = txt.replaceAll(\"mlo\",2\"););",
                "identical": false
            },
            {
                "k": 29,
                "patch": "txt = txt.replaceAll(\"m2\");\", \"m2\"););",
                "identical": false
            },
            {
                "k": 30,
                "patch": "txt = txt.replaceAll(\"m2\");\", \"m2\"););",
                "identical": false
            },
            {
                "k": 31,
                "patch": "txt = txt.replaceAll\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "txt = txt.replaceAll\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "txt = txt.replaceAll(\"m2\");\", \": \" + txt;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "txt = txt.replaceAll(\"m2\");\", \": \" + txt;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "txt = txt.replaceAll(\"m2\");\", input);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "txt = txt.replaceAll(\"m2\");\", input);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "txt = txt.replaceAll\", \"m2\"); >= 0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "txt = txt.replaceAll\", \"m2\"); >= 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "txt = txt.replaceAll\", \"m2\"););",
                "identical": false
            },
            {
                "k": 44,
                "patch": "txt = txt.replaceAll\", \"m2\"););",
                "identical": false
            },
            {
                "k": 45,
                "patch": "txt = txt.replaceAll(\"m2\");\", 1) );",
                "identical": false
            },
            {
                "k": 46,
                "patch": "txt = txt.replaceAll(\"m2\");\", 1) );",
                "identical": false
            },
            {
                "k": 47,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "txt = txt.replaceAll(\"m2\");\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "txt = txt.replaceAll(\"m2\");\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\", txt);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\", txt);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "txt = txt.replaceAll(\"milliseconds\",2\"););",
                "identical": false
            },
            {
                "k": 54,
                "patch": "txt = txt.replaceAll(\"milliseconds\",2\"););",
                "identical": false
            },
            {
                "k": 55,
                "patch": "txt = txt.replaceAll(\"m2\");\",[0]));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "txt = txt.replaceAll(\"m2\");\",[0]));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "txt = txt.replaceAll(\"m2\");\", mu);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "txt = txt.replaceAll(\"m2\");\", mu);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "txt = txt.replaceAll\", \"m2\");PUTESCAPE_SIZE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\", \"m2\"););",
                "identical": false
            },
            {
                "k": 62,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\", \"m2\"););",
                "identical": false
            },
            {
                "k": 63,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "txt = txt.replaceAll(\"m2\");\", 1));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "txt = txt.replaceAll(\"m2\");\", 1));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");Go;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");Go;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "txt = txt.replaceAll(\"m2\");\",cent + 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "txt = txt.replaceAll(\"m2\");\",cent + 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll\", \"m2\");PUTESCAPE_FRAMES);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "txt = txt.replaceAll(\"m2\");\", el);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "txt = txt.replaceAll(\"m2\");\", el);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");etics;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");etics;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "txt = txt.replaceAll(\"m\"))\",[0]));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "txt = txt.replaceAll(\"m\"))\",[0]));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\",secondary);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\",secondary);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "txt = txt.replaceAll(\"\\\\Y\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "txt = txt.replaceAll\", \"m2\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "txt = txt.replaceAll\", \"m2\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "txt = txt.replaceAll(\"m2\");\", char.m2\"););",
                "identical": false
            },
            {
                "k": 86,
                "patch": "txt = txt.replaceAll(\"m2\");\", char.m2\"););",
                "identical": false
            },
            {
                "k": 87,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\");;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "txt = txt.replaceAll(\"mhi\", \"m2\");;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "txt = txt.replaceAll(\"m\"))\", \"m2\");\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "txt = txt.replaceAll(\"\\\\mb\", \"m2\");Go);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "txt = txt.replaceAll(\"m2\");\", charno);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "txt = txt.replaceAll(\"m2\");\", charno);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\", from;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\", from;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "txt = txt.replaceAll(\"m2\");\", output);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "txt = txt.replaceAll(\"m2\");\", output);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\",[0]));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"m2\");\",[0]));",
                "identical": false
            }
        ],
        "buggy_line": "txt = txt.replaceAll(\"^mb\", \"m2\");",
        "fixed_line": "txt = txt.replaceAll(\"mb$\", \"m2\");"
    },
    "Math-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "return solve;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return solve;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return solve.0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return solve.0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return solveArgs, max;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return solveArgs, max;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return solveFunctionType.min, max);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return solveFunctionType.min, max);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return solvemultiply(min, max, f);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return solvemultiply(min, max, f);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return solveFunction, max;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return solveFunction, max;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return solveSuperInstance(min, max);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return solveSuperInstance(min, max);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return solveSuperInstance(min, max, f);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return solveSuperInstance(min, max, f);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return solveArgs, max);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return solveArgs, max);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return solveType.min, max);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return solveType.min, max);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return solve(min, max);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return solve(min, max);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return solveSuper.min, max);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return solveSuper.min, max);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return solvemultiply(min, max, f) { return min; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return solvemultiply(min, max, f) { return min; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return solveUtil.min, max);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return solveUtil.min, max);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return solve { return min, max;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return solve { return min, max;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return solveFunctionType.min(min, max, f);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return solveFunctionType.min(min, max, f);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return solveArgs = max, f;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return solveArgs = max, f;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return solveExterns, max;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return solveExterns, max;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return solveTo(min, max);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return solveTo(min, max);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return solveExterns, max);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return solveExterns, max);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return solve { return min, max; }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return solve { return min, max; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return solveVar.min, max);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return solveVar.min, max);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return solveSuper.min, max;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return solveSuper.min, max;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return solveFunctionType.min, initial;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return solveFunctionType.min, initial;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return solve.0, max;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return solve.0, max;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return solve(min, max, f);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return solve(min, max, f);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return solve.0, max);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return solve.0, max);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return solveSuper, max;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return solveSuper, max;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return solvemultiply(min, max);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return solvemultiply(min, max);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return solveFunctionType.min, max;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return solveFunctionType.min, max;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return solveterns, max;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return solveterns, max;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return solve { return max, f; }",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return solve { return max, f; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return solvemultiply(min, max, f;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return solvemultiply(min, max, f;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return solveSuperInstance(min, max, f) { return min; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return solveSuperInstance(min, max, f) { return min; }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return solveSuperInstance(min, max, f;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return solveSuperInstance(min, max, f;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return solveFunctionType.min(min, max);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return solveFunctionType.min(min, max);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return solveFunctionType.min, max) { return min; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return solveFunctionType.min, max) { return min; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return solveFunction, max);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return solveFunction, max);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return solvemultiply(min, max, f) { return min;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return solvemultiply(min, max, f) { return min;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return solveFunctionType.min, max, f);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return solveFunctionType.min, max, f);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return solveUtil.min, max;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return solveUtil.min, max;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return solveFunctionType.min(min, max, f) { return min; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return solveFunctionType.min(min, max, f) { return min; }",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return solve; max, f) { return min; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return solve; max, f) { return min; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return solveVar.min, max;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return solveVar.min, max;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return solve { return solve, max; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return solve { return solve, max; }",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return solveStyle, max;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return solveStyle, max;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return solveSuperInstance(min, max;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return solveSuperInstance(min, max;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return solve { return max, f;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return solve { return max, f;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return solve; max, double f.min, max);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return solve; max, double f.min, max);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return solvemultiply(min, max, f) { return min; return min; }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return solvemultiply(min, max, f) { return min; return min; }",
                "identical": false
            }
        ],
        "buggy_line": "return solve(min, max);",
        "fixed_line": "return solve(f, min, max);"
    },
    "Jsoup-43": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (element.equals(element)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (element.equals(element)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (element.equals(i)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (element.equals(i)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (element == elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (element == elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (element.equals(STR)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (element.equals(STR)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (element.equals( element)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (element.equals( element)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (element == elements.pi) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (element == elements.pi) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (element == elements.id) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (element == elements.id) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (elements.equals( element) == elements;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (elements.equals( element) == elements;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (element == elements.TYPE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (element == elements.TYPE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (element.equals( elements)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (element.equals( elements)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (element == elements.i) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (element == elements.i) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (element == elements.\".equals(element)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (element == elements.\".equals(element)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (element == elements.ARRAY) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (element == elements.ARRAY) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (element == elements.UN over) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (element == elements.UN over) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (element != elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (element != elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (element == elements.number) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (element == elements.number) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (elements == elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (elements == elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (element == elements.LONG) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (element == elements.LONG) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (element == elements.STRING) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (element == elements.STRING) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (element == i) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (element == i) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (element == elements.FUNCTION) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (element == elements.FUNCTION) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (element.equals(ll)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (element.equals(ll)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (element == elements.value) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (element == elements.value) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (element == elements.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (element == elements.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (element.equals(value)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (element.equals(value)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (element == elements.isNull) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (element == elements.isNull) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (element.equals(element)) return 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (element.equals(element)) return 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (elements.equals(element) == elements;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (elements.equals(element) == elements;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (elements.equals( element)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (elements.equals( element)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (elements.equals( element) == elements.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (elements.equals( element) == elements.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (elements.equals( element) == elements.id;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (elements.equals( element) == elements.id;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (element.equals(element) == elements;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (element.equals(element) == elements;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (element.equals( denominator)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (element.equals( denominator)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (element == elements.element) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (element == elements.element) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (element.equals( element) == elements;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (element.equals( element) == elements;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (element == elements.instance) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (element == elements.instance) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (element == elements.v) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (element == elements.v) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (element.equals( ByteBuffer)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (element.equals( ByteBuffer)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (elements.equals( element) == elements) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (elements.equals( element) == elements) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (element == elements.CIRCLE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (element == elements.CIRCLE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if elements.equals(element)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (elements.equals(i)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (elements.equals(i)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (element == elements.NAME) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (element == elements.NAME) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (element == elements.Arc) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (element == elements.Arc) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (element.equals( numberOfNull)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (element.equals( numberOfNull)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (element == elements.before) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (element == elements.before) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (elements.equals( element) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (elements.equals( element) {",
                "identical": false
            }
        ],
        "buggy_line": "if (element.equals(search))",
        "fixed_line": "if (element == search)"
    },
    "Jsoup-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \")));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"plaCONT\", \" PROPERTY.\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock.\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" generator);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\";",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\";",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" EventListener\", \"integer\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" EventListener\", \"integer\";",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" EventListener\", \"integer\";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" EventListener\", \"integer\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\", \"integer\";",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\", \"integer\";",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"mock\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"raw\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\", \" generator);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\", \" generator);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String[] preserveWhitespaceTagsTags = \"pla\", \"integer\";",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\", \"integer\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\", \"integer\";",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\" );",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \"integer\" );",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String[] preserveWhitespaceTagsTagsTagsTagsTagsTagsTagsTagsTags = \"pla\", \" PROPERTY\");",
                "identical": false
            }
        ],
        "buggy_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
        "fixed_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};"
    },
    "Mockito-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "catch (e.mocking = error;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "catch (e.mocking = error;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "catch (e.mockito.verificationAreDifferent)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "catch (e.mockito.verificationAreDifferent)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "catch (e.mockito.Parse = e;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "catch (e.mockito.Parse = e;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "catch (e.mockingAndDifferentArguments = e;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "catch (e.mockingAndDifferentArguments = e;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "catch (e.mockito. Exp_equalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "catch (e.mockito. Exp_equalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "catch (e.mocking = oldMock;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "catch (e.mocking = oldMock;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "catch (e.mockito.verification[0] = e;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "catch (e.mockito.verification[0] = e;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "catch (e.mockito. 1 = e;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "catch (e.mockito. 1 = e;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "catch (e.mockito.verification = e;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "catch (e.mockito.verification = e;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "catch (e.mockito. after;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "catch (e.mockito. after;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "catch (e.mockito.ParseDaysInBits;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "catch (e.mockito.ParseDaysInBits;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "catch (e.mockito.verificationAreDifferent = e;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "catch (e.mockito.verificationAreDifferent = e;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "catch (e.mockito. after.width;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "catch (e.mockito. after.width;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "catch (e.mockito.Parse = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "catch (e.mockito.Parse = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "catch (e.mockito.Parse = e.value;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "catch (e.mockito.Parse = e.value;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "catch (e.mockito.())) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "catch (e.mockito.())) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "catch (e.mockito.Parse;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "catch (e.mockito.Parse;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "catch (e.mockito. after.createDifferentArguments(error);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "catch (e.mockito. after.createDifferentArguments(error);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "catch (e.mockito.verificationAreDifferent = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "catch (e.mockito.verificationAreDifferent = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "catch (e.mockito.Parse = e.after;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "catch (e.mockito.Parse = e.after;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "catch (e.mockito.width;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "catch (e.mockito.width;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "catch (e.mockito. after.createDifferentArguments(error));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "catch (e.mockito. after.createDifferentArguments(error));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "catch (e.mockito.Parse = e.methodName;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "catch (e.mockito.Parse = e.methodName;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "catch (e.mockito. Pig = e;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "catch (e.mockito. Pig = e;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "catch (proxy.mockingAreDifferentArguments) e;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "catch (proxy.mockingAreDifferentArguments) e;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "catch (e.mockito. after.width) e;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "catch (e.mockito. after.width) e;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "catch (e.mockito.Parse = e.ACCe;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "catch (e.mockito.Parse = e.ACCe;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "catch (e.mock) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "catch (e.mock) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "catch (e.mockito. Exp_equalsequalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "catch (e.mockito.str) e;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "catch (e.mockito.str) e;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "catch (e.mockito. 1 = callback;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "catch (e.mockito. 1 = callback;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "catch (e.mockito.Parse = callback;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "catch (e.mockito.Parse = callback;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "catch (e.mockito.ParseException;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "catch (e.mockito.ParseException;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "catch (e.mockito.height;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "catch (e.mockito.height;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "catch (e.mockito. after. JS_equalsequalsequalsequalsequalsequalsequalsequalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "catch (e.mocking.strArguments = e;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "catch (e.mocking.strArguments = e;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "catch ( String.mocking = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "catch ( String.mocking = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "catch (e.mockito.verification = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "catch (e.mockito.verification = e.ACC_PUBLIC;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "catch (e.mockito.Parse = e.generateMillis;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "catch (e.mockito.Parse = e.generateMillis;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "catch (e.mockito. after. JS_equalsequalsequals(error.width)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "catch (e.mockito. after. JS_equalsequalsequals(error.width)) {",
                "identical": false
            }
        ],
        "buggy_line": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
        "fixed_line": "catch (AssertionError e) {"
    }
}